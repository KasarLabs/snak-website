import { Plugin } from "../src/app/plugins/utils/types";
import { allPlugins as corePlugins } from "./core-plugins";

const odooMcpServerPlugin: Plugin = {
  id: "xmb120fapj",
  name: "Odoo MCP Server",
  description:
    "An MCP server implementation that integrates with Odoo ERP systems, enabling AI assistants to interact with Odoo data and functionality through the Model Context Protocol.",
  image: "https://github.com/tuanle96.png",
  actions: [],
  githubUrl: "https://github.com/tuanle96/mcp-odoo",
  _varName: "odooMcpServerPlugin",
};

const mcpmymacPlugin: Plugin = {
  id: "71gkd8hxyj",
  name: "mcp-my-mac",
  description:
    "Stop Package Chaos: Unveil Your Mac’s Setup for Targeted ML Debugging",
  image: "https://github.com/zhongmingyuan.png",
  actions: [],
  githubUrl: "https://github.com/zhongmingyuan/mcp-my-mac",
  _varName: "mcpmymacPlugin",
};

const viteMcpServerPlugin: Plugin = {
  id: "9kho79ex93",
  name: "Vite MCP Server",
  description:
    "Integrates Cursor AI with Vite Dev server, allowing AI agents to modify code and observe live updates through the Hot Module Replacement system in real-time.",
  image: "https://github.com/ESnark.png",
  actions: [],
  githubUrl: "https://github.com/ESnark/vite-mcp-server",
  _varName: "viteMcpServerPlugin",
};

const mcpdbsPlugin: Plugin = {
  id: "tvpshb3f1n",
  name: "mcp-dbs",
  description:
    "A Model Context Protocol (MCP) implementation for connecting to and working with various database systems.",
  image: "https://github.com/cuongtl1992.png",
  actions: [],
  githubUrl: "https://github.com/cuongtl1992/mcp-dbs",
  _varName: "mcpdbsPlugin",
};

const codeindexmcpPlugin: Plugin = {
  id: "wmjk9p3tv9",
  name: "code-index-mcp",
  description:
    "A Model Context Protocol (MCP) server that helps large language models index, search, and analyze code repositories with minimal setup",
  image: "https://github.com/johnhuang316.png",
  actions: [],
  githubUrl: "https://github.com/johnhuang316/code-index-mcp",
  _varName: "codeindexmcpPlugin",
};

const zoomeyeMcpServerPlugin: Plugin = {
  id: "kh74jb2ikb",
  name: "ZoomEye MCP Server",
  description: "MCP server for querying the ZoomEye API",
  image: "https://github.com/zoomeye-ai.png",
  actions: [],
  githubUrl: "https://github.com/zoomeye-ai/mcp_zoomeye",
  _varName: "zoomeyeMcpServerPlugin",
};

const citeassistMcpPlugin: Plugin = {
  id: "mdvixqibw1",
  name: "CiteAssist MCP",
  description:
    "Retrieve citation data effortlessly from CiteAs and Google Scholar. Get BibTeX-formatted citations for your resources with just a few commands. Enhance your research workflow by integrating citation retrieval directly into your applications.",
  image: "https://github.com/ndchikin.png",
  actions: [],
  githubUrl: "https://github.com/ndchikin/reference-mcp",
  _varName: "citeassistMcpPlugin",
};

const mcpjetbrainsPlugin: Plugin = {
  id: "8lamhtfm7j",
  name: "mcp-jetbrains",
  description: "idea",
  image: "https://github.com/JetBrains.png",
  actions: [],
  githubUrl: "https://github.com/JetBrains/mcp-jetbrains",
  _varName: "mcpjetbrainsPlugin",
};

const citemcpPlugin: Plugin = {
  id: "0u1mpui801",
  name: "cite-mcp",
  description:
    "Retrieve citation data effortlessly from CiteAs and Google Scholar. Get BibTeX-formatted citations for your resources with just a few commands. Enhance your research workflow by integrating citation retrieval directly into your applications.",
  image: "https://github.com/ndchikin.png",
  actions: [],
  githubUrl: "https://github.com/ndchikin/reference-mcp",
  _varName: "citemcpPlugin",
};

const eventcatalogMcpServerPlugin: Plugin = {
  id: "dcneqo3wi9",
  name: "EventCatalog MCP Server",
  description:
    "A server that connects MCP clients (Claude, Cursor, Windsurf, etc.) to EventCatalog instances, allowing users to ask questions about their event-driven architecture and get insights about domains, services, and message schemas directly within their development tools.",
  image: "https://github.com/event-catalog.png",
  actions: [],
  githubUrl: "https://github.com/event-catalog/mcp-server",
  _varName: "eventcatalogMcpServerPlugin",
};

const difyAsMcpServerPlugin: Plugin = {
  id: "9dbv42es2j",
  name: "Dify as MCP Server",
  description:
    "Exposes Dify applications (both Chatflow and Workflow) as MCP (Model Context Protocol) servers, allowing Claude and other MCP clients to directly interact with Dify apps through a standardized protocol.",
  image: "https://github.com/Yevanchen.png",
  actions: [],
  githubUrl: "https://github.com/Yevanchen/difyapp_as_mcp_server",
  _varName: "difyAsMcpServerPlugin",
};

const clickhousemcpserverPlugin: Plugin = {
  id: "8rcaf3zosc",
  name: "clickhouse-mcp-server",
  description:
    "An MCP server implementation that enables Claude AI to interact with Clickhouse databases. Features include secure database connections, query execution, read-only mode support, and multi-query capabilities.",
  image: "https://github.com/burakdirin.png",
  actions: [],
  githubUrl: "https://github.com/burakdirin/clickhouse-mcp-server",
  _varName: "clickhousemcpserverPlugin",
};

const yetanotherunitymcpPlugin: Plugin = {
  id: "06d9e5aq67",
  name: "YetAnotherUnityMcp",
  description:
    "A Unity Master Control Protocol implementation that allows AI agents to control and interact with Unity, enabling them to execute code, query editor state, modify GameObjects, and capture screenshots through a WebSocket-based communication system.",
  image: "https://github.com/Azreal42.png",
  actions: [],
  githubUrl: "https://github.com/Azreal42/YetAnotherUnityMcp",
  _varName: "yetanotherunitymcpPlugin",
};

const agentConstructPlugin: Plugin = {
  id: "1uzj42rshz",
  name: "Agent Construct",
  description:
    "An MCP server implementation that standardizes how AI applications access tools and context, providing a central hub that manages tool discovery, execution, and context management with a simplified configuration system.",
  image: "https://github.com/batteryshark.png",
  actions: [],
  githubUrl: "https://github.com/batteryshark/agent_construct",
  _varName: "agentConstructPlugin",
};

const gameAssetGeneratorPlugin: Plugin = {
  id: "2ewgz5oowz",
  name: "Game Asset Generator",
  description:
    "An MCP server that generates 2D and 3D game assets from text prompts using AI models from Hugging Face Spaces, allowing developers to easily create game art through Claude Desktop or other MCP clients.",
  image: "https://github.com/MubarakHAlketbi.png",
  actions: [],
  githubUrl: "https://github.com/MubarakHAlketbi/game-asset-mcp",
  _varName: "gameAssetGeneratorPlugin",
};

const autocadMcpServerPlugin: Plugin = {
  id: "49bjdolvks",
  name: "AutoCAD MCP Server",
  description:
    "A server that enables natural language interaction with AutoCAD through large language models like Claude, allowing users to create and modify drawings using conversational commands.",
  image: "https://github.com/zh19980811.png",
  actions: [],
  githubUrl: "https://github.com/zh19980811/Easy-MCP-AutoCad",
  _varName: "autocadMcpServerPlugin",
};

const semgrepMcpServerPlugin: Plugin = {
  id: "4iqti5mgde",
  name: "Semgrep MCP Server",
  description:
    "An MCP server that provides a comprehensive interface to Semgrep, enabling users to scan code for security vulnerabilities, create custom rules, and analyze scan results through the Model Context Protocol.",
  image: "https://github.com/semgrep.png",
  actions: [],
  githubUrl: "https://github.com/semgrep/mcp",
  _varName: "semgrepMcpServerPlugin",
};

const powerplatformMcpPlugin: Plugin = {
  id: "rsp5r9ohh1",
  name: "PowerPlatform MCP",
  description:
    "A Model Context Protocol (MCP) server that provides intelligent access to PowerPlatform/Dataverse entities and records. This tool offers context-aware assistance, entity exploration and metadata access.",
  image: "https://github.com/michsob.png",
  actions: [],
  githubUrl: "https://github.com/michsob/powerplatform-mcp",
  _varName: "powerplatformMcpPlugin",
};

const mcpForItsmPlugin: Plugin = {
  id: "hud80wep9g",
  name: "MCP FOR ITSM",
  description: "MCP FOR ITSM TOOL INTEGRATION",
  image: "https://github.com/madosh.png",
  actions: [],
  githubUrl: "https://github.com/madosh/MCP-ITSM",
  _varName: "mcpForItsmPlugin",
};

const mysqldbmcpserverPlugin: Plugin = {
  id: "qgvfelf3i1",
  name: "mysqldb-mcp-server",
  description:
    "An MCP server that enables MySQL database integration with Claude. You can execute SQL queries and manage database connections.",
  image: "https://github.com/burakdirin.png",
  actions: [],
  githubUrl: "https://github.com/burakdirin/mysqldb-mcp-server",
  _varName: "mysqldbmcpserverPlugin",
};

const devhubCmsMcpPlugin: Plugin = {
  id: "whnpqkaubu",
  name: "DevHub CMS MCP",
  description:
    "Model Context Protocol (MCP) integration for managing content in the DevHub CMS system (blog posts, content, location administration)",
  image: "https://github.com/devhub.png",
  actions: [],
  githubUrl: "https://github.com/devhub/devhub-cms-mcp",
  _varName: "devhubCmsMcpPlugin",
};

const mcpserversemgrepPlugin: Plugin = {
  id: "ncm1zh2l4e",
  name: "mcp-server-semgrep",
  description:
    "Allows the model to understand the codebase of the project thoroughly by static semantic code analysis. Very powerful tool! Tested on Claude Desktop so waiting for the improvements applied for other clients",
  image: "https://github.com/Szowesgad.png",
  actions: [],
  githubUrl: "https://github.com/Szowesgad/mcp-server-semgrep",
  _varName: "mcpserversemgrepPlugin",
};

const cloverMcpServerPlugin: Plugin = {
  id: "pfh59dosg1",
  name: "Clover MCP Server",
  description:
    "Enables AI agents to access and interact with Clover merchant data, inventory, and orders through a secure OAuth-authenticated MCP server.",
  image: "https://github.com/ibraheem4.png",
  actions: [],
  githubUrl: "https://github.com/ibraheem4/clover-mcp",
  _varName: "cloverMcpServerPlugin",
};

const houdinimcpPlugin: Plugin = {
  id: "ks5yx15i6j",
  name: "HoudiniMCP",
  description:
    "Connects Houdini to Claude AI through Model Context Protocol, enabling AI-assisted 3D modeling, scene creation, simulation setup, and rendering through natural language commands.",
  image: "https://github.com/capoom.png",
  actions: [],
  githubUrl: "https://github.com/capoom/houdini-mcp",
  _varName: "houdinimcpPlugin",
};

const linkedinprofileanalyzerPlugin: Plugin = {
  id: "5vbvsljk42",
  name: "Linkedin-Profile-Analyzer",
  description:
    "A powerful LinkedIn Profile Analyzer that seamlessly integrates with Claude AI to fetch and analyze public LinkedIn profiles, enabling users to extract, search, and analyze posts data through RapidAPI's LinkedIn Data API.",
  image: "https://github.com/rugvedp.png",
  actions: [],
  githubUrl: "https://github.com/rugvedp/linkedin-mcp",
  _varName: "linkedinprofileanalyzerPlugin",
};

const withseismicMcpPlugin: Plugin = {
  id: "h1gm1twwaf",
  name: "WithSeismic MCP",
  description:
    "A TypeScript implementation of a Model Context Protocol server that provides a frictionless framework for developers to build and deploy AI tools and prompts, focusing on developer experience with zero boilerplate and automatic tool registration.",
  image: "https://github.com/dougwithseismic.png",
  actions: [],
  githubUrl: "https://github.com/dougwithseismic/withseismic-mcp",
  _varName: "withseismicMcpPlugin",
};

const hassmcpPlugin: Plugin = {
  id: "umbtpign47",
  name: "Hass-MCP",
  description:
    "A Model Context Protocol server that enables AI assistants like Claude to interact directly with Home Assistant, allowing them to query device states, control smart home entities, and perform automation tasks.",
  image: "https://github.com/voska.png",
  actions: [],
  githubUrl: "https://github.com/voska/hass-mcp",
  _varName: "hassmcpPlugin",
};

const mcpcrawlerPlugin: Plugin = {
  id: "wtt5eqpn0n",
  name: "mcp-crawler",
  description: "It crawls website",
  image: "https://github.com/orange-fruit01.png",
  actions: [],
  githubUrl: "https://github.com/orange-fruit01/MCP-Test-Run",
  _varName: "mcpcrawlerPlugin",
};

const kafkaMcpServerPlugin: Plugin = {
  id: "8ohdumy56r",
  name: "Kafka MCP Server",
  description:
    "Enables AI models to publish and consume messages from Apache Kafka topics through a standardized interface, making it easy to integrate Kafka messaging with LLM and agent applications.",
  image: "https://github.com/pavanjava.png",
  actions: [],
  githubUrl: "https://github.com/pavanjava/kafka_mcp_server",
  _varName: "kafkaMcpServerPlugin",
};

const mcpfluxschnellPlugin: Plugin = {
  id: "37deytaz5i",
  name: "mcp-flux-schnell",
  description:
    "A TypeScript-based MCP server that enables text-to-image generation using Cloudflare's Flux Schnell model API.",
  image: "https://github.com/bytefer.png",
  actions: [],
  githubUrl: "https://github.com/bytefer/mcp-flux-schnell",
  _varName: "mcpfluxschnellPlugin",
};

const argocdmcpPlugin: Plugin = {
  id: "5262ouyla6",
  name: "argocd-mcp",
  description:
    "An MCP (Model Context Protocol) server that integrates with the ArgoCD API, enabling AI assistants and large language models to manage ArgoCD applications and resources through natural language interactions.",
  image: "https://github.com/severity1.png",
  actions: [],
  githubUrl: "https://github.com/severity1/argocd-mcp",
  _varName: "argocdmcpPlugin",
};

const excalidrawMcpServerPlugin: Plugin = {
  id: "hhg9min24v",
  name: "Excalidraw MCP Server",
  description:
    "A Model Context Protocol server that enables LLMs to create, modify, and manipulate Excalidraw diagrams through a structured API.",
  image: "https://github.com/yctimlin.png",
  actions: [],
  githubUrl: "https://github.com/yctimlin/mcp_excalidraw",
  _varName: "excalidrawMcpServerPlugin",
};

const pancakeswappoolspymcpPlugin: Plugin = {
  id: "xsr0ogarc5",
  name: "pancakeswap-poolspy-mcp",
  description:
    "An MCP server that tracks newly created liquidity pools on Pancake Swap.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/pancakeswap-poolspy-mcp",
  _varName: "pancakeswappoolspymcpPlugin",
};

const mcpNotifyServerPlugin: Plugin = {
  id: "uawcbevk3j",
  name: "MCP Notify Server",
  description:
    "A Model Context Protocol service that sends desktop notifications and alert sounds when AI agent tasks are completed, integrating with various LLM clients like Claude Desktop and Cursor.",
  image: "https://github.com/Cactusinhand.png",
  actions: [],
  githubUrl: "https://github.com/Cactusinhand/mcp_server_notify",
  _varName: "mcpNotifyServerPlugin",
};

const memoryBankMcpServerPlugin: Plugin = {
  id: "cziza80o10",
  name: "Memory Bank MCP Server",
  description:
    "A server for managing project documentation and context across Claude AI sessions through global and branch-specific memory banks, enabling consistent knowledge management with structured JSON document storage.",
  image: "https://github.com/t3ta.png",
  actions: [],
  githubUrl: "https://github.com/t3ta/memory-bank-mcp-server",
  _varName: "memoryBankMcpServerPlugin",
};

const lokkaMicrosoft365McpServerPlugin: Plugin = {
  id: "lqib0o141j",
  name: "Lokka (Microsoft 365 MCP server)",
  description:
    "Lokka ia an MCP server for the Microsoft Graph API and can be used to query and update all resources in your Microsoft 365 tenant.\n\nThis MCP server supports all Microsoft Graph APIs including update operations (limited by the permissions you grant to the app).",
  image: "https://github.com/merill.png",
  actions: [],
  githubUrl: "https://github.com/merill/lokka",
  _varName: "lokkaMicrosoft365McpServerPlugin",
};

const imfDataMcpServerPlugin: Plugin = {
  id: "s3lzd1u3eg",
  name: "IMF Data MCP Server",
  description:
    "The server integrates with the free IMF data API and provides various features to facilitate data retrieval and analysis. The server is built using the FastMCP framework and offers the following functionalities:",
  image: "https://github.com/c-cf.png",
  actions: [],
  githubUrl: "https://github.com/c-cf/imf-data-mcp",
  _varName: "imfDataMcpServerPlugin",
};

const freecadMcpPlugin: Plugin = {
  id: "j3a76r2exh",
  name: "freecad mcp",
  description:
    "This repository is a FreeCAD MCP that allows you to control FreeCAD from Claude Desktop.",
  image: "https://github.com/neka-nat.png",
  actions: [],
  githubUrl: "https://github.com/neka-nat/freecad-mcp",
  _varName: "freecadMcpPlugin",
};

const veyraxPlugin: Plugin = {
  id: "ga39pe25rd",
  name: "VeyraX",
  description:
    "Single MCP tool to connect all your favorite tools: Gmail, Calendar and 40 more.",
  image: "https://github.com/VeyraX.png",
  actions: [],
  githubUrl: "https://github.com/VeyraX/veyrax-mcp",
  _varName: "veyraxPlugin",
};

const mcpservertreesitterPlugin: Plugin = {
  id: "k35mqkr8j9",
  name: "mcp-server-tree-sitter",
  description:
    "A Model Context Protocol (MCP) server that provides code analysis capabilities using tree-sitter, designed to give Claude intelligent access to codebases with appropriate context management.",
  image: "https://github.com/wrale.png",
  actions: [],
  githubUrl: "https://github.com/wrale/mcp-server-tree-sitter",
  _varName: "mcpservertreesitterPlugin",
};

const nearMcpPlugin: Plugin = {
  id: "ibzhoz5k4z",
  name: "NEAR MCP",
  description: "Interact with the NEAR blockchain through MCP calls",
  image: "https://github.com/nearai.png",
  actions: [],
  githubUrl: "https://github.com/nearai/near-mcp",
  _varName: "nearMcpPlugin",
};

const docdocxmcpPlugin: Plugin = {
  id: "tbdxbozy0k",
  name: "Doc/docx-MCP",
  description:
    "A powerful Word document processing service based on FastMCP, enabling AI assistants to create, edit, and manage docx files with full formatting support. Preserves original styles when editing content.",
  image: "https://github.com/MeterLong.png",
  actions: [],
  githubUrl: "https://github.com/MeterLong/MCP-Doc",
  _varName: "docdocxmcpPlugin",
};

const mysqlMcpServerPlugin: Plugin = {
  id: "6y836dz8o5",
  name: "MySQL MCP Server",
  description:
    "A server that enables AI models to interact with MySQL databases through a Model Control Protocol, providing tools for table creation, schema inspection, query execution, and data retrieval.",
  image: "https://github.com/Mineru98.png",
  actions: [],
  githubUrl: "https://github.com/Mineru98/mysql-mcp-server",
  _varName: "mysqlMcpServerPlugin",
};

const dbcodePlugin: Plugin = {
  id: "40tlj1o90k",
  name: "DBCode",
  description:
    "DBCode is a Visual Studio Code extension that allows you to manage many databases, including PostgreSQL, MySQL, SQL Server, DuckDB, Redis, MongoDB, and more.\n\nDBCode offers the option to run an MCP server, providing access to those databases, their schemas, and the ability to execute queries.",
  image: "https://github.com/dbcodeio.png",
  actions: [],
  githubUrl: "https://github.com/dbcodeio/public",
  _varName: "dbcodePlugin",
};

const mcpdingdingbotPlugin: Plugin = {
  id: "ql5womr4fm",
  name: "mcp-dingding-bot",
  description:
    "MCP Server for send text/markdown message via dingding (aka dingtalk) group custom robot",
  image: "https://github.com/Shawyeok.png",
  actions: [],
  githubUrl: "https://github.com/Shawyeok/mcp-dingding-bot",
  _varName: "mcpdingdingbotPlugin",
};

const mcpcoincapjjPlugin: Plugin = {
  id: "4lz96gw3yb",
  name: "mcp-coincap-jj",
  description:
    "A Model Context Protocol (MCP) server that provides comprehensive cryptocurrency analysis using the CoinCap API. This server offers real-time price data, market analysis, and historical trends through an easy-to-use interface. Updated to use Coin Cap API v3",
  image: "https://github.com/wazzan.png",
  actions: [],
  githubUrl: "https://github.com/wazzan/mcp-coincap-jj",
  _varName: "mcpcoincapjjPlugin",
};

const nearbysearchmcpPlugin: Plugin = {
  id: "uz39j7nvm8",
  name: "nearby-search-mcp",
  description:
    "An MCP server for nearby place searches with IP-based location detection.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/nearby-search-mcp",
  _varName: "nearbysearchmcpPlugin",
};

const algorandMcpPlugin: Plugin = {
  id: "mdua2aie6d",
  name: "Algorand MCP",
  description:
    "A comprehensive MCP server for tooling interactions(40+) and resource accessibility(60+) with Algorand blockchain, plus many useful prompts.",
  image: "https://github.com/GoPlausible.png",
  actions: [],
  githubUrl: "https://github.com/GoPlausible/algorand-mcp",
  _varName: "algorandMcpPlugin",
};

const whoamimcpPlugin: Plugin = {
  id: "uklqx99x5k",
  name: "whoami-mcp",
  description: "A lightweight MCP server that tells you exactly who you are.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/whoami-mcp",
  _varName: "whoamimcpPlugin",
};

const quantmcpPlugin: Plugin = {
  id: "b5xuilzdcf",
  name: "QuantMCP",
  description:
    "A Model Context Protocol server that integrates with Amazon Braket, allowing AI assistants to access, control, and interpret results from quantum computing resources.",
  image: "https://github.com/dougdotcon.png",
  actions: [],
  githubUrl: "https://github.com/dougdotcon/QuantMCP",
  _varName: "quantmcpPlugin",
};

const whattimeisitmcpPlugin: Plugin = {
  id: "5p0pi8sfsm",
  name: "whattimeisit-mcp",
  description:
    "A lightweight mcp server that tells you exactly what time is it based on your IP.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/whattimeisit-mcp",
  _varName: "whattimeisitmcpPlugin",
};

const mcpmusicanalysisPlugin: Plugin = {
  id: "d6tttbruvj",
  name: "mcp-music-analysis",
  description: "Integrate libraries to LLM to analyze music audio.",
  image: "https://github.com/hugohow.png",
  actions: [],
  githubUrl: "https://github.com/hugohow/mcp-music-analysis",
  _varName: "mcpmusicanalysisPlugin",
};

const whereamimcpPlugin: Plugin = {
  id: "sd8glbbpnr",
  name: "whereami-mcp",
  description: "A lightweight mcp server that tells you exactly where you are.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/whereami-mcp",
  _varName: "whereamimcpPlugin",
};

const mcpaudioanalysisPlugin: Plugin = {
  id: "4kntblkkwt",
  name: "mcp-audio-analysis",
  description: "MCP to analyse local audio file.",
  image: "https://github.com/hugohow.png",
  actions: [],
  githubUrl: "https://github.com/hugohow/mcp-music-analysis",
  _varName: "mcpaudioanalysisPlugin",
};

const freecadMcp1Plugin: Plugin = {
  id: "st9mc7th67",
  name: "FreeCAD MCP",
  description:
    "A FreeCAD addon that implements the Model Context Protocol (MCP) to enable communication between FreeCAD and Claude AI through Claude Desktop.",
  image: "https://github.com/bonninr.png",
  actions: [],
  githubUrl: "https://github.com/bonninr/freecad_mcp",
  _varName: "freecadMcp1Plugin",
};

const vueMcpServerPlugin: Plugin = {
  id: "wxe5s8ifko",
  name: "Vue MCP Server",
  description:
    "Provides application insights for Vue apps by exposing component trees, state, routes, and Pinia data through a Model Context Protocol server.",
  image: "https://github.com/webfansplz.png",
  actions: [],
  githubUrl: "https://github.com/webfansplz/vite-plugin-vue-mcp",
  _varName: "vueMcpServerPlugin",
};

const rendermcpPlugin: Plugin = {
  id: "335uhu1whf",
  name: "render-mcp",
  description:
    "Interact with Render (https://render.com) and easily deploy your services",
  image: "https://github.com/niyogi.png",
  actions: [],
  githubUrl: "https://github.com/niyogi/render-mcp",
  _varName: "rendermcpPlugin",
};

const fantasyPremierLeagueMcpServerPlugin: Plugin = {
  id: "2zxsxuxuj9",
  name: "Fantasy Premier League MCP Server",
  description:
    "A Model Context Protocol server that provides access to Fantasy Premier League data, allowing users to compare players, find team information, view gameweek data, and get FPL-related advice through Claude for Desktop and other MCP-compatible clients.",
  image: "https://github.com/rishijatia.png",
  actions: [],
  githubUrl: "https://github.com/rishijatia/fantasy-pl-mcp",
  _varName: "fantasyPremierLeagueMcpServerPlugin",
};

const homeAssistantMcpPlugin: Plugin = {
  id: "4d8bd66rly",
  name: "Home Assistant MCP",
  description:
    "A Model Context Protocol (MCP) integration that allows AI assistants to control Home Assistant devices by searching for entities and controlling devices through natural language commands.",
  image: "https://github.com/hpohlmann.png",
  actions: [],
  githubUrl: "https://github.com/hpohlmann/home-assistant-mcp",
  _varName: "homeAssistantMcpPlugin",
};

const bingSearchMcpServerPlugin: Plugin = {
  id: "nwtqbda2xc",
  name: "Bing Search MCP Server",
  description:
    "A Model Context Protocol server that integrates with Microsoft Bing Search API, allowing AI assistants to perform web, news, and image searches.",
  image: "https://github.com/leehanchung.png",
  actions: [],
  githubUrl: "https://github.com/leehanchung/bing-search-mcp",
  _varName: "bingSearchMcpServerPlugin",
};

const mcpServerPlugin: Plugin = {
  id: "oge3u2rzk7",
  name: "MCP Server",
  description:
    "Implements the Model Context Protocol (MCP) to provide AI models with a standardized interface for connecting to external data sources and tools like file systems, databases, or APIs.",
  image: "https://github.com/GobinFan.png",
  actions: [],
  githubUrl: "https://github.com/GobinFan/python-mcp-server-client",
  _varName: "mcpServerPlugin",
};

const duneanalyticsmcpPlugin: Plugin = {
  id: "9vkyyc8sth",
  name: "dune-analytics-mcp",
  description: "A mcp server that bridges Dune Analytics data to AI agents.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/dune-analytics-mcp",
  _varName: "duneanalyticsmcpPlugin",
};

const thoughtSpaceMcpAdvancedBranchthinkingToolPlugin: Plugin = {
  id: "tt239qhb4m",
  name: "Thought Space - MCP Advanced Branch-Thinking Tool",
  description:
    "An MCP tool enabling structured thinking and analysis across multiple AI platforms through branch management, semantic analysis, and cognitive enhancement.",
  image: "https://github.com/ssdeanx.png",
  actions: [],
  githubUrl: "https://github.com/ssdeanx/branch-thinking",
  _varName: "thoughtSpaceMcpAdvancedBranchthinkingToolPlugin",
};

const solanaMcpServerPlugin: Plugin = {
  id: "jjut2t85re",
  name: "Solana MCP Server",
  description:
    "A Model Context Protocol server enabling AI agents to interact with the Solana blockchain for DeFi operations like checking balances, transferring tokens, executing swaps, and fetching price data.",
  image: "https://github.com/caiovicentino.png",
  actions: [],
  githubUrl: "https://github.com/caiovicentino/Solana-MCP",
  _varName: "solanaMcpServerPlugin",
};

const mcpUnityPlugin: Plugin = {
  id: "wajaojujfa",
  name: "MCP Unity",
  description:
    "MCP Unity Server to integrate Unity Editor game engine with different AI Model clients (e.g. Claude Desktop, Windsurf, Cursor)",
  image: "https://github.com/CoderGamester.png",
  actions: [],
  githubUrl: "https://github.com/CoderGamester/mcp-unity",
  _varName: "mcpUnityPlugin",
};

const reactmcpWebSearchPlugin: Plugin = {
  id: "83o9on4ihz",
  name: "ReActMCP Web Search",
  description:
    "An MCP server that integrates real-time web search capabilities into AI assistants using the Exa API, providing both basic and advanced search functionality with formatted markdown results.",
  image: "https://github.com/mshojaei77.png",
  actions: [],
  githubUrl: "https://github.com/mshojaei77/ReActMCP",
  _varName: "reactmcpWebSearchPlugin",
};

const playwrightmcpPlugin: Plugin = {
  id: "nhpi6f4asd",
  name: "playwright-mcp",
  description:
    "Playwright MCP server enables AI-driven Playwright test generation by allowing interaction with web pages and element inspection. Integrated with IDEs like Cursor, it provides real-time context to enhance test accuracy and efficiency.",
  image: "https://github.com/Ashish-Bansal.png",
  actions: [],
  githubUrl: "https://github.com/Ashish-Bansal/playwright-mcp",
  _varName: "playwrightmcpPlugin",
};

const mcpbrowserusePlugin: Plugin = {
  id: "88qe31qazc",
  name: "mcp-browser-use",
  description:
    "An MCP server that connects any MCP client (like Claude or Cursor) with the browser using browser-use, allowing clients to utilize existing LLMs without requiring additional API keys.",
  image: "https://github.com/vinayak-mehta.png",
  actions: [],
  githubUrl: "https://github.com/vinayak-mehta/mcp-browser-use",
  _varName: "mcpbrowserusePlugin",
};

const mysqlmcpserverPlugin: Plugin = {
  id: "ddav9xbsbv",
  name: "mysql-mcp-server",
  description:
    "An MCP server that provides read-only access to MySQL databases.",
  image: "https://github.com/dpflucas.png",
  actions: [],
  githubUrl: "https://github.com/dpflucas/mysql-mcp-server",
  _varName: "mysqlmcpserverPlugin",
};

const azureAiSearchMcpServerPlugin: Plugin = {
  id: "fd3qvvfz3m",
  name: "Azure AI Search MCP Server",
  description:
    "Integrates Claude Desktop with Azure AI Search, allowing users to query search indexes using keyword, vector, or hybrid search methods.",
  image: "https://github.com/farzad528.png",
  actions: [],
  githubUrl: "https://github.com/farzad528/mcp-server-azure-ai-search",
  _varName: "azureAiSearchMcpServerPlugin",
};

const promptshopmcpPlugin: Plugin = {
  id: "n61joh3zvv",
  name: "PromptShopMCP",
  description:
    "PromptShopMCP is an AI-powered image editing server that generates or transforms photos using natural language commands. It allows you to modify images by simply describing what you want.",
  image: "https://github.com/Kira-Pgr.png",
  actions: [],
  githubUrl: "https://github.com/Kira-Pgr/PromptShopMCP",
  _varName: "promptshopmcpPlugin",
};

const mcpimagegeneratorPlugin: Plugin = {
  id: "rcf9w8nft8",
  name: "mcp-image-generator",
  description: "Generates and returns and image using Together.ai",
  image: "https://github.com/GMKR.png",
  actions: [],
  githubUrl: "https://github.com/GMKR/mcp-imagegen",
  _varName: "mcpimagegeneratorPlugin",
};

const gemsuitemcpPlugin: Plugin = {
  id: "m2ljvlatlu",
  name: "GemSuite-MCP",
  description:
    "The ultimate Gemini API interface for MCP hosts, intelligently selecting models for the task at hand—delivering optimal performance, minimal token cost, and seamless integration.",
  image: "https://github.com/PV-Bhat.png",
  actions: [],
  githubUrl: "https://github.com/PV-Bhat/gemsuite-mcp",
  _varName: "gemsuitemcpPlugin",
};

const mcpHttpWithSseTransportToolsPlugin: Plugin = {
  id: "r8lvcns8iw",
  name: "MCP HTTP with SSE transport Tools",
  description:
    "A plugin that allows Dify to connect to multiple MCP (Model Control Protocol) servers using HTTP with Server-Sent Events transport, supporting custom configurations for URLs, headers, and timeouts.",
  image: "https://github.com/junjiem.png",
  actions: [],
  githubUrl: "https://github.com/junjiem/dify-plugin-tools-mcp_sse",
  _varName: "mcpHttpWithSseTransportToolsPlugin",
};

const query_tablePlugin: Plugin = {
  id: "s1jc08fn71",
  name: "query_table",
  description:
    "A web scraper for financial table data that implements the Model Context Protocol, allowing users to query stock data from multiple Chinese financial websites including THS, TDX, and EastMoney.",
  image: "https://github.com/wukan1986.png",
  actions: [],
  githubUrl: "https://github.com/wukan1986/query_table",
  _varName: "query_tablePlugin",
};

const cryptofeargreedmcpPlugin: Plugin = {
  id: "dj54a072bo",
  name: "crypto-feargreed-mcp",
  description:
    "A mcp server that provides real-time and historical Crypto Fear & Greed Index data.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/crypto-feargreed-mcp",
  _varName: "cryptofeargreedmcpPlugin",
};

const sketchupmcpPlugin: Plugin = {
  id: "klbs5dmoei",
  name: "SketchupMCP",
  description:
    "Connects Sketchup to Claude AI through the Model Context Protocol, allowing Claude to directly interact with and control Sketchup for prompt-assisted 3D modeling and scene manipulation.",
  image: "https://github.com/mhyrr.png",
  actions: [],
  githubUrl: "https://github.com/mhyrr/sketchup-mcp",
  _varName: "sketchupmcpPlugin",
};

const idamcpserverPlugin: Plugin = {
  id: "fpfnwgj5pa",
  name: "ida-mcp-server",
  description:
    "A Model Context Protocol server for IDA interaction and automation. This server provides tools to read IDA database via Large Language Models.",
  image: "https://github.com/MxIris-Reverse-Engineering.png",
  actions: [],
  githubUrl: "https://github.com/MxIris-Reverse-Engineering/ida-mcp-server",
  _varName: "idamcpserverPlugin",
};

const imageToolkitMcpServerPlugin: Plugin = {
  id: "a8so62sl6q",
  name: "Image Toolkit MCP Server",
  description:
    "A server that provides AI-powered image generation, modification, and processing capabilities through the Model Context Protocol, leveraging Google Gemini models and other image services.",
  image: "https://github.com/Kira-Pgr.png",
  actions: [],
  githubUrl: "https://github.com/Kira-Pgr/PromptShopMCP",
  _varName: "imageToolkitMcpServerPlugin",
};

const vrchatMcpServerPlugin: Plugin = {
  id: "u763zoyi5a",
  name: "VRChat MCP Server",
  description:
    "A Model Context Protocol server that allows AI assistants to interact with the VRChat API, enabling retrieval of user information, friends lists, and other VRChat data through a standardized interface.",
  image: "https://github.com/sawa-zen.png",
  actions: [],
  githubUrl: "https://github.com/sawa-zen/vrchat-mcp",
  _varName: "vrchatMcpServerPlugin",
};

const claudeTypescriptMcpServersPlugin: Plugin = {
  id: "s0v7ilayxa",
  name: "Claude TypeScript MCP Servers",
  description:
    "A collection of Model Context Protocol servers that enable Claude Desktop to provide development assistance capabilities with filesystem, Git, shell command, and web search functionality without incurring API usage costs.",
  image: "https://github.com/ukkz.png",
  actions: [],
  githubUrl: "https://github.com/ukkz/claude-ts-mcps",
  _varName: "claudeTypescriptMcpServersPlugin",
};

const pumpfunMcpServerPlugin: Plugin = {
  id: "llgscbccq1",
  name: "Pump.fun MCP Server",
  description:
    "A Model Context Protocol server enabling AI assistants to create, buy, and sell tokens on the Pump.fun platform on Solana.",
  image: "https://github.com/noahgsolomon.png",
  actions: [],
  githubUrl: "https://github.com/noahgsolomon/pumpfun-mcp-server",
  _varName: "pumpfunMcpServerPlugin",
};

const erickWendelContributionsMcpPlugin: Plugin = {
  id: "10mv0oi9r3",
  name: "Erick Wendel Contributions MCP",
  description:
    "A Model Context Protocol server that enables AI agents to query Erick Wendel's talks, blog posts, and videos across different platforms using natural language.",
  image: "https://github.com/ErickWendel.png",
  actions: [],
  githubUrl: "https://github.com/ErickWendel/erickwendel-contributions-mcp",
  _varName: "erickWendelContributionsMcpPlugin",
};

const aiderMcpServerPlugin: Plugin = {
  id: "8fd63v5mwh",
  name: "Aider MCP Server",
  description:
    "A Model Context Protocol server that connects Claude and other MCP clients to Aider, enabling AI assistants to efficiently edit files, create new files, and interact with git repositories through natural language.",
  image: "https://github.com/sengokudaikon.png",
  actions: [],
  githubUrl: "https://github.com/sengokudaikon/aider-mcp-server",
  _varName: "aiderMcpServerPlugin",
};

const discordmcpPlugin: Plugin = {
  id: "0c1viz8co3",
  name: "discord-mcp",
  description:
    "A Model Context Protocol (MCP) server for the Discord integration with MCP-compatible applications like Claude Desktop.",
  image: "https://github.com/SaseQ.png",
  actions: [],
  githubUrl: "https://github.com/SaseQ/discord-mcp",
  _varName: "discordmcpPlugin",
};

const cryptomcpPlugin: Plugin = {
  id: "jfajec7yem",
  name: "crypto-mcp",
  description:
    "Real-time access to cryptocurrency data from the CoinMarketCap API",
  image: "https://github.com/szcharlesji.png",
  actions: [],
  githubUrl: "https://github.com/szcharlesji/crypto-mcp",
  _varName: "cryptomcpPlugin",
};

const mcpservertexteditorPlugin: Plugin = {
  id: "gl1ytjlxeg",
  name: "mcp-server-text-editor",
  description:
    "An open source implementation of the Claude built-in text editor tool versions:\n\ntext\\_editor\\_20241022 (Claude 3.5 Sonnet)\ntext\\_editor\\_20250124 (Claude 3.7 Sonnet)",
  image: "https://github.com/bhouston.png",
  actions: [],
  githubUrl: "https://github.com/bhouston/mcp-server-text-editor",
  _varName: "mcpservertexteditorPlugin",
};

const coinmarketcapMcpServerPlugin: Plugin = {
  id: "h2oe802an8",
  name: "CoinMarketCap MCP Server",
  description:
    "Real-time access to cryptocurrency data from the CoinMarketCap API.",
  image: "https://github.com/szcharlesji.png",
  actions: [],
  githubUrl: "https://github.com/szcharlesji/crypto-mcp",
  _varName: "coinmarketcapMcpServerPlugin",
};

const terraformcloudmcpPlugin: Plugin = {
  id: "iukijjkm1e",
  name: "terraform-cloud-mcp",
  description:
    "A Model Context Protocol (MCP) server that integrates Claude with the Terraform Cloud API, allowing Claude to manage your Terraform infrastructure through natural conversation.",
  image: "https://github.com/severity1.png",
  actions: [],
  githubUrl: "https://github.com/severity1/terraform-cloud-mcp",
  _varName: "terraformcloudmcpPlugin",
};

const qgisMcpServerPlugin: Plugin = {
  id: "xxqcm3dbf0",
  name: "QGIS MCP Server",
  description:
    "Connects Claude AI to QGIS through the Model Context Protocol, allowing Claude to directly interact with and control QGIS for tasks like project creation, layer manipulation, and code execution.",
  image: "https://github.com/jjsantos01.png",
  actions: [],
  githubUrl: "https://github.com/jjsantos01/qgis_mcp",
  _varName: "qgisMcpServerPlugin",
};

const swaggerMcpServerPlugin: Plugin = {
  id: "ekf8s6cdjk",
  name: "Swagger MCP Server",
  description:
    "A server that enables interaction with any API that has a Swagger/OpenAPI specification through Model Context Protocol (MCP), automatically generating tools from API endpoints and supporting multiple authentication methods.",
  image: "https://github.com/dcolley.png",
  actions: [],
  githubUrl: "https://github.com/dcolley/swagger-mcp",
  _varName: "swaggerMcpServerPlugin",
};

const openaiWebsearchMcpServerPlugin: Plugin = {
  id: "o08k5k0v1r",
  name: "OpenAI WebSearch MCP Server",
  description:
    "One click installation & Configuration，access to OpenAI's websearch functionality through the Model Context Protocol。",
  image: "https://github.com/ConechoAI.png",
  actions: [],
  githubUrl: "https://github.com/ConechoAI/openai-websearch-mcp",
  _varName: "openaiWebsearchMcpServerPlugin",
};

const payloadCmsMcpServerPlugin: Plugin = {
  id: "g6zzhp2xr8",
  name: "Payload CMS MCP Server",
  description:
    "Enables management of Payload CMS projects through natural language commands, allowing developers to create, configure, and deploy content models with conversational AI.",
  image: "https://github.com/Matmax-Worldwide.png",
  actions: [],
  githubUrl: "https://github.com/Matmax-Worldwide/payloadcmsmcp",
  _varName: "payloadCmsMcpServerPlugin",
};

const mcpdbutilsPlugin: Plugin = {
  id: "jrocqkgtpd",
  name: "mcp-dbutils",
  description:
    "DButils is an all-in-one MCP service that enables your AI to do data analysis by accessing versatile types of database (sqlite, mysql, postgres, and more) within a unified connection configuration in a safe way.",
  image: "https://github.com/donghao1393.png",
  actions: [],
  githubUrl: "https://github.com/donghao1393/mcp-dbutils",
  _varName: "mcpdbutilsPlugin",
};

const hyperbrowserPlugin: Plugin = {
  id: "6v41w192xh",
  name: "Hyperbrowser",
  description:
    "Welcome to Hyperbrowser, the Internet for AI. Hyperbrowser is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation. Built specifically for AI developers, it eliminates the headaches of local infrastructure and performance bottlenecks, allowing you to",
  image: "https://github.com/hyperbrowserai.png",
  actions: [],
  githubUrl: "https://github.com/hyperbrowserai/mcp",
  _varName: "hyperbrowserPlugin",
};

const openaitool2mcpPlugin: Plugin = {
  id: "g37l0aejsr",
  name: "openai-tool2mcp",
  description:
    "A lightweight bridge that wraps OpenAI's built-in tools (like web search and code interpreter) as Model Context Protocol servers, enabling their use with Claude and other MCP-compatible models.",
  image: "https://github.com/alohays.png",
  actions: [],
  githubUrl: "https://github.com/alohays/openai-tool2mcp",
  _varName: "openaitool2mcpPlugin",
};

const mem0MemorySystemPlugin: Plugin = {
  id: "fd4ya2uyoa",
  name: "mem0 Memory System",
  description:
    "A flexible memory system for AI applications that supports multiple LLM providers and can be used either as an MCP server or as a direct library integration, enabling autonomous memory management without explicit commands.",
  image: "https://github.com/pinkpixel-dev.png",
  actions: [],
  githubUrl: "https://github.com/pinkpixel-dev/mem0-mcp",
  _varName: "mem0MemorySystemPlugin",
};

const cursorSoundMcpPlugin: Plugin = {
  id: "eysctxa2n7",
  name: "Cursor Sound MCP",
  description:
    "Provides audio feedback by playing sound effects when Cursor AI completes code generation, creating a more interactive coding experience.",
  image: "https://github.com/ericlistin.png",
  actions: [],
  githubUrl: "https://github.com/ericlistin/sound-mcp",
  _varName: "cursorSoundMcpPlugin",
};

const hdwMcpServerPlugin: Plugin = {
  id: "idtwuz9hbc",
  name: "HDW MCP Server",
  description:
    "A Model Context Protocol server that provides comprehensive access to LinkedIn data and functionality, enabling data retrieval and user account management through the HorizonDataWave API.",
  image: "https://github.com/horizondatawave.png",
  actions: [],
  githubUrl: "https://github.com/horizondatawave/hdw-mcp-server",
  _varName: "hdwMcpServerPlugin",
};

const mcpBasePlugin: Plugin = {
  id: "d7zg01mqj0",
  name: "MCP Base",
  description:
    "A generic Model Context Protocol framework for building AI-powered applications that provides standardized ways to create MCP servers and clients for integrating LLMs with support for Ollama and Supabase.",
  image: "https://github.com/jsmiff.png",
  actions: [],
  githubUrl: "https://github.com/jsmiff/mcp",
  _varName: "mcpBasePlugin",
};

const codeMcpServerPlugin: Plugin = {
  id: "8464lc36og",
  name: "Code MCP Server",
  description:
    "Enables AI agents and assistants like Goose or Claude to interact with VS Code through the Model Context Protocol.",
  image: "https://github.com/block.png",
  actions: [],
  githubUrl: "https://github.com/block/vscode-mcp",
  _varName: "codeMcpServerPlugin",
};

const unstructuredApiMcpServerPlugin: Plugin = {
  id: "56f7310rbq",
  name: "Unstructured API MCP Server",
  description:
    "An MCP server implementation that enables interaction with the Unstructured API, providing tools to list, create, update, and manage sources, destinations, and workflows.",
  image: "https://github.com/Unstructured-IO.png",
  actions: [],
  githubUrl: "https://github.com/Unstructured-IO/UNS-MCP",
  _varName: "unstructuredApiMcpServerPlugin",
};

const xiyanMcpServerPlugin: Plugin = {
  id: "38egctvcux",
  name: "XiYan MCP Server",
  description:
    "A Model Context Protocol server that enables natural language queries to MySQL databases, powered by XiYanSQL text-to-SQL technology.",
  image: "https://github.com/XGenerationLab.png",
  actions: [],
  githubUrl: "https://github.com/XGenerationLab/xiyan_mcp_server",
  _varName: "xiyanMcpServerPlugin",
};

const mcpServerForMlModelIntegrationPlugin: Plugin = {
  id: "buf72euzzj",
  name: "MCP Server for ML Model Integration",
  description:
    "A server that integrates trained Random Forest models with Bee Framework, enabling ReAct interactivity for AI tools and agents.",
  image: "https://github.com/nicknochnack.png",
  actions: [],
  githubUrl: "https://github.com/nicknochnack/BuildMCPServer",
  _varName: "mcpServerForMlModelIntegrationPlugin",
};

const replicatefluxmcpPlugin: Plugin = {
  id: "ss8n1knen8",
  name: "replicate-flux-mcp",
  description: "MCP for Replicate Flux Model. Generating images by prompts",
  image: "https://github.com/awkoy.png",
  actions: [
    {
      name: "generate_image",
      description:
        "Generate an image from a text prompt using Flux Schnell model",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "Aspect ratio for the generated image",
          required: false,
        },
        {
          name: "disable_safety_checker",
          type: "boolean",
          description: "Disable safety checker for generated images.",
          required: false,
        },
        {
          name: "go_fast",
          type: "boolean",
          description:
            "Run faster predictions with model optimized for speed (currently fp8 quantized); disable to run in original bf16",
          required: false,
        },
        {
          name: "megapixels",
          type: "string",
          description: "Approximate number of megapixels for generated image",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "integer",
          description:
            "Number of denoising steps. 4 is recommended, and lower number of steps produce lower quality outputs, faster.",
          required: false,
        },
        {
          name: "num_outputs",
          type: "integer",
          description: "Number of outputs to generate",
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description: "Format of the output images",
          required: false,
        },
        {
          name: "output_quality",
          type: "integer",
          description:
            "Quality when saving the output images, from 0 to 100. 100 is best quality, 0 is lowest quality. Not relevant for .png outputs",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Prompt for generated image",
          required: true,
        },
        {
          name: "seed",
          type: "integer",
          description: "Random seed. Set for reproducible generation",
          required: false,
        },
        {
          name: "support_image_mcp_response_type",
          type: "boolean",
          description:
            "Disable if the image type is not supported in the response, if it's Cursor app for example",
          required: false,
        },
      ],
    },
    {
      name: "generate_multiple_images",
      description:
        "Generate multiple images from an array of prompts using Flux Schnell model",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "Aspect ratio for the generated image",
          required: false,
        },
        {
          name: "disable_safety_checker",
          type: "boolean",
          description: "Disable safety checker for generated images.",
          required: false,
        },
        {
          name: "go_fast",
          type: "boolean",
          description:
            "Run faster predictions with model optimized for speed (currently fp8 quantized); disable to run in original bf16",
          required: false,
        },
        {
          name: "megapixels",
          type: "string",
          description: "Approximate number of megapixels for generated image",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "integer",
          description:
            "Number of denoising steps. 4 is recommended, and lower number of steps produce lower quality outputs, faster.",
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description: "Format of the output images",
          required: false,
        },
        {
          name: "output_quality",
          type: "integer",
          description:
            "Quality when saving the output images, from 0 to 100. 100 is best quality, 0 is lowest quality. Not relevant for .png outputs",
          required: false,
        },
        {
          name: "prompts",
          type: "string array",
          description: "Array of text descriptions for the images to generate",
          required: true,
        },
        {
          name: "seed",
          type: "integer",
          description: "Random seed. Set for reproducible generation",
          required: false,
        },
        {
          name: "support_image_mcp_response_type",
          type: "boolean",
          description:
            "Disable if the image type is not supported in the response, if it's Cursor app for example",
          required: false,
        },
      ],
    },
    {
      name: "generate_image_variants",
      description:
        "Generate multiple variants of the same image from a single prompt",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "Aspect ratio for the generated image",
          required: false,
        },
        {
          name: "disable_safety_checker",
          type: "boolean",
          description: "Disable safety checker for generated images.",
          required: false,
        },
        {
          name: "go_fast",
          type: "boolean",
          description:
            "Run faster predictions with model optimized for speed (currently fp8 quantized); disable to run in original bf16",
          required: false,
        },
        {
          name: "megapixels",
          type: "string",
          description: "Approximate number of megapixels for generated image",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "integer",
          description:
            "Number of denoising steps. 4 is recommended, and lower number of steps produce lower quality outputs, faster.",
          required: false,
        },
        {
          name: "num_variants",
          type: "integer",
          description: "Number of image variants to generate (2-10)",
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description: "Format of the output images",
          required: false,
        },
        {
          name: "output_quality",
          type: "integer",
          description:
            "Quality when saving the output images, from 0 to 100. 100 is best quality, 0 is lowest quality. Not relevant for .png outputs",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text description for the image to generate variants of",
          required: true,
        },
        {
          name: "prompt_variations",
          type: "string array",
          description:
            "Optional list of prompt modifiers to apply to variants (e.g., ['in watercolor style', 'in oil painting style']). If provided, these will be used instead of random seeds.",
          required: false,
        },
        {
          name: "seed",
          type: "integer",
          description:
            "Base random seed. Each variant will use seed+variant_index for reproducibility",
          required: false,
        },
        {
          name: "support_image_mcp_response_type",
          type: "boolean",
          description: "Support image MCP response type on client side",
          required: false,
        },
        {
          name: "variation_mode",
          type: "string",
          description:
            "How to apply prompt variations: 'append' adds to the base prompt, 'replace' uses variations as standalone prompts",
          required: false,
        },
      ],
    },
    {
      name: "generate_svg",
      description: "Generate an SVG from a text prompt using Recraft model",
      parameters: [
        {
          name: "prompt",
          type: "string",
          description: "Prompt for generated SVG",
          required: true,
        },
        {
          name: "size",
          type: "string",
          description: "Size of the generated SVG",
          required: false,
        },
        {
          name: "style",
          type: "string",
          description: "Style of the generated image.",
          required: false,
        },
      ],
    },
    {
      name: "get_prediction",
      description: "Get details of a specific prediction by ID",
      parameters: [
        {
          name: "predictionId",
          type: "string",
          description: "ID of the prediction to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create_prediction",
      description:
        "Generate an prediction from a text prompt using Flux Schnell model",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "Aspect ratio for the generated image",
          required: false,
        },
        {
          name: "disable_safety_checker",
          type: "boolean",
          description: "Disable safety checker for generated images.",
          required: false,
        },
        {
          name: "go_fast",
          type: "boolean",
          description:
            "Run faster predictions with model optimized for speed (currently fp8 quantized); disable to run in original bf16",
          required: false,
        },
        {
          name: "megapixels",
          type: "string",
          description: "Approximate number of megapixels for generated image",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "integer",
          description:
            "Number of denoising steps. 4 is recommended, and lower number of steps produce lower quality outputs, faster.",
          required: false,
        },
        {
          name: "num_outputs",
          type: "integer",
          description: "Number of outputs to generate",
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description: "Format of the output images",
          required: false,
        },
        {
          name: "output_quality",
          type: "integer",
          description:
            "Quality when saving the output images, from 0 to 100. 100 is best quality, 0 is lowest quality. Not relevant for .png outputs",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Prompt for generated image",
          required: true,
        },
        {
          name: "seed",
          type: "integer",
          description: "Random seed. Set for reproducible generation",
          required: false,
        },
      ],
    },
    {
      name: "prediction_list",
      description: "Get a list of recent predictions from Replicate",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of predictions to return",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/awkoy/replicate-flux-mcp",
  _varName: "replicatefluxmcpPlugin",
};

const macmessagesmcpPlugin: Plugin = {
  id: "gxvaoc9znc",
  name: "mac-messages-mcp",
  description:
    "A Python bridge for interacting with the macOS Messages app using MCP (Multiple Context Protocol).\nSimple install using uvx mac-messages-mcp",
  image: "https://github.com/carterlasalle.png",
  actions: [],
  githubUrl: "https://github.com/carterlasalle/mac_messages_mcp",
  _varName: "macmessagesmcpPlugin",
};

const whaletrackermcpPlugin: Plugin = {
  id: "92khwbbyv1",
  name: "whale-tracker-mcp",
  description: "A mcp server for tracking cryptocurrency whale transactions.",
  image: "https://github.com/kukapay.png",
  actions: [],
  githubUrl: "https://github.com/kukapay/whale-tracker-mcp",
  _varName: "whaletrackermcpPlugin",
};

const mcphistfilePlugin: Plugin = {
  id: "f4rg1dkjmw",
  name: "mcp-histfile",
  description:
    "A powerful tool for exploring, searching, and managing your shell command history through the MCP (Model Control Protocol) interface. This project allows you to easily access, search, and retrieve your previously executed shell commands.",
  image: "https://github.com/rajpdus.png",
  actions: [],
  githubUrl: "https://github.com/rajpdus/mcp-histfile",
  _varName: "mcphistfilePlugin",
};

const chainOfDraftThinkingPlugin: Plugin = {
  id: "exar7zd4f0",
  name: "Chain of Draft Thinking",
  description:
    "Chain of Draft Server is a powerful AI-driven tool that helps developers make better decisions through systematic, iterative refinement of thoughts and designs. It integrates seamlessly with popular AI agents and provides a structured approach to reasoning, API design, architecture decisions, code r",
  image: "https://github.com/bsmi021.png",
  actions: [],
  githubUrl: "https://github.com/bsmi021/mcp-chain-of-draft-server",
  _varName: "chainOfDraftThinkingPlugin",
};

const agentqlMcpServerPlugin: Plugin = {
  id: "donnj18yys",
  name: "AgentQL MCP Server",
  description:
    "A server that provides AgentQL's data extraction capabilities enabling AI agents to get structured data from unstructured web",
  image: "https://github.com/tinyfish-io.png",
  actions: [],
  githubUrl: "https://github.com/tinyfish-io/agentql-mcp",
  _varName: "agentqlMcpServerPlugin",
};

const mcpopenapischemaPlugin: Plugin = {
  id: "9yqbiz3hwx",
  name: "mcp-openapi-schema",
  description:
    "A MCP server that exposes OpenAPI schema information to LLMs like Claude. This server allows an LLM to explore and understand large OpenAPI schemas through a set of specialized tools, without needing to load the whole schema into the context",
  image: "https://github.com/hannesj.png",
  actions: [],
  githubUrl: "https://github.com/hannesj/mcp-openapi-schema",
  _varName: "mcpopenapischemaPlugin",
};

const mcpgraphqlschemaPlugin: Plugin = {
  id: "544atbdic7",
  name: "mcp-graphql-schema",
  description:
    "A MCP server that exposes GraphQL schema information to LLMs like Claude. This server allows an LLM to explore and understand large GraphQL schemas through a set of specialized tools, without needing to load the whole schema into the context",
  image: "https://github.com/hannesj.png",
  actions: [],
  githubUrl: "https://github.com/hannesj/mcp-graphql-schema",
  _varName: "mcpgraphqlschemaPlugin",
};

const tiktokMcpPlugin: Plugin = {
  id: "ywysg34izg",
  name: "TikTok MCP",
  description:
    "A MCP Server for TikTok videos that allows you to get video subtitles and post details, such as the number of likes, hashtags, and publishing time.",
  image: "https://github.com/Seym0n.png",
  actions: [],
  githubUrl: "https://github.com/Seym0n/tiktok-mcp",
  _varName: "tiktokMcpPlugin",
};

const mcpServerExamplePlugin: Plugin = {
  id: "hzr1zyeph6",
  name: "MCP Server Example",
  description:
    "An educational implementation of a Model Context Protocol server that demonstrates how to build a functional MCP server for integrating with various LLM clients like Claude Desktop.",
  image: "https://github.com/alejandro-ao.png",
  actions: [],
  githubUrl: "https://github.com/alejandro-ao/mcp-server-example",
  _varName: "mcpServerExamplePlugin",
};

const mcplocalragPlugin: Plugin = {
  id: "5hgkdzzzv1",
  name: "mcp-local-rag",
  description:
    '"primitive" RAG-like web search model context protocol server that runs locally. ✨ no APIs ✨',
  image: "https://github.com/nkapila6.png",
  actions: [],
  githubUrl: "https://github.com/nkapila6/mcp-local-rag",
  _varName: "mcplocalragPlugin",
};

const qubaominggstockmcpPlugin: Plugin = {
  id: "nyboo0dnfy",
  name: "@qubaomingg/stock-mcp",
  description: "一个 Alpha Vantage API 查询 股票信息的 MCP server.",
  image: "https://github.com/qubaomingg.png",
  actions: [],
  githubUrl: "https://github.com/qubaomingg/stock-analysis-mcp",
  _varName: "qubaominggstockmcpPlugin",
};

const dbhubPlugin: Plugin = {
  id: "a01xnguu8x",
  name: "DBHub",
  description:
    "Universal database MCP server connecting to MySQL, PostgreSQL, SQLite, DuckDB and etc.",
  image: "https://github.com/bytebase.png",
  actions: [],
  githubUrl: "https://github.com/bytebase/dbhub",
  _varName: "dbhubPlugin",
};

const obsidianMcpPlugin: Plugin = {
  id: "9cuu7kaio7",
  name: "Obsidian MCP",
  description:
    "This project implements a Model Context Protocol (MCP) server for connecting AI models with Obsidian knowledge bases. Through this server, AI models can directly access and manipulate Obsidian notes, including reading, creating, updating, and deleting notes, as well as managing folder structures.",
  image: "https://github.com/newtype-01.png",
  actions: [],
  githubUrl: "https://github.com/newtype-01/obsidian-mcp",
  _varName: "obsidianMcpPlugin",
};

const aVmwareEsxivcenterManagementServerPlugin: Plugin = {
  id: "21dvqxwwey",
  name: "A VMware ESXi/vCenter management server",
  description:
    "A VMware ESXi/vCenter management server based on MCP (Machine Control Protocol), providing simple REST API interfaces for virtual machine management.",
  image: "https://github.com/bright8192.png",
  actions: [],
  githubUrl: "https://github.com/bright8192/esxi-mcp-server",
  _varName: "aVmwareEsxivcenterManagementServerPlugin",
};

const mssqlMcpServerPlugin: Plugin = {
  id: "ite84l43kv",
  name: "MSSQL MCP Server",
  description:
    "Provides database interaction and business intelligence capabilities, enabling users to run SQL queries, analyze business data, and automatically generate business insight memos for Microsoft SQL Server databases.",
  image: "https://github.com/daobataotie.png",
  actions: [],
  githubUrl: "https://github.com/daobataotie/mssql-mcp",
  _varName: "mssqlMcpServerPlugin",
};

const cvesearch_mcpPlugin: Plugin = {
  id: "jeoguku3fh",
  name: "cve-search_mcp",
  description:
    "A Model Context Protocol (MCP) server for querying the CVE-Search API. This server provides comprehensive access to CVE-Search, browse vendor and product、get CVE per CVE-ID、get the last updated CVEs.",
  image: "https://github.com/roadwy.png",
  actions: [],
  githubUrl: "https://github.com/roadwy/cve-search_mcp",
  _varName: "cvesearch_mcpPlugin",
};

const mcpmistralocrPlugin: Plugin = {
  id: "798rkh8r8l",
  name: "mcp-mistral-ocr",
  description:
    "OCR images or pdfs, locally or by URLs by using Mistral OCR API (paid)",
  image: "https://github.com/everaldo.png",
  actions: [],
  githubUrl: "https://github.com/everaldo/mcp-mistral-ocr",
  _varName: "mcpmistralocrPlugin",
};

const logseqMcpToolsPlugin: Plugin = {
  id: "184y1hkbg2",
  name: "Logseq MCP Tools",
  description:
    "A Model Context Protocol server that provides AI assistants with structured access to your Logseq knowledge graph, enabling retrieval, searching, analysis, and creation of content within your personal knowledge base.",
  image: "https://github.com/joelhooks.png",
  actions: [],
  githubUrl: "https://github.com/joelhooks/logseq-mcp-tools",
  _varName: "logseqMcpToolsPlugin",
};

const repomixPlugin: Plugin = {
  id: "lczqcx54uv",
  name: "Repomix",
  description:
    "Repomix MCP Server enables AI models to efficiently analyze codebases by packaging local or remote repositories into optimized single files, with intelligent compression via Tree-sitter to significantly reduce token usage while preserving code structure and essential signatures.",
  image: "https://github.com/yamadashy.png",
  actions: [],
  githubUrl: "https://github.com/yamadashy/repomix",
  _varName: "repomixPlugin",
};

const mcpetPlugin: Plugin = {
  id: "s9n0rbc6rp",
  name: "MCPet",
  description:
    "A nostalgic virtual pet experience for the AI age that lets you adopt, nurture, and play with your own digital companion that evolves based on your care.",
  image: "https://github.com/shreyaskarnik.png",
  actions: [],
  githubUrl: "https://github.com/shreyaskarnik/mcpet",
  _varName: "mcpetPlugin",
};

const bitrefillSearchAndShopPlugin: Plugin = {
  id: "ee6rjptag1",
  name: "Bitrefill Search and Shop",
  description:
    "This MCP wraps Bitrefill public API to allow agents to search for products and shop using cryptocurrencies like Bitcoin, Ethereum, Solana, and many more.",
  image: "https://github.com/bitrefill.png",
  actions: [],
  githubUrl: "https://github.com/bitrefill/bitrefill-mcp-server",
  _varName: "bitrefillSearchAndShopPlugin",
};

const unstructuredDocumentProcessorMcpPlugin: Plugin = {
  id: "6ncg8w9ovd",
  name: "Unstructured Document Processor MCP",
  description:
    "A Model Context Protocol server that enables LLMs to extract and use content from unstructured documents across a wide variety of file formats.",
  image: "https://github.com/MKhalusova.png",
  actions: [],
  githubUrl: "https://github.com/MKhalusova/unstructured-mcp",
  _varName: "unstructuredDocumentProcessorMcpPlugin",
};

const sqlMcpServerForClaudeDesktopPlugin: Plugin = {
  id: "cs7d9mmpee",
  name: "SQL MCP Server for Claude Desktop",
  description:
    "A natural language interface that allows Claude to execute SQL queries on your local MySQL databases, enabling database interaction using natural language.",
  image: "https://github.com/meanands.png",
  actions: [],
  githubUrl: "https://github.com/meanands/mysql-mcp",
  _varName: "sqlMcpServerForClaudeDesktopPlugin",
};

const xanoMcpServerPlugin: Plugin = {
  id: "a3btd8oczc",
  name: "Xano MCP Server",
  description:
    "Enables AI assistants to manage Xano databases through the Model Context Protocol, allowing users to create, modify, and delete tables, edit schemas, and extract API documentation.",
  image: "https://github.com/lowcodelocky2.png",
  actions: [],
  githubUrl: "https://github.com/lowcodelocky2/xano-mcp",
  _varName: "xanoMcpServerPlugin",
};

const greptimedbMcpServerPlugin: Plugin = {
  id: "s7x4xtbklm",
  name: "GreptimeDB MCP Server",
  description:
    "A Model Context Protocol server implementation that enables AI assistants to securely interact with GreptimeDB, allowing them to explore database schema, read data, and execute SQL queries through a controlled interface.",
  image: "https://github.com/GreptimeTeam.png",
  actions: [],
  githubUrl: "https://github.com/GreptimeTeam/greptimedb-mcp-server",
  _varName: "greptimedbMcpServerPlugin",
};

const genericmcpserverPlugin: Plugin = {
  id: "0vtdinwieq",
  name: "generic-mcp-server",
  description:
    "A framework to use with AI to easily create a server for any service. Just drop the API Documentation in it and ask to create the MCP.",
  image: "https://github.com/v4lheru.png",
  actions: [],
  githubUrl: "https://github.com/v4lheru/generic-mcp-template",
  _varName: "genericmcpserverPlugin",
};

const trellomcpserverPlugin: Plugin = {
  id: "m5g1pfsvxo",
  name: "trello-mcp-server",
  description:
    "Connects to Trello with all the tools available that I was able to find in API reference",
  image: "https://github.com/v4lheru.png",
  actions: [],
  githubUrl: "https://github.com/v4lheru/trello-mcp-server",
  _varName: "trellomcpserverPlugin",
};

const apifoxMcpServerPlugin: Plugin = {
  id: "83bj4rbw4j",
  name: "Apifox MCP Server",
  description:
    "A server that connects AI coding assistants like Cursor and Cline to Apifox API definitions, allowing developers to implement API interfaces through natural language commands.",
  image: "https://github.com/apifox.png",
  actions: [],
  githubUrl: "https://github.com/apifox/apifox-mcp-server",
  _varName: "apifoxMcpServerPlugin",
};

const thingspanelMcpPlugin: Plugin = {
  id: "rmf6vsucns",
  name: "ThingsPanel MCP",
  description:
    "An integration server that connects AI models with ThingsPanel IoT platform, allowing AI assistants to interact with IoT devices through natural language for device control, data retrieval, and management operations.",
  image: "https://github.com/ThingsPanel.png",
  actions: [],
  githubUrl: "https://github.com/ThingsPanel/thingspanel-mcp",
  _varName: "thingspanelMcpPlugin",
};

const blahmcpPlugin: Plugin = {
  id: "mzhi2jsx0x",
  name: "blah-mcp",
  description:
    "BLAH - Barely Local Agent Host\n\nA new public registry that assists in ochestration of MCP servers and their tools",
  image: "https://github.com/thomasdavis.png",
  actions: [],
  githubUrl: "https://github.com/thomasdavis/blah",
  _varName: "blahmcpPlugin",
};

const metasearchmcpPlugin: Plugin = {
  id: "xxb4uogn02",
  name: "metasearch-mcp",
  description:
    "MCP server for using various search tools like Tavily API.\nPlanning to support various search tools (i.e. wiki search, searxng, etc)",
  image: "https://github.com/YeonwooSung.png",
  actions: [],
  githubUrl: "https://github.com/YeonwooSung/metasearch-mcp",
  _varName: "metasearchmcpPlugin",
};

const ensMcpServerPlugin: Plugin = {
  id: "nbi8k88cpi",
  name: "ENS MCP Server",
  description:
    "Enables Claude to interact with the Ethereum Name Service (ENS) system to resolve names, check availability, retrieve records, and perform other ENS-related operations through natural language.",
  image: "https://github.com/JustaName-id.png",
  actions: [],
  githubUrl: "https://github.com/JustaName-id/ens-mcp-server",
  _varName: "ensMcpServerPlugin",
};

const rizamcpPlugin: Plugin = {
  id: "0tqdrs96in",
  name: "riza-mcp",
  description:
    "An MCP server that wraps the Riza Code Interpreter API and presents endpoints as individual tools.",
  image: "https://github.com/riza-io.png",
  actions: [],
  githubUrl: "https://github.com/riza-io/riza-mcp",
  _varName: "rizamcpPlugin",
};

const olostepmcpPlugin: Plugin = {
  id: "ur5ulf3b8e",
  name: "olostep-mcp",
  description:
    "Searching google, individual websites and scraping their content. Fast and cost-effective. ⚡️",
  image: "https://github.com/olostep.png",
  actions: [],
  githubUrl: "https://github.com/olostep/olostep-mcp-server",
  _varName: "olostepmcpPlugin",
};

const jvmMcpServerPlugin: Plugin = {
  id: "5soe3xcxfw",
  name: "JVM MCP Server",
  description:
    "A JVM monitoring and control platform server based on Arthas that provides a Python interface for monitoring and analyzing Java processes with capabilities for thread analysis, memory monitoring, and performance diagnostics.",
  image: "https://github.com/xzq-xu.png",
  actions: [],
  githubUrl: "https://github.com/xzq-xu/jvm-mcp-server",
  _varName: "jvmMcpServerPlugin",
};

const mcphelpertoolsPlugin: Plugin = {
  id: "3ay33mxf98",
  name: "mcp-helper-tools",
  description:
    "Fork of @cyanheads toolkit MCP server. Added encoding functions, removed system network functions.",
  image: "https://github.com/MissionSquad.png",
  actions: [],
  githubUrl: "https://github.com/MissionSquad/mcp-helper-tools",
  _varName: "mcphelpertoolsPlugin",
};

const mcpgithubPlugin: Plugin = {
  id: "1es3d6q5tw",
  name: "mcp-github",
  description:
    "Anthropic's github MCP server, but better. Support for more endpoints. Including releases and tags, pull request reviews, statuses, rate limit, gists, projects, packages, and even pull request diffs. Indented to be used with MissionSquad's MCP API for secret management (aka your access token).",
  image: "https://github.com/MissionSquad.png",
  actions: [],
  githubUrl: "https://github.com/MissionSquad/mcp-github",
  _varName: "mcpgithubPlugin",
};

const mcptursoPlugin: Plugin = {
  id: "r0ersuisw0",
  name: "MCP-Turso",
  description:
    "A Model Context Protocol server that provides Claude access to Turso-hosted LibSQL databases, enabling database table listing, schema retrieval, and SELECT query execution.",
  image: "https://github.com/nbbaier.png",
  actions: [],
  githubUrl: "https://github.com/nbbaier/mcp-turso",
  _varName: "mcptursoPlugin",
};

const opikMcpServerPlugin: Plugin = {
  id: "hcctr0h0vs",
  name: "Opik MCP Server",
  description:
    "An implementation of the Model Context Protocol for the Opik platform that provides a unified interface for accessing Opik's capabilities, supporting multiple transport mechanisms for flexible integration with IDEs and other environments.",
  image: "https://github.com/comet-ml.png",
  actions: [],
  githubUrl: "https://github.com/comet-ml/opik-mcp",
  _varName: "opikMcpServerPlugin",
};

const mcpbravesearchPlugin: Plugin = {
  id: "5p37vicx4v",
  name: "mcp-brave-search",
  description: "brave search",
  image: "https://github.com/w-jeon.png",
  actions: [],
  githubUrl: "https://github.com/w-jeon/mcp-brave-search",
  _varName: "mcpbravesearchPlugin",
};

const autumnMcpServerPlugin: Plugin = {
  id: "3oa6l1cme1",
  name: "Autumn MCP Server",
  description:
    "An unofficial MCP server that provides an interface to access the Autumn pricing API for managing customers, entitlements, invoices, and generating billing portal links.",
  image: "https://github.com/SirTenzin.png",
  actions: [],
  githubUrl: "https://github.com/SirTenzin/autumn-mcp-server",
  _varName: "autumnMcpServerPlugin",
};

const cloudflarebrowserrenderingmcpPlugin: Plugin = {
  id: "35u5mo3dm5",
  name: "cloudflare-browser-rendering-mcp",
  description:
    "This MCP server provides tools for interacting with Cloudflare Browser Rendering, allowing you to fetch and process web content for use as context in LLMs directly from Cline or Claude Desktop.",
  image: "https://github.com/amotivv.png",
  actions: [
    {
      name: "fetch_page",
      description: "Fetches and processes a web page for LLM context",
      parameters: [
        {
          name: "maxContentLength",
          type: "number",
          description: "Maximum content length to return",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "search_documentation",
      description:
        "Searches Cloudflare documentation and returns relevant content",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "extract_structured_content",
      description:
        "Extracts structured content from a web page using CSS selectors",
      parameters: [
        {
          name: "selectors",
          type: "object",
          description: "CSS selectors to extract content",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL to extract content from",
          required: true,
        },
      ],
    },
    {
      name: "summarize_content",
      description: "Summarizes web content for more concise LLM context",
      parameters: [
        {
          name: "maxLength",
          type: "number",
          description: "Maximum length of the summary",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to summarize",
          required: true,
        },
      ],
    },
    {
      name: "take_screenshot",
      description:
        "Takes a screenshot of a web page and returns it as an image",
      parameters: [
        {
          name: "fullPage",
          type: "boolean",
          description:
            "Whether to take a screenshot of the full page or just the viewport (default: false)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height of the viewport in pixels (default: 800)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to take a screenshot of",
          required: true,
        },
        {
          name: "width",
          type: "number",
          description: "Width of the viewport in pixels (default: 1280)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/amotivv/cloudflare-browser-rendering-mcp",
  _varName: "cloudflarebrowserrenderingmcpPlugin",
};

const educhainAgentKitPlugin: Plugin = {
  id: "fd54q7e2lz",
  name: "EDUCHAIN Agent Kit",
  description:
    "An MCP server that provides tools for interacting with EDUCHAIN, allowing Claude to query information about tokens and pools and perform swaps through SailFish DEX.",
  image: "https://github.com/SailFish-Finance.png",
  actions: [
    {
      name: "get_token_price",
      description: "Get the current price of a token on SailFish DEX",
      parameters: [
        {
          name: "tokenId",
          type: "string",
          description: "Token address",
          required: true,
        },
      ],
    },
    {
      name: "get_token_info",
      description: "Get detailed information about a token on SailFish DEX",
      parameters: [
        {
          name: "tokenId",
          type: "string",
          description: "Token address",
          required: true,
        },
      ],
    },
    {
      name: "get_pool_info",
      description:
        "Get detailed information about a liquidity pool on SailFish DEX",
      parameters: [
        {
          name: "poolId",
          type: "string",
          description: "Pool address",
          required: true,
        },
      ],
    },
    {
      name: "get_top_tokens",
      description: "Get a list of top tokens by TVL on SailFish DEX",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of tokens to return (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "get_top_pools",
      description: "Get a list of top liquidity pools by TVL on SailFish DEX",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of pools to return (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "get_total_tvl",
      description: "Get the total value locked (TVL) in SailFish DEX",
      parameters: [],
    },
    {
      name: "get_24h_volume",
      description: "Get the 24-hour trading volume on SailFish DEX",
      parameters: [],
    },
    {
      name: "get_token_historical_data",
      description: "Get historical data for a token on SailFish DEX",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days of data to return (default: 7)",
          required: false,
        },
        {
          name: "tokenId",
          type: "string",
          description: "Token address",
          required: true,
        },
      ],
    },
    {
      name: "get_pool_historical_data",
      description: "Get historical data for a liquidity pool on SailFish DEX",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days of data to return (default: 7)",
          required: false,
        },
        {
          name: "poolId",
          type: "string",
          description: "Pool address",
          required: true,
        },
      ],
    },
    {
      name: "get_edu_balance",
      description: "Get the EDU balance of a wallet address",
      parameters: [
        {
          name: "walletAddress",
          type: "string",
          description: "Wallet address to check",
          required: true,
        },
      ],
    },
    {
      name: "get_token_balance",
      description:
        "Get the token balance of a wallet address with USD value using SailFish as price oracle",
      parameters: [
        {
          name: "tokenAddress",
          type: "string",
          description: "Token contract address",
          required: true,
        },
        {
          name: "walletAddress",
          type: "string",
          description: "Wallet address to check",
          required: true,
        },
      ],
    },
    {
      name: "get_multiple_token_balances",
      description:
        "Get multiple token balances for a wallet address with USD values using SailFish as price oracle",
      parameters: [
        {
          name: "tokenAddresses",
          type: "string array",
          description: "List of token contract addresses",
          required: true,
        },
        {
          name: "walletAddress",
          type: "string",
          description: "Wallet address to check",
          required: true,
        },
      ],
    },
    {
      name: "get_nft_balance",
      description:
        "Get the NFT balance of a wallet address for a specific NFT collection",
      parameters: [
        {
          name: "fetchTokenIds",
          type: "boolean",
          description: "Whether to fetch token IDs (default: true)",
          required: false,
        },
        {
          name: "nftAddress",
          type: "string",
          description: "NFT contract address",
          required: true,
        },
        {
          name: "walletAddress",
          type: "string",
          description: "Wallet address to check",
          required: true,
        },
      ],
    },
    {
      name: "get_wallet_overview",
      description:
        "Get an overview of a wallet including EDU, tokens, and NFTs",
      parameters: [
        {
          name: "nftAddresses",
          type: "string array",
          description: "List of NFT contract addresses to check",
          required: false,
        },
        {
          name: "tokenAddresses",
          type: "string array",
          description: "List of token contract addresses to check",
          required: false,
        },
        {
          name: "walletAddress",
          type: "string",
          description: "Wallet address to check",
          required: true,
        },
      ],
    },
    {
      name: "set_rpc_url",
      description: "Set the RPC URL for blockchain interactions",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "RPC URL to use for blockchain interactions",
          required: true,
        },
      ],
    },
    {
      name: "get_rpc_url",
      description: "Get the current RPC URL used for blockchain interactions",
      parameters: [],
    },
    {
      name: "send_edu",
      description: "Send EDU native token to another wallet address",
      parameters: [
        {
          name: "amount",
          type: "string",
          description: "Amount of EDU to send",
          required: true,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the sender wallet",
          required: true,
        },
        {
          name: "toAddress",
          type: "string",
          description: "Recipient wallet address",
          required: true,
        },
      ],
    },
    {
      name: "get_wallet_address_from_private_key",
      description:
        "Get wallet address from private key with proper checksum formatting",
      parameters: [
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the wallet",
          required: true,
        },
      ],
    },
    {
      name: "send_erc20_token",
      description: "Send ERC20 token to another wallet address",
      parameters: [
        {
          name: "amount",
          type: "string",
          description: "Amount of tokens to send",
          required: true,
        },
        {
          name: "confirm",
          type: "boolean",
          description:
            "Confirm the transaction after verifying wallet address (default: true)",
          required: false,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the sender wallet",
          required: true,
        },
        {
          name: "toAddress",
          type: "string",
          description: "Recipient wallet address",
          required: true,
        },
        {
          name: "tokenAddress",
          type: "string",
          description: "Token contract address",
          required: true,
        },
      ],
    },
    {
      name: "get_swap_quote",
      description: "Get a quote for swapping tokens on SailFish DEX",
      parameters: [
        {
          name: "amountIn",
          type: "string",
          description: "Amount of input token to swap",
          required: true,
        },
        {
          name: "fee",
          type: "number",
          description: "Fee tier (100=0.01%, 500=0.05%, 3000=0.3%, 10000=1%)",
          required: false,
        },
        {
          name: "tokenIn",
          type: "string",
          description: "Address of the input token",
          required: true,
        },
        {
          name: "tokenOut",
          type: "string",
          description: "Address of the output token",
          required: true,
        },
      ],
    },
    {
      name: "swap_tokens",
      description: "Swap tokens on SailFish DEX (token to token)",
      parameters: [
        {
          name: "amountIn",
          type: "string",
          description: "Amount of input token to swap",
          required: true,
        },
        {
          name: "fee",
          type: "number",
          description: "Fee tier (100=0.01%, 500=0.05%, 3000=0.3%, 10000=1%)",
          required: false,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the sender wallet",
          required: true,
        },
        {
          name: "slippagePercentage",
          type: "number",
          description: "Slippage tolerance percentage (default: 0.5)",
          required: false,
        },
        {
          name: "tokenIn",
          type: "string",
          description: "Address of the input token",
          required: true,
        },
        {
          name: "tokenOut",
          type: "string",
          description: "Address of the output token",
          required: true,
        },
      ],
    },
    {
      name: "swap_edu_for_tokens",
      description: "Swap EDU for tokens on SailFish DEX",
      parameters: [
        {
          name: "amountIn",
          type: "string",
          description: "Amount of EDU to swap",
          required: true,
        },
        {
          name: "fee",
          type: "number",
          description: "Fee tier (100=0.01%, 500=0.05%, 3000=0.3%, 10000=1%)",
          required: false,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the sender wallet",
          required: true,
        },
        {
          name: "slippagePercentage",
          type: "number",
          description: "Slippage tolerance percentage (default: 0.5)",
          required: false,
        },
        {
          name: "tokenOut",
          type: "string",
          description: "Address of the output token",
          required: true,
        },
      ],
    },
    {
      name: "swap_tokens_for_edu",
      description: "Swap tokens for EDU on SailFish DEX",
      parameters: [
        {
          name: "amountIn",
          type: "string",
          description: "Amount of tokens to swap",
          required: true,
        },
        {
          name: "fee",
          type: "number",
          description: "Fee tier (100=0.01%, 500=0.05%, 3000=0.3%, 10000=1%)",
          required: false,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the sender wallet",
          required: true,
        },
        {
          name: "slippagePercentage",
          type: "number",
          description: "Slippage tolerance percentage (default: 0.5)",
          required: false,
        },
        {
          name: "tokenIn",
          type: "string",
          description: "Address of the input token",
          required: true,
        },
      ],
    },
    {
      name: "get_external_market_data",
      description:
        "Get external market data for EDU from centralized exchanges",
      parameters: [],
    },
    {
      name: "check_arbitrage_opportunities",
      description:
        "Check for arbitrage opportunities between centralized exchanges and SailFish DEX",
      parameters: [
        {
          name: "threshold",
          type: "number",
          description:
            "Minimum price difference percentage to consider as an arbitrage opportunity (default: 1.0)",
          required: false,
        },
      ],
    },
    {
      name: "update_external_market_config",
      description: "Update the configuration for external market data API",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "API key for external market data (if required)",
          required: false,
        },
        {
          name: "apiUrl",
          type: "string",
          description: "API URL for external market data",
          required: false,
        },
        {
          name: "symbols",
          type: "object",
          description: "Symbol mappings for the external API",
          required: false,
        },
      ],
    },
    {
      name: "get_external_market_config",
      description: "Get the current configuration for external market data API",
      parameters: [],
    },
    {
      name: "wrap_edu",
      description: "Wrap EDU to WEDU (Wrapped EDU)",
      parameters: [
        {
          name: "amount",
          type: "string",
          description: "Amount of EDU to wrap",
          required: true,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the wallet",
          required: true,
        },
      ],
    },
    {
      name: "unwrap_wedu",
      description: "Unwrap WEDU (Wrapped EDU) to EDU",
      parameters: [
        {
          name: "amount",
          type: "string",
          description: "Amount of WEDU to unwrap",
          required: true,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Private key of the wallet",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/SailFish-Finance/educhain-ai-agent-kit",
  _varName: "educhainAgentKitPlugin",
};

const transcriptiontoolsMcpServerPlugin: Plugin = {
  id: "in1wo7l928",
  name: "TranscriptionTools MCP Server",
  description:
    "Provides intelligent transcript processing capabilities for Claude, featuring natural formatting, contextual repair, and smart summarization powered by Deep Thinking LLMs.",
  image: "https://github.com/MushroomFleet.png",
  actions: [
    {
      name: "repair_text",
      description:
        "Analyzes and repairs transcription errors with greater than 90% confidence",
      parameters: [
        {
          name: "input_text",
          type: "string",
          description:
            "Text content or path to file containing transcribed text",
          required: true,
        },
        {
          name: "is_file_path",
          type: "boolean",
          description: "Whether input_text is a file path",
          required: false,
        },
      ],
    },
    {
      name: "get_repair_log",
      description:
        "Retrieves detailed analysis log from previous repair operation",
      parameters: [
        {
          name: "session_id",
          type: "string",
          description: "Session ID or timestamp from previous repair",
          required: true,
        },
      ],
    },
    {
      name: "format_transcript",
      description:
        "Transforms timestamped transcripts into naturally formatted text",
      parameters: [
        {
          name: "input_text",
          type: "string",
          description: "Timestamped transcript text or path to file",
          required: true,
        },
        {
          name: "is_file_path",
          type: "boolean",
          description: "Whether input_text is a file path",
          required: false,
        },
        {
          name: "line_gap",
          type: "number",
          description: "Seconds gap for line breaks",
          required: false,
        },
        {
          name: "paragraph_gap",
          type: "number",
          description: "Seconds gap for paragraph breaks",
          required: false,
        },
      ],
    },
    {
      name: "summary_text",
      description:
        "Generates intelligent summaries using ACE cognitive methodology",
      parameters: [
        {
          name: "constraint_type",
          type: "string",
          description: "Type of constraint to apply",
          required: false,
        },
        {
          name: "constraint_value",
          type: "number",
          description: "Value for the specified constraint",
          required: false,
        },
        {
          name: "input_text",
          type: "string",
          description: "Text to summarize or path to file",
          required: true,
        },
        {
          name: "is_file_path",
          type: "boolean",
          description: "Whether input_text is a file path",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MushroomFleet/TranscriptionTools-MCP",
  _varName: "transcriptiontoolsMcpServerPlugin",
};

const basicmemoryPlugin: Plugin = {
  id: "o90kttu9ym",
  name: "basic-memory",
  description:
    "Basic Memory is a knowledge management system that allows you to build a persistent semantic graph from conversations with AI assistants. All knowledge is stored in standard Markdown files on your computer, giving you full control and ownership of your data. Integrates directly with Obsidan.md",
  image: "https://github.com/basicmachines-co.png",
  actions: [
    {
      name: "delete_note",
      description: "Delete a note by title or permalink",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter: identifier",
          required: true,
        },
      ],
    },
    {
      name: "read_content",
      description: "Read a file's raw content by path or permalink",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "build_context",
      description:
        'Build context from a memory:// URI to continue conversations naturally.\n    \n    Use this to follow up on previous discussions or explore related topics.\n    Timeframes support natural language like:\n    - "2 days ago"\n    - "last week" \n    - "today"\n    - "3 months ago"\n    Or standard formats like "7d", "24h"\n    ',
      parameters: [
        {
          name: "depth",
          type: "string",
          description: "Parameter: depth",
          required: false,
        },
        {
          name: "max_related",
          type: "integer",
          description: "Parameter: max_related",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "page_size",
          type: "integer",
          description: "Parameter: page_size",
          required: false,
        },
        {
          name: "timeframe",
          type: "string",
          description: "Parameter: timeframe",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "recent_activity",
      description:
        'Get recent activity from across the knowledge base.\n    \n    Timeframe supports natural language formats like:\n    - "2 days ago"  \n    - "last week"\n    - "yesterday" \n    - "today"\n    - "3 weeks ago"\n    Or standard formats like "7d"\n    ',
      parameters: [
        {
          name: "depth",
          type: "string",
          description: "Parameter: depth",
          required: false,
        },
        {
          name: "max_related",
          type: "integer",
          description: "Parameter: max_related",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "page_size",
          type: "integer",
          description: "Parameter: page_size",
          required: false,
        },
        {
          name: "timeframe",
          type: "string",
          description: "Parameter: timeframe",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: false,
        },
      ],
    },
    {
      name: "search",
      description:
        "Search across all content in basic-memory, including documents and entities",
      parameters: [
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "page_size",
          type: "integer",
          description: "Parameter: page_size",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "read_note",
      description: "Read a markdown note by title or permalink.",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter: identifier",
          required: true,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "page_size",
          type: "integer",
          description: "Parameter: page_size",
          required: false,
        },
      ],
    },
    {
      name: "write_note",
      description:
        "Create or update a markdown note. Returns a markdown formatted summary of the semantic content.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "folder",
          type: "string",
          description: "Parameter: folder",
          required: true,
        },
        {
          name: "tags",
          type: "string",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "canvas",
      description:
        "Create an Obsidian canvas file to visualize concepts and connections.",
      parameters: [
        {
          name: "edges",
          type: "object array",
          description: "Parameter: edges",
          required: true,
        },
        {
          name: "folder",
          type: "string",
          description: "Parameter: folder",
          required: true,
        },
        {
          name: "nodes",
          type: "object array",
          description: "Parameter: nodes",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "project_info",
      description:
        "Get information and statistics about the current Basic Memory project.",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/basicmachines-co/basic-memory",
  _varName: "basicmemoryPlugin",
};

const awsCostExplorerMcpServerPlugin: Plugin = {
  id: "ncg6g7mka5",
  name: "AWS Cost Explorer MCP Server",
  description:
    "A command-line interface and API that allows users to analyze and visualize AWS cloud spending data by enabling Claude to query AWS Cost Explorer through natural language conversations.",
  image: "https://github.com/aarora79.png",
  actions: [],
  githubUrl: "https://github.com/aarora79/aws-cost-explorer-mcp-server",
  _varName: "awsCostExplorerMcpServerPlugin",
};

const makeMcpServerPlugin: Plugin = {
  id: "1fwg44qvi3",
  name: "Make MCP Server",
  description:
    "Transform your Make scenarios into callable tools for AI assistants. Leverage your existing automation workflows while enabling AI systems to trigger and interact with them seamlessly.",
  image: "https://github.com/integromat.png",
  actions: [],
  githubUrl: "https://github.com/integromat/make-mcp-server",
  _varName: "makeMcpServerPlugin",
};

const githubProjectManagerPlugin: Plugin = {
  id: "wajp07sk6l",
  name: "Github Project Manager",
  description: "Allow to manage Issues and Project on Github",
  image: "https://github.com/Monsoft-Solutions.png",
  actions: [
    {
      name: "create_issue",
      description: "Create a new issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "GitHub usernames to assign to this issue",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Issue body/description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels to add to this issue",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone number to associate with this issue",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "GitHub usernames to assign",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "New issue body",
          required: false,
        },
        {
          name: "issue_number",
          type: "number",
          description: "Issue number",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels to set",
          required: false,
        },
        {
          name: "milestone",
          type: ["number", "null"],
          description: "Milestone to set",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "New issue state",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New issue title",
          required: false,
        },
      ],
    },
    {
      name: "list_issues",
      description: "List issues in a GitHub repository with filtering options",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Filter by assignee",
          required: false,
        },
        {
          name: "creator",
          type: "string",
          description: "Filter by creator",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Filter by labels",
          required: false,
        },
        {
          name: "mentioned",
          type: "string",
          description: "Filter by mentioned user",
          required: false,
        },
        {
          name: "milestone",
          type: "string",
          description: "Filter by milestone number or title",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Results per page",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "since",
          type: "string",
          description: "Filter by updated date (ISO 8601 format)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Issue state",
          required: false,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Get details of a specific issue in a GitHub repository.",
      parameters: [
        {
          name: "issue_number",
          type: "number",
          description: "Issue number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "add_issue_comment",
      description: "Add a comment to an existing issue",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Comment text",
          required: true,
        },
        {
          name: "issue_number",
          type: "number",
          description: "Issue number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_project",
      description: "Create a new GitHub project board",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Project description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Project name",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Organization name or username",
          required: true,
        },
      ],
    },
    {
      name: "add_project_item",
      description: "Add an issue or pull request to a GitHub project",
      parameters: [
        {
          name: "content_id",
          type: "number",
          description: "Issue or PR ID",
          required: true,
        },
        {
          name: "content_type",
          type: "string",
          description: "Type of content to add",
          required: true,
        },
        {
          name: "project_id",
          type: "number",
          description: "Project ID",
          required: true,
        },
      ],
    },
    {
      name: "update_project_item",
      description: "Move an item between columns in a GitHub project",
      parameters: [
        {
          name: "column_id",
          type: "number",
          description: "Column ID to move the card to",
          required: true,
        },
        {
          name: "item_id",
          type: "number",
          description: "Card ID to move",
          required: true,
        },
        {
          name: "position",
          type: "string",
          description:
            "Position in the column (top, bottom, or specific position)",
          required: false,
        },
        {
          name: "project_id",
          type: "number",
          description: "Project ID",
          required: true,
        },
      ],
    },
    {
      name: "list_project_items",
      description: "List items in a GitHub project",
      parameters: [
        {
          name: "column_id",
          type: "number",
          description: "Column ID to filter by",
          required: false,
        },
        {
          name: "project_id",
          type: "number",
          description: "Project ID",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request",
      description: "Create a new pull request in a GitHub repository",
      parameters: [
        {
          name: "base",
          type: "string",
          description:
            "The name of the branch you want the changes pulled into",
          required: true,
        },
        {
          name: "body",
          type: "string",
          description: "Pull request body/description",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Whether to create the pull request as a draft",
          required: false,
        },
        {
          name: "head",
          type: "string",
          description:
            "The name of the branch where your changes are implemented",
          required: true,
        },
        {
          name: "maintainer_can_modify",
          type: "boolean",
          description: "Whether maintainers can modify the pull request",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Pull request title",
          required: true,
        },
      ],
    },
    {
      name: "update_pull_request",
      description: "Update an existing pull request in a GitHub repository",
      parameters: [
        {
          name: "base",
          type: "string",
          description:
            "The name of the branch you want the changes pulled into",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "New pull request body",
          required: false,
        },
        {
          name: "maintainer_can_modify",
          type: "boolean",
          description: "Whether maintainers can modify the pull request",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "New pull request state",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New pull request title",
          required: false,
        },
      ],
    },
    {
      name: "list_pull_requests",
      description:
        "List pull requests in a GitHub repository with filtering options",
      parameters: [
        {
          name: "base",
          type: "string",
          description: "Filter by base branch",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "head",
          type: "string",
          description: "Filter by head branch",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Results per page",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Pull request state",
          required: false,
        },
      ],
    },
    {
      name: "get_pull_request",
      description:
        "Get details of a specific pull request in a GitHub repository",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "merge_pull_request",
      description: "Merge a pull request",
      parameters: [
        {
          name: "commit_message",
          type: "string",
          description: "Extra detail to append to automatic commit message",
          required: false,
        },
        {
          name: "commit_title",
          type: "string",
          description: "Title for the automatic commit message",
          required: false,
        },
        {
          name: "merge_method",
          type: "string",
          description: "Merge method to use",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "is_pull_request_merged",
      description: "Check if a pull request has been merged",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request_review",
      description: "Create a review for a pull request",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "The body text of the review",
          required: false,
        },
        {
          name: "comments",
          type: "object array",
          description: "Comments to post as part of the review",
          required: false,
        },
        {
          name: "event",
          type: "string",
          description: "The review action to perform",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "list_pull_request_reviews",
      description: "List reviews for a pull request",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Results per page",
          required: false,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request_review_comment",
      description: "Create a review comment for a pull request",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "The text of the review comment",
          required: true,
        },
        {
          name: "commit_id",
          type: "string",
          description: "The SHA of the commit to comment on",
          required: false,
        },
        {
          name: "in_reply_to",
          type: "number",
          description: "The comment ID to reply to",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "The relative path to the file being commented on",
          required: false,
        },
        {
          name: "position",
          type: "number",
          description:
            "The position in the diff where the comment should be placed",
          required: false,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "list_pull_request_review_comments",
      description: "List review comments for a pull request",
      parameters: [
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Results per page",
          required: false,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "since",
          type: "string",
          description:
            "Only comments updated at or after this time are returned",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
      ],
    },
    {
      name: "request_reviewers",
      description: "Request reviewers for a pull request",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "reviewers",
          type: "string array",
          description: "Usernames of people to request a review from",
          required: false,
        },
        {
          name: "team_reviewers",
          type: "string array",
          description: "Names of teams to request a review from",
          required: false,
        },
      ],
    },
    {
      name: "remove_requested_reviewers",
      description: "Remove requested reviewers from a pull request",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "reviewers",
          type: "string array",
          description: "Usernames of people to remove from the review request",
          required: true,
        },
        {
          name: "team_reviewers",
          type: "string array",
          description: "Names of teams to remove from the review request",
          required: false,
        },
      ],
    },
    {
      name: "update_pull_request_branch",
      description:
        "Update a pull request branch with the latest upstream changes",
      parameters: [
        {
          name: "expected_head_sha",
          type: "string",
          description: "The expected SHA of the pull request head",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Monsoft-Solutions/model-context-protocols",
  _varName: "githubProjectManagerPlugin",
};

const solanaModelContextProtocolMcpDemoPlugin: Plugin = {
  id: "vshrjem1r4",
  name: "Solana Model Context Protocol (MCP) Demo",
  description:
    "A simple MCP server implementation that provides AI models with basic Solana RPC methods and helpful development prompts.",
  image: "https://github.com/solana-foundation.png",
  actions: [],
  githubUrl: "https://github.com/solana-foundation/solana-dev-mcp",
  _varName: "solanaModelContextProtocolMcpDemoPlugin",
};

const claudecodemcpPlugin: Plugin = {
  id: "9dj2mvzg31",
  name: "claude-code-mcp",
  description:
    "This project aims to build a Claude Code MCP server and implement its associated tools (explain\\_code, review\\_code, fix\\_code, edit\\_code, test\\_code, simulate\\_command, your\\_own\\_query). The server is implemented using Node.js and the MCP SDK. It receives tool requests from clients via Stdio, dynamically",
  image: "https://github.com/KunihiroS.png",
  actions: [],
  githubUrl: "https://github.com/KunihiroS/claude-code-mcp",
  _varName: "claudecodemcpPlugin",
};

const protonmailmcpPlugin: Plugin = {
  id: "a5wseku3kf",
  name: "protonmail-mcp",
  description:
    "This MCP server provides email sending functionality using Protonmail's SMTP service. It allows both Claude Desktop and Cline VSCode extension to send emails on your behalf using your Protonmail credentials.",
  image: "https://github.com/amotivv.png",
  actions: [],
  githubUrl: "https://github.com/amotivv/protonmail-mcp",
  _varName: "protonmailmcpPlugin",
};

const trinoMcpServerPlugin: Plugin = {
  id: "m94exir35y",
  name: "Trino MCP Server",
  description:
    "An MCP server that enables listing and querying Trino tables using Python, providing access to data resources through the Model-Control-Protocol.",
  image: "https://github.com/Dataring-engineering.png",
  actions: [],
  githubUrl: "https://github.com/Dataring-engineering/mcp-server-trino",
  _varName: "trinoMcpServerPlugin",
};

const glifPlugin: Plugin = {
  id: "gwrql5ibq2",
  name: "Glif",
  description:
    "Run AI workflows hosted on Glif.app via MCP, including ComfyUI-based image generators, meme generators, selfies, chained LLM calls, and more",
  image: "https://github.com/glifxyz.png",
  actions: [
    {
      name: "run_glif",
      description: "Run a glif with the specified ID and inputs",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of the glif to run",
          required: true,
        },
        {
          name: "inputs",
          type: "string array",
          description: "Array of input values for the glif",
          required: true,
        },
      ],
    },
    {
      name: "list_featured_glifs",
      description: "Get a curated list of featured glifs",
      parameters: [],
    },
    {
      name: "glif_info",
      description:
        "Get detailed information about a glif including input fields",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of the glif to show details for",
          required: true,
        },
      ],
    },
    {
      name: "my_glifs",
      description: "Get a list of your glifs",
      parameters: [],
    },
    {
      name: "my_glif_user_info",
      description:
        "Get detailed information about your user account, recent glifs, and recent runs",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/glifxyz/glif-mcp-server",
  _varName: "glifPlugin",
};

const settlemintPlugin: Plugin = {
  id: "2fzchi4b2a",
  name: "SettleMint",
  description:
    "Leverage SettleMint's Model Context Protocol server to seamlessly interact with enterprise blockchain infrastructure. Build, deploy, and manage smart contracts through AI-powered assistants, streamlining your blockchain development workflow for maximum efficiency.",
  image: "https://github.com/settlemint.png",
  actions: [],
  githubUrl: "https://github.com/settlemint/sdk",
  _varName: "settlemintPlugin",
};

const splunkmcpPlugin: Plugin = {
  id: "hki5qmtsib",
  name: "splunk-mcp",
  description:
    "A FastMCP-based tool for interacting with Splunk Enterprise/Cloud through natural language. This tool provides a set of capabilities for searching Splunk data, managing KV stores, and accessing Splunk resources",
  image: "https://github.com/livehybrid.png",
  actions: [],
  githubUrl: "https://github.com/livehybrid/splunk-mcp",
  _varName: "splunkmcpPlugin",
};

const xtquantaiPlugin: Plugin = {
  id: "3kfrvw2ptz",
  name: "XTQuantAI",
  description:
    "An MCP server that integrates the XTQuant quantitative trading platform with AI assistants, allowing AI to directly access and operate on trading data and functionality.",
  image: "https://github.com/dfkai.png",
  actions: [
    {
      name: "get_trading_dates",
      description: "获取指定市场的交易日期列表",
      parameters: [
        {
          name: "market",
          type: "string",
          description: "市场代码，例如 SH 表示上海市场",
          required: false,
        },
      ],
    },
    {
      name: "get_stock_list",
      description: "获取指定板块的股票列表",
      parameters: [
        {
          name: "sector",
          type: "string",
          description: "板块名称，例如 沪深A股",
          required: false,
        },
      ],
    },
    {
      name: "get_instrument_detail",
      description: "获取指定股票的详细信息",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "股票代码，例如 000001.SZ",
          required: true,
        },
        {
          name: "iscomplete",
          type: "boolean",
          description: "是否获取全部字段，默认为False",
          required: false,
        },
      ],
    },
    {
      name: "get_history_market_data",
      description: "获取历史行情数据",
      parameters: [
        {
          name: "codes",
          type: "string",
          description: '股票代码列表，用逗号分隔，例如 "000001.SZ,600519.SH"',
          required: true,
        },
        {
          name: "end_date",
          type: "string",
          description: '结束日期，格式为 "YYYYMMDD"，为空表示当前日期',
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "字段列表，用逗号分隔，为空表示所有字段",
          required: false,
        },
        {
          name: "period",
          type: "string",
          description: '周期，例如 "1d", "1m", "5m" 等',
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: '开始日期，格式为 "YYYYMMDD"',
          required: false,
        },
      ],
    },
    {
      name: "get_latest_market_data",
      description: "获取最新行情数据",
      parameters: [
        {
          name: "codes",
          type: "string",
          description: '股票代码列表，用逗号分隔，例如 "000001.SZ,600519.SH"',
          required: true,
        },
        {
          name: "period",
          type: "string",
          description: '周期，例如 "1d", "1m", "5m" 等',
          required: false,
        },
      ],
    },
    {
      name: "get_full_market_data",
      description: "获取历史+最新行情数据",
      parameters: [
        {
          name: "codes",
          type: "string",
          description: '股票代码列表，用逗号分隔，例如 "000001.SZ,600519.SH"',
          required: true,
        },
        {
          name: "end_date",
          type: "string",
          description: '结束日期，格式为 "YYYYMMDD"，为空表示当前日期',
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "字段列表，用逗号分隔，为空表示所有字段",
          required: false,
        },
        {
          name: "period",
          type: "string",
          description: '周期，例如 "1d", "1m", "5m" 等',
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: '开始日期，格式为 "YYYYMMDD"',
          required: false,
        },
      ],
    },
    {
      name: "create_chart_panel",
      description: "创建图表面板，显示指定股票的技术指标",
      parameters: [
        {
          name: "codes",
          type: "string",
          description: "股票代码列表，用逗号分隔，例如 000001.SZ,600519.SH",
          required: true,
        },
        {
          name: "indicators",
          type: "string",
          description: "指标名称，例如 ma, macd, kdj 等",
          required: false,
        },
        {
          name: "params",
          type: "string",
          description: "指标参数，用逗号分隔，例如 5,10,20",
          required: false,
        },
        {
          name: "period",
          type: "string",
          description: "周期，例如 1d, 1m, 5m 等",
          required: false,
        },
      ],
    },
    {
      name: "create_custom_layout",
      description: "创建自定义布局，可以指定指标名称、参数名和参数值",
      parameters: [
        {
          name: "codes",
          type: "string",
          description: "股票代码列表，用逗号分隔，例如 000001.SZ,600519.SH",
          required: true,
        },
        {
          name: "indicator_name",
          type: "string",
          description: "指标名称，例如 ma, macd, kdj 等",
          required: false,
        },
        {
          name: "param_names",
          type: "string",
          description: "参数名称，用逗号分隔，例如 n1,n2,n3 或 short,long,mid",
          required: false,
        },
        {
          name: "param_values",
          type: "string",
          description: "参数值，用逗号分隔，例如 5,10,20",
          required: false,
        },
        {
          name: "period",
          type: "string",
          description: "周期，例如 1d, 1m, 5m 等",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dfkai/xtquantai",
  _varName: "xtquantaiPlugin",
};

const vectorizePlugin: Plugin = {
  id: "pxwbgk0kzr",
  name: "Vectorize",
  description:
    "Vectorize MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.",
  image: "https://github.com/vectorize-io.png",
  actions: [
    {
      name: "retrieve",
      description: "Retrieve documents from a Vectorize pipeline.",
      parameters: [
        {
          name: "k",
          type: "number",
          description: "The number of documents to retrieve.",
          required: true,
        },
        {
          name: "pipelineId",
          type: "string",
          description: "The pipeline ID to retrieve documents from.",
          required: true,
        },
        {
          name: "question",
          type: "string",
          description: "The term to search for.",
          required: true,
        },
      ],
    },
    {
      name: "extract",
      description: "Perform text extraction and chunking on a document.",
      parameters: [
        {
          name: "base64Document",
          type: "string",
          description: "Document encoded in base64.",
          required: true,
        },
        {
          name: "contentType",
          type: "string",
          description: "Document content type.",
          required: true,
        },
      ],
    },
    {
      name: "deep-research",
      description: "Generate a deep research on a Vectorize pipeline.",
      parameters: [
        {
          name: "pipelineId",
          type: "string",
          description: "The pipeline ID to retrieve documents from.",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "The deep research query.",
          required: true,
        },
        {
          name: "webSearch",
          type: "boolean",
          description: "Whether to perform a web search.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/vectorize-io/vectorize-mcp-server",
  _varName: "vectorizePlugin",
};

const mcpdingdingbotserverPlugin: Plugin = {
  id: "tsjyha5637",
  name: "mcp-dingdingbot-server",
  description: "dingding webhook mcp server",
  image: "https://github.com/HundunOnline.png",
  actions: [],
  githubUrl: "https://github.com/HundunOnline/mcp-dingdingbot-server",
  _varName: "mcpdingdingbotserverPlugin",
};

const mcpServer1Plugin: Plugin = {
  id: "bvggbi28i2",
  name: "MCP Server",
  description:
    "A server that helps AI models better understand Vite/Nuxt applications, providing enhanced context awareness for development support.",
  image: "https://github.com/antfu.png",
  actions: [],
  githubUrl: "https://github.com/antfu/nuxt-mcp",
  _varName: "mcpServer1Plugin",
};

const kbmcpserverPlugin: Plugin = {
  id: "eo9jwi0b3o",
  name: "kb-mcp-server",
  description:
    'An MCP server aimed to be portable, local, easy and convenient to support semantic/graph based retrieval of txtai "all in one" embeddings database. Any txtai embeddings db in tar.gz form can be loaded',
  image: "https://github.com/Geeksfino.png",
  actions: [],
  githubUrl: "https://github.com/Geeksfino/kb-mcp-server",
  _varName: "kbmcpserverPlugin",
};

const nebulagraphMcpServerPlugin: Plugin = {
  id: "4quvyrkhy3",
  name: "NebulaGraph MCP Server",
  description:
    "A Model Context Protocol server implementation that enables LLMs to interact with NebulaGraph database for graph exploration, supporting schema understanding, queries, and graph algorithms.",
  image: "https://github.com/PsiACE.png",
  actions: [],
  githubUrl: "https://github.com/PsiACE/nebulagraph-mcp-server",
  _varName: "nebulagraphMcpServerPlugin",
};

const imagetoolsmcpPlugin: Plugin = {
  id: "ug3ciqhykv",
  name: "image-tools-mcp",
  description:
    "Image Tools MCP is a Model Context Protocol (MCP) service that retrieves image dimensions and compresses images from URLs and local files using the TinyPNG API. It supports converting images to formats like webp, jpeg/jpg, and png, providing detailed information on width, height, type, and compressi",
  image: "https://github.com/kshern.png",
  actions: [
    {
      name: "get_image_size",
      description: "Get the size of an image from URL",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Options for retrieving image size",
          required: true,
        },
      ],
    },
    {
      name: "get_local_image_size",
      description: "Get the size of a local image",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Options for retrieving local image size",
          required: true,
        },
      ],
    },
    {
      name: "compress_image_from_url",
      description:
        "Compress a single image from URL using TinyPNG API (only supports image files, not folders)",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Options for compressing image from URL",
          required: true,
        },
      ],
    },
    {
      name: "compress_local_image",
      description:
        "Compress a single local image file using TinyPNG API (only supports image files, not folders)",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Options for compressing local image",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kshern/image-tools-mcp",
  _varName: "imagetoolsmcpPlugin",
};

const stormMcpServerPlugin: Plugin = {
  id: "3cov6a6r0c",
  name: "Storm MCP Server",
  description:
    "An open protocol server that implements Anthropic's Model Context Protocol to enable seamless integration between LLM applications and RAG data sources using Sionic AI's Storm Platform.",
  image: "https://github.com/sionic-ai.png",
  actions: [],
  githubUrl: "https://github.com/sionic-ai/serverless-rag-mcp-server",
  _varName: "stormMcpServerPlugin",
};

const neo4jMcpServerPlugin: Plugin = {
  id: "zf2p4nwezq",
  name: "Neo4j MCP Server",
  description:
    "An MCP server that enables graph database interactions with Neo4j, allowing users to access and manipulate graph data through natural language commands.",
  image: "https://github.com/ujjalcal.png",
  actions: [],
  githubUrl: "https://github.com/ujjalcal/mcp",
  _varName: "neo4jMcpServerPlugin",
};

const beyondMcpServerPlugin: Plugin = {
  id: "lxmmleqcl8",
  name: "Beyond MCP Server",
  description:
    "An extensible Model Context Protocol server that provides standardized access to social platform data (currently Farcaster) and onchain data for LLMs.",
  image: "https://github.com/Beyond-Network-AI.png",
  actions: [
    {
      name: "search-content",
      description: "Action for search-content",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Social platform (farcaster, twitter, telegram)",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "get-user-profile",
      description: "Action for get-user-profile",
      parameters: [
        {
          name: "platform",
          type: "string",
          description: "Social platform (farcaster, twitter, telegram)",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description: "User ID or username on the platform",
          required: true,
        },
      ],
    },
    {
      name: "get-user-content",
      description: "Action for get-user-content",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of posts to return",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Social platform (farcaster, twitter, telegram)",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description: "User ID or username on the platform",
          required: true,
        },
      ],
    },
    {
      name: "get-thread",
      description: "Action for get-thread",
      parameters: [
        {
          name: "platform",
          type: "string",
          description: "Social platform (farcaster, twitter, telegram)",
          required: true,
        },
        {
          name: "threadId",
          type: "string",
          description: "Thread or conversation ID",
          required: true,
        },
      ],
    },
    {
      name: "get-trending-topics",
      description: "Action for get-trending-topics",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of trending topics to return",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Social platform (farcaster, twitter, telegram)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Beyond-Network-AI/beyond-mcp-server",
  _varName: "beyondMcpServerPlugin",
};

const mcpDevelopmentFrameworkPlugin: Plugin = {
  id: "i6x9dydcf7",
  name: "MCP Development Framework",
  description:
    "A powerful Model Context Protocol framework that extends Cursor IDE with tools for web content retrieval, PDF processing, and Word document parsing.",
  image: "https://github.com/aigo666.png",
  actions: [],
  githubUrl: "https://github.com/aigo666/mcp-framework",
  _varName: "mcpDevelopmentFrameworkPlugin",
};

const cryptopanicmcpserverPlugin: Plugin = {
  id: "dp6kztv7yx",
  name: "cryptopanic-mcp-server",
  description: "Provide the latest cryptocurrency news to AI agents.",
  image: "https://github.com/kukapay.png",
  actions: [
    {
      name: "get_crypto_news",
      description: "Action for get_crypto_news",
      parameters: [
        {
          name: "kind",
          type: "string",
          description: "Parameter: kind",
          required: false,
        },
        {
          name: "num_pages",
          type: "integer",
          description: "Parameter: num_pages",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kukapay/cryptopanic-mcp-server",
  _varName: "cryptopanicmcpserverPlugin",
};

const mcpslopAdapterPlugin: Plugin = {
  id: "uscbt4f9bb",
  name: "MCP-SLOP Adapter",
  description:
    "A proxy server that converts Model Context Protocol (MCP) messages to Simple Language Open Protocol (SLOP) messages, allowing MCP clients like Claude Desktop to interact with SLOP-compatible servers.",
  image: "https://github.com/kortexa-ai.png",
  actions: [],
  githubUrl: "https://github.com/kortexa-ai/mcp-slop-adapter",
  _varName: "mcpslopAdapterPlugin",
};

const adxmcpserverPlugin: Plugin = {
  id: "1yysyd147h",
  name: "adx-mcp-server",
  description:
    "AI assistants to query and analyze Azure Data Explorer databases through standardized interfaces.",
  image: "https://github.com/pab1it0.png",
  actions: [],
  githubUrl: "https://github.com/pab1it0/adx-mcp-server",
  _varName: "adxmcpserverPlugin",
};

const solanaAgentKitMcpServerPlugin: Plugin = {
  id: "6yukeoy0bb",
  name: "Solana Agent Kit MCP Server",
  description:
    "A Model Context Protocol server that enables Claude AI to interact with the Solana blockchain through a standardized interface, providing tools for transactions, account queries, and wallet management.",
  image: "https://github.com/sendaifun.png",
  actions: [],
  githubUrl: "https://github.com/sendaifun/solana-mcp",
  _varName: "solanaAgentKitMcpServerPlugin",
};

const nilemcpPlugin: Plugin = {
  id: "q6uaq3i3z7",
  name: "nile-mcp",
  description:
    "MCP server for Nile Database - Manage and query databases, tenants, users, auth using LLMs",
  image: "https://github.com/niledatabase.png",
  actions: [],
  githubUrl: "https://github.com/niledatabase/nile-mcp-server",
  _varName: "nilemcpPlugin",
};

const mcpCommandProxyPlugin: Plugin = {
  id: "r6mkzp5rs4",
  name: "MCP Command Proxy",
  description:
    "A proxy server that enables AI assistants to run and interact with command-line applications like Expo through the Model Context Protocol (MCP), capturing logs and allowing keypress forwarding.",
  image: "https://github.com/Hormold.png",
  actions: [],
  githubUrl: "https://github.com/Hormold/mcp-command-proxy",
  _varName: "mcpCommandProxyPlugin",
};

const memoryBankMcpPlugin: Plugin = {
  id: "riei9a6dhx",
  name: "Memory Bank MCP",
  description:
    "Memory Bank Server provides a set of tools and resources for AI assistants to interact with Memory Banks. Memory Banks are structured repositories of information that help maintain context and track progress across multiple sessions.",
  image: "https://github.com/movibe.png",
  actions: [
    {
      name: "initialize_memory_bank",
      description: "Initialize a Memory Bank in the specified directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path where the Memory Bank will be initialized",
          required: true,
        },
      ],
    },
    {
      name: "set_memory_bank_path",
      description: "Set a custom path for the Memory Bank",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Custom path for the Memory Bank. If not provided, the current directory will be used.",
          required: false,
        },
      ],
    },
    {
      name: "debug_mcp_config",
      description: "Debug the current MCP configuration",
      parameters: [
        {
          name: "verbose",
          type: "boolean",
          description: "Whether to include detailed information",
          required: false,
        },
      ],
    },
    {
      name: "read_memory_bank_file",
      description: "Read a file from the Memory Bank",
      parameters: [
        {
          name: "filename",
          type: "string",
          description: "Name of the file to read",
          required: true,
        },
      ],
    },
    {
      name: "write_memory_bank_file",
      description: "Write to a Memory Bank file",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "filename",
          type: "string",
          description: "Name of the file to write",
          required: true,
        },
      ],
    },
    {
      name: "list_memory_bank_files",
      description: "List Memory Bank files",
      parameters: [
        {
          name: "random_string",
          type: "string",
          description: "Dummy parameter for no-parameter tools",
          required: true,
        },
      ],
    },
    {
      name: "get_memory_bank_status",
      description: "Check Memory Bank status",
      parameters: [
        {
          name: "random_string",
          type: "string",
          description: "Dummy parameter for no-parameter tools",
          required: true,
        },
      ],
    },
    {
      name: "migrate_file_naming",
      description:
        "Migrate Memory Bank files from camelCase to kebab-case naming convention",
      parameters: [
        {
          name: "random_string",
          type: "string",
          description: "Dummy parameter for no-parameter tools",
          required: true,
        },
      ],
    },
    {
      name: "track_progress",
      description: "Track progress and update Memory Bank files",
      parameters: [
        {
          name: "action",
          type: "string",
          description:
            "Action performed (e.g., 'Implemented feature', 'Fixed bug')",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed description of the progress",
          required: true,
        },
        {
          name: "updateActiveContext",
          type: "boolean",
          description: "Whether to update the active context file",
          required: false,
        },
      ],
    },
    {
      name: "update_active_context",
      description: "Update the active context file",
      parameters: [
        {
          name: "issues",
          type: "string array",
          description: "List of known issues",
          required: false,
        },
        {
          name: "nextSteps",
          type: "string array",
          description: "List of next steps",
          required: false,
        },
        {
          name: "tasks",
          type: "string array",
          description: "List of ongoing tasks",
          required: false,
        },
      ],
    },
    {
      name: "log_decision",
      description: "Log a decision in the decision log",
      parameters: [
        {
          name: "alternatives",
          type: "string array",
          description: "Alternatives considered",
          required: false,
        },
        {
          name: "consequences",
          type: "string array",
          description: "Consequences of the decision",
          required: false,
        },
        {
          name: "context",
          type: "string",
          description: "Decision context",
          required: true,
        },
        {
          name: "decision",
          type: "string",
          description: "The decision made",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Decision title",
          required: true,
        },
      ],
    },
    {
      name: "switch_mode",
      description: "Switches to a specific mode",
      parameters: [
        {
          name: "mode",
          type: "string",
          description:
            "Name of the mode to switch to (architect, ask, code, debug, test)",
          required: true,
        },
      ],
    },
    {
      name: "get_current_mode",
      description: "Gets information about the current mode",
      parameters: [],
    },
    {
      name: "process_umb_command",
      description: "Processes the Update Memory Bank (UMB) command",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Complete UMB command",
          required: true,
        },
      ],
    },
    {
      name: "complete_umb",
      description: "Completes the Update Memory Bank (UMB) process",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/movibe/memory-bank-mcp",
  _varName: "memoryBankMcpPlugin",
};

const fastapimcpPlugin: Plugin = {
  id: "otm6rcvu3e",
  name: "FastAPI-MCP",
  description:
    "A zero-configuration tool that automatically exposes FastAPI endpoints as Model Context Protocol (MCP) tools, allowing LLM systems like Claude to interact with your API without additional coding.",
  image: "https://github.com/tadata-org.png",
  actions: [],
  githubUrl: "https://github.com/tadata-org/fastapi_mcp",
  _varName: "fastapimcpPlugin",
};

const fastapiMcpSsePlugin: Plugin = {
  id: "3cw73h6fyg",
  name: "FastAPI MCP SSE",
  description:
    "A Server-Sent Events implementation using FastAPI framework that integrates Model Context Protocol (MCP), allowing AI models to access external tools and data sources like weather information.",
  image: "https://github.com/panz2018.png",
  actions: [],
  githubUrl: "https://github.com/panz2018/fastapi_mcp_sse",
  _varName: "fastapiMcpSsePlugin",
};

const gitingestmcpPlugin: Plugin = {
  id: "g0dylqhn3h",
  name: "Gitingest-MCP",
  description:
    "An MCP server for gitingest. It allows MCP clients like Claude Desktop, Cursor, Cline etc to quickly extract information about Github repositories including repository summaries, project directory structure, file contents, etc",
  image: "https://github.com/puravparab.png",
  actions: [
    {
      name: "git_summary",
      description:
        "\n\tGet a summary of a GitHub repository that includes \n\t\t- Repo name, \n\t\t- Files in repo\n\t\t- Number of tokens in repo\n\t\t- Summary from the README.md\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tbranch: Optional branch name (default: None)\n\t",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Parameter: branch",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
    {
      name: "git_tree",
      description:
        "\n\tGet the tree structure of a GitHub repository\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tbranch: Optional branch name (default: None)\n\t",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Parameter: branch",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
    {
      name: "git_files",
      description:
        "\n\tGet the content of specific files from a GitHub repository\n\n\tArgs:\n\t\towner: The GitHub organization or username\n\t\trepo: The repository name\n\t\tfile_paths: List of paths to files within the repository\n\t\tbranch: Optional branch name (default: None)\n\t",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Parameter: branch",
          required: false,
        },
        {
          name: "file_paths",
          type: "string array",
          description: "Parameter: file_paths",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/puravparab/Gitingest-MCP",
  _varName: "gitingestmcpPlugin",
};

const tfmcpPlugin: Plugin = {
  id: "egi85wpgv5",
  name: "tfmcp",
  description:
    "🌍 Terraform Model Context Protocol (MCP) Tool - An experimental CLI tool that enables AI assistants to manage and operate Terraform environments. Supports reading Terraform configurations, analyzing plans, applying configurations, and managing state with Claude Desktop integration. ⚡️",
  image: "https://github.com/nwiizo.png",
  actions: [],
  githubUrl: "https://github.com/nwiizo/tfmcp",
  _varName: "tfmcpPlugin",
};

const duckduckgoMcpServerPlugin: Plugin = {
  id: "34fhy9xb9w",
  name: "DuckDuckGo MCP Server",
  description:
    "A Model Context Protocol server that provides DuckDuckGo search functionality for Claude, enabling web search capabilities through a clean tool interface with rate limiting support.",
  image: "https://github.com/zhsama.png",
  actions: [
    {
      name: "duckduckgo_web_search",
      description:
        "Performs a web search using the DuckDuckGo, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports content filtering and region-specific searches. Maximum 20 results per request.",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of results (1-20, default 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (max 400 chars)",
          required: true,
        },
        {
          name: "safeSearch",
          type: "string",
          description: "SafeSearch level (strict, moderate, off)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zhsama/duckduckgo-mcp-server",
  _varName: "duckduckgoMcpServerPlugin",
};

const gitAutoCommitMcpServerPlugin: Plugin = {
  id: "xm2dqoc1s6",
  name: "Git Auto Commit MCP Server",
  description:
    "Analyzes git changes in repositories and generates conventional commit messages using OpenAI's GPT models, supporting both staged and unstaged changes with detailed summaries.",
  image: "https://github.com/jatinsandilya.png",
  actions: [
    {
      name: "git-changes-commit-message",
      description: "Analyzes current git changes and provides a commit message",
      parameters: [
        {
          name: "autoCommitPath",
          type: "string",
          description: "Optional path to analyze specific directory/file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jatinsandilya/mcp-server-auto-commit",
  _varName: "gitAutoCommitMcpServerPlugin",
};

const mcpserverairbnbPlugin: Plugin = {
  id: "beo8og6djz",
  name: "mcp-server-airbnb",
  description:
    "Search for Airbnb listings and get detailed information about specific properties. Effortlessly plan your next trip with structured data and no API key required, while respecting Airbnb's guidelines.",
  image: "https://github.com/openbnb-org.png",
  actions: [],
  githubUrl: "https://github.com/openbnb-org/mcp-server-airbnb",
  _varName: "mcpserverairbnbPlugin",
};

const mcpDatabricksServerPlugin: Plugin = {
  id: "f6iwwyxvnq",
  name: "MCP Databricks Server",
  description:
    "This is a Model Context Protocol (MCP) server for executing SQL queries against Databricks using the Statement Execution API.\nIt enables AI assistants to directly query Databricks data warehouses, analyze database schemas, and retrieve query results in a structured format",
  image: "https://github.com/RafaelCartenet.png",
  actions: [],
  githubUrl: "https://github.com/RafaelCartenet/mcp-databricks-server",
  _varName: "mcpDatabricksServerPlugin",
};

const codeMcpPlugin: Plugin = {
  id: "utkbo1r9z3",
  name: "Code MCP",
  description:
    "A multi-purpose MCP for coding with Claude Sonnet that enables reading/writing files with git integration, requiring explicit repository opt-in for safety.",
  image: "https://github.com/ezyang.png",
  actions: [],
  githubUrl: "https://github.com/ezyang/codemcp",
  _varName: "codeMcpPlugin",
};

const modelControlPlaneMcpServerPlugin: Plugin = {
  id: "omow6idbzl",
  name: "Model Control Plane (MCP) Server",
  description:
    "A server implementation that provides a unified interface for OpenAI services, Git repository analysis, and local filesystem operations through REST API endpoints.",
  image: "https://github.com/dvladimirov.png",
  actions: [],
  githubUrl: "https://github.com/dvladimirov/MCP",
  _varName: "modelControlPlaneMcpServerPlugin",
};

const mcpCreateServerPlugin: Plugin = {
  id: "lnl6xjkkeq",
  name: "MCP Create Server",
  description:
    "A dynamic service that creates and manages Model Context Protocol (MCP) servers, allowing users to spawn, customize, and control multiple MCP servers as child processes.",
  image: "https://github.com/tesla0225.png",
  actions: [
    {
      name: "create-server-from-template",
      description:
        'Create a new MCP server from a template.\n  \n  以下のテンプレートコードをベースに、ユーザーの要求に合わせたサーバーを実装してください。\n  言語に応じて適切なテンプレートを選択し、必要に応じて機能を追加・変更してください。\n  \n  TypeScriptテンプレート:\n  ```typescript\n  import { Server } from "@modelcontextprotocol/sdk/server/index.js";\n  import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\n  import { \n    CallToolRequestSchema, \n    ListToolsRequestSchema \n  } from "@modelcontextprotocol/sdk/types.js";\n\n  const server = new Server({\n    name: "dynamic-test-server",\n    version: "1.0.0"\n  }, {\n    capabilities: {\n      tools: {}\n    }\n  });\n\n  // ここでツールを実装してください\n  server.setRequestHandler(ListToolsRequestSchema, async () => {\n    return {\n      tools: [{\n        name: "echo",\n        description: "Echo back a message",\n        inputSchema: {\n          type: "object",\n          properties: {\n            message: { type: "string" }\n          },\n          required: ["message"]\n        }\n      }]\n    };\n  });\n\n  server.setRequestHandler(CallToolRequestSchema, async (request) => {\n    if (request.params.name === "echo") {\n      // TypeScriptの型を適切に扱うため、型アサーションを使用\n      const message = request.params.arguments.message as string;\n      // または any を使う: const message: any = request.params.arguments.message;\n      \n      return {\n        content: [\n          {\n            type: "text",\n            text: `Echo: ${message}`\n          }\n        ]\n      };\n    }\n    throw new Error("Tool not found");\n  });\n\n  // Server startup\n  const transport = new StdioServerTransport();\n  server.connect(transport);\n  ```\n  \n  Pythonテンプレート:\n  ```python\n  import asyncio\n  from mcp.server import Server\n  from mcp.server.stdio import stdio_server\n\n  app = Server("dynamic-test-server")\n\n  @app.list_tools()\n  async def list_tools():\n      return [\n          {\n              "name": "echo",\n              "description": "Echo back a message",\n              "inputSchema": {\n                  "type": "object",\n                  "properties": {\n                      "message": {"type": "string"}\n                  },\n                  "required": ["message"]\n              }\n          }\n      ]\n\n  @app.call_tool()\n  async def call_tool(name, arguments):\n      if name == "echo":\n          return [{"type": "text", "text": f"Echo: {arguments.get(\'message\')}"}]\n      raise ValueError(f"Tool not found: {name}")\n\n  async def main():\n      async with stdio_server() as streams:\n          await app.run(\n              streams[0],\n              streams[1],\n              app.create_initialization_options()\n          )\n\n  if __name__ == "__main__":\n      asyncio.run(main())\n  ```\n  \n  注意事項：\n  - TypeScript実装時は、引数の型を適切に扱うために型アサーション（as string）を使用するか、\n    明示的に型を宣言してください（例：const value: string = request.params.arguments.someValue）。\n  - 複雑な型を扱う場合は、interface や type を定義して型安全性を確保することをお勧めします。\n  \n  ユーザーの要求に応じて上記のテンプレートを参考にカスタマイズしてください。その際、基本的な構造を維持しつつ、ツール名や機能を変更できます。',
      parameters: [
        {
          name: "code",
          type: "string",
          description:
            "カスタマイズしたサーバーコード。テンプレートを元に変更したコードを入力してください。省略した場合はデフォルトのテンプレートが使用されます。",
          required: false,
        },
        {
          name: "dependencies",
          type: "object",
          description:
            '使用するライブラリとそのバージョン（例: { "axios": "^1.0.0" }）',
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "The programming language for the template",
          required: true,
        },
      ],
    },
    {
      name: "execute-tool",
      description: "Execute a tool on a server",
      parameters: [
        {
          name: "args",
          type: "object",
          description: "The arguments to pass to the tool",
          required: false,
        },
        {
          name: "serverId",
          type: "string",
          description: "The ID of the server",
          required: true,
        },
        {
          name: "toolName",
          type: "string",
          description: "The name of the tool to execute",
          required: true,
        },
      ],
    },
    {
      name: "get-server-tools",
      description: "Get the tools available on a server",
      parameters: [
        {
          name: "serverId",
          type: "string",
          description: "The ID of the server",
          required: true,
        },
      ],
    },
    {
      name: "delete-server",
      description: "Delete a server",
      parameters: [
        {
          name: "serverId",
          type: "string",
          description: "The ID of the server",
          required: true,
        },
      ],
    },
    {
      name: "list-servers",
      description: "List all running servers",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/tesla0225/mcp-create",
  _varName: "mcpCreateServerPlugin",
};

const microsoftSqlServerMcpServerMssqlPlugin: Plugin = {
  id: "0lv3gmnuoe",
  name: "Microsoft SQL Server MCP Server (MSSQL)",
  description:
    "An easy-to-use bridge that lets AI assistants like Claude and Cursor IDE directly query and explore Microsoft SQL Server databases. No coding experience required!",
  image: "https://github.com/dperussina.png",
  actions: [],
  githubUrl: "https://github.com/dperussina/mssql-mcp-server",
  _varName: "microsoftSqlServerMcpServerMssqlPlugin",
};

const mcpNodeFetchPlugin: Plugin = {
  id: "ji7r8nq9wk",
  name: "MCP Node Fetch",
  description:
    "An MCP server that enables fetching web content using the Node.js undici library, supporting various HTTP methods, content formats, and request configurations.",
  image: "https://github.com/mcollina.png",
  actions: [],
  githubUrl: "https://github.com/mcollina/mcp-node-fetch",
  _varName: "mcpNodeFetchPlugin",
};

const mongodbLensPlugin: Plugin = {
  id: "hniehmvmgn",
  name: "MongoDB Lens",
  description: "Full featured MCP Server for MongoDB database analysis.",
  image: "https://github.com/furey.png",
  actions: [],
  githubUrl: "https://github.com/furey/mongodb-lens",
  _varName: "mongodbLensPlugin",
};

const redashMcpServerPlugin: Plugin = {
  id: "j9bl90s3tw",
  name: "Redash MCP Server",
  description:
    "Model Context Protocol (MCP) server that integrates Redash with AI assistants like Claude, allowing them to query data, manage visualizations, and interact with dashboards through natural language.",
  image: "https://github.com/suthio.png",
  actions: [
    {
      name: "list-queries",
      description: "List all available queries in Redash",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
      ],
    },
    {
      name: "get-query",
      description: "Get details of a specific query",
      parameters: [
        {
          name: "queryId",
          type: "number",
          description: "ID of the query to get",
          required: true,
        },
      ],
    },
    {
      name: "create-query",
      description: "Create a new query in Redash",
      parameters: [
        {
          name: "data_source_id",
          type: "number",
          description: "ID of the data source to use",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the query",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the query",
          required: true,
        },
        {
          name: "options",
          type: "object",
          description: "Query options",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "SQL query text",
          required: true,
        },
        {
          name: "schedule",
          type: "object",
          description: "Query schedule",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags for the query",
          required: false,
        },
      ],
    },
    {
      name: "update-query",
      description: "Update an existing query in Redash",
      parameters: [
        {
          name: "data_source_id",
          type: "number",
          description: "ID of the data source to use",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the query",
          required: false,
        },
        {
          name: "is_archived",
          type: "boolean",
          description: "Whether the query is archived",
          required: false,
        },
        {
          name: "is_draft",
          type: "boolean",
          description: "Whether the query is a draft",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name of the query",
          required: false,
        },
        {
          name: "options",
          type: "object",
          description: "Query options",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "SQL query text",
          required: false,
        },
        {
          name: "queryId",
          type: "number",
          description: "ID of the query to update",
          required: true,
        },
        {
          name: "schedule",
          type: "object",
          description: "Query schedule",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags for the query",
          required: false,
        },
      ],
    },
    {
      name: "archive-query",
      description: "Archive (soft-delete) a query in Redash",
      parameters: [
        {
          name: "queryId",
          type: "number",
          description: "ID of the query to archive",
          required: true,
        },
      ],
    },
    {
      name: "list-data-sources",
      description: "List all available data sources in Redash",
      parameters: [],
    },
    {
      name: "execute-query",
      description: "Execute a Redash query and return results",
      parameters: [
        {
          name: "parameters",
          type: "object",
          description: "Parameters to pass to the query (if any)",
          required: false,
        },
        {
          name: "queryId",
          type: "number",
          description: "ID of the query to execute",
          required: true,
        },
      ],
    },
    {
      name: "list-dashboards",
      description: "List all available dashboards in Redash",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
      ],
    },
    {
      name: "get-dashboard",
      description: "Get details of a specific dashboard",
      parameters: [
        {
          name: "dashboardId",
          type: "number",
          description: "ID of the dashboard to get",
          required: true,
        },
      ],
    },
    {
      name: "get-visualization",
      description: "Get details of a specific visualization",
      parameters: [
        {
          name: "visualizationId",
          type: "number",
          description: "ID of the visualization to get",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/suthio/redash-mcp",
  _varName: "redashMcpServerPlugin",
};

const memeMcpServerPlugin: Plugin = {
  id: "d316l4kyh7",
  name: "Meme MCP Server",
  description:
    "A simple Model Context Protocol server that allows AI models to generate meme images using the ImgFlip API, enabling users to create memes from text prompts.",
  image: "https://github.com/haltakov.png",
  actions: [
    {
      name: "generateMeme",
      description:
        "Generate a meme image from Imgflip using the numeric template id and text",
      parameters: [
        {
          name: "templateNumericId",
          type: "string",
          description: "Parameter: templateNumericId",
          required: true,
        },
        {
          name: "text0",
          type: "string",
          description: "Parameter: text0",
          required: true,
        },
        {
          name: "text1",
          type: "string",
          description: "Parameter: text1",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/haltakov/meme-mcp",
  _varName: "memeMcpServerPlugin",
};

const mcpomnisearchPlugin: Plugin = {
  id: "gz5wgmptd8",
  name: "mcp-omnisearch",
  description:
    "🔍 A Model Context Protocol (MCP) server providing unified access to multiple search engines (Tavily, Brave, Kagi), AI tools (Perplexity, FastGPT), and content processing services (Jina AI, Kagi). Combines search, AI responses, content processing, and enhancement features through a single interface.",
  image: "https://github.com/spences10.png",
  actions: [],
  githubUrl: "https://github.com/spences10/mcp-omnisearch",
  _varName: "mcpomnisearchPlugin",
};

const exploriumAgentsourceMcpServerPlugin: Plugin = {
  id: "1watb239rc",
  name: "Explorium AgentSource MCP Server",
  description:
    "Explorium AgentSource MCP Server empowers every agent to become an AI-driven, Go-To-Market specialized agent! With over 20 specialized endpoints designed for prospecting, sales, and lead generation, agents can effortlessly generate and enrich accounts and prospects, access deep business insights, an",
  image: "https://github.com/explorium-ai.png",
  actions: [],
  githubUrl: "https://github.com/explorium-ai/mcp-explorium",
  _varName: "exploriumAgentsourceMcpServerPlugin",
};

const mcpServerTemplatePlugin: Plugin = {
  id: "vnt96edg3a",
  name: "MCP Server Template",
  description:
    "A starter template for building Model Context Protocol servers that can be integrated with Cursor or Claude Desktop, allowing developers to create custom tools and extensions for AI assistants.",
  image: "https://github.com/jatinsandilya.png",
  actions: [
    {
      name: "sample-tool",
      description: "A sample tool for demonstration purposes",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "Input parameter for the sample tool",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jatinsandilya/mcp-server-template",
  _varName: "mcpServerTemplatePlugin",
};

const databuttonMcpServerPlugin: Plugin = {
  id: "wfr9djhfnu",
  name: "Databutton MCP Server",
  description:
    "An MCP server for doing doing initial app planning and creating a good starting point in Databutton – it starts a new app and generates the initial MVP tasks",
  image: "https://github.com/databutton.png",
  actions: [
    {
      name: "submit_app_requirements",
      description: "Submit app requirements",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the app",
          required: true,
        },
        {
          name: "pitch",
          type: "string",
          description: "The pitch for the app",
          required: true,
        },
        {
          name: "spec",
          type: "object",
          description: "Parameter: spec",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/databutton/databutton-mcp",
  _varName: "databuttonMcpServerPlugin",
};

const unofficialDubcomcpserverPlugin: Plugin = {
  id: "0tvsbwmk8m",
  name: "Unofficial dubco-mcp-server",
  description:
    "A Model Context Protocol server that enables AI assistants to create, update, and delete Dub.co short links through the Dub.co API.",
  image: "https://github.com/Gitmaxd.png",
  actions: [
    {
      name: "create_link",
      description:
        "Create a new short link on dub.co, asking the user which domain to use",
      parameters: [
        {
          name: "domain",
          type: "string",
          description:
            "Optional domain slug to use. If not provided, the primary domain will be used.",
          required: false,
        },
        {
          name: "externalId",
          type: "string",
          description: "Optional external ID for the link",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description:
            "Optional custom slug for the short link. If not provided, a random slug will be generated.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The destination URL to shorten",
          required: true,
        },
      ],
    },
    {
      name: "update_link",
      description: "Update an existing short link on dub.co",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "The new domain for the short link",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "The new slug for the short link",
          required: false,
        },
        {
          name: "linkId",
          type: "string",
          description: "The ID of the link to update",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "The new destination URL",
          required: false,
        },
      ],
    },
    {
      name: "delete_link",
      description: "Delete a short link on dub.co",
      parameters: [
        {
          name: "linkId",
          type: "string",
          description: "The ID of the link to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Gitmaxd/dubco-mcp-server-npm",
  _varName: "unofficialDubcomcpserverPlugin",
};

const deskaidPlugin: Plugin = {
  id: "vujkyr83by",
  name: "Deskaid",
  description:
    "An MCP server that provides tools for reading, writing, and editing files on the local filesystem.",
  image: "https://github.com/ezyang.png",
  actions: [
    {
      name: "deskaid",
      description:
        "\n    This is a multipurpose tool that supports the following subcommands:\n\n    ## ReadFile file_path offset? limit?\n\n    Reads a file from the local filesystem. The file_path parameter must be an absolute path, not a relative path. By default, it reads up to ${MAX_LINES_TO_READ} lines starting from the beginning of the file. You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters. Any lines longer than ${MAX_LINE_LENGTH} characters will be truncated. For image files, the tool will display the image for you.\n\n    ## WriteFile file_path content\n\n    Write a file to the local filesystem. Overwrites the existing file if there is one.\n\n    Before using this tool:\n\n    1. Use the ReadFile tool to understand the file's contents and context\n\n    2. Directory Verification (only applicable when creating new files):\n       - Use the LS tool to verify the parent directory exists and is the correct location\n\n    ## EditFile file_path old_string new_string\n\n    This is a tool for editing files. For larger edits, use the Write tool to overwrite files.\n\n    Before using this tool:\n\n    1. Use the View tool to understand the file's contents and context\n\n    2. Verify the directory path is correct (only applicable when creating new files):\n       - Use the LS tool to verify the parent directory exists and is the correct location\n\n    To make a file edit, provide the following:\n    1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n    2. old_string: The text to replace (must be unique within the file, and must match the file contents exactly, including all whitespace and indentation)\n    3. new_string: The edited text to replace the old_string\n\n    The tool will replace ONE occurrence of old_string with new_string in the specified file.\n\n    CRITICAL REQUIREMENTS FOR USING THIS TOOL:\n\n    1. UNIQUENESS: The old_string MUST uniquely identify the specific instance you want to change. This means:\n       - Include AT LEAST 3-5 lines of context BEFORE the change point\n       - Include AT LEAST 3-5 lines of context AFTER the change point\n       - Include all whitespace, indentation, and surrounding code exactly as it appears in the file\n\n    2. SINGLE INSTANCE: This tool can only change ONE instance at a time. If you need to change multiple instances:\n       - Make separate calls to this tool for each instance\n       - Each call must uniquely identify its specific instance using extensive context\n\n    3. VERIFICATION: Before using this tool:\n       - Check how many instances of the target text exist in the file\n       - If multiple instances exist, gather enough context to uniquely identify each one\n       - Plan separate tool calls for each instance\n\n    WARNING: If you do not follow these requirements:\n       - The tool will fail if old_string matches multiple locations\n       - The tool will fail if old_string doesn't match exactly (including whitespace)\n       - You may change the wrong instance if you don't include enough context\n\n    When making edits:\n       - Ensure the edit results in idiomatic, correct code\n       - Do not leave the code in a broken state\n       - Always use absolute file paths (starting with /)\n\n    If you want to create a new file, use:\n       - A new file path, including dir name if needed\n       - An empty old_string\n       - The new file's contents as new_string\n\n    Remember: when making multiple file edits in a row to the same file, you should prefer to send all edits in a single message with multiple calls to this tool, rather than multiple messages with a single call each.\n\n    ## LS directory_path\n\n    Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You should generally prefer the Glob and Grep tools, if you know which directories to search.\n\n    Args:\n        ctx: The MCP context\n        command: The subcommand to execute (ReadFile, WriteFile, EditFile, LS)\n        file_path: The path to the file or directory to operate on\n        content: Content for WriteFile command\n        old_string: String to replace for EditFile command\n        new_string: Replacement string for EditFile command\n        offset: Line offset for ReadFile command\n        limit: Line limit for ReadFile command\n    ",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: false,
        },
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "new_string",
          type: "string",
          description: "Parameter: new_string",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "old_string",
          type: "string",
          description: "Parameter: old_string",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ezyang/codemcp",
  _varName: "deskaidPlugin",
};

const claudeCodeMcpPlugin: Plugin = {
  id: "nqo1hvazke",
  name: "Claude Code MCP",
  description:
    "An implementation of Claude Code as a Model Context Protocol server that enables using Claude's software engineering capabilities (code generation, editing, reviewing, and file operations) through the standardized MCP interface.",
  image: "https://github.com/auchenberg.png",
  actions: [
    {
      name: "bash",
      description: "Execute a shell command",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "The shell command to execute",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Optional timeout in milliseconds (max 600000)",
          required: false,
        },
      ],
    },
    {
      name: "readFile",
      description: "Read a file from the local filesystem",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "The absolute path to the file to read",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "The number of lines to read",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "The line number to start reading from",
          required: false,
        },
      ],
    },
    {
      name: "listFiles",
      description: "Lists files and directories in a given path",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "The absolute path to the directory to list",
          required: true,
        },
      ],
    },
    {
      name: "searchGlob",
      description: "Search for files matching a pattern",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "The directory to search in. Defaults to the current working directory.",
          required: false,
        },
        {
          name: "pattern",
          type: "string",
          description: "The glob pattern to match files against",
          required: true,
        },
      ],
    },
    {
      name: "grep",
      description: "Search for text in files",
      parameters: [
        {
          name: "include",
          type: "string",
          description:
            'File pattern to include in the search (e.g. "*.js", "*.{ts,tsx}")',
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "The directory to search in. Defaults to the current working directory.",
          required: false,
        },
        {
          name: "pattern",
          type: "string",
          description:
            "The regular expression pattern to search for in file contents",
          required: true,
        },
      ],
    },
    {
      name: "think",
      description: "A tool for thinking through complex problems",
      parameters: [
        {
          name: "thought",
          type: "string",
          description: "Your thoughts",
          required: true,
        },
      ],
    },
    {
      name: "codeReview",
      description: "Review code for bugs, security issues, and best practices",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "The code to review",
          required: true,
        },
      ],
    },
    {
      name: "editFile",
      description: "Create or edit a file",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The new content for the file",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "The absolute path to the file to edit",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/auchenberg/claude-code-mcp",
  _varName: "claudeCodeMcpPlugin",
};

const cryoMcpServerPlugin: Plugin = {
  id: "90ftd26na5",
  name: "Cryo MCP Server",
  description:
    "An API server that implements the Model Completion Protocol (MCP) for Cryo blockchain data extraction, allowing users to query Ethereum blockchain data through any MCP-compatible client.",
  image: "https://github.com/z80dev.png",
  actions: [
    {
      name: "list_datasets",
      description: "Return a list of all available cryo datasets",
      parameters: [],
    },
    {
      name: "query_dataset",
      description:
        "\n    Query a cryo dataset and return the results\n\n    Args:\n        dataset: The name of the dataset to query (e.g., 'logs', 'transactions')\n        blocks: Block range specification as a string (e.g., '1000:1010')\n        start_block: Start block number as integer (alternative to blocks)\n        end_block: End block number as integer (alternative to blocks)\n        use_latest: If True, query the latest block\n        blocks_from_latest: Number of blocks before the latest to include (e.g., 10 = latest-10 to latest)\n        contract: Contract address to filter by\n        output_format: Output format (json, csv, parquet)\n        include_columns: Columns to include alongside the defaults\n        exclude_columns: Columns to exclude from the defaults\n\n    Returns:\n        The dataset results\n    ",
      parameters: [
        {
          name: "blocks",
          type: "string",
          description: "Parameter: blocks",
          required: false,
        },
        {
          name: "blocks_from_latest",
          type: "string",
          description: "Parameter: blocks_from_latest",
          required: false,
        },
        {
          name: "contract",
          type: "string",
          description: "Parameter: contract",
          required: false,
        },
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "end_block",
          type: "string",
          description: "Parameter: end_block",
          required: false,
        },
        {
          name: "exclude_columns",
          type: "string",
          description: "Parameter: exclude_columns",
          required: false,
        },
        {
          name: "include_columns",
          type: "string",
          description: "Parameter: include_columns",
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description: "Parameter: output_format",
          required: false,
        },
        {
          name: "start_block",
          type: "string",
          description: "Parameter: start_block",
          required: false,
        },
        {
          name: "use_latest",
          type: "boolean",
          description: "Parameter: use_latest",
          required: false,
        },
      ],
    },
    {
      name: "lookup_dataset",
      description:
        "\n    Look up a specific dataset and return detailed information about it\n    \n    Args:\n        name: The name of the dataset to look up\n        sample_start_block: Optional start block for sample data (integer)\n        sample_end_block: Optional end block for sample data (integer)\n        use_latest_sample: If True, use the latest block for sample data\n        sample_blocks_from_latest: Number of blocks before the latest to include in sample\n        \n    Returns:\n        Detailed information about the dataset including schema and available fields\n    ",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "sample_blocks_from_latest",
          type: "string",
          description: "Parameter: sample_blocks_from_latest",
          required: false,
        },
        {
          name: "sample_end_block",
          type: "string",
          description: "Parameter: sample_end_block",
          required: false,
        },
        {
          name: "sample_start_block",
          type: "string",
          description: "Parameter: sample_start_block",
          required: false,
        },
        {
          name: "use_latest_sample",
          type: "boolean",
          description: "Parameter: use_latest_sample",
          required: false,
        },
      ],
    },
    {
      name: "get_transaction_by_hash",
      description:
        "\n    Get detailed information about a transaction by its hash\n    \n    Args:\n        tx_hash: The transaction hash to look up\n        \n    Returns:\n        Detailed information about the transaction\n    ",
      parameters: [
        {
          name: "tx_hash",
          type: "string",
          description: "Parameter: tx_hash",
          required: true,
        },
      ],
    },
    {
      name: "get_latest_ethereum_block",
      description:
        "\n    Get information about the latest Ethereum block\n    \n    Returns:\n        Information about the latest block including block number\n    ",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/z80dev/cryo-mcp",
  _varName: "cryoMcpServerPlugin",
};

const androidMcpServerPlugin: Plugin = {
  id: "noi5kgoh33",
  name: "Android MCP Server",
  description:
    "A server enabling programmatic control over Android devices through ADB, providing capabilities like screenshot capture, UI layout analysis, and package management that can be accessed by MCP clients like Claude Desktop.",
  image: "https://github.com/minhalvp.png",
  actions: [],
  githubUrl: "https://github.com/minhalvp/android-mcp-server",
  _varName: "androidMcpServerPlugin",
};

const xtbapiserverPlugin: Plugin = {
  id: "4pw9haj5up",
  name: "XTBApiServer",
  description:
    "An MCP server that exposes the XTB trading API, allowing users to interact with their XTB trading accounts through the Model Context Protocol to perform operations like account management, market data retrieval, and trade execution.",
  image: "https://github.com/sharplygroup.png",
  actions: [],
  githubUrl: "https://github.com/sharplygroup/xtb-mcp-server",
  _varName: "xtbapiserverPlugin",
};

const webglmcpServerPlugin: Plugin = {
  id: "l5zh0e3z4x",
  name: "WebGL-MCP Server",
  description:
    "A Model Context Protocol server that provides tools to analyze and optimize WebGL games, offering performance insights, memory usage analysis, and template-specific optimization suggestions.",
  image: "https://github.com/grokadegames.png",
  actions: [
    {
      name: "analyze-webgl",
      description: "Action for analyze-webgl",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to WebGL build folder or index.html file",
          required: true,
        },
      ],
    },
    {
      name: "optimize-webgl",
      description: "Action for optimize-webgl",
      parameters: [
        {
          name: "memoryLimit",
          type: "number",
          description: "Memory limit in MB",
          required: false,
        },
        {
          name: "optimizationGoals",
          type: "string array",
          description: "Optimization goals in order of priority",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path to WebGL build folder or index.html file",
          required: true,
        },
        {
          name: "targetFPS",
          type: "number",
          description: "Target frames per second",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/grokadegames/webgl-mcp",
  _varName: "webglmcpServerPlugin",
};

const targetprocessMcpServerPlugin: Plugin = {
  id: "r67qn2xf6t",
  name: "Targetprocess MCP Server",
  description:
    "Provides tools for interacting with Targetprocess, a project management and agile planning platform, enabling AI assistants to search, create, and update project entities with proper validation.",
  image: "https://github.com/aaronsb.png",
  actions: [
    {
      name: "search_entities",
      description:
        "Search Target Process entities with powerful filtering capabilities and preset filters for common scenarios",
      parameters: [
        {
          name: "include",
          type: "string array",
          description:
            'Related data to include in results (e.g., ["Project", "Team", "AssignedUser"])',
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description:
            'Sort order for results (e.g., ["CreateDate desc", "Name asc"])',
          required: false,
        },
        {
          name: "take",
          type: "number",
          description: "Number of items to return (default: 100)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of entity to search",
          required: true,
        },
        {
          name: "where",
          type: "string",
          description:
            "Filter expression using Target Process query language. Common preset filters available:\n- Status filters: searchPresets.open, .inProgress, .done\n- Assignment filters: searchPresets.myTasks, .unassigned\n- Time-based filters: searchPresets.createdToday, .modifiedToday, .createdThisWeek\n- Priority filters: searchPresets.highPriority\n- Combined filters: searchPresets.myOpenTasks, .highPriorityUnassigned\n\nExample: searchPresets.open or \"EntityState.Name eq 'Open'\"",
          required: false,
        },
      ],
    },
    {
      name: "get_entity",
      description: "Get details of a specific Target Process entity",
      parameters: [
        {
          name: "allow_informative_errors",
          type: "boolean",
          description:
            "When true, returns useful metadata even when operation fails",
          required: false,
        },
        {
          name: "id",
          type: "number",
          description: "ID of the entity",
          required: true,
        },
        {
          name: "include",
          type: "string array",
          description: "Related data to include",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of entity to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create_entity",
      description: "Create a new Target Process entity",
      parameters: [
        {
          name: "assignedUser",
          type: "object",
          description: "Parameter: assignedUser",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the entity",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name/title of the entity",
          required: true,
        },
        {
          name: "project",
          type: "object",
          description: "Parameter: project",
          required: true,
        },
        {
          name: "team",
          type: "object",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of entity to create",
          required: true,
        },
      ],
    },
    {
      name: "update_entity",
      description: "Update an existing Target Process entity",
      parameters: [
        {
          name: "fields",
          type: "object",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "ID of the entity to update",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of entity to update",
          required: true,
        },
      ],
    },
    {
      name: "inspect_object",
      description:
        "Inspect Target Process objects and properties through the API. This tool also provides API discovery capabilities through error messages when used with unsupported entity types.",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "entityType",
          type: "string",
          description:
            "Type of entity to inspect (required for get_properties and get_property_details)",
          required: false,
        },
        {
          name: "propertyName",
          type: "string",
          description:
            "Name of property to get details for (required for get_property_details)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aaronsb/apptio-target-process-mcp",
  _varName: "targetprocessMcpServerPlugin",
};

const okxMcpServerPlugin: Plugin = {
  id: "glaohtlnse",
  name: "OKX MCP Server",
  description:
    "Provides real-time cryptocurrency price data from OKX exchange through a Model Context Protocol interface, allowing access to historical candlestick data and current market prices for any trading instrument.",
  image: "https://github.com/esshka.png",
  actions: [
    {
      name: "get_price",
      description: "Get latest price for an OKX instrument",
      parameters: [
        {
          name: "instrument",
          type: "string",
          description: "Instrument ID (e.g. BTC-USDT)",
          required: true,
        },
      ],
    },
    {
      name: "get_candlesticks",
      description: "Get candlestick data for an OKX instrument",
      parameters: [
        {
          name: "bar",
          type: "string",
          description: "Time interval (e.g. 1m, 5m, 1H, 1D)",
          required: false,
        },
        {
          name: "instrument",
          type: "string",
          description: "Instrument ID (e.g. BTC-USDT)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of candlesticks (max 100)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/esshka/okx-mcp",
  _varName: "okxMcpServerPlugin",
};

const mcpPythonToolboxPlugin: Plugin = {
  id: "wgz6nkycav",
  name: "MCP Python Toolbox",
  description:
    "A Model Context Protocol server that enables AI assistants like Claude to perform Python development tasks through file operations, code analysis, project management, and safe code execution.",
  image: "https://github.com/gianlucamazza.png",
  actions: [],
  githubUrl: "https://github.com/gianlucamazza/mcp_python_toolbox",
  _varName: "mcpPythonToolboxPlugin",
};

const mcpMemoryLibsqlPlugin: Plugin = {
  id: "x61nj65niz",
  name: "MCP Memory LibSQL",
  description:
    "A high-performance, persistent memory system for the Model Context Protocol (MCP) providing vector search capabilities and efficient knowledge storage using libSQL as the backing store.",
  image: "https://github.com/joleyline.png",
  actions: [
    {
      name: "create_entities",
      description:
        "Create new entities with observations and optional embeddings",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "search_nodes",
      description:
        "Search for entities and their relations using text or vector similarity",
      parameters: [
        {
          name: "includeEmbeddings",
          type: "boolean",
          description:
            "Whether to include embeddings in the returned entities (default: false)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Get recent entities and their relations",
      parameters: [
        {
          name: "includeEmbeddings",
          type: "boolean",
          description:
            "Whether to include embeddings in the returned entities (default: false)",
          required: false,
        },
      ],
    },
    {
      name: "create_relations",
      description: "Create relations between entities",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entity",
      description:
        "Delete an entity and all its associated data (observations and relations)",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the entity to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_relation",
      description: "Delete a specific relation between entities",
      parameters: [
        {
          name: "source",
          type: "string",
          description: "Source entity name",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description: "Target entity name",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of relation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/joleyline/mcp-memory-libsql",
  _varName: "mcpMemoryLibsqlPlugin",
};

const shortcutMcpServerPlugin: Plugin = {
  id: "rvxlv6ulz9",
  name: "Shortcut MCP Server",
  description:
    "A Model Context Protocol server that enables interaction with Shortcut (formerly Clubhouse) project management tool, allowing users to view and search projects, stories, epics, and objectives, as well as create new items through natural language.",
  image: "https://github.com/zekus.png",
  actions: [],
  githubUrl: "https://github.com/zekus/shortcut-mcp",
  _varName: "shortcutMcpServerPlugin",
};

const mcpXmindServerPlugin: Plugin = {
  id: "4i3g9okcvy",
  name: "MCP XMind Server",
  description:
    "A Model Context Protocol server that allows intelligent analysis and querying of XMind mind maps, providing capabilities for searching, extracting, and analyzing content across XMind files.",
  image: "https://github.com/apeyroux.png",
  actions: [],
  githubUrl: "https://github.com/apeyroux/mcp-xmind",
  _varName: "mcpXmindServerPlugin",
};

const higressAisearchMcpServerPlugin: Plugin = {
  id: "gk0xde4wbp",
  name: "Higress AI-Search MCP Server",
  description:
    "A Model Context Protocol server that enables AI models to perform real-time internet and knowledge searches through Higress, enhancing model responses with up-to-date information from Google, Bing, Arxiv, and internal knowledge bases.",
  image: "https://github.com/cr7258.png",
  actions: [
    {
      name: "ai_search",
      description:
        "\n    Enhance AI model responses with real-time search results from search engines.\n    \n    This tool sends a query to Higress, which integrates with various search engines to provide up-to-date information:\n    \n    🌐 **Internet Search**: Google, Bing, Quark - for general web information\n    📖 **Academic Search**: Arxiv - for scientific papers and research\n    👨‍💻 **Internal Knowledge Search**: Company policies, Product documentation, Technical specifications\n    \n    Args:\n        query: The user's question or search query\n        \n    Returns:\n        The enhanced AI response with search results incorporated\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cr7258/higress-ai-search-mcp-server",
  _varName: "higressAisearchMcpServerPlugin",
};

const obsidianMcpRestServerPlugin: Plugin = {
  id: "kgl10cxbl1",
  name: "Obsidian MCP REST Server",
  description:
    "Provides a standardized interface for AI assistants to interact with Obsidian vaults through a local REST API, enabling reading, writing, searching, and managing notes.",
  image: "https://github.com/PublikPrinciple.png",
  actions: [],
  githubUrl: "https://github.com/PublikPrinciple/obsidian-mcp-rest",
  _varName: "obsidianMcpRestServerPlugin",
};

const wordwareMcpServerPlugin: Plugin = {
  id: "103bev7m4v",
  name: "Wordware MCP Server",
  description:
    "A Model Context Protocol server implementation that integrates Wordware flows as tools directly within Claude conversations, supporting features like founder research, lead enrichment, Notion integration, and task solving with Google search.",
  image: "https://github.com/hugobiais.png",
  actions: [],
  githubUrl: "https://github.com/hugobiais/wordware-mcp",
  _varName: "wordwareMcpServerPlugin",
};

const googleCalendarMcpServerPlugin: Plugin = {
  id: "kczvcz87zx",
  name: "Google Calendar MCP Server",
  description:
    "Allows interaction with Google Calendar through Claude Desktop using the Model Context Protocol, enabling calendar event management and schedule analysis.",
  image: "https://github.com/thisnick.png",
  actions: [],
  githubUrl: "https://github.com/thisnick/google-calendar-mcp",
  _varName: "googleCalendarMcpServerPlugin",
};

const keycloakMcpServerPlugin: Plugin = {
  id: "ifddqujn9k",
  name: "Keycloak MCP Server",
  description:
    "A Model Context Protocol server that provides tools to manage Keycloak users and realms, allowing you to create and delete users, list available realms, and view users in specific realms.",
  image: "https://github.com/ChristophEnglisch.png",
  actions: [
    {
      name: "create-user",
      description: "Create a new user in a specific realm",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: true,
        },
        {
          name: "firstName",
          type: "string",
          description: "Parameter: firstName",
          required: true,
        },
        {
          name: "lastName",
          type: "string",
          description: "Parameter: lastName",
          required: true,
        },
        {
          name: "realm",
          type: "string",
          description: "Parameter: realm",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: true,
        },
      ],
    },
    {
      name: "delete-user",
      description: "Delete a user from a specific realm",
      parameters: [
        {
          name: "realm",
          type: "string",
          description: "Parameter: realm",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description: "Parameter: userId",
          required: true,
        },
      ],
    },
    {
      name: "list-realms",
      description: "List all available realms",
      parameters: [],
    },
    {
      name: "list-users",
      description: "List users in a specific realm",
      parameters: [
        {
          name: "realm",
          type: "string",
          description: "Parameter: realm",
          required: true,
        },
      ],
    },
  ],
  githubUrl:
    "https://github.com/ChristophEnglisch/keycloak-model-context-protocol",
  _varName: "keycloakMcpServerPlugin",
};

const geoapifyMcpServerPlugin: Plugin = {
  id: "me5cnkh7au",
  name: "Geoapify MCP Server",
  description:
    "Converts addresses to GPS coordinates and creates map visualizations using the Geoapify API, allowing Claude users to generate GeoJSON data and map images from location lists.",
  image: "https://github.com/burningion.png",
  actions: [],
  githubUrl: "https://github.com/burningion/geoapify-mcp",
  _varName: "geoapifyMcpServerPlugin",
};

const privategptMcpServerPlugin: Plugin = {
  id: "79dp2wmo8v",
  name: "privateGPT MCP Server",
  description:
    "A server implementation that allows secure communication between MCP clients and privateGPT, enabling users to chat with privateGPT using knowledge bases and manage sources, groups, and users through a standardized Model Context Protocol.",
  image: "https://github.com/Fujitsu-AI.png",
  actions: [],
  githubUrl: "https://github.com/Fujitsu-AI/MCP-Server-for-MAS-Developments",
  _varName: "privategptMcpServerPlugin",
};

const gitFileForensicsMcpPlugin: Plugin = {
  id: "udo0t2vaww",
  name: "Git File Forensics MCP",
  description:
    "Provides deep git file-level forensics tools to analyze detailed file histories, changes, and patterns within git repositories, focusing on individual file analysis rather than repository-wide operations.",
  image: "https://github.com/davidorex.png",
  actions: [
    {
      name: "track_file_versions",
      description:
        "Track complete version history of a specific file, including renames and moves",
      parameters: [
        {
          name: "file",
          type: "string",
          description: "File to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "analyze_file_diff",
      description:
        "Analyze specific changes between any two versions of a file",
      parameters: [
        {
          name: "file",
          type: "string",
          description: "File to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
        {
          name: "versions",
          type: "object",
          description: "Parameter: versions",
          required: true,
        },
      ],
    },
    {
      name: "analyze_file_context",
      description:
        "Analyze broader context of file changes in a specific commit",
      parameters: [
        {
          name: "commit",
          type: "string",
          description: "Commit hash to analyze",
          required: true,
        },
        {
          name: "file",
          type: "string",
          description: "File to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "analyze_file_semantics",
      description: "Analyze semantic changes and patterns in file history",
      parameters: [
        {
          name: "file",
          type: "string",
          description: "File to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/davidorex/git-file-forensics",
  _varName: "gitFileForensicsMcpPlugin",
};

const twitterMcpServerPlugin: Plugin = {
  id: "xhfrmc0bnf",
  name: "Twitter MCP Server",
  description:
    "Provides tools for interacting with Twitter to retrieve tweets by ID and post new tweets using the agent-twitter-client library.",
  image: "https://github.com/takiAA.png",
  actions: [],
  githubUrl: "https://github.com/takiAA/twitter-scraper-mcp",
  _varName: "twitterMcpServerPlugin",
};

const fileOperationsMcpServerPlugin: Plugin = {
  id: "7b750si00d",
  name: "File Operations MCP Server",
  description:
    "A Model Context Protocol server that enables enhanced file system operations including reading, writing, copying, moving files with streaming capabilities, directory management, file watching, and change tracking.",
  image: "https://github.com/bsmi021.png",
  actions: [
    {
      name: "copy_file",
      description: "Copy a file to a new location",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Destination file path",
          required: true,
        },
        {
          name: "overwrite",
          type: "boolean",
          description: "Whether to overwrite existing file",
          required: false,
        },
        {
          name: "source",
          type: "string",
          description: "Source file path",
          required: true,
        },
      ],
    },
    {
      name: "read_file",
      description: "Read the contents of a file",
      parameters: [
        {
          name: "encoding",
          type: "string",
          description: "File encoding (default: utf8)",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the file to read",
          required: true,
        },
      ],
    },
    {
      name: "write_file",
      description: "Write content to a file",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "encoding",
          type: "string",
          description: "File encoding (default: utf8)",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path to write the file to",
          required: true,
        },
      ],
    },
    {
      name: "make_directory",
      description: "Create a new directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to create the directory at",
          required: true,
        },
        {
          name: "recursive",
          type: "boolean",
          description: "Create parent directories if they don't exist",
          required: false,
        },
      ],
    },
    {
      name: "remove_directory",
      description: "Remove a directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the directory to remove",
          required: true,
        },
        {
          name: "recursive",
          type: "boolean",
          description: "Remove directory contents recursively",
          required: false,
        },
      ],
    },
    {
      name: "list_directory",
      description: "List contents of a directory with detailed metadata",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path of directory to list",
          required: true,
        },
        {
          name: "recursive",
          type: "boolean",
          description: "Whether to list contents recursively",
          required: false,
        },
      ],
    },
    {
      name: "copy_directory",
      description: "Copy a directory and its contents to a new location",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Destination directory path",
          required: true,
        },
        {
          name: "overwrite",
          type: "boolean",
          description: "Whether to overwrite existing files/directories",
          required: false,
        },
        {
          name: "source",
          type: "string",
          description: "Source directory path",
          required: true,
        },
      ],
    },
    {
      name: "watch_directory",
      description: "Watch a directory for changes",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the directory to watch",
          required: true,
        },
        {
          name: "recursive",
          type: "boolean",
          description: "Watch subdirectories recursively",
          required: false,
        },
      ],
    },
    {
      name: "unwatch_directory",
      description: "Stop watching a directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the directory to stop watching",
          required: true,
        },
      ],
    },
    {
      name: "is_watching",
      description: "Check if a path is currently being watched",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to check",
          required: true,
        },
      ],
    },
    {
      name: "get_changes",
      description: "Get list of tracked changes",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of changes to return",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Filter changes by type",
          required: false,
        },
      ],
    },
    {
      name: "clear_changes",
      description: "Clear all tracked changes",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/bsmi021/mcp-file-operations-server",
  _varName: "fileOperationsMcpServerPlugin",
};

const documindMcpServerPlugin: Plugin = {
  id: "gz36qn7799",
  name: "DocuMind MCP Server",
  description:
    "A Model Context Protocol server that analyzes and evaluates GitHub README documentation quality using advanced neural processing, providing scores and improvement suggestions.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "evaluate_readme",
      description:
        "リポジトリ内の全てのREADMEファイルの構成を評価し、改善点を提案します",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "プロジェクトのルートディレクトリパス",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/documind-mcp-server",
  _varName: "documindMcpServerPlugin",
};

const mcpSubstackServerPlugin: Plugin = {
  id: "sobx8g490n",
  name: "MCP Substack Server",
  description:
    "A Model Context Protocol server that enables downloading and parsing Substack posts directly through the Claude desktop app, allowing users to access and summarize Substack content.",
  image: "https://github.com/michalnaka.png",
  actions: [
    {
      name: "download_substack",
      description: "Download and parse content from a Substack post",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the Substack post",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/michalnaka/mcp-substack",
  _varName: "mcpSubstackServerPlugin",
};

const gcpMcpPlugin: Plugin = {
  id: "b1x5qeu0kz",
  name: "GCP MCP",
  description:
    "A Model Context Protocol server that enables AI assistants like Claude to interact with Google Cloud Platform environments through natural language, allowing users to query and manage GCP resources during conversations.",
  image: "https://github.com/eniayomi.png",
  actions: [
    {
      name: "run-gcp-code",
      description: "Run GCP code",
      parameters: [
        {
          name: "code",
          type: "string",
          description:
            'Your job is to answer questions about GCP environment by writing Javascript/TypeScript code using Google Cloud Client Libraries. The code must adhere to a few rules:\n- Must use promises and async/await\n- Think step-by-step before writing the code, approach it logically\n- Must be written in TypeScript using official Google Cloud client libraries\n- Avoid hardcoded values like project IDs\n- Code written should be as parallel as possible enabling the fastest and most optimal execution\n- Code should handle errors gracefully, especially when doing multiple API calls\n- Each error should be handled and logged with a reason, script should continue to run despite errors\n- Data returned from GCP APIs must be returned as JSON containing only the minimal amount of data needed to answer the question\n- All extra data must be filtered out\n- Code MUST "return" a value: string, number, boolean or JSON object\n- If code does not return anything, it will be considered as FAILED\n- Whenever tool/function call fails, retry it 3 times before giving up\n- When listing resources, ensure pagination is handled correctly\n- Do not include any comments in the code\n- Try to write code that returns as few data as possible to answer without any additional processing required\nBe concise, professional and to the point. Do not give generic advice, always reply with detailed & contextual data sourced from the current GCP environment.',
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GCP project ID to use",
          required: false,
        },
        {
          name: "reasoning",
          type: "string",
          description: "The reasoning behind the code",
          required: true,
        },
        {
          name: "region",
          type: "string",
          description: "Region to use (if not provided, us-central1 is used)",
          required: false,
        },
      ],
    },
    {
      name: "list-projects",
      description: "List all GCP projects accessible with current credentials",
      parameters: [],
    },
    {
      name: "select-project",
      description: "Selects GCP project to use for subsequent interactions",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the GCP project to select",
          required: true,
        },
        {
          name: "region",
          type: "string",
          description: "Region to use (if not provided, us-central1 is used)",
          required: false,
        },
      ],
    },
    {
      name: "get-billing-info",
      description: "Get billing information for the current project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description:
            "Project ID to get billing info for (defaults to selected project)",
          required: false,
        },
      ],
    },
    {
      name: "get-cost-forecast",
      description: "Get cost forecast for the current project",
      parameters: [
        {
          name: "months",
          type: "number",
          description: "Number of months to forecast (default: 3)",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description:
            "Project ID to get forecast for (defaults to selected project)",
          required: false,
        },
      ],
    },
    {
      name: "get-billing-budget",
      description: "Get billing budgets for the current project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description:
            "Project ID to get budgets for (defaults to selected project)",
          required: false,
        },
      ],
    },
    {
      name: "list-gke-clusters",
      description: "List all GKE clusters in the current project",
      parameters: [
        {
          name: "location",
          type: "string",
          description:
            "Location (region or zone) to list clusters from (defaults to all locations)",
          required: false,
        },
      ],
    },
    {
      name: "list-sql-instances",
      description: "List all Cloud SQL instances in the current project",
      parameters: [],
    },
    {
      name: "get-logs",
      description: "Get Cloud Logging entries for the current project",
      parameters: [
        {
          name: "filter",
          type: "string",
          description:
            "Filter for the log entries (see Cloud Logging query syntax)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Maximum number of entries to return (default: 10)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/eniayomi/gcp-mcp",
  _varName: "gcpMcpPlugin",
};

const vercelMcpPlugin: Plugin = {
  id: "c5fgyowpha",
  name: "Vercel MCP",
  description:
    "An MCP server that provides tools for interacting with Vercel API, enabling management of deployments, DNS records, domains, projects, and environment variables through natural language.",
  image: "https://github.com/zueai.png",
  actions: [
    {
      name: "getDeployments",
      description: "Lists deployments",
      parameters: [
        {
          name: "app",
          type: "string",
          description: "Application name",
          required: false,
        },
        {
          name: "from",
          type: "number",
          description: "Timestamp to list deployments from",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Limit on number of deployments to return",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project ID",
          required: false,
        },
        {
          name: "since",
          type: "number",
          description: "Timestamp to get deployments from",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Deployment state",
          required: false,
        },
        {
          name: "target",
          type: "string",
          description: "Deployment target",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
        {
          name: "to",
          type: "number",
          description: "Timestamp to list deployments until",
          required: false,
        },
        {
          name: "until",
          type: "number",
          description: "Timestamp to get deployments until",
          required: false,
        },
        {
          name: "users",
          type: "string",
          description: "Filter by users",
          required: false,
        },
      ],
    },
    {
      name: "deleteDeployment",
      description: "Deletes a deployment",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "The ID of the deployment to delete",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL of the deployment",
          required: false,
        },
      ],
    },
    {
      name: "getDeploymentEvents",
      description: "Gets deployment events by deployment ID and build ID",
      parameters: [
        {
          name: "builds",
          type: "number",
          description: "Builds parameter",
          required: false,
        },
        {
          name: "delimiter",
          type: "number",
          description: "Delimiter for events",
          required: false,
        },
        {
          name: "deploymentId",
          type: "string",
          description: "The ID or URL of the deployment",
          required: true,
        },
        {
          name: "direction",
          type: "string",
          description: "Direction of events retrieval",
          required: false,
        },
        {
          name: "follow",
          type: "number",
          description: "Follow parameter for events",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Limit on number of events to return",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter events by name",
          required: false,
        },
        {
          name: "since",
          type: "number",
          description: "Timestamp to get events from",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "statusCode",
          type: "string",
          description: "Filter events by status code",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
        {
          name: "until",
          type: "number",
          description: "Timestamp to get events until",
          required: false,
        },
      ],
    },
    {
      name: "getDeployment",
      description: "Gets a deployment by ID or URL",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "The ID or URL of the deployment",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
        {
          name: "withGitRepoInfo",
          type: "string",
          description: "Include git repository info",
          required: false,
        },
      ],
    },
    {
      name: "cancelDeployment",
      description: "Cancels a deployment",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "The ID of the deployment to cancel",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
      ],
    },
    {
      name: "listDeploymentFiles",
      description: "Lists deployment files",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "The ID of the deployment",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
      ],
    },
    {
      name: "getDeploymentFileContents",
      description: "Gets deployment file contents",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "The ID of the deployment",
          required: true,
        },
        {
          name: "fileId",
          type: "string",
          description: "The ID of the file",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description: "Slug",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zueai/vercel-api-mcp",
  _varName: "vercelMcpPlugin",
};

const mcpEmbeddingSearchPlugin: Plugin = {
  id: "f274w82274",
  name: "MCP Embedding Search",
  description:
    "A Model Context Protocol server that searches transcript segments in a Turso database using vector similarity, allowing users to find relevant content by asking questions without generating new embeddings.",
  image: "https://github.com/spences10.png",
  actions: [],
  githubUrl: "https://github.com/spences10/mcp-embedding-search",
  _varName: "mcpEmbeddingSearchPlugin",
};

const claudeDesktopCommanderMcpPlugin: Plugin = {
  id: "zempur9oh4",
  name: "Claude Desktop Commander MCP",
  description:
    "Allows Claude desktop app to execute terminal commands and edit files on your computer through MCP, with features including command execution, process management, and diff-based file editing.",
  image: "https://github.com/wonderwhy-er.png",
  actions: [
    {
      name: "execute_command",
      description:
        "Execute a terminal command with timeout. Command will continue running in background if it doesn't complete within timeout.",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: true,
        },
        {
          name: "timeout_ms",
          type: "number",
          description: "Parameter: timeout_ms",
          required: false,
        },
      ],
    },
    {
      name: "read_output",
      description: "Read new output from a running terminal session.",
      parameters: [
        {
          name: "pid",
          type: "number",
          description: "Parameter: pid",
          required: true,
        },
      ],
    },
    {
      name: "force_terminate",
      description: "Force terminate a running terminal session.",
      parameters: [
        {
          name: "pid",
          type: "number",
          description: "Parameter: pid",
          required: true,
        },
      ],
    },
    {
      name: "list_sessions",
      description: "List all active terminal sessions.",
      parameters: [],
    },
    {
      name: "list_processes",
      description:
        "List all running processes. Returns process information including PID, command name, CPU usage, and memory usage.",
      parameters: [],
    },
    {
      name: "kill_process",
      description:
        "Terminate a running process by PID. Use with caution as this will forcefully terminate the specified process.",
      parameters: [
        {
          name: "pid",
          type: "number",
          description: "Parameter: pid",
          required: true,
        },
      ],
    },
    {
      name: "block_command",
      description:
        "Add a command to the blacklist. Once blocked, the command cannot be executed until unblocked.",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: true,
        },
      ],
    },
    {
      name: "unblock_command",
      description:
        "Remove a command from the blacklist. Once unblocked, the command can be executed normally.",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: true,
        },
      ],
    },
    {
      name: "list_blocked_commands",
      description: "List all currently blocked commands.",
      parameters: [],
    },
    {
      name: "read_file",
      description:
        "Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Only works within allowed directories.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "read_multiple_files",
      description:
        "Read the contents of multiple files simultaneously. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.",
      parameters: [
        {
          name: "paths",
          type: "string array",
          description: "Parameter: paths",
          required: true,
        },
      ],
    },
    {
      name: "write_file",
      description:
        "Completely replace file contents. Best for large changes (>20% of file) or when edit_block fails. Use with caution as it will overwrite existing files. Only works within allowed directories.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "create_directory",
      description:
        "Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. Only works within allowed directories.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "list_directory",
      description:
        "Get a detailed listing of all files and directories in a specified path. Results distinguish between files and directories with [FILE] and [DIR] prefixes. Only works within allowed directories.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "move_file",
      description:
        "Move or rename files and directories. Can move files between directories and rename them in a single operation. Both source and destination must be within allowed directories.",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Parameter: destination",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
      ],
    },
    {
      name: "search_files",
      description:
        "Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. Only searches within allowed directories.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
        {
          name: "pattern",
          type: "string",
          description: "Parameter: pattern",
          required: true,
        },
      ],
    },
    {
      name: "get_file_info",
      description:
        "Retrieve detailed metadata about a file or directory including size, creation time, last modified time, permissions, and type. Only works within allowed directories.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "list_allowed_directories",
      description:
        "Returns the list of directories that this server is allowed to access.",
      parameters: [],
    },
    {
      name: "edit_block",
      description:
        "Apply surgical text replacements to files. Best for small changes (<20% of file size). Multiple blocks can be used for separate changes. Will verify changes after application. Format: filepath, then <<<<<<< SEARCH, content to find, =======, new content, >>>>>>> REPLACE.",
      parameters: [
        {
          name: "blockContent",
          type: "string",
          description: "Parameter: blockContent",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wonderwhy-er/ClaudeComputerCommander",
  _varName: "claudeDesktopCommanderMcpPlugin",
};

const stealthBrowserMcpServerPlugin: Plugin = {
  id: "efxcqjoq01",
  name: "Stealth Browser MCP Server",
  description:
    "Provides stealth browser capabilities using Playwright with anti-detection techniques, allowing MCP clients to navigate websites and take screenshots while evading common bot detection systems.",
  image: "https://github.com/newbeb.png",
  actions: [
    {
      name: "screenshot",
      description: "Navigate to a URL and take a screenshot of the webpage",
      parameters: [
        {
          name: "fullPage",
          type: "boolean",
          description: "Whether to take a screenshot of the full page",
          required: false,
        },
        {
          name: "headless",
          type: "boolean",
          description:
            "Whether to run browser in headless mode (default) or visible mode",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector to screenshot a specific element",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to navigate to",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/newbeb/stealth-browser-mcp",
  _varName: "stealthBrowserMcpServerPlugin",
};

const strapiMcpServerPlugin: Plugin = {
  id: "wrmh0bzzkr",
  name: "Strapi MCP Server",
  description:
    "Provides access to Strapi CMS content through the MCP protocol, allowing users to create, read, update, and delete content entries via Claude.",
  image: "https://github.com/l33tdawg.png",
  actions: [],
  githubUrl: "https://github.com/l33tdawg/strapi-mcp",
  _varName: "strapiMcpServerPlugin",
};

const gmailMcpServerPlugin: Plugin = {
  id: "grv2tx7s97",
  name: "Gmail MCP Server",
  description:
    "An integration server that provides Claude Desktop access to Gmail, enabling users to view recent emails and search their Gmail inbox using natural language commands.",
  image: "https://github.com/ajbr0wn.png",
  actions: [],
  githubUrl: "https://github.com/ajbr0wn/gmail-mcp-server",
  _varName: "gmailMcpServerPlugin",
};

const resourceHubServerPlugin: Plugin = {
  id: "at4s2w7dgj",
  name: "Resource Hub Server",
  description:
    "An MCP server that connects to the Resource Hub, allowing centralized configuration and management of tools and resources across different MCP environments.",
  image: "https://github.com/adamwattis.png",
  actions: [],
  githubUrl: "https://github.com/adamwattis/resource-hub-server",
  _varName: "resourceHubServerPlugin",
};

const biomcpPlugin: Plugin = {
  id: "08v4ccyf8w",
  name: "BioMCP",
  description:
    "A Model Context Protocol server that enhances language models with protein structure analysis capabilities, enabling detailed active site analysis and disease-related protein searches through established protein databases.",
  image: "https://github.com/acashmoney.png",
  actions: [
    {
      name: "analyze-active-site",
      description: "Analyze the active site of a protein structure",
      parameters: [
        {
          name: "pdbId",
          type: "string",
          description:
            "The PDB ID of the protein structure to analyze (e.g., 6LU7)",
          required: true,
        },
      ],
    },
    {
      name: "search-disease-proteins",
      description: "Search for proteins related to a disease",
      parameters: [
        {
          name: "disease",
          type: "string",
          description: "Disease name (e.g., 'covid', 'alzheimer's')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/acashmoney/bio-mcp",
  _varName: "biomcpPlugin",
};

const linkedinMcpServerPlugin: Plugin = {
  id: "21kii7w6cr",
  name: "LinkedIn MCP Server",
  description:
    "A Model Context Protocol server that enables seamless interaction with LinkedIn for job applications, profile retrieval, feed browsing, and resume analysis through natural language commands.",
  image: "https://github.com/Hritik003.png",
  actions: [],
  githubUrl: "https://github.com/Hritik003/linkedin-mcp",
  _varName: "linkedinMcpServerPlugin",
};

const pdfExtractionMcpServerPlugin: Plugin = {
  id: "pqwezk0y02",
  name: "PDF Extraction MCP Server",
  description:
    "An MCP server that provides a tool to extract text content from local PDF files, supporting both standard PDF reading and OCR capabilities with optional page selection.",
  image: "https://github.com/xraywu.png",
  actions: [
    {
      name: "extract-pdf-contents",
      description:
        "Extract contents from a local PDF file, given page numbers separated in comma. Negative page index number supported.",
      parameters: [
        {
          name: "pages",
          type: "string",
          description: "Parameter: pages",
          required: false,
        },
        {
          name: "pdf_path",
          type: "string",
          description: "Parameter: pdf_path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/xraywu/mcp-pdf-extraction-server",
  _varName: "pdfExtractionMcpServerPlugin",
};

const workersMcpDemoPlugin: Plugin = {
  id: "kx0za4fynn",
  name: "Workers MCP Demo",
  description:
    "A demonstration project that uses Cloudflare Workers MCP to create custom AI tools that can be integrated with Claude, Cursor, and other AI assistants supporting the Model Context Protocol.",
  image: "https://github.com/akazwz.png",
  actions: [],
  githubUrl: "https://github.com/akazwz/workers-mcp-demo",
  _varName: "workersMcpDemoPlugin",
};

const inkdropMcpServerPlugin: Plugin = {
  id: "c7fgtnckbv",
  name: "Inkdrop MCP Server",
  description:
    "Integrates Inkdrop note-taking app with Claude AI through Model Context Protocol, allowing Claude to search, read, create, and update notes in your Inkdrop database.",
  image: "https://github.com/inkdropapp.png",
  actions: [
    {
      name: "read-note",
      description:
        "Retrieve the complete contents of the note by its ID from the database.",
      parameters: [
        {
          name: "noteId",
          type: "string",
          description:
            "ID of the note to retrieve. It can be found as `_id` in the note docs",
          required: true,
        },
      ],
    },
    {
      name: "search-notes",
      description:
        "List all notes that contain a given keyword.\nThe result does not include entire note bodies as they are truncated in 200 characters.\nYou have to retrieve the full note content by calling `read-note`.\nHere are tips to specify keywords effectively:\n\n## Use special qualifiers to narrow down results\n\nYou can use special qualifiers to get more accurate results. See the qualifiers and their usage examples:\n\n- **book**  \n  `book:Blog`: Searches for notes in the 'Blog' notebook.\n- **tag**  \n  `tag:JavaScript`: Searches for all notes having the 'JavaScript' tag. Read more about [tags](https://docs.inkdrop.app/manual/write-notes#tag-notes).\n- **status**  \n  `status:onHold`: Searches for all notes with the 'On hold' status. Read more about [statuses](/reference/note-statuses).\n- **title**  \n  `title:\"JavaScript setTimeout\"`: Searches for the note with the specified title.\n- **body**  \n  `body:KEYWORD`: Searches for a specific word in all notes. Equivalent to a [global search](#search-for-notes-across-all-notebooks).\n\n### Combine qualifiers\n\nYou can combine the filter qualifiers to refine data even more.\n\n**Find notes that contain the word 'Hello' and have the 'Issue' tag.**\n\n```text\nHello tag:Issue\n```\n\n**Find notes that contain the word 'Typescript,' have the 'Contribution' tag, and the 'Completed' status**\n\n```text\nTypescript tag:Contribution status:Completed\n```\n\n## Search for text with spaces\n\nTo find the text that includes spaces, put the text into the double quotation marks (\"):\n\n```text\n\"database associations\"\n```\n\n## Exclude text from search\n\nTo exclude text from the search results or ignore a specific qualifier, put the minus sign (-) before it. You can also combine the exclusions. See the examples:\n\n- `-book:Backend \"closure functions\"`: Ignores the 'Backend' notebook while searching for the 'closure functions' phrase.\n- `-tag:JavaScript`: Ignores all notes having the 'JavaScript' tag.\n- `-book:Typescript tag:work \"Data types\"`: Ignores the 'Typescript' notebook and the 'work' tag while searching for the 'Data types' phrase.\n- `-status:dropped title:\"Sprint 10.0\" debounce`: Ignores notes with the 'Dropped' status while searching for the 'debounce' word in the note with the 'Sprint 10.0' title.\n- `-\"Phrase to ignore\" \"in the rest of a sentence\"`: Ignores the 'Phrase to ignore' part while searching for 'in the rest of a sentence'.\n\nNote that you can't specify excluding modifiers only without including conditions.\n\n**WARNING**: Make sure to enter a text to search for after the exclusion modifier.\n\n- ✅ Will work  \n  `-book:Backend \"closure functions\"`\n\n- ⛔️ Won't work  \n   `-book:Backend`. There's no query. Inkdrop doesn't understand what to search for.\n    ",
      parameters: [
        {
          name: "keyword",
          type: "string",
          description: "Keyword to search for.",
          required: true,
        },
      ],
    },
    {
      name: "create-note",
      description: "Create a new note in the database",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "The content of the note represented with Markdown",
          required: true,
        },
        {
          name: "bookId",
          type: "string",
          description: "The notebook ID",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "The status of the note",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "The note title",
          required: true,
        },
      ],
    },
    {
      name: "update-note",
      description: "Update the existing note in the database",
      parameters: [
        {
          name: "_id",
          type: "string",
          description:
            "The unique document ID which should start with `note:` and the remains are randomly generated string",
          required: true,
        },
        {
          name: "_rev",
          type: "string",
          description:
            "This is a CouchDB specific field. The current MVCC-token/revision of this document (mandatory and immutable).",
          required: true,
        },
        {
          name: "body",
          type: "string",
          description: "The content of the note represented with Markdown",
          required: true,
        },
        {
          name: "bookId",
          type: "string",
          description: "The notebook ID",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "The status of the note",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "The note title",
          required: true,
        },
      ],
    },
    {
      name: "list-notebooks",
      description: "Retrieve a list of all notebooks",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/inkdropapp/mcp-server",
  _varName: "inkdropMcpServerPlugin",
};

const mcpUnifiedServerPlugin: Plugin = {
  id: "yghl2ut3cx",
  name: "MCP Unified Server",
  description:
    "A modular server implementation for Claude AI assistants with integrated tools, enabling Claude to perform actions and access external resources like file systems, web searches, browser automation, financial data, and document generation.",
  image: "https://github.com/getfounded.png",
  actions: [],
  githubUrl: "https://github.com/getfounded/mcp-tool-kit",
  _varName: "mcpUnifiedServerPlugin",
};

const imageGeneratorMcpServerPlugin: Plugin = {
  id: "ih7lecow52",
  name: "Image Generator MCP Server",
  description:
    "An MCP server that allows users to generate images using Replicate's Stable Diffusion model and save them to the local filesystem.",
  image: "https://github.com/rmcendarfer2017.png",
  actions: [
    {
      name: "generate-image",
      description: "Generate an image using Replicate's Stable Diffusion model",
      parameters: [
        {
          name: "guidance_scale",
          type: "number",
          description: "Parameter: guidance_scale",
          required: false,
        },
        {
          name: "height",
          type: "integer",
          description: "Parameter: height",
          required: false,
        },
        {
          name: "negative_prompt",
          type: "string",
          description: "Parameter: negative_prompt",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "integer",
          description: "Parameter: num_inference_steps",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "width",
          type: "integer",
          description: "Parameter: width",
          required: false,
        },
      ],
    },
    {
      name: "save-image",
      description: "Save a generated image",
      parameters: [
        {
          name: "custom_filename",
          type: "string",
          description:
            "Custom filename for the saved image (without extension). If not provided, a UUID will be used.",
          required: false,
        },
        {
          name: "image_url",
          type: "string",
          description: "Parameter: image_url",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "target_directory",
          type: "string",
          description:
            "Directory path where the image should be saved. If not provided, defaults to the MCP server's images directory.",
          required: false,
        },
      ],
    },
    {
      name: "list-saved-images",
      description: "List all saved images",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/rmcendarfer2017/MCP-image-gen",
  _varName: "imageGeneratorMcpServerPlugin",
};

const serpapiMcpServerPlugin: Plugin = {
  id: "ps1js70fi2",
  name: "SerpApi MCP Server",
  description:
    "An MCP server that integrates with SerpApi to retrieve search results from multiple search engines including Google, Bing, Yahoo, and others, enabling fast access to both live and archived search data.",
  image: "https://github.com/ilyazub.png",
  actions: [],
  githubUrl: "https://github.com/ilyazub/serpapi-mcp-server",
  _varName: "serpapiMcpServerPlugin",
};

const notionMcpServerPlugin: Plugin = {
  id: "x8gnbjbdim",
  name: "Notion MCP Server",
  description:
    "A Model Context Protocol server that connects Claude and other AI assistants to your Notion workspace, allowing AIs to interact with databases, pages, and blocks.",
  image: "https://github.com/Sjotie.png",
  actions: [
    {
      name: "create-page",
      description: "Create a new page in a database",
      parameters: [
        {
          name: "children",
          type: "array",
          description: "Optional content blocks",
          required: false,
        },
        {
          name: "parent_id",
          type: "string",
          description: "ID of the parent database",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Page properties",
          required: true,
        },
      ],
    },
    {
      name: "update-page",
      description: "Update an existing page",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Whether to archive the page",
          required: false,
        },
        {
          name: "page_id",
          type: "string",
          description: "ID of the page to update",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Updated page properties",
          required: true,
        },
      ],
    },
    {
      name: "create-database",
      description: "Create a new database",
      parameters: [
        {
          name: "cover",
          type: "object",
          description: "Optional cover for the database",
          required: false,
        },
        {
          name: "icon",
          type: "object",
          description: "Optional icon for the database",
          required: false,
        },
        {
          name: "parent_id",
          type: "string",
          description: "ID of the parent page",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Database properties schema",
          required: true,
        },
        {
          name: "title",
          type: "array",
          description: "Database title as rich text array",
          required: true,
        },
      ],
    },
    {
      name: "update-database",
      description: "Update an existing database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "ID of the database to update",
          required: true,
        },
        {
          name: "description",
          type: "array",
          description: "Optional new description as rich text array",
          required: false,
        },
        {
          name: "properties",
          type: "object",
          description: "Optional updated properties schema",
          required: false,
        },
        {
          name: "title",
          type: "array",
          description: "Optional new title as rich text array",
          required: false,
        },
      ],
    },
    {
      name: "get-page",
      description: "Retrieve a page by its ID",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "ID of the page to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-block-children",
      description: "Retrieve the children blocks of a block",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "ID of the block (page or block)",
          required: true,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
      ],
    },
    {
      name: "append-block-children",
      description: "Append blocks to a parent block",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Optional ID of an existing block to append after",
          required: false,
        },
        {
          name: "block_id",
          type: "string",
          description: "ID of the parent block (page or block)",
          required: true,
        },
        {
          name: "children",
          type: "array",
          description: "List of block objects to append",
          required: true,
        },
      ],
    },
    {
      name: "update-block",
      description: "Update a block's content or archive status",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Whether to archive (true) or restore (false) the block",
          required: false,
        },
        {
          name: "block_id",
          type: "string",
          description: "ID of the block to update",
          required: true,
        },
        {
          name: "block_type",
          type: "string",
          description: "The type of block (paragraph, heading_1, to_do, etc.)",
          required: true,
        },
        {
          name: "content",
          type: "object",
          description: "The content for the block based on its type",
          required: true,
        },
      ],
    },
    {
      name: "get-block",
      description: "Retrieve a block by its ID",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "ID of the block to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description: "Search Notion for pages or databases",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Optional filter criteria",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: false,
        },
        {
          name: "sort",
          type: "object",
          description: "Optional sort criteria",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
      ],
    },
    {
      name: "list-databases",
      description: "List all databases the integration has access to",
      parameters: [],
    },
    {
      name: "query-database",
      description: "Query a database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "ID of the database to query",
          required: true,
        },
        {
          name: "filter",
          type: "object",
          description: "Optional filter criteria",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "sorts",
          type: "array",
          description: "Optional sort criteria",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Optional cursor for pagination",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sjotie/notionMCP",
  _varName: "notionMcpServerPlugin",
};

const gatheringsMcpServerPlugin: Plugin = {
  id: "69btvo84i5",
  name: "Gatherings MCP Server",
  description:
    "An MCP server that helps AI assistants manage expense-sharing for social events, enabling the creation of gatherings, tracking of expenses, and calculation of fair reimbursements among participants.",
  image: "https://github.com/abutbul.png",
  actions: [],
  githubUrl: "https://github.com/abutbul/gatherings-mcp-python",
  _varName: "gatheringsMcpServerPlugin",
};

const metabaseMcpServerPlugin: Plugin = {
  id: "s07i4zuilb",
  name: "Metabase MCP Server",
  description:
    "Enables AI assistants to interact with Metabase databases and dashboards, allowing users to list and execute queries, access data visualizations, and interact with database resources through natural language.",
  image: "https://github.com/imlewc.png",
  actions: [],
  githubUrl: "https://github.com/imlewc/metabase-server",
  _varName: "metabaseMcpServerPlugin",
};

const slimMcpPlugin: Plugin = {
  id: "bwn81lj137",
  name: "Slim MCP",
  description:
    "A lightweight, modular API service that provides useful tools like weather, date/time, calculator, search, email, and task management through a RESTful interface, designed for integration with AI agents and automated workflows.",
  image: "https://github.com/webdevtodayjason.png",
  actions: [],
  githubUrl: "https://github.com/webdevtodayjason/slim-MCP",
  _varName: "slimMcpPlugin",
};

const youtubeMcpServerPlugin: Plugin = {
  id: "gzrh7914k6",
  name: "Youtube MCP Server",
  description:
    "Bridges YouTube API and AI assistants, enabling video analysis by downloading and processing closed captions to create summaries of YouTube videos.",
  image: "https://github.com/sparfenyuk.png",
  actions: [
    {
      name: "DownloadClosedCaptions",
      description: "Download closed captions from YouTube video.",
      parameters: [
        {
          name: "video_url",
          type: "string",
          description: "Parameter: video_url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sparfenyuk/mcp-youtube",
  _varName: "youtubeMcpServerPlugin",
};

const obsidianOmnisearchMcpServerPlugin: Plugin = {
  id: "cg8qcv2k9c",
  name: "Obsidian Omnisearch MCP Server",
  description:
    "Provides programmatic search functionality for Obsidian vaults through a REST API interface, allowing external applications to search through notes and retrieve absolute paths to matching documents.",
  image: "https://github.com/anpigon.png",
  actions: [],
  githubUrl: "https://github.com/anpigon/mcp-server-obsidian-omnisearch",
  _varName: "obsidianOmnisearchMcpServerPlugin",
};

const nashMcpServerPlugin: Plugin = {
  id: "6p8z2xek5c",
  name: "Nash MCP Server",
  description:
    "A Model Context Protocol server that enables seamless execution of commands, Python code, web content fetching, and reusable task management with secure credentials handling.",
  image: "https://github.com/nash-app.png",
  actions: [],
  githubUrl: "https://github.com/nash-app/nash-mcp",
  _varName: "nashMcpServerPlugin",
};

const tinyCryptographyMcpServerPlugin: Plugin = {
  id: "94h0qwnece",
  name: "Tiny Cryptography MCP Server",
  description:
    "A Model Context Protocol server built with Express.js that provides cryptographic tools including key pair generation, shared secret derivation, and message encryption/decryption.",
  image: "https://github.com/anton10xr.png",
  actions: [],
  githubUrl: "https://github.com/anton10xr/gibber-mcp",
  _varName: "tinyCryptographyMcpServerPlugin",
};

const manifoldMarketsMcpServerPlugin: Plugin = {
  id: "bismm8fj6d",
  name: "Manifold Markets MCP Server",
  description:
    "Provides comprehensive access to Manifold Markets prediction platform through a clean MCP interface, enabling users to create markets, place bets, manage liquidity, and utilize social features through natural language.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "place_bet",
      description: "Place a bet on a market",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount to bet in mana",
          required: true,
        },
        {
          name: "limitProb",
          type: "number",
          description: "Optional limit order probability (0.01-0.99)",
          required: false,
        },
        {
          name: "marketId",
          type: "string",
          description: "Market ID",
          required: true,
        },
        {
          name: "outcome",
          type: "string",
          description: "Parameter: outcome",
          required: true,
        },
      ],
    },
    {
      name: "cancel_bet",
      description: "Cancel a limit order bet",
      parameters: [
        {
          name: "betId",
          type: "string",
          description: "Bet ID to cancel",
          required: true,
        },
      ],
    },
    {
      name: "sell_shares",
      description: "Sell shares in a market",
      parameters: [
        {
          name: "marketId",
          type: "string",
          description: "Market ID",
          required: true,
        },
        {
          name: "outcome",
          type: "string",
          description:
            "Which type of shares to sell (defaults to what you have)",
          required: false,
        },
        {
          name: "shares",
          type: "number",
          description: "How many shares to sell (defaults to all)",
          required: false,
        },
      ],
    },
    {
      name: "add_liquidity",
      description: "Add mana to market liquidity pool",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of mana to add",
          required: true,
        },
        {
          name: "marketId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "get_positions",
      description: "Get user positions across markets",
      parameters: [
        {
          name: "userId",
          type: "string",
          description: "User ID",
          required: true,
        },
      ],
    },
    {
      name: "unresolve_market",
      description: "Unresolve a previously resolved market",
      parameters: [
        {
          name: "answerId",
          type: "string",
          description: "Optional. Answer ID for multiple choice markets",
          required: false,
        },
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "close_market",
      description: "Close a market for trading",
      parameters: [
        {
          name: "closeTime",
          type: "number",
          description:
            "Optional. Unix timestamp in milliseconds when market will close",
          required: false,
        },
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "add_answer",
      description: "Add a new answer to a multiple choice market",
      parameters: [
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Answer text",
          required: true,
        },
      ],
    },
    {
      name: "follow_market",
      description: "Follow or unfollow a market",
      parameters: [
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
        {
          name: "follow",
          type: "boolean",
          description: "True to follow, false to unfollow",
          required: true,
        },
      ],
    },
    {
      name: "add_bounty",
      description: "Add bounty to a market",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of mana to add as bounty",
          required: true,
        },
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "award_bounty",
      description: "Award bounty to a comment",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of bounty to award",
          required: true,
        },
        {
          name: "commentId",
          type: "string",
          description: "Comment ID to award bounty to",
          required: true,
        },
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "remove_liquidity",
      description: "Remove liquidity from market pool",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of liquidity to remove",
          required: true,
        },
        {
          name: "contractId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "react",
      description: "React to a market or comment",
      parameters: [
        {
          name: "contentId",
          type: "string",
          description: "ID of market or comment",
          required: true,
        },
        {
          name: "contentType",
          type: "string",
          description: "Type of content to react to",
          required: true,
        },
        {
          name: "reactionType",
          type: "string",
          description: "Type of reaction",
          required: false,
        },
        {
          name: "remove",
          type: "boolean",
          description: "Optional. True to remove reaction",
          required: false,
        },
      ],
    },
    {
      name: "send_mana",
      description: "Send mana to other users",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of mana to send (min 10)",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Optional message to include",
          required: false,
        },
        {
          name: "toIds",
          type: "string array",
          description: "Array of user IDs to send mana to",
          required: true,
        },
      ],
    },
    {
      name: "create_market",
      description: "Create a new prediction market",
      parameters: [
        {
          name: "addAnswersMode",
          type: "string",
          description:
            "Optional for MULTIPLE_CHOICE markets. Controls who can add answers",
          required: false,
        },
        {
          name: "answers",
          type: "string array",
          description:
            "Required for MULTIPLE_CHOICE/POLL markets. Array of possible answers",
          required: false,
        },
        {
          name: "closeTime",
          type: "string",
          description:
            "Optional. ISO timestamp when market will close. Defaults to 7 days.",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Optional description for the market",
          required: false,
        },
        {
          name: "initialProb",
          type: "number",
          description:
            "Required for BINARY markets. Initial probability (1-99)",
          required: false,
        },
        {
          name: "initialValue",
          type: "number",
          description:
            "Required for PSEUDO_NUMERIC markets. Initial value between min and max",
          required: false,
        },
        {
          name: "isLogScale",
          type: "boolean",
          description:
            "Optional for PSEUDO_NUMERIC markets. If true, increases exponentially",
          required: false,
        },
        {
          name: "max",
          type: "number",
          description:
            "Required for PSEUDO_NUMERIC markets. Maximum resolvable value",
          required: false,
        },
        {
          name: "min",
          type: "number",
          description:
            "Required for PSEUDO_NUMERIC markets. Minimum resolvable value",
          required: false,
        },
        {
          name: "outcomeType",
          type: "string",
          description: "Type of market to create",
          required: true,
        },
        {
          name: "question",
          type: "string",
          description: "The headline question for the market",
          required: true,
        },
        {
          name: "shouldAnswersSumToOne",
          type: "boolean",
          description:
            "Optional for MULTIPLE_CHOICE markets. Makes probabilities sum to 100%",
          required: false,
        },
        {
          name: "totalBounty",
          type: "number",
          description:
            "Required for BOUNTIED_QUESTION markets. Amount of mana for bounty",
          required: false,
        },
        {
          name: "visibility",
          type: "string",
          description: "Optional. Market visibility. Defaults to public.",
          required: false,
        },
      ],
    },
    {
      name: "search_markets",
      description: "Search for prediction markets with optional filters",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Max number of results (1-100)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
        {
          name: "term",
          type: "string",
          description: "Search query",
          required: false,
        },
      ],
    },
    {
      name: "get_market",
      description: "Get detailed information about a specific market",
      parameters: [
        {
          name: "marketId",
          type: "string",
          description: "Market ID",
          required: true,
        },
      ],
    },
    {
      name: "get_user",
      description: "Get user information by username",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bmorphism/manifold-mcp-server",
  _varName: "manifoldMarketsMcpServerPlugin",
};

const nuancedMcpServerPlugin: Plugin = {
  id: "ugp1lwtv22",
  name: "Nuanced MCP Server",
  description:
    "An MCP server that enables LLMs to understand and analyze code structure through function call graphs, allowing AI assistants to explore relationships between functions and analyze dependencies in Python repositories.",
  image: "https://github.com/MattMorgis.png",
  actions: [
    {
      name: "initialize_graph",
      description:
        "Initialize a code graph for the given repository path.\n\nArgs:\n    repo_path: Path to the repository to analyze\n\nReturns:\n    Success message with information about the initialized graph\n",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "switch_repository",
      description:
        "Switch to a different initialized repository.\n\nArgs:\n    repo_path: Path to the repository to switch to\n\nReturns:\n    Success message or error\n",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "list_repositories",
      description:
        "List all initialized repositories.\n\nReturns:\n    List of initialized repositories\n",
      parameters: [],
    },
    {
      name: "get_function_call_graph",
      description:
        "Get the call graph for a specific function.\n\nArgs:\n    file_path: Path to the file containing the function\n    function_name: Name of the function to analyze\n    repo_path: Optional repository path (uses active repository if not specified)\n\nReturns:\n    Information about the function's call graph\n",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: true,
        },
        {
          name: "function_name",
          type: "string",
          description: "Parameter: function_name",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: false,
        },
      ],
    },
    {
      name: "analyze_dependencies",
      description:
        "Find all module or file dependencies in the codebase.\n\nIdentifies all function dependencies for a file or module\nin the active repository. This identifies all modules that\ndepend on the specified module or file.\n\nArgs:\n    file_path: Path to a specific file to analyze dependencies for\n    module_name: Name of a module to analyze dependencies for\n                (e.g., 'auth' will match 'app.auth', 'auth.users', etc.)\n\nReturns:\n    A list of all functions and files that depend on the specified module\n",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: false,
        },
        {
          name: "module_name",
          type: "string",
          description: "Parameter: module_name",
          required: false,
        },
      ],
    },
    {
      name: "analyze_change_impact",
      description:
        "Analyze the impact of changing a specific function.\n\nThis tool performs a comprehensive impact analysis to help understand\nwhat would be affected if you modify the specified function.\n\nArgs:\n    file_path: Path to the file containing the function\n    function_name: Name of the function to analyze\n\nReturns:\n    A detailed analysis of the potential impact of changing the function\n",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: true,
        },
        {
          name: "function_name",
          type: "string",
          description: "Parameter: function_name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MattMorgis/nuanced-mcp",
  _varName: "nuancedMcpServerPlugin",
};

const stabilityAiMcpServerPlugin: Plugin = {
  id: "arwjcxkkhg",
  name: "Stability AI MCP Server",
  description:
    "An MCP Server that integrates with Stability AI's API to provide high-quality image generation, editing, and manipulation capabilities including background removal, outpainting, search-and-replace, and upscaling.",
  image: "https://github.com/tadasant.png",
  actions: [
    {
      name: "stability-ai-generate-image",
      description: "Generate an image of anything based on a provided prompt.",
      parameters: [
        {
          name: "aspectRatio",
          type: "string",
          description: "Controls the aspect ratio of the generated image.",
          required: false,
        },
        {
          name: "negativePrompt",
          type: "string",
          description:
            "A blurb of text describing what you do not wish to see in the output image. This is an advanced feature.",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results.\n\nTo control the weight of a given word use the format (word:weight), where word is the word you'd like to control the weight of and weight is a value between 0 and 1. For example: The sky was a crisp (blue:0.3) and (green:0.8) would convey a sky that was blue and green, but more green than blue.",
          required: true,
        },
        {
          name: "stylePreset",
          type: "string",
          description: "Guides the image model towards a particular style.",
          required: false,
        },
      ],
    },
    {
      name: "stability-ai-generate-image-sd35",
      description:
        "Generate an image using Stable Diffusion 3.5 models with advanced configuration options.",
      parameters: [
        {
          name: "aspectRatio",
          type: "string",
          description: "Controls the aspect ratio of the generated image.",
          required: false,
        },
        {
          name: "cfgScale",
          type: "number",
          description:
            "How strictly the diffusion process adheres to the prompt text. Values range from 1-10, with higher values keeping your image closer to your prompt.",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description:
            "The model to use for generation: SD3.5 Large (8B params, high quality), Medium (2.5B params, balanced), or Turbo (faster) variants. SD3.5 costs range from 3.5-6.5 credits per generation.",
          required: false,
        },
        {
          name: "negativePrompt",
          type: "string",
          description:
            "Keywords of what you do not wish to see in the output image. This helps avoid unwanted elements. Maximum 10000 characters.",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "The format of the output image.",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results.",
          required: true,
        },
        {
          name: "seed",
          type: "number",
          description:
            "A specific value that guides the 'randomness' of the generation. (Omit or use 0 for random seed)",
          required: false,
        },
        {
          name: "stylePreset",
          type: "string",
          description: "Guides the image model towards a particular style.",
          required: false,
        },
      ],
    },
    {
      name: "stability-ai-remove-background",
      description: "Remove the background from an image.",
      parameters: [
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: false,
        },
      ],
    },
    {
      name: "stability-ai-outpaint",
      description:
        "Extends an image in any direction while maintaining visual consistency.",
      parameters: [
        {
          name: "creativity",
          type: "number",
          description: "The creativity of the outpaint operation",
          required: false,
        },
        {
          name: "down",
          type: "number",
          description: "The number of pixels to extend the image downwards",
          required: false,
        },
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "left",
          type: "number",
          description: "The number of pixels to extend the image to the left",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "The prompt to use for the outpaint operation",
          required: false,
        },
        {
          name: "right",
          type: "number",
          description: "The number of pixels to extend the image to the right",
          required: false,
        },
        {
          name: "up",
          type: "number",
          description: "The number of pixels to extend the image upwards",
          required: false,
        },
      ],
    },
    {
      name: "stability-ai-search-and-replace",
      description:
        "Replace objects or elements in an image by describing what to replace and what to replace it with.",
      parameters: [
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "What you wish to see in place of the searched content",
          required: true,
        },
        {
          name: "searchPrompt",
          type: "string",
          description: "Short description of what to replace in the image",
          required: true,
        },
      ],
    },
    {
      name: "stability-ai-upscale-fast",
      description: "Cheap and fast tool to enhance image resolution by 4x.",
      parameters: [
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
      ],
    },
    {
      name: "stability-ai-upscale-creative",
      description:
        "Enhance image resolution up to 4K using AI with creative interpretation. This tool works best on highly degraded images and performs heavy reimagining. In general, don't use this (expensive) tool unless specifically asked to do so, usually after trying stability-ai-upscale-fast first.",
      parameters: [
        {
          name: "creativity",
          type: "number",
          description:
            "Optional value (0-0.35) indicating how creative the model should be. Higher values add more details during upscaling.",
          required: false,
        },
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "negativePrompt",
          type: "string",
          description:
            "Optional text describing what you do not wish to see in the output image.",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects.",
          required: true,
        },
      ],
    },
    {
      name: "stability-ai-control-sketch",
      description: "Translate hand-drawn sketches to production-grade images.",
      parameters: [
        {
          name: "controlStrength",
          type: "number",
          description:
            "How much influence, or control, the image has on the generation. Represented as a float between 0 and 1, where 0 is the least influence and 1 is the maximum.",
          required: false,
        },
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "negativePrompt",
          type: "string",
          description: "What you do not wish to see in the output image.",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results.\n\nTo control the weight of a given word use the format (word:weight), where word is the word you'd like to control the weight of and weight is a value between 0 and 1. For example: The sky was a crisp (blue:0.3) and (green:0.8) would convey a sky that was blue and green, but more green than blue.",
          required: true,
        },
      ],
    },
    {
      name: "stability-ai-0-list-resources",
      description:
        "Use this to check for files before deciding you don't have access to a file or image or resource. It pulls in a list of all of user's available Resources (i.e. image files and their URI's) so we can reference pre-existing images to manipulate or upload to Stability AI.",
      parameters: [],
    },
    {
      name: "stability-ai-search-and-recolor",
      description: "Search and recolor object(s) in an image",
      parameters: [
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the image file. It should start with file://",
          required: true,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "What colors you wish to see in the output image",
          required: true,
        },
        {
          name: "selectPrompt",
          type: "string",
          description:
            "Short description of what to search for and recolor in the image",
          required: true,
        },
      ],
    },
    {
      name: "stability-ai-replace-background-and-relight",
      description: "Replace background and adjust lighting of an image",
      parameters: [
        {
          name: "backgroundPrompt",
          type: "string",
          description: "Description of the desired background",
          required: false,
        },
        {
          name: "backgroundReferenceUri",
          type: "string",
          description: "Optional URI to a reference image for background style",
          required: false,
        },
        {
          name: "foregroundPrompt",
          type: "string",
          description:
            "Optional description of the subject to prevent background bleeding",
          required: false,
        },
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the subject image file. It should start with file://",
          required: true,
        },
        {
          name: "keepOriginalBackground",
          type: "boolean",
          description: "Whether to keep the original background",
          required: false,
        },
        {
          name: "lightReferenceUri",
          type: "string",
          description: "Optional URI to a reference image for lighting",
          required: false,
        },
        {
          name: "lightSourceDirection",
          type: "string",
          description: "Direction of the light source",
          required: false,
        },
        {
          name: "lightSourceStrength",
          type: "number",
          description: "Strength of the light source (0-1)",
          required: false,
        },
        {
          name: "negativePrompt",
          type: "string",
          description: "Optional description of what you don't want to see",
          required: false,
        },
        {
          name: "originalBackgroundDepth",
          type: "number",
          description: "Control background depth matching (0-1)",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "preserveOriginalSubject",
          type: "number",
          description: "How much to preserve the original subject (0-1)",
          required: false,
        },
      ],
    },
    {
      name: "stability-ai-control-style",
      description: "Generate a new image in the style of a reference image",
      parameters: [
        {
          name: "aspectRatio",
          type: "string",
          description: "Optional aspect ratio for the generated image",
          required: false,
        },
        {
          name: "fidelity",
          type: "number",
          description:
            "How closely the output image's style should match the input (0-1)",
          required: false,
        },
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the style reference image file. It should start with file://",
          required: true,
        },
        {
          name: "negativePrompt",
          type: "string",
          description: "Optional description of what you don't want to see",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "What you wish to see in the output image",
          required: true,
        },
      ],
    },
    {
      name: "stability-ai-control-structure",
      description:
        "Generate a new image while maintaining the structure of a reference image",
      parameters: [
        {
          name: "controlStrength",
          type: "number",
          description:
            "How much influence the reference image has on the generation (0-1)",
          required: false,
        },
        {
          name: "imageFileUri",
          type: "string",
          description:
            "The URI to the structure reference image file. It should start with file://",
          required: true,
        },
        {
          name: "negativePrompt",
          type: "string",
          description: "Optional description of what you don't want to see",
          required: false,
        },
        {
          name: "outputImageFileName",
          type: "string",
          description:
            "The desired name of the output image file, no file extension. Make it descriptive but short. Lowercase, dash-separated, no special characters.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "What you wish to see in the output image",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tadasant/mcp-server-stability-ai",
  _varName: "stabilityAiMcpServerPlugin",
};

const arxivMcpServerPlugin: Plugin = {
  id: "n6w02y4r6h",
  name: "ArXiv MCP Server",
  description:
    "Enables AI assistants to search and access arXiv research papers through a simple Message Control Protocol interface, allowing for paper search, download, listing, and reading capabilities.",
  image: "https://github.com/huanongfish.png",
  actions: [
    {
      name: "search_papers",
      description: "Search for papers on arXiv with advanced filtering",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description: "Parameter: categories",
          required: false,
        },
        {
          name: "date_from",
          type: "string",
          description: "Parameter: date_from",
          required: false,
        },
        {
          name: "date_to",
          type: "string",
          description: "Parameter: date_to",
          required: false,
        },
        {
          name: "max_results",
          type: "integer",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "download_paper",
      description: "Download a paper and create a resource for it",
      parameters: [
        {
          name: "check_status",
          type: "boolean",
          description:
            "If true, only check conversion status without downloading",
          required: false,
        },
        {
          name: "paper_id",
          type: "string",
          description: "The arXiv ID of the paper to download",
          required: true,
        },
      ],
    },
    {
      name: "list_papers",
      description: "List all existing papers available as resources",
      parameters: [],
    },
    {
      name: "read_paper",
      description: "Read the full content of a stored paper in markdown format",
      parameters: [
        {
          name: "paper_id",
          type: "string",
          description: "The arXiv ID of the paper to read",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/huanongfish/arxiv-mcp",
  _varName: "arxivMcpServerPlugin",
};

const shellMcpServerPlugin: Plugin = {
  id: "jwkd5nmnh7",
  name: "Shell MCP Server",
  description:
    "A Node.js implementation of the Model Context Protocol that provides secure shell command execution capabilities, allowing AI models like Claude to run shell commands in a controlled environment with built-in security measures.",
  image: "https://github.com/hdresearch.png",
  actions: [
    {
      name: "run_command",
      description: "Run a shell command",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hdresearch/mcp-shell",
  _varName: "shellMcpServerPlugin",
};

const notionMcpServer1Plugin: Plugin = {
  id: "bjc5iac7gt",
  name: "Notion MCP Server",
  description:
    "A Model Context Protocol (MCP) server that exposes the official Notion SDK, allowing AI models to interact with Notion workspaces.",
  image: "https://github.com/ramidecodes.png",
  actions: [
    {
      name: "search",
      description: "Action for search",
      parameters: [
        {
          name: "filter_object_type",
          type: "string",
          description: "Filter by object type",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results to return (max 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query string",
          required: false,
        },
      ],
    },
    {
      name: "query-database",
      description: "Action for query-database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to query",
          required: true,
        },
        {
          name: "filter",
          type: "string",
          description: "JSON string of filter criteria",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results to return (max 100)",
          required: false,
        },
        {
          name: "sorts",
          type: "string",
          description: "JSON string of sort criteria",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "get-database",
      description: "Action for get-database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create-page",
      description: "Action for create-page",
      parameters: [
        {
          name: "children",
          type: "string",
          description: "JSON string of page content blocks",
          required: false,
        },
        {
          name: "parent_id",
          type: "string",
          description: "ID of the parent database or page",
          required: true,
        },
        {
          name: "parent_type",
          type: "string",
          description: "Type of parent (database or page)",
          required: true,
        },
        {
          name: "properties",
          type: "string",
          description: "JSON string of page properties",
          required: true,
        },
      ],
    },
    {
      name: "get-page",
      description: "Action for get-page",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "The ID of the page to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "update-page",
      description: "Action for update-page",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Whether to archive the page",
          required: false,
        },
        {
          name: "page_id",
          type: "string",
          description: "The ID of the page to update",
          required: true,
        },
        {
          name: "properties",
          type: "string",
          description: "JSON string of page properties to update",
          required: true,
        },
      ],
    },
    {
      name: "append-blocks",
      description: "Action for append-blocks",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "The ID of the block to append to",
          required: true,
        },
        {
          name: "children",
          type: "string",
          description: "JSON string of blocks to append",
          required: true,
        },
      ],
    },
    {
      name: "get-block",
      description: "Action for get-block",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "The ID of the block to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-block-children",
      description: "Action for get-block-children",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "The ID of the block to get children from",
          required: true,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results to return (max 100)",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "update-block",
      description: "Action for update-block",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "The ID of the block to update",
          required: true,
        },
        {
          name: "properties",
          type: "string",
          description: "JSON string of block properties to update",
          required: true,
        },
      ],
    },
    {
      name: "delete-block",
      description: "Action for delete-block",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "The ID of the block to delete",
          required: true,
        },
      ],
    },
    {
      name: "list-users",
      description: "Action for list-users",
      parameters: [],
    },
    {
      name: "get-user",
      description: "Action for get-user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "The ID of the user to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-me",
      description: "Action for get-me",
      parameters: [],
    },
    {
      name: "create-comment",
      description: "Action for create-comment",
      parameters: [
        {
          name: "discussion_id",
          type: "string",
          description: "Optional discussion ID for threaded comments",
          required: false,
        },
        {
          name: "page_id",
          type: "string",
          description: "The ID of the page to comment on",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The comment text content",
          required: true,
        },
      ],
    },
    {
      name: "list-comments",
      description: "Action for list-comments",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "The ID of the block to get comments from",
          required: false,
        },
        {
          name: "page_id",
          type: "string",
          description: "The ID of the page to get comments from",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results to return (max 100)",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "create-link-preview",
      description: "Action for create-link-preview",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "The ID of the page to add the preview to",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to create a preview for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ramidecodes/mcp-server-notion",
  _varName: "notionMcpServer1Plugin",
};

const mcpServerForReplicatePlugin: Plugin = {
  id: "qa14472rhe",
  name: "MCP Server for Replicate",
  description:
    "A FastMCP server implementation that provides a standardized interface for accessing AI models hosted on Replicate's API, currently supporting image generation with customizable parameters.",
  image: "https://github.com/tzafrir.png",
  actions: [],
  githubUrl: "https://github.com/tzafrir/mcp-server-replicate",
  _varName: "mcpServerForReplicatePlugin",
};

const trivySecurityScannerMcpServerPlugin: Plugin = {
  id: "queu46h5iw",
  name: "Trivy Security Scanner MCP Server",
  description:
    "Provides Trivy security scanning capabilities through a standardized interface, allowing users to scan projects for vulnerabilities and automatically fix them by updating dependencies.",
  image: "https://github.com/norbinsh.png",
  actions: [],
  githubUrl: "https://github.com/norbinsh/cursor-mcp-trivy",
  _varName: "trivySecurityScannerMcpServerPlugin",
};

const rustDocsMcpServerPlugin: Plugin = {
  id: "4kl3b33u2z",
  name: "Rust Docs MCP Server",
  description:
    "An MCP server that provides AI tools with access to Rust documentation from docs.rs, enabling search for crates, documentation, type information, feature flags, version information, and source code.",
  image: "https://github.com/laptou.png",
  actions: [],
  githubUrl: "https://github.com/laptou/rust-docs-mcp-server",
  _varName: "rustDocsMcpServerPlugin",
};

const mcpServerForMysqlPlugin: Plugin = {
  id: "h3l0fukpq6",
  name: "MCP Server for MySQL",
  description:
    "A Model Context Protocol server that provides read-only access to MySQL databases, enabling LLMs to inspect database schemas and execute read-only queries.",
  image: "https://github.com/benborla.png",
  actions: [],
  githubUrl: "https://github.com/benborla/mcp-server-mysql",
  _varName: "mcpServerForMysqlPlugin",
};

const productboardMcpServerPlugin: Plugin = {
  id: "6uvjyt5ipy",
  name: "Productboard MCP Server",
  description:
    "Integrates Productboard API into agentic workflows, allowing interaction with companies, components, features, notes, and products from the Productboard platform.",
  image: "https://github.com/kenjihikmatullah.png",
  actions: [
    {
      name: "get_products",
      description:
        "Returns detail of all products. This API is paginated and the page limit is always 100",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "get_product_detail",
      description: "Returns detailed information about a specific product",
      parameters: [
        {
          name: "productId",
          type: "string",
          description: "ID of the product to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get_features",
      description:
        "Returns a list of all features. This API is paginated and the page limit is always 100",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "get_feature_detail",
      description: "Returns detailed information about a specific feature",
      parameters: [
        {
          name: "featureId",
          type: "string",
          description: "ID of the feature to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get_components",
      description:
        "Returns a list of all components. This API is paginated and the page limit is always 100",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "get_component_detail",
      description: "Returns detailed information about a specific component",
      parameters: [
        {
          name: "componentId",
          type: "string",
          description: "ID of the component to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get_feature_statuses",
      description:
        "Returns a list of all feature statuses. This API is paginated and the page limit is always 100",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "get_notes",
      description: "Returns a list of all notes",
      parameters: [
        {
          name: "allTags",
          type: "string",
          description:
            "Return only notes that have been assigned all of the tags in the array. Cannot be combined with anyTag",
          required: false,
        },
        {
          name: "anyTag",
          type: "string",
          description:
            "Return only notes that have been assigned any of the tags in the array. Cannot be combined with allTags",
          required: false,
        },
        {
          name: "companyId",
          type: "string",
          description: "Return only notes for specific company ID",
          required: false,
        },
        {
          name: "createdFrom",
          type: "string",
          description:
            "Return only notes created since given date. Cannot be combined with last",
          required: false,
        },
        {
          name: "createdTo",
          type: "string",
          description:
            "Return only notes created before or equal to the given date. Cannot be combined with last",
          required: false,
        },
        {
          name: "featureId",
          type: "string",
          description:
            "Return only notes for specific feature ID or its descendants",
          required: false,
        },
        {
          name: "last",
          type: "string",
          description:
            "Return only notes created since given span of months (m), days (s), or hours (h). E.g. 6m | 10d | 24h | 1h. Cannot be combined with createdFrom, createdTo, dateFrom, or dateTo",
          required: false,
        },
        {
          name: "ownerEmail",
          type: "string",
          description: "Return only notes owned by a specific owner email",
          required: false,
        },
        {
          name: "pageCursor",
          type: "string",
          description: "Page cursor to get next page of results",
          required: false,
        },
        {
          name: "pageLimit",
          type: "number",
          description: "Page limit",
          required: false,
        },
        {
          name: "source",
          type: "string",
          description:
            "Return only notes from a specific source origin. This is the unique string identifying the external system from which the data came",
          required: false,
        },
        {
          name: "term",
          type: "string",
          description: "Return only notes by fulltext search",
          required: false,
        },
        {
          name: "updatedFrom",
          type: "string",
          description: "Return only notes updated since given date",
          required: false,
        },
        {
          name: "updatedTo",
          type: "string",
          description:
            "Return only notes updated before or equal to the given date",
          required: false,
        },
      ],
    },
    {
      name: "get_note_detail",
      description: "Returns detailed information about a specific note",
      parameters: [
        {
          name: "noteId",
          type: "string",
          description: "ID of the note to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get_companies",
      description:
        "Returns a list of all companies. This API is paginated and the page limit is always 100",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "get_company_detail",
      description: "Returns detailed information about a specific company",
      parameters: [
        {
          name: "companyId",
          type: "string",
          description: "ID of the company to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kenjihikmatullah/productboard-mcp",
  _varName: "productboardMcpServerPlugin",
};

const zoteroMcpServerPlugin: Plugin = {
  id: "hc851vjbov",
  name: "Zotero MCP Server",
  description:
    "A server that enables MCP clients like Anthropic Claude App to interact with local Zotero libraries, allowing users to search papers, manage notes, and access research materials through natural language.",
  image: "https://github.com/swairshah.png",
  actions: [],
  githubUrl: "https://github.com/swairshah/zotero-mcp-server",
  _varName: "zoteroMcpServerPlugin",
};

const coinMcpServerPlugin: Plugin = {
  id: "504t0uq4s6",
  name: "Coin MCP Server",
  description:
    "A Model Context Protocol server that provides access to CoinMarketCap's cryptocurrency data, enabling AI applications to retrieve cryptocurrency listings, quotes, and detailed information.",
  image: "https://github.com/longmans.png",
  actions: [
    {
      name: "listing-coins",
      description:
        "Returns a paginated list of all active cryptocurrencies with latest market data",
      parameters: [
        {
          name: "aux",
          type: "string",
          description:
            "Optionally specify a comma-separated list of supplemental data fields to return.",
          required: false,
        },
        {
          name: "circulating_supply_max",
          type: "number",
          description:
            "Optionally specify a threshold of maximum circulating supply to filter results by.",
          required: false,
        },
        {
          name: "circulating_supply_min",
          type: "number",
          description:
            "Optionally specify a threshold of minimum circulating supply to filter results by.",
          required: false,
        },
        {
          name: "convert",
          type: "string",
          description:
            "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols.",
          required: false,
        },
        {
          name: "convert_id",
          type: "string",
          description:
            "Optionally calculate market quotes by CoinMarketCap ID instead of symbol.",
          required: false,
        },
        {
          name: "cryptocurrency_type",
          type: "string",
          description: "The type of cryptocurrency to include.",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Optionally specify the number of results to return.",
          required: false,
        },
        {
          name: "market_cap_max",
          type: "number",
          description:
            "Optionally specify a threshold of maximum market cap to filter results by.",
          required: false,
        },
        {
          name: "market_cap_min",
          type: "number",
          description:
            "Optionally specify a threshold of minimum market cap to filter results by.",
          required: false,
        },
        {
          name: "percent_change_24h_max",
          type: "number",
          description:
            "Optionally specify a threshold of maximum 24 hour percent change to filter results by.",
          required: false,
        },
        {
          name: "percent_change_24h_min",
          type: "number",
          description:
            "Optionally specify a threshold of minimum 24 hour percent change to filter results by.",
          required: false,
        },
        {
          name: "price_max",
          type: "number",
          description:
            "Optionally specify a threshold of maximum USD price to filter results by.",
          required: false,
        },
        {
          name: "price_min",
          type: "number",
          description:
            "Optionally specify a threshold of minimum USD price to filter results by.",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "What field to sort the list of cryptocurrencies by.",
          required: false,
        },
        {
          name: "sort_dir",
          type: "string",
          description:
            "The direction in which to order cryptocurrencies against the specified sort.",
          required: false,
        },
        {
          name: "start",
          type: "integer",
          description:
            "Optionally offset the start (1-based index) of the paginated list of items to return.",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "The tag of cryptocurrency to include.",
          required: false,
        },
        {
          name: "volume_24h_max",
          type: "number",
          description:
            "Optionally specify a threshold of maximum 24 hour USD volume to filter results by.",
          required: false,
        },
        {
          name: "volume_24h_min",
          type: "number",
          description:
            "Optionally specify a threshold of minimum 24 hour USD volume to filter results by.",
          required: false,
        },
      ],
    },
    {
      name: "get-coin-info",
      description:
        "Get coins' information includes details like logo, description, official website URL, social links, and links to a cryptocurrency's technical documentation.",
      parameters: [
        {
          name: "address",
          type: "string",
          description:
            'Alternatively pass in a contract address. Example: "0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e"',
          required: false,
        },
        {
          name: "aux",
          type: "string",
          description:
            "Optionally specify a comma-separated list of supplemental data fields to return. Pass urls,logo,description,tags,platform,date_added,notice,status to include all auxiliary fields.",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description:
            'One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: "1,2"',
          required: false,
        },
        {
          name: "skip_invalid",
          type: "boolean",
          description:
            "Pass true to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description:
            'Alternatively pass a comma-separated list of cryptocurrency slugs. Example: "bitcoin,ethereum"',
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description:
            'Alternatively pass one or more comma-separated cryptocurrency symbols. Example: "BTC,ETH"',
          required: false,
        },
      ],
    },
    {
      name: "get-coin-quotes",
      description:
        'the latest market quote for 1 or more cryptocurrencies. Use the "convert" option to return market values in multiple fiat and cryptocurrency conversions in the same call.',
      parameters: [
        {
          name: "aux",
          type: "string",
          description:
            '"num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat"Optionally specify a comma-separated list of supplemental data fields to return.',
          required: false,
        },
        {
          name: "convert",
          type: "string",
          description:
            "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols.",
          required: false,
        },
        {
          name: "convert_id",
          type: "string",
          description:
            "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to convert outside of ID format.",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description:
            "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
          required: false,
        },
        {
          name: "skip_invalid",
          type: "boolean",
          description: "Pass true to relax request validation rules.",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description:
            'Alternatively pass a comma-separated list of cryptocurrency slugs. Example: "bitcoin,ethereum"',
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description:
            'Alternatively pass one or more comma-separated cryptocurrency symbols. Example: "BTC,ETH"',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/longmans/coin_api_mcp",
  _varName: "coinMcpServerPlugin",
};

const uberEatsMcpServerPlugin: Plugin = {
  id: "pizbx6wayz",
  name: "Uber Eats MCP Server",
  description:
    "A proof-of-concept Model Context Protocol server that enables LLM applications to interact with Uber Eats, allowing AI agents to browse and order food through natural language.",
  image: "https://github.com/ericzakariasson.png",
  actions: [],
  githubUrl: "https://github.com/ericzakariasson/uber-eats-mcp-server",
  _varName: "uberEatsMcpServerPlugin",
};

const sleepMcpServerPlugin: Plugin = {
  id: "ebli96s3w9",
  name: "Sleep MCP Server",
  description:
    "A Model Context Protocol (MCP) server that provides a simple sleep/wait tool, useful for adding delays between operations such as waiting between API calls or testing eventually consistent systems.",
  image: "https://github.com/Garoth.png",
  actions: [
    {
      name: "sleep",
      description: "Wait for a specified duration",
      parameters: [
        {
          name: "milliseconds",
          type: "number",
          description: "Duration to wait in milliseconds",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Garoth/sleep-mcp",
  _varName: "sleepMcpServerPlugin",
};

const posthogMcpServerPlugin: Plugin = {
  id: "zkqzx42bi8",
  name: "PostHog MCP Server",
  description:
    "A Model Context Protocol server that enables Claude Desktop users to interact directly with PostHog, allowing them to view projects and create annotations through natural language commands.",
  image: "https://github.com/PostHog.png",
  actions: [
    {
      name: "list_posthog_projects",
      description: "List all available PostHog projects.",
      parameters: [],
    },
    {
      name: "create_posthog_annotation",
      description:
        "Create a PostHog annotation.\n\nArgs:\n    project_id: The ID of the project as an integer (e.g. 99423)\n    content: The content/text of the annotation\n    date_marker: Optional ISO-8601 timestamp for the annotation (e.g. 2024-03-20T14:15:22Z)\n",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "date_marker",
          type: "string",
          description: "Parameter: date_marker",
          required: false,
        },
        {
          name: "project_id",
          type: "integer",
          description: "Parameter: project_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PostHog/posthog-mcp",
  _varName: "posthogMcpServerPlugin",
};

const kintoneMcpServerPlugin: Plugin = {
  id: "dki958qnks",
  name: "Kintone MCP Server",
  description:
    "A Model Context Protocol server that enables Claude and other AI assistants to access and update Kintone data through natural language commands, supporting operations like record management, file handling, app administration, and space collaboration.",
  image: "https://github.com/r3-yamauchi.png",
  actions: [
    {
      name: "update_space_members",
      description: "スペースメンバーを更新します",
      parameters: [
        {
          name: "members",
          type: "object array",
          description: "Parameter: members",
          required: true,
        },
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
      ],
    },
    {
      name: "add_thread",
      description: "スペースにスレッドを追加します",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "スレッド名",
          required: true,
        },
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
      ],
    },
    {
      name: "update_thread",
      description: "スレッドを更新します",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "スレッドの本文（HTML形式）",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "スレッドの新しい名前",
          required: false,
        },
        {
          name: "thread_id",
          type: "string",
          description: "スレッドID",
          required: true,
        },
      ],
    },
    {
      name: "add_thread_comment",
      description: "スレッドにコメントを追加します",
      parameters: [
        {
          name: "mentions",
          type: "object array",
          description: "Parameter: mentions",
          required: false,
        },
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "コメント本文",
          required: true,
        },
        {
          name: "thread_id",
          type: "string",
          description: "スレッドID",
          required: true,
        },
      ],
    },
    {
      name: "add_guests",
      description: "ゲストユーザーを追加します",
      parameters: [
        {
          name: "guests",
          type: "object array",
          description: "Parameter: guests",
          required: true,
        },
      ],
    },
    {
      name: "update_space_guests",
      description: "スペースのゲストメンバーを更新します",
      parameters: [
        {
          name: "guests",
          type: "string array",
          description: "Parameter: guests",
          required: true,
        },
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
      ],
    },
    {
      name: "create_app",
      description: "新しいkintoneアプリを作成します",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "アプリの名前",
          required: true,
        },
        {
          name: "space",
          type: "number",
          description: "スペースID（オプション）",
          required: false,
        },
        {
          name: "thread",
          type: "number",
          description: "スレッドID（オプション）",
          required: false,
        },
      ],
    },
    {
      name: "add_fields",
      description: "kintoneアプリにフィールドを追加します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "アプリID",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "フィールドの設定",
          required: true,
        },
      ],
    },
    {
      name: "deploy_app",
      description: "kintoneアプリの設定をデプロイします",
      parameters: [
        {
          name: "apps",
          type: "number array",
          description: "デプロイ対象のアプリID配列",
          required: true,
        },
      ],
    },
    {
      name: "get_deploy_status",
      description: "kintoneアプリのデプロイ状態を確認します",
      parameters: [
        {
          name: "apps",
          type: "number array",
          description: "確認対象のアプリID配列",
          required: true,
        },
      ],
    },
    {
      name: "update_app_settings",
      description: "kintoneアプリの一般設定を変更します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "アプリID",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "アプリの説明（10,000文字以内、HTMLタグ使用可）",
          required: false,
        },
        {
          name: "enableBulkDeletion",
          type: "boolean",
          description: "レコード一括削除の有効化",
          required: false,
        },
        {
          name: "enableComments",
          type: "boolean",
          description: "コメント機能の有効化",
          required: false,
        },
        {
          name: "enableDuplicateRecord",
          type: "boolean",
          description: "レコード再利用機能の有効化",
          required: false,
        },
        {
          name: "enableInlineRecordEditing",
          type: "boolean",
          description: "インライン編集の有効化",
          required: false,
        },
        {
          name: "enableThumbnails",
          type: "boolean",
          description: "サムネイル表示の有効化",
          required: false,
        },
        {
          name: "firstMonthOfFiscalYear",
          type: "string",
          description: "第一四半期の開始月（1-12）",
          required: false,
        },
        {
          name: "icon",
          type: "object",
          description: "Parameter: icon",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "アプリの名前（1文字以上64文字以内）",
          required: false,
        },
        {
          name: "numberPrecision",
          type: "object",
          description: "Parameter: numberPrecision",
          required: false,
        },
        {
          name: "theme",
          type: "string",
          description: "デザインテーマ",
          required: false,
        },
        {
          name: "titleField",
          type: "object",
          description: "Parameter: titleField",
          required: false,
        },
      ],
    },
    {
      name: "get_form_layout",
      description: "kintoneアプリのフォームレイアウトを取得します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
      ],
    },
    {
      name: "update_form_layout",
      description: "kintoneアプリのフォームレイアウトを変更します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
        {
          name: "layout",
          type: "object array",
          description: "フォームのレイアウト情報",
          required: true,
        },
        {
          name: "revision",
          type: "number",
          description:
            "アプリのリビジョン番号（省略時は-1で最新リビジョンを使用）",
          required: false,
        },
      ],
    },
    {
      name: "get_record",
      description: "kintoneアプリの1レコードを取得します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
        {
          name: "record_id",
          type: "number",
          description: "レコードID",
          required: true,
        },
      ],
    },
    {
      name: "search_records",
      description: "kintoneアプリのレコードを検索します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
        {
          name: "fields",
          type: "string array",
          description: "取得するフィールド名の配列",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "検索クエリ",
          required: false,
        },
      ],
    },
    {
      name: "create_record",
      description: "kintoneアプリに新しいレコードを作成します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "レコードのフィールド値",
          required: true,
        },
      ],
    },
    {
      name: "update_record",
      description: "kintoneアプリの既存レコードを更新します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "更新するフィールド値",
          required: true,
        },
        {
          name: "record_id",
          type: "number",
          description: "レコードID",
          required: true,
        },
      ],
    },
    {
      name: "get_apps_info",
      description:
        "検索キーワードを指定して該当する複数のkintoneアプリの情報を取得します",
      parameters: [
        {
          name: "app_name",
          type: "string",
          description: "アプリ名またはその一部",
          required: true,
        },
      ],
    },
    {
      name: "download_file",
      description: "kintoneアプリからファイルをダウンロードします",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "ダウンロードするファイルのキー",
          required: true,
        },
      ],
    },
    {
      name: "upload_file",
      description: "kintoneアプリにファイルをアップロードします",
      parameters: [
        {
          name: "file_data",
          type: "string",
          description: "Base64エンコードされたファイルデータ",
          required: true,
        },
        {
          name: "file_name",
          type: "string",
          description: "アップロードするファイルの名前",
          required: true,
        },
      ],
    },
    {
      name: "add_record_comment",
      description: "kintoneレコードにコメントを追加します",
      parameters: [
        {
          name: "app_id",
          type: "number",
          description: "kintoneアプリのID",
          required: true,
        },
        {
          name: "mentions",
          type: "object array",
          description: "メンション情報の配列",
          required: false,
        },
        {
          name: "record_id",
          type: "number",
          description: "レコードID",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "コメント本文",
          required: true,
        },
      ],
    },
    {
      name: "get_space",
      description: "スペースの一般情報を取得します",
      parameters: [
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
      ],
    },
    {
      name: "update_space",
      description: "スペースの設定を更新します",
      parameters: [
        {
          name: "fixedMember",
          type: "boolean",
          description: "メンバー固定設定",
          required: false,
        },
        {
          name: "isPrivate",
          type: "boolean",
          description: "プライベート設定",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "スペースの新しい名前",
          required: false,
        },
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
        {
          name: "useMultiThread",
          type: "boolean",
          description: "マルチスレッド設定",
          required: false,
        },
      ],
    },
    {
      name: "update_space_body",
      description: "スペースの本文を更新します",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "スペースの本文（HTML形式）",
          required: true,
        },
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
      ],
    },
    {
      name: "get_space_members",
      description: "スペースメンバーのリストを取得します",
      parameters: [
        {
          name: "space_id",
          type: "string",
          description: "スペースID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/r3-yamauchi/kintone-mcp-server",
  _varName: "kintoneMcpServerPlugin",
};

const djangoMigrationsMcpServicePlugin: Plugin = {
  id: "jcsw5n4pn7",
  name: "Django Migrations MCP Service",
  description:
    "A Model Context Protocol service that wraps Django's migration commands as MCP endpoints, making it easy to manage migrations across multiple services and integrate with CI/CD pipelines.",
  image: "https://github.com/mrrobotke.png",
  actions: [],
  githubUrl: "https://github.com/mrrobotke/django-migrations-mcp",
  _varName: "djangoMigrationsMcpServicePlugin",
};

const systempromptmcpinterviewPlugin: Plugin = {
  id: "jy0q2qf5yo",
  name: "systemprompt-mcp-interview",
  description:
    "A specialized Model Context Protocol (MCP) server that enables AI-powered interview roleplay scenarios for practice with realistic conversational feedback.",
  image: "https://github.com/Ejb503.png",
  actions: [],
  githubUrl: "https://github.com/Ejb503/systemprompt-mcp-interview",
  _varName: "systempromptmcpinterviewPlugin",
};

const gelDatabaseMcpServerPlugin: Plugin = {
  id: "xxwoav0t36",
  name: "Gel Database MCP Server",
  description:
    "A TypeScript-based MCP server that enables LLM agents to interact with Gel databases through natural language, providing tools to learn database schemas, validate and execute EdgeQL queries.",
  image: "https://github.com/christian561.png",
  actions: [],
  githubUrl: "https://github.com/christian561/gel-mcp-server",
  _varName: "gelDatabaseMcpServerPlugin",
};

const mcpQrCodeServerPlugin: Plugin = {
  id: "5ua6ru4d1e",
  name: "MCP QR Code Server",
  description:
    "A server that connects large language models to QR code generation capabilities via Model Context Protocol, supporting multiple content types (URLs, WiFi credentials, contacts, text), output formats, and customization options.",
  image: "https://github.com/jwalsh.png",
  actions: [],
  githubUrl: "https://github.com/jwalsh/mcp-server-qrcode",
  _varName: "mcpQrCodeServerPlugin",
};

const mcpNotionServerPlugin: Plugin = {
  id: "stxohtlgox",
  name: "MCP Notion Server",
  description:
    "A bridge between Claude AI and Notion that enables users to interact with Notion databases and pages through natural language, supporting operations like creating, reading, updating, and deleting content.",
  image: "https://github.com/gabornyergesX.png",
  actions: [
    {
      name: "query_database",
      description: "Query a database with filters and sorting",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "ID of the database to query",
          required: true,
        },
        {
          name: "filter",
          type: "object",
          description: "Filter conditions",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "sorts",
          type: "array",
          description: "Sorting parameters",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "search",
      description: "Search pages and databases",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Filter by object type (page or database)",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "sort",
          type: "object",
          description: "Sort by last edited or created time",
          required: false,
        },
        {
          name: "start_cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "list_databases",
      description: "List all accessible databases",
      parameters: [],
    },
    {
      name: "create_database",
      description: "Create a new database",
      parameters: [
        {
          name: "parent_id",
          type: "string",
          description: "ID of the parent page",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Database properties schema",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the database",
          required: true,
        },
      ],
    },
    {
      name: "create_page",
      description: "Create a new page",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content in markdown format",
          required: false,
        },
        {
          name: "parent_id",
          type: "string",
          description: "ID of the parent page or database",
          required: true,
        },
        {
          name: "parent_type",
          type: "string",
          description: "Type of parent (database or page)",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Page properties (required for database pages)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the page",
          required: false,
        },
      ],
    },
    {
      name: "update_page",
      description: "Update an existing page",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "ID of the page to update",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Updated page properties",
          required: true,
        },
      ],
    },
    {
      name: "append_blocks",
      description: "Append blocks to a page",
      parameters: [
        {
          name: "blocks",
          type: "array",
          description: "Array of block objects to append",
          required: true,
        },
        {
          name: "page_id",
          type: "string",
          description: "ID of the page",
          required: true,
        },
      ],
    },
    {
      name: "delete_blocks",
      description: "Delete blocks from a page",
      parameters: [
        {
          name: "block_id",
          type: "string",
          description: "ID of the block to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_page",
      description: "Retrieve a page by ID",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "ID of the page to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get_database",
      description: "Retrieve a database by ID",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "ID of the database to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/gabornyergesX/mcp-notion-server",
  _varName: "mcpNotionServerPlugin",
};

const solanaMcpServer1Plugin: Plugin = {
  id: "p7q40z4dv4",
  name: "Solana MCP Server",
  description:
    "A server that provides simple RPC endpoints for common Solana blockchain operations, allowing users to check balances, get account information, and transfer SOL between accounts.",
  image: "https://github.com/akc2267.png",
  actions: [
    {
      name: "getSlot",
      description: "Get the current slot",
      parameters: [],
    },
    {
      name: "getBalance",
      description: "Get balance for a Solana address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Solana account address",
          required: true,
        },
      ],
    },
    {
      name: "getKeypairInfo",
      description: "Get information about a keypair from its secret key",
      parameters: [
        {
          name: "secretKey",
          type: "string",
          description: "Base58 encoded secret key or array of bytes",
          required: true,
        },
      ],
    },
    {
      name: "getAccountInfo",
      description: "Get detailed account information for a Solana address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Solana account address",
          required: true,
        },
        {
          name: "encoding",
          type: "string",
          description: "Data encoding format",
          required: false,
        },
      ],
    },
    {
      name: "transfer",
      description: "Transfer SOL from your keypair to another address",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of SOL to send",
          required: true,
        },
        {
          name: "secretKey",
          type: "string",
          description:
            "Your keypair's secret key (as comma-separated numbers or JSON array)",
          required: true,
        },
        {
          name: "toAddress",
          type: "string",
          description: "Destination wallet address",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/akc2267/solana-mcp-server",
  _varName: "solanaMcpServer1Plugin",
};

const derivApiMcpServerPlugin: Plugin = {
  id: "mznc3niveo",
  name: "Deriv API MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to interact with the Deriv trading API, providing access to active trading symbols and account balance information.",
  image: "https://github.com/raju-deriv.png",
  actions: [
    {
      name: "get_active_symbols",
      description: "Action for get_active_symbols",
      parameters: [],
    },
    {
      name: "get_account_balance",
      description: "Action for get_account_balance",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/raju-deriv/mcp-deriv-api-server",
  _varName: "derivApiMcpServerPlugin",
};

const ankiMcpServerPlugin: Plugin = {
  id: "ft6bgijqf5",
  name: "Anki MCP Server",
  description:
    "A TypeScript-based server that integrates with Anki via the AnkiConnect plugin, allowing you to manage flashcard decks, note models, and create Anki notes using natural language.",
  image: "https://github.com/CamdenClark.png",
  actions: [],
  githubUrl: "https://github.com/CamdenClark/anki-mcp-server",
  _varName: "ankiMcpServerPlugin",
};

const codeExplainerMcpPlugin: Plugin = {
  id: "n61qu4bdbv",
  name: "Code Explainer MCP",
  description:
    "A Cloudflare Worker that analyzes source code to provide comprehensive explanations including architecture diagrams, core functionality analysis, and component breakdowns across multiple programming languages.",
  image: "https://github.com/BillDuke13.png",
  actions: [],
  githubUrl: "https://github.com/BillDuke13/code-explainer-mcp",
  _varName: "codeExplainerMcpPlugin",
};

const appwriteMcpServerPlugin: Plugin = {
  id: "xkj2px7r0v",
  name: "Appwrite MCP Server",
  description:
    "A Model Context Protocol server that allows AI assistants to interact with Appwrite's API, providing tools to manage databases, users, functions, teams, and other resources within Appwrite projects.",
  image: "https://github.com/appwrite.png",
  actions: [
    {
      name: "databases_create_document",
      description: "Create document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "data",
          type: "string",
          description: "Parameter 'data'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_create_email_attribute",
      description: "Create email attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_enum_attribute",
      description: "Create enum attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "elements",
          type: "string",
          description: "Parameter 'elements'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_float_attribute",
      description: "Create float attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: false,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_index",
      description: "Create index",
      parameters: [
        {
          name: "attributes",
          type: "string",
          description: "Parameter 'attributes'",
          required: true,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "orders",
          type: "string",
          description: "Parameter 'orders'",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter 'type'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_integer_attribute",
      description: "Create integer attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: false,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "users_create",
      description: "Create user",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: false,
        },
        {
          name: "phone",
          type: "string",
          description: "Parameter 'phone'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_argon2_user",
      description: "Create user with Argon2 password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_bcrypt_user",
      description: "Create user with bcrypt password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_jwt",
      description: "Create user JWT",
      parameters: [
        {
          name: "duration",
          type: "string",
          description: "Parameter 'duration'",
          required: false,
        },
        {
          name: "session_id",
          type: "string",
          description: "Parameter 'session_id'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_md5_user",
      description: "Create user with MD5 password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_mfa_recovery_codes",
      description: "Create MFA recovery codes",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_ph_pass_user",
      description: "Create user with PHPass password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_ip_attribute",
      description: "Create IP address attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_scrypt_modified_user",
      description: "Create user with Scrypt modified password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "password_salt",
          type: "string",
          description: "Parameter 'password_salt'",
          required: true,
        },
        {
          name: "password_salt_separator",
          type: "string",
          description: "Parameter 'password_salt_separator'",
          required: true,
        },
        {
          name: "password_signer_key",
          type: "string",
          description: "Parameter 'password_signer_key'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_relationship_attribute",
      description: "Create relationship attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: false,
        },
        {
          name: "on_delete",
          type: "string",
          description: "Parameter 'on_delete'",
          required: false,
        },
        {
          name: "related_collection_id",
          type: "string",
          description: "Parameter 'related_collection_id'",
          required: true,
        },
        {
          name: "two_way",
          type: "string",
          description: "Parameter 'two_way'",
          required: false,
        },
        {
          name: "two_way_key",
          type: "string",
          description: "Parameter 'two_way_key'",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter 'type'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_datetime_attribute",
      description: "Update dateTime attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_document",
      description: "Update document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "data",
          type: "string",
          description: "Parameter 'data'",
          required: false,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_email_attribute",
      description: "Update email attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_scrypt_user",
      description: "Create user with Scrypt password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "password_cpu",
          type: "string",
          description: "Parameter 'password_cpu'",
          required: true,
        },
        {
          name: "password_length",
          type: "string",
          description: "Parameter 'password_length'",
          required: true,
        },
        {
          name: "password_memory",
          type: "string",
          description: "Parameter 'password_memory'",
          required: true,
        },
        {
          name: "password_parallel",
          type: "string",
          description: "Parameter 'password_parallel'",
          required: true,
        },
        {
          name: "password_salt",
          type: "string",
          description: "Parameter 'password_salt'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_session",
      description: "Create session",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_sha_user",
      description: "Create user with SHA password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "password_version",
          type: "string",
          description: "Parameter 'password_version'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_target",
      description: "Create user target",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter 'identifier'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "provider_id",
          type: "string",
          description: "Parameter 'provider_id'",
          required: false,
        },
        {
          name: "provider_type",
          type: "string",
          description: "Parameter 'provider_type'",
          required: true,
        },
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_token",
      description: "Create token",
      parameters: [
        {
          name: "expire",
          type: "string",
          description: "Parameter 'expire'",
          required: false,
        },
        {
          name: "length",
          type: "string",
          description: "Parameter 'length'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete",
      description: "Delete user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_identity",
      description: "Delete identity",
      parameters: [
        {
          name: "identity_id",
          type: "string",
          description: "Parameter 'identity_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_mfa_authenticator",
      description: "Delete authenticator",
      parameters: [
        {
          name: "type",
          type: "string",
          description: "Parameter 'type'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_session",
      description: "Delete user session",
      parameters: [
        {
          name: "session_id",
          type: "string",
          description: "Parameter 'session_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_sessions",
      description: "Delete user sessions",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_target",
      description: "Delete user target",
      parameters: [
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get",
      description: "Get user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get_mfa_recovery_codes",
      description: "Get MFA recovery codes",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get_prefs",
      description: "Get user preferences",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get_target",
      description: "Get user target",
      parameters: [
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list",
      description: "List users",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "users_list_identities",
      description: "List identities",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "users_list_logs",
      description: "List user logs",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_memberships",
      description: "List user memberships",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_mfa_factors",
      description: "List factors",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_sessions",
      description: "List user sessions",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_targets",
      description: "List user targets",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_email",
      description: "Update email",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_email_verification",
      description: "Update email verification",
      parameters: [
        {
          name: "email_verification",
          type: "string",
          description: "Parameter 'email_verification'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_labels",
      description: "Update user labels",
      parameters: [
        {
          name: "labels",
          type: "string",
          description: "Parameter 'labels'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_mfa",
      description: "Update MFA",
      parameters: [
        {
          name: "mfa",
          type: "string",
          description: "Parameter 'mfa'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_mfa_recovery_codes",
      description: "Regenerate MFA recovery codes",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_name",
      description: "Update name",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_password",
      description: "Update password",
      parameters: [
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_phone",
      description: "Update phone",
      parameters: [
        {
          name: "number",
          type: "string",
          description: "Parameter 'number'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_phone_verification",
      description: "Update phone verification",
      parameters: [
        {
          name: "phone_verification",
          type: "string",
          description: "Parameter 'phone_verification'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_prefs",
      description: "Update user preferences",
      parameters: [
        {
          name: "prefs",
          type: "string",
          description: "Parameter 'prefs'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_status",
      description: "Update user status",
      parameters: [
        {
          name: "status",
          type: "string",
          description: "Parameter 'status'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_target",
      description: "Update user target",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter 'identifier'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "provider_id",
          type: "string",
          description: "Parameter 'provider_id'",
          required: false,
        },
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create",
      description: "Create database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_boolean_attribute",
      description: "Create boolean attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_collection",
      description: "Create collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_security",
          type: "string",
          description: "Parameter 'document_security'",
          required: false,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_create_datetime_attribute",
      description: "Create datetime attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_string_attribute",
      description: "Create string attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "encrypt",
          type: "string",
          description: "Parameter 'encrypt'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
        {
          name: "size",
          type: "string",
          description: "Parameter 'size'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_url_attribute",
      description: "Create URL attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete",
      description: "Delete database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_attribute",
      description: "Delete attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_collection",
      description: "Delete collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_document",
      description: "Delete document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_index",
      description: "Delete index",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get",
      description: "Get database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get_attribute",
      description: "Get attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get_collection",
      description: "Get collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get_document",
      description: "Get document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_get_index",
      description: "Get index",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_list",
      description: "List databases",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_attributes",
      description: "List attributes",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_collections",
      description: "List collections",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_documents",
      description: "List documents",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_indexes",
      description: "List indexes",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update",
      description: "Update database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_boolean_attribute",
      description: "Update boolean attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_collection",
      description: "Update collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_security",
          type: "string",
          description: "Parameter 'document_security'",
          required: false,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_enum_attribute",
      description: "Update enum attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "elements",
          type: "string",
          description: "Parameter 'elements'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_float_attribute",
      description: "Update float attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: true,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_integer_attribute",
      description: "Update integer attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: true,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_ip_attribute",
      description: "Update IP address attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_relationship_attribute",
      description: "Update relationship attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "on_delete",
          type: "string",
          description: "Parameter 'on_delete'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_string_attribute",
      description: "Update string attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
        {
          name: "size",
          type: "string",
          description: "Parameter 'size'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_url_attribute",
      description: "Update URL attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/appwrite/mcp",
  _varName: "appwriteMcpServerPlugin",
};

const retrievalaugmentedThinkingMcpServerPlugin: Plugin = {
  id: "d86f2s9wmm",
  name: "Retrieval-Augmented Thinking MCP Server",
  description:
    "Enhances AI model capabilities with structured, retrieval-augmented thinking processes that enable dynamic thought chains, parallel exploration paths, and recursive refinement cycles for improved reasoning.",
  image: "https://github.com/stat-guy.png",
  actions: [
    {
      name: "rat",
      description:
        "A context-aware reasoning system that orchestrates structured thought processes through dynamic trajectories.\n\nCore Capabilities:\n- Maintains adaptive thought chains with branching and revision capabilities\n- Implements iterative hypothesis generation and validation cycles\n- Preserves context coherence across non-linear reasoning paths\n- Supports dynamic scope adjustment and trajectory refinement\n\nReasoning Patterns:\n- Sequential analysis with backtracking capability\n- Parallel exploration through managed branch contexts\n- Recursive refinement via structured revision cycles\n- Hypothesis validation through multi-step verification\n\nParameters:\nthought: Structured reasoning step that supports:\n• Primary analysis chains\n• Hypothesis formulation/validation\n• Branch exploration paths\n• Revision proposals\n• Context preservation markers\n• Verification checkpoints\n\nnext_thought_needed: Signal for continuation of reasoning chain\nthought_number: Position in current reasoning trajectory\ntotal_thoughts: Dynamic scope indicator (adjustable)\nis_revision: Marks recursive refinement steps\nrevises_thought: References target of refinement\nbranch_from_thought: Indicates parallel exploration paths\nbranch_id: Context identifier for parallel chains\nneeds_more_thoughts: Signals scope expansion requirement\n\nExecution Protocol:\n1. Initialize with scope estimation\n2. Generate structured reasoning steps\n3. Validate hypotheses through verification cycles\n4. Maintain context coherence across branches\n5. Implement revisions through recursive refinement\n6. Signal completion on validation success\n\nThe system maintains solution integrity through continuous validation cycles while supporting dynamic scope adjustment and non-linear exploration paths.",
      parameters: [
        {
          name: "branchFromThought",
          type: "integer",
          description: "Branching point thought number",
          required: false,
        },
        {
          name: "branchId",
          type: "string",
          description: "Branch identifier",
          required: false,
        },
        {
          name: "isRevision",
          type: "boolean",
          description: "Whether this revises previous thinking",
          required: false,
        },
        {
          name: "needsMoreThoughts",
          type: "boolean",
          description: "If more thoughts are needed",
          required: false,
        },
        {
          name: "nextThoughtNeeded",
          type: "boolean",
          description: "Whether another thought step is needed",
          required: true,
        },
        {
          name: "revisesThought",
          type: "integer",
          description: "Which thought is being reconsidered",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Your current thinking step",
          required: true,
        },
        {
          name: "thoughtNumber",
          type: "integer",
          description: "Current thought number",
          required: true,
        },
        {
          name: "totalThoughts",
          type: "integer",
          description: "Estimated total thoughts needed",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stat-guy/retrieval-augmented-thinking",
  _varName: "retrievalaugmentedThinkingMcpServerPlugin",
};

const filesystemMcpServerPlugin: Plugin = {
  id: "hfidyfcfcx",
  name: "Filesystem MCP Server",
  description:
    "A Model Context Protocol server that provides file system operations, analysis, and manipulation capabilities through a standardized tool interface.",
  image: "https://github.com/bsmi021.png",
  actions: [],
  githubUrl: "https://github.com/bsmi021/mcp-filesystem-server",
  _varName: "filesystemMcpServerPlugin",
};

const triplewhaleMcpServerPlugin: Plugin = {
  id: "2vbtgmqc4f",
  name: "TripleWhale MCP Server",
  description:
    "An implementation of Model Context Protocol (MCP) that allows users to interact with TripleWhale's e-commerce analytics platform using natural language queries through Claude Desktop.",
  image: "https://github.com/Triple-Whale.png",
  actions: [],
  githubUrl: "https://github.com/Triple-Whale/mcp-server-triplewhale",
  _varName: "triplewhaleMcpServerPlugin",
};

const geminiMcpServerPlugin: Plugin = {
  id: "ejwvacw7s0",
  name: "Gemini MCP Server",
  description:
    "A TypeScript server that integrates Google's Gemini Pro model with Claude Desktop through the Model Context Protocol, allowing Claude users to access Gemini's text generation capabilities.",
  image: "https://github.com/georgejeffers.png",
  actions: [
    {
      name: "generate_text",
      description: "Action for generate_text",
      parameters: [
        {
          name: "maxOutputTokens",
          type: "number",
          description: "Parameter: maxOutputTokens",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "stream",
          type: "boolean",
          description: "Parameter: stream",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
        {
          name: "topK",
          type: "number",
          description: "Parameter: topK",
          required: false,
        },
        {
          name: "topP",
          type: "number",
          description: "Parameter: topP",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/georgejeffers/gemini-mcp-server",
  _varName: "geminiMcpServerPlugin",
};

const mcpFileServerPlugin: Plugin = {
  id: "lohec5qwnn",
  name: "MCP File Server",
  description:
    "Enables AI models to perform file system operations (reading, creating, and listing files) on a local file system through a standardized Model Context Protocol interface.",
  image: "https://github.com/codyde.png",
  actions: [
    {
      name: "createfile",
      description: "Action for createfile",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path where the file should be created",
          required: true,
        },
      ],
    },
    {
      name: "readfile",
      description: "Action for readfile",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to read",
          required: true,
        },
      ],
    },
    {
      name: "listfiles",
      description: "Action for listfiles",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/codyde/mcp-file-tool",
  _varName: "mcpFileServerPlugin",
};

const worldBankMcpServerPlugin: Plugin = {
  id: "yavdzdo2j6",
  name: "World Bank MCP Server",
  description:
    "Enables AI assistants to interact with the World Bank open data API, allowing for listing and analysis of indicators across available countries.",
  image: "https://github.com/anshumax.png",
  actions: [
    {
      name: "get_indicator_for_country",
      description:
        "Get values for an indicator for a specific country from the World Bank API",
      parameters: [
        {
          name: "country_id",
          type: "string",
          description:
            "The ID of the country for which the indicator is to be queried",
          required: true,
        },
        {
          name: "indicator_id",
          type: "string",
          description: "The ID of the indicator to be queried",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/anshumax/world_bank_mcp_server",
  _varName: "worldBankMcpServerPlugin",
};

const javascriptSandboxMcpServerPlugin: Plugin = {
  id: "agatnhlgki",
  name: "JavaScript Sandbox MCP Server",
  description:
    "Provides a secure, isolated JavaScript execution environment with configurable time and memory limits for safely running code from Claude.",
  image: "https://github.com/garc33.png",
  actions: [
    {
      name: "execute_js",
      description: "Execute JavaScript code in an isolated environment",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
        {
          name: "memory",
          type: "number",
          description: "Memory limit in bytes",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Maximum execution time in milliseconds",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/garc33/js-sandbox-mcp-server",
  _varName: "javascriptSandboxMcpServerPlugin",
};

const imageGenerationMcpServerPlugin: Plugin = {
  id: "o0137xiz62",
  name: "Image Generation MCP Server",
  description:
    "A Model Context Protocol server that enables generation of high-quality images using the Flux.1 Schnell model via Together AI, allowing users to create images from text prompts with customizable dimensions.",
  image: "https://github.com/sarthakkimtani.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image based on the text prompt",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Optional height for the image",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "The text prompt for image generation",
          required: true,
        },
        {
          name: "width",
          type: "number",
          description: "Optional width for the image",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sarthakkimtani/mcp-image-gen",
  _varName: "imageGenerationMcpServerPlugin",
};

const coderToolboxMcpServerPlugin: Plugin = {
  id: "moc1hdyk44",
  name: "Coder Toolbox MCP Server",
  description:
    "A utility toolkit that enhances Claude's code interaction capabilities by providing seamless tools for Java code analysis, manipulation, and testing workflows.",
  image: "https://github.com/lamemind.png",
  actions: [],
  githubUrl: "https://github.com/lamemind/coder-toolbox-mcp-server",
  _varName: "coderToolboxMcpServerPlugin",
};

const arangodbMcpServerPlugin: Plugin = {
  id: "axv5xdihh9",
  name: "ArangoDB MCP Server",
  description:
    "An implementation of the Model Context Protocol that enables interaction with ArangoDB databases, allowing users to perform queries, list databases and collections through natural language.",
  image: "https://github.com/lucas-deangelis.png",
  actions: [],
  githubUrl: "https://github.com/lucas-deangelis/arango-mcp-server",
  _varName: "arangodbMcpServerPlugin",
};

const devenvinfoserverPlugin: Plugin = {
  id: "rodas2o60h",
  name: "DevEnvInfoServer",
  description:
    "An MCP server that provides detailed information about your development environment to the Cursor code editor, enabling more context-aware assistance.",
  image: "https://github.com/carterlasalle.png",
  actions: [],
  githubUrl: "https://github.com/carterlasalle/system_information_mcp",
  _varName: "devenvinfoserverPlugin",
};

const screenshotoneMcpServerPlugin: Plugin = {
  id: "nq85q0596a",
  name: "ScreenshotOne MCP Server",
  description:
    "An official MCP server implementation that allows AI assistants to capture website screenshots through the ScreenshotOne API, enabling visual context from web pages during conversations.",
  image: "https://github.com/screenshotone.png",
  actions: [
    {
      name: "render-website-screenshot",
      description:
        "Render a screenshot of a website and returns it as an image.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the website to screenshot",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/screenshotone/mcp",
  _varName: "screenshotoneMcpServerPlugin",
};

const businessCentralMcpServerPlugin: Plugin = {
  id: "d0ibbplbtq",
  name: "Business Central MCP Server",
  description:
    "A server that provides standardized development rules and context for Business Central projects, optimized for use with Cursor editor.",
  image: "https://github.com/vanachterjacob.png",
  actions: [],
  githubUrl: "https://github.com/vanachterjacob/BC-MCP",
  _varName: "businessCentralMcpServerPlugin",
};

const crawlabMcpServerPlugin: Plugin = {
  id: "kou3odk02c",
  name: "Crawlab MCP Server",
  description:
    "A Model Context Protocol server that allows AI applications to interact with Crawlab's functionality through natural language, enabling spider management, task execution, and file operations.",
  image: "https://github.com/crawlab-team.png",
  actions: [],
  githubUrl: "https://github.com/crawlab-team/crawlab-mcp",
  _varName: "crawlabMcpServerPlugin",
};

const astraDbMcpServerPlugin: Plugin = {
  id: "tigix0yf4b",
  name: "Astra DB MCP Server",
  description:
    "A Model Context Protocol server that allows Large Language Models to interact with Astra DB databases, providing tools for managing collections and records through natural language commands.",
  image: "https://github.com/datastax.png",
  actions: [
    {
      name: "GetCollections",
      description: "Get all collections in the Astra DB database",
      parameters: [],
    },
    {
      name: "CreateCollection",
      description: "Create a new collection in the database",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to create",
          required: true,
        },
        {
          name: "dimension",
          type: "number",
          description:
            "The dimensions of the vector collection, if vector is true",
          required: false,
        },
        {
          name: "vector",
          type: "boolean",
          description: "Whether to create a vector collection",
          required: false,
        },
      ],
    },
    {
      name: "UpdateCollection",
      description: "Update an existing collection in the database",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to update",
          required: true,
        },
        {
          name: "newName",
          type: "string",
          description: "New name for the collection",
          required: true,
        },
      ],
    },
    {
      name: "DeleteCollection",
      description: "Delete a collection from the database",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to delete",
          required: true,
        },
      ],
    },
    {
      name: "ListRecords",
      description: "List records from a collection in the database",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to list records from",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of records to return",
          required: false,
        },
      ],
    },
    {
      name: "GetRecord",
      description: "Get a specific record from a collection by ID",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to get the record from",
          required: true,
        },
        {
          name: "recordId",
          type: "string",
          description: "ID of the record to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "CreateRecord",
      description: "Create a new record in a collection",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to create the record in",
          required: true,
        },
        {
          name: "record",
          type: "object",
          description: "The record data to insert",
          required: true,
        },
      ],
    },
    {
      name: "UpdateRecord",
      description: "Update an existing record in a collection",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection containing the record",
          required: true,
        },
        {
          name: "record",
          type: "object",
          description: "The updated record data",
          required: true,
        },
        {
          name: "recordId",
          type: "string",
          description: "ID of the record to update",
          required: true,
        },
      ],
    },
    {
      name: "DeleteRecord",
      description: "Delete a record from a collection",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection containing the record",
          required: true,
        },
        {
          name: "recordId",
          type: "string",
          description: "ID of the record to delete",
          required: true,
        },
      ],
    },
    {
      name: "FindRecord",
      description: "Find records in a collection by field value",
      parameters: [
        {
          name: "collectionName",
          type: "string",
          description: "Name of the collection to search in",
          required: true,
        },
        {
          name: "field",
          type: "string",
          description:
            "Field name to search by (e.g., 'title', '_id', or any property)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of records to return",
          required: false,
        },
        {
          name: "value",
          type: ["string", "number", "boolean"],
          description: "Value to search for in the specified field",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/datastax/astra-db-mcp",
  _varName: "astraDbMcpServerPlugin",
};

const makeMcpServer1Plugin: Plugin = {
  id: "mgxot9uo5w",
  name: "Make MCP Server",
  description:
    "An integration server that allows Claude Desktop to communicate with Make (formerly Integromat) automation platform through the Model Context Protocol, enabling scenario management and execution via natural language.",
  image: "https://github.com/3rzy.png",
  actions: [],
  githubUrl: "https://github.com/3rzy/make-mcp-integration-issue",
  _varName: "makeMcpServer1Plugin",
};

const mcpTasksOrganizerPlugin: Plugin = {
  id: "oye7y3gu95",
  name: "MCP Tasks Organizer",
  description:
    "An MCP server that converts Cursor agent plans into structured markdown task lists and organizes them in your repository, helping you track AI-generated plans and recommendations as actionable specifications.",
  image: "https://github.com/huntsyea.png",
  actions: [],
  githubUrl: "https://github.com/huntsyea/mcp-tasks-organizer",
  _varName: "mcpTasksOrganizerPlugin",
};

const clickupOperatorPlugin: Plugin = {
  id: "mqatzaczey",
  name: "ClickUp Operator",
  description:
    "A Claude-compatible MCP server that enables storing and summarizing notes through a simple note storage system with custom URI scheme.",
  image: "https://github.com/noahvanhart.png",
  actions: [],
  githubUrl: "https://github.com/noahvanhart/mcp-server-clickup",
  _varName: "clickupOperatorPlugin",
};

const imagegenserverPlugin: Plugin = {
  id: "94zxp4mrm4",
  name: "Image-Gen-Server",
  description:
    "A MCP server that integrates with Cursor IDE to generate images based on text descriptions using JiMeng AI, allowing users to create and save custom images directly within their development environment.",
  image: "https://github.com/fengin.png",
  actions: [],
  githubUrl: "https://github.com/fengin/image-gen-server",
  _varName: "imagegenserverPlugin",
};

const perplexityMcpServerPlugin: Plugin = {
  id: "vj24wy6hmy",
  name: "Perplexity MCP Server",
  description:
    "A Node.js implementation that enables Claude to interact with Perplexity AI's language models through Anthropic's Model Context Protocol, providing tools for advanced chat completions and quick queries.",
  image: "https://github.com/laodev1.png",
  actions: [
    {
      name: "perplexity_ask",
      description: "Send a simple query to Perplexity AI",
      parameters: [
        {
          name: "model",
          type: "string",
          description: "The model to use for completion",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The question or prompt to send",
          required: true,
        },
      ],
    },
    {
      name: "perplexity_chat",
      description: "Generate a chat completion using Perplexity AI",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description: "Array of messages in the conversation",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "The model to use for completion",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Sampling temperature (0-2)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/laodev1/perplexity-mcp-server",
  _varName: "perplexityMcpServerPlugin",
};

const bloomyMcpPlugin: Plugin = {
  id: "lygx2hy94k",
  name: "Bloomy MCP",
  description:
    "A Model Context Protocol server that connects AI assistants to Bloom Growth's GraphQL API, enabling them to query data and execute operations against the Bloom Growth platform.",
  image: "https://github.com/franccesco.png",
  actions: [
    {
      name: "get_query_details",
      description:
        "Get detailed information about specific GraphQL queries.\n\n    Retrieves argument requirements, return type information, descriptions, and\n    example usage for the specified queries.\n\n    Args:\n        query_names: Comma-separated list of query names to get details for\n\n    Returns:\n        A YAML-formatted string containing detailed information about the requested queries\n    ",
      parameters: [
        {
          name: "query_names",
          type: "string",
          description: "Parameter: query_names",
          required: true,
        },
      ],
    },
    {
      name: "get_mutation_details",
      description:
        "Get detailed information about specific GraphQL mutations.\n\n    Retrieves argument requirements, return type information, descriptions, and\n    example usage for the specified mutations.\n\n    Args:\n        mutation_names: Comma-separated list of mutation names to get details for\n\n    Returns:\n        A YAML-formatted string containing detailed information about the requested mutations\n    ",
      parameters: [
        {
          name: "mutation_names",
          type: "string",
          description: "Parameter: mutation_names",
          required: true,
        },
      ],
    },
    {
      name: "execute_query",
      description:
        "Execute a GraphQL query or mutation with variables.\n\n    Parses and executes the provided GraphQL operation string with optional variables.\n\n    Args:\n        query: Raw GraphQL query or mutation string\n        variables: Optional dictionary of variables to use in the operation\n\n    Returns:\n        Dictionary containing the operation results or an error message string\n\n    Raises:\n        Exception: Handled internally, returns error message as string\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "variables",
          type: "string",
          description: "Parameter: variables",
          required: false,
        },
      ],
    },
    {
      name: "get_authenticated_user_id",
      description:
        "Get the ID of the currently authenticated user.\n\n    Uses a special mutation to retrieve the ID of the user associated with\n    the current API token.\n\n    Returns:\n        User ID string if successful, None if user not found, or error message string\n\n    Raises:\n        Exception: Handled internally, returns error message as string\n    ",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/franccesco/bloomy-mcp",
  _varName: "bloomyMcpPlugin",
};

const dbtSemanticLayerMcpServerPlugin: Plugin = {
  id: "ckhrsq9uep",
  name: "dbt Semantic Layer MCP Server",
  description:
    "A server that enables querying the dbt Semantic Layer through natural language conversations with Claude Desktop and other AI assistants, allowing users to discover metrics, create queries, analyze data, and visualize results.",
  image: "https://github.com/TommyBez.png",
  actions: [],
  githubUrl: "https://github.com/TommyBez/dbt-semantic-layer-mcp-server",
  _varName: "dbtSemanticLayerMcpServerPlugin",
};

const devMemoryMcpServerPlugin: Plugin = {
  id: "pvm9vdq3pw",
  name: "Dev Memory MCP Server",
  description:
    "Persistent development memory server that automatically captures and organizes development context, code changes, and user interactions across projects.",
  image: "https://github.com/TrackerXXX23.png",
  actions: [],
  githubUrl: "https://github.com/TrackerXXX23/dev_memory_mcp",
  _varName: "devMemoryMcpServerPlugin",
};

const temboMcpServerPlugin: Plugin = {
  id: "k0nwh3o5xu",
  name: "Tembo MCP Server",
  description:
    "An MCP server that enables Claude to interact with Tembo Cloud platform API, allowing users to manage Tembo Cloud resources through natural language.",
  image: "https://github.com/tembo-io.png",
  actions: [
    {
      name: "get_all_apps",
      description: "Get attributes for all apps",
      parameters: [],
    },
    {
      name: "get_app",
      description: "Get the attributes of a single App",
      parameters: [
        {
          name: "type",
          type: "string",
          description: "The app type to get details for",
          required: true,
        },
      ],
    },
    {
      name: "ask_tembo",
      description: "Ask a question to Tembo Docs",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            'The ask query. For example, "how to create a Tembo instance"',
          required: true,
        },
      ],
    },
    {
      name: "get_instance_schema",
      description: "Get the json-schema for an instance",
      parameters: [],
    },
    {
      name: "get_all_instances",
      description: "Get all Tembo instances in an organization",
      parameters: [
        {
          name: "org_id",
          type: "string",
          description: "Organization id for the request",
          required: true,
        },
      ],
    },
    {
      name: "create_instance",
      description: "Create a new Tembo instance",
      parameters: [
        {
          name: "cpu",
          type: "string",
          description: "Parameter: cpu",
          required: true,
        },
        {
          name: "environment",
          type: "string",
          description: "Parameter: environment",
          required: true,
        },
        {
          name: "instance_name",
          type: "string",
          description: "Parameter: instance_name",
          required: true,
        },
        {
          name: "memory",
          type: "string",
          description: "Parameter: memory",
          required: true,
        },
        {
          name: "org_id",
          type: "string",
          description: "Organization ID that owns the Tembo instance",
          required: true,
        },
        {
          name: "replicas",
          type: "integer",
          description: "Parameter: replicas",
          required: false,
        },
        {
          name: "spot",
          type: "boolean",
          description: "Parameter: spot",
          required: false,
        },
        {
          name: "stack_type",
          type: "string",
          description: "Parameter: stack_type",
          required: true,
        },
        {
          name: "storage",
          type: "string",
          description: "Parameter: storage",
          required: true,
        },
      ],
    },
    {
      name: "get_instance",
      description: "Get an existing Tembo instance",
      parameters: [
        {
          name: "instance_id",
          type: "string",
          description: "Parameter: instance_id",
          required: true,
        },
        {
          name: "org_id",
          type: "string",
          description: "Organization ID that owns the instance",
          required: true,
        },
      ],
    },
    {
      name: "delete_instance",
      description: "Delete an existing Tembo instance",
      parameters: [
        {
          name: "instance_id",
          type: "string",
          description: "Delete this instance id",
          required: true,
        },
        {
          name: "org_id",
          type: "string",
          description: "Organization id of the instance to delete",
          required: true,
        },
      ],
    },
    {
      name: "patch_instance",
      description: "Update attributes on an existing Tembo instance",
      parameters: [
        {
          name: "cpu",
          type: "string",
          description: "Parameter: cpu",
          required: false,
        },
        {
          name: "environment",
          type: "string",
          description: "Parameter: environment",
          required: false,
        },
        {
          name: "instance_id",
          type: "string",
          description: "Parameter: instance_id",
          required: true,
        },
        {
          name: "instance_name",
          type: "string",
          description: "Parameter: instance_name",
          required: false,
        },
        {
          name: "memory",
          type: "string",
          description: "Parameter: memory",
          required: false,
        },
        {
          name: "org_id",
          type: "string",
          description: "Organization ID that owns the instance",
          required: true,
        },
        {
          name: "replicas",
          type: "integer",
          description: "Parameter: replicas",
          required: false,
        },
        {
          name: "spot",
          type: "boolean",
          description: "Parameter: spot",
          required: false,
        },
        {
          name: "storage",
          type: "string",
          description: "Parameter: storage",
          required: false,
        },
      ],
    },
    {
      name: "restore_instance",
      description: "Restore a Tembo instance",
      parameters: [
        {
          name: "instance_name",
          type: "string",
          description: "Parameter: instance_name",
          required: true,
        },
        {
          name: "org_id",
          type: "string",
          description: "Organization ID that owns the Tembo instance",
          required: true,
        },
        {
          name: "restore",
          type: "object",
          description: "Parameter: restore",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tembo-io/mcp-server-tembo",
  _varName: "temboMcpServerPlugin",
};

const mcpBeeminderServerPlugin: Plugin = {
  id: "luszbzpm5s",
  name: "MCP Beeminder Server",
  description:
    "An MCP server that provides AI assistants access to the Beeminder API, allowing them to help users track goals, manage datapoints, and interact with Beeminder's self-commitment tools through natural language.",
  image: "https://github.com/strickvl.png",
  actions: [],
  githubUrl: "https://github.com/strickvl/mcp-beeminder",
  _varName: "mcpBeeminderServerPlugin",
};

const mcpAppleNotesPlugin: Plugin = {
  id: "dzx7naekwr",
  name: "MCP Apple Notes",
  description:
    "A Model Context Protocol server that enables semantic search and RAG over your Apple Notes, allowing AI assistants like Claude to search and reference your notes during conversations.",
  image: "https://github.com/Tom-Semple.png",
  actions: [],
  githubUrl: "https://github.com/Tom-Semple/mcp-apple-notes-fixed",
  _varName: "mcpAppleNotesPlugin",
};

const blastenginemailerPlugin: Plugin = {
  id: "oo6xexjpe0",
  name: "blastengine-mailer",
  description:
    "A TypeScript-based MCP server that implements an email sending system, allowing Claude to send emails via the blastengine service.",
  image: "https://github.com/r3-yamauchi.png",
  actions: [
    {
      name: "send_email",
      description: "Send an email using Blastengine API",
      parameters: [
        {
          name: "from",
          type: "string",
          description: "Sender email address",
          required: true,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Email body",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient email address",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/r3-yamauchi/mcp-server-blastengine-mailer",
  _varName: "blastenginemailerPlugin",
};

const nexusMcpBridgeForVscodePlugin: Plugin = {
  id: "ub939jjx1s",
  name: "Nexus MCP Bridge for VSCode",
  description:
    "A lightweight bridge extension that enables Claude Desktop to connect to VSCode workspaces via Model Context Protocol, allowing Claude to read and write files, create directories, and list contents in your workspace.",
  image: "https://github.com/wesnermichel.png",
  actions: [],
  githubUrl: "https://github.com/wesnermichel/nexus-mcp-claude-desktop-server",
  _varName: "nexusMcpBridgeForVscodePlugin",
};

const mcpBlockchainQueryServerPlugin: Plugin = {
  id: "71ow3uvx5n",
  name: "MCP Blockchain Query Server",
  description:
    "A Model Context Protocol server providing tools for querying Bitcoin blockchain data via Blockchain Data and Query APIs, supporting various BTC information retrieval functions.",
  image: "https://github.com/pavel-bc.png",
  actions: [],
  githubUrl: "https://github.com/pavel-bc/mcp-blockchain-query",
  _varName: "mcpBlockchainQueryServerPlugin",
};

const firefliesMcpServerPlugin: Plugin = {
  id: "0q6f93zjkb",
  name: "Fireflies MCP Server",
  description:
    "Enables access to Fireflies.ai API for retrieving, searching, and summarizing meeting transcripts with various filtering options and formats.",
  image: "https://github.com/Props-Labs.png",
  actions: [
    {
      name: "fireflies_generate_summary",
      description: "Generate a summary of a meeting transcript",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Format of the summary (bullet_points or paragraph)",
          required: false,
        },
        {
          name: "transcript_id",
          type: "string",
          description: "ID of the transcript to summarize",
          required: true,
        },
      ],
    },
    {
      name: "fireflies_get_transcripts",
      description:
        "Retrieve a list of meeting transcripts with optional filtering. By default, returns up to 20 most recent transcripts with no date filtering. Note that this operation may take longer for large datasets and might timeout. If a timeout occurs, a minimal set of transcript data will be returned.",
      parameters: [
        {
          name: "from_date",
          type: "string",
          description:
            "Start date in ISO format (YYYY-MM-DD). If not specified, no lower date bound is applied. Using a narrower date range can help prevent timeouts.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of transcripts to return (default: 20). Consider using a smaller limit if experiencing timeouts.",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description:
            "End date in ISO format (YYYY-MM-DD). If not specified, no upper date bound is applied. Using a narrower date range can help prevent timeouts.",
          required: false,
        },
      ],
    },
    {
      name: "fireflies_get_transcript_details",
      description:
        "Retrieve detailed information about a specific transcript. Returns a human-readable formatted transcript with speaker names and text, along with metadata and summary information.",
      parameters: [
        {
          name: "transcript_id",
          type: "string",
          description: "ID of the transcript to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "fireflies_search_transcripts",
      description:
        "Search for transcripts containing specific keywords, with optional date filtering. Returns a human-readable list of matching transcripts with metadata and summary information.",
      parameters: [
        {
          name: "from_date",
          type: "string",
          description:
            "Start date in ISO format (YYYY-MM-DD) to filter transcripts by date. If not specified, no lower date bound is applied.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of transcripts to return (default: 20)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query to find relevant transcripts",
          required: true,
        },
        {
          name: "to_date",
          type: "string",
          description:
            "End date in ISO format (YYYY-MM-DD) to filter transcripts by date. If not specified, no upper date bound is applied.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Props-Labs/fireflies-mcp",
  _varName: "firefliesMcpServerPlugin",
};

const elasticsearch7xMcpServerPlugin: Plugin = {
  id: "zxwxozvlme",
  name: "Elasticsearch 7.x MCP Server",
  description:
    "Provides an MCP protocol interface for interacting with Elasticsearch 7.x databases, supporting comprehensive search functionality including aggregations, highlighting, and sorting.",
  image: "https://github.com/imlewc.png",
  actions: [
    {
      name: "es-ping",
      description: "Ping Elasticsearch server",
      parameters: [
        {
          name: "req",
          type: "object",
          description: "Parameter: req",
          required: true,
        },
      ],
    },
    {
      name: "es-info",
      description: "Get Elasticsearch info",
      parameters: [
        {
          name: "req",
          type: "object",
          description: "Parameter: req",
          required: true,
        },
      ],
    },
    {
      name: "es-search",
      description: "Search documents in Elasticsearch index",
      parameters: [
        {
          name: "req",
          type: "object",
          description: "Parameter: req",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/imlewc/elasticsearch7-mcp-server",
  _varName: "elasticsearch7xMcpServerPlugin",
};

const deepseekMcpServerPlugin: Plugin = {
  id: "vqjia4yxps",
  name: "DeepSeek MCP Server",
  description:
    "A server that enhances Claude's reasoning capabilities by integrating DeepSeek R1's advanced reasoning engine to tackle complex reasoning tasks.",
  image: "https://github.com/moyu6027.png",
  actions: [
    {
      name: "reason",
      description:
        "\n    Process a query using DeepSeek's R1 reasoning engine and prepare it for integration with DeepSeek V3 or claude.\n\n    DeepSeek R1 leverages advanced reasoning capabilities that naturally evolved from large-scale \n    reinforcement learning, enabling sophisticated reasoning behaviors. The output is enclosed \n    within `<ant_thinking>` tags to align with V3 or Claude's thought processing framework.\n\n    Args:\n        query (dict): Contains the following keys:\n            - context (str): Optional background information for the query.\n            - question (str): The specific question to be analyzed.\n\n    Returns:\n        str: The reasoning output from DeepSeek, formatted with `<ant_thinking>` tags for seamless use with V3 or Claude.\n    ",
      parameters: [
        {
          name: "query",
          type: "object",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/moyu6027/deepseek-MCP-server",
  _varName: "deepseekMcpServerPlugin",
};

const portMcpServerPlugin: Plugin = {
  id: "trhy0q2yn1",
  name: "Port MCP Server",
  description:
    "An MCP server that enables Claude to interact with Port.io's AI agent, allowing users to trigger the agent with prompts and receive structured responses including status, output, and action items.",
  image: "https://github.com/port-experimental.png",
  actions: [],
  githubUrl: "https://github.com/port-experimental/port-mcp-server",
  _varName: "portMcpServerPlugin",
};

const mcpServerDiscordWebhookPlugin: Plugin = {
  id: "e6qg95okn8",
  name: "MCP Server Discord Webhook",
  description:
    "An MCP server that enables posting messages to Discord webhooks, allowing customization of content, username, and avatar URL.",
  image: "https://github.com/genm.png",
  actions: [
    {
      name: "send_message",
      description: "Discordにメッセージを送信します",
      parameters: [
        {
          name: "avatar_url",
          type: "string",
          description: "アバターURL（オプション）",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "送信するメッセージ内容",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "表示名（オプション）",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/genm/mcp-server-discord-webhook",
  _varName: "mcpServerDiscordWebhookPlugin",
};

const grantsSearchMcpServerPlugin: Plugin = {
  id: "xa284zebk4",
  name: "Grants Search MCP Server",
  description:
    "An MCP server that enables users to search for government grants based on keywords and view detailed information including funding, eligibility, and deadlines.",
  image: "https://github.com/Tar-ive.png",
  actions: [
    {
      name: "search-grants",
      description: "Search for government grants based on keywords",
      parameters: [
        {
          name: "grantsPerPage",
          type: "number",
          description: "Number of grants per page (default: 3)",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Search query for grants (e.g., 'Artificial intelligence', 'Climate change')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Tar-ive/grants-mcp",
  _varName: "grantsSearchMcpServerPlugin",
};

const toxTestingMcpServerPlugin: Plugin = {
  id: "ihmm915s2t",
  name: "Tox Testing MCP Server",
  description:
    "An MCP server that executes tox commands to run Python tests within a project using pytest, allowing users to run all tests or specific test groups, files, cases, or directories.",
  image: "https://github.com/that1guy15.png",
  actions: [
    {
      name: "run_tox_tests",
      description: "Run tox tests with different modes and options",
      parameters: [
        {
          name: "directory",
          type: "string",
          description:
            "Directory containing tests to run (required for directory mode)",
          required: false,
        },
        {
          name: "group",
          type: "string",
          description: "Test group to run in all mode (defaults to clients)",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "Test execution mode",
          required: true,
        },
        {
          name: "testCase",
          type: "string",
          description: "Specific test case to run (required for case mode)",
          required: false,
        },
        {
          name: "testFile",
          type: "string",
          description:
            "Specific test file to run (required for file and case modes)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/that1guy15/tox-testing",
  _varName: "toxTestingMcpServerPlugin",
};

const mcpServerModalPlugin: Plugin = {
  id: "9w1qwxyep9",
  name: "MCP Server Modal",
  description:
    "An MCP server that allows users to deploy Python scripts to Modal directly from Claude, providing a link to the deployed application that can be shared with others.",
  image: "https://github.com/Flux159.png",
  actions: [],
  githubUrl: "https://github.com/Flux159/mcp-server-modal",
  _varName: "mcpServerModalPlugin",
};

const needleMcpServerPlugin: Plugin = {
  id: "5jw1t7hur2",
  name: "Needle MCP Server",
  description:
    "A server that allows users to manage documents and perform Claude-powered searches using Needle through the Claude Desktop application.",
  image: "https://github.com/needle-ai.png",
  actions: [
    {
      name: "needle_list_collections",
      description:
        "Retrieve a complete list of all Needle document collections accessible to your account. \n            Returns detailed information including collection IDs, names, and creation dates. Use this tool when you need to:\n            - Get an overview of available document collections\n            - Find collection IDs for subsequent operations\n            - Verify collection existence before performing operations\n            The response includes metadata that's required for other Needle operations.",
      parameters: [],
    },
    {
      name: "needle_create_collection",
      description:
        "Create a new document collection in Needle for organizing and searching documents. \n            A collection acts as a container for related documents and enables semantic search across its contents.\n            Use this tool when you need to:\n            - Start a new document organization\n            - Group related documents together\n            - Set up a searchable document repository\n            Returns a collection ID that's required for subsequent operations. Choose a descriptive name that \n            reflects the collection's purpose for better organization.",
      parameters: [
        {
          name: "name",
          type: "string",
          description:
            "A clear, descriptive name for the collection that reflects its purpose and contents",
          required: true,
        },
      ],
    },
    {
      name: "needle_get_collection_details",
      description:
        "Fetch comprehensive metadata about a specific Needle collection. \n            Provides detailed information about the collection's configuration, creation date, and current status.\n            Use this tool when you need to:\n            - Verify a collection's existence and configuration\n            - Check collection metadata before operations\n            - Get creation date and other attributes\n            Requires a valid collection ID and returns detailed collection metadata. Will error if collection doesn't exist.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description:
            "The unique collection identifier returned from needle_create_collection or needle_list_collections",
          required: true,
        },
      ],
    },
    {
      name: "needle_get_collection_stats",
      description:
        "Retrieve detailed statistical information about a Needle collection's contents and status.\n            Provides metrics including:\n            - Total number of documents\n            - Processing status of documents\n            - Storage usage and limits\n            - Index status and health\n            Use this tool to:\n            - Monitor collection size and growth\n            - Verify processing completion\n            - Check collection health before operations\n            Essential for ensuring collection readiness before performing searches.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "The unique collection identifier to get statistics for",
          required: true,
        },
      ],
    },
    {
      name: "needle_list_files",
      description:
        "List all documents stored within a specific Needle collection with their current status.\n            Returns detailed information about each file including:\n            - File ID and name\n            - Processing status (pending, processing, complete, error)\n            - Upload date and metadata\n            Use this tool when you need to:\n            - Inventory available documents\n            - Check processing status of uploads\n            - Get file IDs for reference\n            - Verify document availability before searching\n            Essential for monitoring document processing completion before performing searches.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "The unique collection identifier to list files from",
          required: true,
        },
      ],
    },
    {
      name: "needle_add_file",
      description:
        "Add a new document to a Needle collection by providing a URL for download.\n            Supports multiple file formats including:\n            - PDF documents\n            - Microsoft Word files (DOC, DOCX)\n            - Plain text files (TXT)\n            - Web pages (HTML)\n            \n            The document will be:\n            1. Downloaded from the provided URL\n            2. Processed for text extraction\n            3. Indexed for semantic search\n            \n            Use this tool when you need to:\n            - Add new documents to a collection\n            - Make documents searchable\n            - Expand your knowledge base\n            \n            Important: Documents require processing time before they're searchable.\n            Check processing status using needle_list_files before searching new content.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description:
            "The unique collection identifier where the file will be added",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description:
            "A descriptive filename that will help identify this document in results",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Public URL where the document can be downloaded from",
          required: true,
        },
      ],
    },
    {
      name: "needle_search",
      description:
        "Perform intelligent semantic search across documents in a Needle collection.\n            This tool uses advanced embedding technology to find relevant content based on meaning,\n            not just keywords. The search:\n            - Understands natural language queries\n            - Finds conceptually related content\n            - Returns relevant text passages with source information\n            - Ranks results by semantic relevance\n            \n            Use this tool when you need to:\n            - Find specific information within documents\n            - Answer questions from document content\n            - Research topics across multiple documents\n            - Locate relevant passages and their sources\n            \n            More effective than traditional keyword search for:\n            - Natural language questions\n            - Conceptual queries\n            - Finding related content\n            \n            Returns matching text passages with their source file IDs.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "The unique collection identifier to search within",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description:
            "Natural language query describing the information you're looking for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/needle-ai/needle-mcp",
  _varName: "needleMcpServerPlugin",
};

const irisMcpServerPlugin: Plugin = {
  id: "5d0pdewk5y",
  name: "Iris MCP Server",
  description:
    "A Model Context Protocol server that automatically generates structured release notes from Git repository tags, analyzing differences between tags and saving formatted Markdown output to the .iris directory.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "generate_release_note",
      description: "タグ間の差分からリリースノートを生成します",
      parameters: [
        {
          name: "breaking",
          type: "string array",
          description: "破壊的変更の一覧（オプション）",
          required: false,
        },
        {
          name: "bugfixes",
          type: "string array",
          description: "バグ修正の一覧（オプション）",
          required: false,
        },
        {
          name: "endTag",
          type: "string",
          description: "終了タグ",
          required: true,
        },
        {
          name: "features",
          type: "string array",
          description: "新機能の一覧（オプション）",
          required: false,
        },
        {
          name: "improvements",
          type: "string array",
          description: "改善項目の一覧（オプション）",
          required: false,
        },
        {
          name: "startTag",
          type: "string",
          description: "開始タグ",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "リリースノートのタイトル（オプション）",
          required: false,
        },
      ],
    },
  ],
  githubUrl:
    "https://github.com/Sunwood-ai-labs/release-notes-generator-iris-mcp-server",
  _varName: "irisMcpServerPlugin",
};

const kokoroTtsMcpServerPlugin: Plugin = {
  id: "83sig8ty3v",
  name: "Kokoro TTS MCP Server",
  description:
    "Provides text-to-speech capabilities through the Model Context Protocol, allowing applications to easily integrate speech synthesis with customizable voices, adjustable speech speed, and cross-platform audio playback support.",
  image: "https://github.com/giannisanni.png",
  actions: [],
  githubUrl: "https://github.com/giannisanni/kokoro-tts-mcp",
  _varName: "kokoroTtsMcpServerPlugin",
};

const backlogMcpServerPlugin: Plugin = {
  id: "p266xmcqpb",
  name: "Backlog MCP Server",
  description:
    "Integrates Backlog project management with Claude via Model Context Protocol, enabling access to projects, issues, and wiki pages through natural language interactions.",
  image: "https://github.com/katsuhirohonda.png",
  actions: [],
  githubUrl: "https://github.com/katsuhirohonda/mcp-backlog-server",
  _varName: "backlogMcpServerPlugin",
};

const bluestoneappsMcpRemoteServerPlugin: Plugin = {
  id: "nzmfilykyf",
  name: "BluestoneApps MCP Remote Server",
  description:
    "Implements the Model Context Protocol (MCP) over HTTP to provide remote access to BluestoneApps coding standards and React Native code examples.",
  image: "https://github.com/lallen30.png",
  actions: [],
  githubUrl: "https://github.com/lallen30/mcp-remote-server",
  _varName: "bluestoneappsMcpRemoteServerPlugin",
};

const mcpCodeIndexerPlugin: Plugin = {
  id: "edzx5txsh5",
  name: "MCP Code Indexer",
  description:
    "A smart code retrieval tool based on Model Context Protocol that provides efficient and accurate code repository search capabilities for large language models.",
  image: "https://github.com/zxfgds.png",
  actions: [],
  githubUrl: "https://github.com/zxfgds/mcp-code-indexer",
  _varName: "mcpCodeIndexerPlugin",
};

const thingsMcpServerPlugin: Plugin = {
  id: "er5pjquyct",
  name: "Things MCP Server",
  description:
    "Lets you use Claude Desktop to interact with your task management data in Things app, enabling you to create tasks, analyze projects, manage priorities, and implement productivity workflows through natural language.",
  image: "https://github.com/excelsier.png",
  actions: [],
  githubUrl: "https://github.com/excelsier/things-fastmcp",
  _varName: "thingsMcpServerPlugin",
};

const tavilyMcpServerPlugin: Plugin = {
  id: "fzs8u6odo2",
  name: "Tavily MCP Server",
  description:
    "Enables AI assistants to perform up-to-date web searches through the Tavily API, providing comprehensive search results with AI-generated summaries.",
  image: "https://github.com/it-beard.png",
  actions: [],
  githubUrl: "https://github.com/it-beard/tavily-server",
  _varName: "tavilyMcpServerPlugin",
};

const githubProjectsMcpServerPlugin: Plugin = {
  id: "86aw338aa5",
  name: "GitHub Projects MCP Server",
  description:
    "Enables users to interact with GitHub's Projects v2 API through natural language for Agile project management, supporting repository details, issue tracking, and project board management operations.",
  image: "https://github.com/taylor-lindores-reeves.png",
  actions: [
    {
      name: "create-issue",
      description: "Create a new GitHub issue",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Usernames to assign",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Issue body/description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels to apply",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone ID",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "update-issue",
      description: "Update an existing GitHub issue",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Usernames to assign (replaces existing)",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "New body",
          required: false,
        },
        {
          name: "issueNumber",
          type: "number",
          description: "Issue number",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels to apply (replaces existing)",
          required: false,
        },
        {
          name: "milestone",
          type: ["number", "null"],
          description: "Milestone ID (null to clear)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "State (open or closed)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title",
          required: false,
        },
      ],
    },
    {
      name: "get-repository",
      description: "Get a GitHub repository by owner and name",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "list-repositories",
      description: "List repositories for a user",
      parameters: [
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Username",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Items per page (max 100)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of repositories to list",
          required: false,
        },
      ],
    },
    {
      name: "get-project",
      description: "Get a GitHub Project by ID",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "list-projects",
      description: "List GitHub Projects for a user",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of projects to return (max 100)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "GitHub username",
          required: true,
        },
      ],
    },
    {
      name: "get-project-columns",
      description: "Get status columns for a GitHub Project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "get-project-fields",
      description: "Get fields for a GitHub Project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "get-project-items",
      description: "Get items (issues) from a GitHub Project",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter for items (e.g., status field value)",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of items to return (max 100)",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "create-project-item",
      description: "Add an issue or PR to a GitHub Project",
      parameters: [
        {
          name: "contentId",
          type: "string",
          description: "ID of the content to add (issue or PR ID)",
          required: true,
        },
        {
          name: "fieldValues",
          type: "object array",
          description: "Field values to set for the item",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "update-project-item-field",
      description: "Update a field value for a project item",
      parameters: [
        {
          name: "fieldId",
          type: "string",
          description: "ID of the field to update",
          required: true,
        },
        {
          name: "itemId",
          type: "string",
          description: "ID of the project item",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "New value for the field",
          required: true,
        },
      ],
    },
    {
      name: "create-project",
      description: "Create a new GitHub Project",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Project description",
          required: false,
        },
        {
          name: "ownerId",
          type: "string",
          description: "Owner ID (user or organization)",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "Repository ID to link the project to",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Project title",
          required: true,
        },
      ],
    },
    {
      name: "update-project",
      description: "Update an existing GitHub Project",
      parameters: [
        {
          name: "closed",
          type: "boolean",
          description: "Project closed status",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New project description",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "public",
          type: "boolean",
          description: "Project visibility",
          required: false,
        },
        {
          name: "shortDescription",
          type: "string",
          description: "New short description",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New project title",
          required: false,
        },
      ],
    },
    {
      name: "delete-project",
      description: "Delete a GitHub Project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID to delete",
          required: true,
        },
      ],
    },
    {
      name: "copy-project",
      description: "Copy a GitHub Project",
      parameters: [
        {
          name: "includeFields",
          type: "boolean",
          description: "Whether to include fields in the copied project",
          required: false,
        },
        {
          name: "includeItems",
          type: "boolean",
          description: "Whether to include items in the copied project",
          required: false,
        },
        {
          name: "ownerId",
          type: "string",
          description: "New owner ID",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Source GitHub Project ID to copy",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title for the new project",
          required: false,
        },
      ],
    },
    {
      name: "add-draft-issue",
      description: "Add a draft issue to a GitHub Project",
      parameters: [
        {
          name: "assigneeIds",
          type: "string array",
          description: "IDs of users to assign",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Draft issue body",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Draft issue title",
          required: true,
        },
      ],
    },
    {
      name: "convert-draft-issue",
      description: "Convert a draft issue to a regular issue",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Body for the new issue",
          required: false,
        },
        {
          name: "draftIssueId",
          type: "string",
          description: "Draft issue ID to convert",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "Repository ID where to create the issue",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title for the new issue",
          required: false,
        },
      ],
    },
    {
      name: "add-item-to-project",
      description: "Add an existing issue or PR to a GitHub Project",
      parameters: [
        {
          name: "contentId",
          type: "string",
          description: "ID of the content to add (issue or PR ID)",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "update-item-position",
      description: "Update the position of an item in a GitHub Project",
      parameters: [
        {
          name: "afterId",
          type: "string",
          description: "ID of the item to position after",
          required: false,
        },
        {
          name: "itemId",
          type: "string",
          description: "ID of the project item to reposition",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "delete-project-item",
      description: "Remove an item from a GitHub Project",
      parameters: [
        {
          name: "itemId",
          type: "string",
          description: "ID of the project item to delete",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "create-project-field",
      description: "Create a new field in a GitHub Project",
      parameters: [
        {
          name: "dataType",
          type: "string",
          description: "Field data type",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Field name",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "singleSelectOptions",
          type: "object array",
          description: "Options for single select field",
          required: false,
        },
      ],
    },
    {
      name: "update-project-field",
      description: "Update a field in a GitHub Project",
      parameters: [
        {
          name: "dataType",
          type: "string",
          description: "New field data type",
          required: false,
        },
        {
          name: "fieldId",
          type: "string",
          description: "ID of the field to update",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New field name",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "singleSelectOptions",
          type: "object array",
          description: "Updated options for single select field",
          required: false,
        },
      ],
    },
    {
      name: "delete-project-field",
      description: "Delete a field from a GitHub Project",
      parameters: [
        {
          name: "fieldId",
          type: "string",
          description: "ID of the field to delete",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "update-project-status",
      description: "Update the status of a GitHub Project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Status update text",
          required: true,
        },
        {
          name: "updateId",
          type: "string",
          description: "ID of the status update to modify",
          required: false,
        },
      ],
    },
    {
      name: "archive-project-item",
      description: "Archive an item in a GitHub Project",
      parameters: [
        {
          name: "itemId",
          type: "string",
          description: "ID of the project item to archive",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "unarchive-project-item",
      description: "Unarchive an item in a GitHub Project",
      parameters: [
        {
          name: "itemId",
          type: "string",
          description: "ID of the project item to unarchive",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "clear-item-field-value",
      description: "Clear a field value for an item in a GitHub Project",
      parameters: [
        {
          name: "fieldId",
          type: "string",
          description: "ID of the field to clear",
          required: true,
        },
        {
          name: "itemId",
          type: "string",
          description: "ID of the project item",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID",
          required: true,
        },
      ],
    },
    {
      name: "mark-project-as-template",
      description: "Mark a GitHub Project as a template",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID to mark as template",
          required: true,
        },
      ],
    },
    {
      name: "unmark-project-as-template",
      description: "Unmark a GitHub Project as a template",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitHub Project ID to unmark as template",
          required: true,
        },
      ],
    },
    {
      name: "get-issue",
      description: "Get a GitHub issue by number",
      parameters: [
        {
          name: "issueNumber",
          type: "number",
          description: "Issue number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "list-issues",
      description: "List issues for a repository",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Filter by assignee username",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Filter by labels",
          required: false,
        },
        {
          name: "milestone",
          type: "string",
          description: "Filter by milestone number or '*'",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username)",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Items per page (max 100)",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Issue state (open, closed, all)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/taylor-lindores-reeves/mcp-github-projects",
  _varName: "githubProjectsMcpServerPlugin",
};

const filesystemMcpServer1Plugin: Plugin = {
  id: "ghvynj38vk",
  name: "Filesystem MCP Server",
  description:
    "Node.js server implementing Model Context Protocol for filesystem operations, allowing Claude to read, write, and manipulate files and directories in specified locations.",
  image: "https://github.com/Legaltime.png",
  actions: [],
  githubUrl: "https://github.com/Legaltime/filesystem",
  _varName: "filesystemMcpServer1Plugin",
};

const xcodeMcpServerPlugin: Plugin = {
  id: "0ewrg3bfpc",
  name: "Xcode MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to build and test Xcode projects directly through a standardized interface, with capabilities for running tests, monitoring progress, and accessing logs in real-time.",
  image: "https://github.com/PolarVista.png",
  actions: [],
  githubUrl: "https://github.com/PolarVista/Xcode-mcp-server",
  _varName: "xcodeMcpServerPlugin",
};

const uberEatsMcpServer1Plugin: Plugin = {
  id: "bm3bhwf1kw",
  name: "Uber Eats MCP Server",
  description:
    "A proof-of-concept server implementing the Model Context Protocol that enables LLM applications to interact with Uber Eats functionality.",
  image: "https://github.com/skudskud.png",
  actions: [],
  githubUrl: "https://github.com/skudskud/test-repo-mcp",
  _varName: "uberEatsMcpServer1Plugin",
};

const sourcesageMcpPlugin: Plugin = {
  id: "z62lviqk5q",
  name: "SourceSage MCP",
  description:
    "A TypeScript-based server that visualizes project directory structures in Markdown format, automatically documenting file contents with syntax highlighting and supporting customizable exclusion patterns.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "generate_structure",
      description:
        "プロジェクトのディレクトリ構造を生成し、ファイル内容も含めた詳細なドキュメントを作成します。プロジェクトやリポジトリ、フォルダの内容を理解するときに使用します。",
      parameters: [
        {
          name: "ignorePath",
          type: "string",
          description: ".SourceSageignoreファイルの絶対パス（オプション）",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "構造を生成するディレクトリの絶対パス",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/source-sage-mcp-server",
  _varName: "sourcesageMcpPlugin",
};

const knowledgeGraphMemoryServerPlugin: Plugin = {
  id: "8pt2sa08m8",
  name: "Knowledge Graph Memory Server",
  description:
    "A persistent memory implementation using a local knowledge graph that lets Claude remember information about users across conversations.",
  image: "https://github.com/AgentWong.png",
  actions: [],
  githubUrl: "https://github.com/AgentWong/optimized-memory-mcp-server",
  _varName: "knowledgeGraphMemoryServerPlugin",
};

const devdocsMcpPlugin: Plugin = {
  id: "3ccn0tqnhm",
  name: "DevDocs MCP",
  description:
    "A Model Context Protocol implementation that enables AI-powered access to documentation resources, featuring URI-based navigation, template matching, and structured documentation management.",
  image: "https://github.com/llmian-space.png",
  actions: [],
  githubUrl: "https://github.com/llmian-space/devdocs-mcp",
  _varName: "devdocsMcpPlugin",
};

const apiTesterMcpServerPlugin: Plugin = {
  id: "bcp8tgdqzn",
  name: "API Tester MCP Server",
  description:
    "A Model Context Protocol server that allows Claude to make API requests on your behalf, providing tools for testing various APIs including HTTP requests and OpenAI integrations without sharing your API keys in the chat.",
  image: "https://github.com/Vikrant-Khedkar.png",
  actions: [],
  githubUrl: "https://github.com/Vikrant-Khedkar/api-tester-mcp",
  _varName: "apiTesterMcpServerPlugin",
};

const mcpToolboxPlugin: Plugin = {
  id: "19xn2uhi0e",
  name: "MCP Toolbox",
  description:
    "A comprehensive toolkit that enhances LLM capabilities through the Model Context Protocol, allowing LLMs to interact with external services including command-line operations, file management, Figma integration, and audio processing.",
  image: "https://github.com/ai-zerolab.png",
  actions: [],
  githubUrl: "https://github.com/ai-zerolab/mcp-toolbox",
  _varName: "mcpToolboxPlugin",
};

const spotifyMcpPlugin: Plugin = {
  id: "pf1oy40k88",
  name: "Spotify MCP",
  description:
    "A FastMCP tool that enables control of Spotify through natural language commands in Cursor Composer, allowing users to manage playback, search for content, and interact with playlists.",
  image: "https://github.com/ashwanth1109.png",
  actions: [
    {
      name: "get_my_playlists",
      description:
        "\n    FastMCP tool to get user playlists using SpotifyClient.\n    ",
      parameters: [],
    },
    {
      name: "start_playback",
      description:
        "\n    FastMCP tool to resume playback on the currently active Spotify device.\n    ",
      parameters: [],
    },
    {
      name: "pause_playback",
      description: "\n    FastMCP tool to pause playback on spotify.\n    ",
      parameters: [],
    },
    {
      name: "search_spotify",
      description:
        "\n    Search Spotify for tracks, artists, albums, or playlists.\n    Args:\n        query: Search term\n        type: One of 'track', 'artist', 'album', 'playlist'\n        limit: Max number of results\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: false,
        },
      ],
    },
    {
      name: "next_track",
      description: "Skip to next track in queue",
      parameters: [],
    },
    {
      name: "previous_track",
      description: "Go back to previous track",
      parameters: [],
    },
    {
      name: "seek_position",
      description:
        "\n    Seek to position in current track\n    Args:\n        position_ms: Position in milliseconds\n    ",
      parameters: [
        {
          name: "position_ms",
          type: "integer",
          description: "Parameter: position_ms",
          required: true,
        },
      ],
    },
    {
      name: "get_playback_state",
      description: "Get current playback information",
      parameters: [],
    },
    {
      name: "get_recommendations",
      description:
        "\n    Get Spotify recommendations based on seeds\n    Args:\n        seed_artists: Comma-separated artist IDs\n        seed_tracks: Comma-separated track IDs\n        seed_genres: Comma-separated genres\n        limit: Number of recommendations\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "seed_artists",
          type: "string",
          description: "Parameter: seed_artists",
          required: false,
        },
        {
          name: "seed_genres",
          type: "string",
          description: "Parameter: seed_genres",
          required: false,
        },
        {
          name: "seed_tracks",
          type: "string",
          description: "Parameter: seed_tracks",
          required: false,
        },
      ],
    },
    {
      name: "get_item_info",
      description:
        "\n    Get detailed information about a Spotify item\n    Args:\n        item_id: Spotify ID\n        type: One of 'track', 'album', 'artist', 'playlist'\n    ",
      parameters: [
        {
          name: "item_id",
          type: "string",
          description: "Parameter: item_id",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: false,
        },
      ],
    },
    {
      name: "start_playback_track",
      description:
        "\n    Start playback of a specific track on Spotify\n    Args:\n        track_uri: Spotify URI of the track (e.g. 'spotify:track:1234...')\n        device_id: Optional device to play on\n    ",
      parameters: [
        {
          name: "device_id",
          type: "string",
          description: "Parameter: device_id",
          required: false,
        },
        {
          name: "track_uri",
          type: "string",
          description: "Parameter: track_uri",
          required: true,
        },
      ],
    },
    {
      name: "get_top_artists",
      description:
        "\n    Get user's top artists from Spotify\n    Args:\n        limit: Number of artists (max 50)\n        time_range: One of 'short_term' (4 weeks), 'medium_term' (6 months), 'long_term' (all time)\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "time_range",
          type: "string",
          description: "Parameter: time_range",
          required: false,
        },
      ],
    },
    {
      name: "get_queue",
      description: "Get the current queue of tracks",
      parameters: [],
    },
    {
      name: "add_to_queue",
      description:
        "\n    Add a track to the queue\n    Args:\n        track_id: Spotify track ID to add\n    ",
      parameters: [
        {
          name: "track_id",
          type: "string",
          description: "Parameter: track_id",
          required: true,
        },
      ],
    },
    {
      name: "skip_tracks",
      description:
        "\n    Skip multiple tracks at once\n    Args:\n        num_skips: Number of tracks to skip (default: 1)\n    ",
      parameters: [
        {
          name: "num_skips",
          type: "integer",
          description: "Parameter: num_skips",
          required: false,
        },
      ],
    },
    {
      name: "get_current_track",
      description: "Get information about the currently playing track",
      parameters: [],
    },
    {
      name: "start_playlist_playback",
      description:
        "\n    Start playback of a specific playlist\n    Args:\n        playlist_id: Spotify playlist ID\n        device_id: Optional device to play on\n    ",
      parameters: [
        {
          name: "device_id",
          type: "string",
          description: "Parameter: device_id",
          required: false,
        },
        {
          name: "playlist_id",
          type: "string",
          description: "Parameter: playlist_id",
          required: true,
        },
      ],
    },
    {
      name: "get_artist_top_tracks",
      description:
        "\n    Get top tracks for an artist\n    Args:\n        artist_id: Spotify artist ID\n    ",
      parameters: [
        {
          name: "artist_id",
          type: "string",
          description: "Parameter: artist_id",
          required: true,
        },
      ],
    },
    {
      name: "set_repeat_mode",
      description:
        "\n    Set repeat mode for playback\n    Args:\n        state: One of 'track', 'context', or 'off'\n    ",
      parameters: [
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: true,
        },
      ],
    },
    {
      name: "add_to_playlist",
      description:
        "\n    Add tracks to a playlist\n    Args:\n        playlist_id: Spotify playlist ID\n        track_ids: List of track IDs to add\n    ",
      parameters: [
        {
          name: "playlist_id",
          type: "string",
          description: "Parameter: playlist_id",
          required: true,
        },
        {
          name: "track_ids",
          type: "string array",
          description: "Parameter: track_ids",
          required: true,
        },
      ],
    },
    {
      name: "reorder_queue",
      description:
        "\n    Reorder tracks in queue by moving a track to a different position\n    Args:\n        range_start: Position of track to move\n        insert_before: Position to insert the track\n    ",
      parameters: [
        {
          name: "insert_before",
          type: "integer",
          description: "Parameter: insert_before",
          required: true,
        },
        {
          name: "range_start",
          type: "integer",
          description: "Parameter: range_start",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ashwanth1109/mcp-spotify",
  _varName: "spotifyMcpPlugin",
};

const rememberizerMcpServerPlugin: Plugin = {
  id: "4ao99ygw5c",
  name: "Rememberizer MCP Server",
  description:
    "A Model Context Protocol server enabling LLMs to search, retrieve, and manage documents through Rememberizer's knowledge management API.",
  image: "https://github.com/skydeckai.png",
  actions: [],
  githubUrl: "https://github.com/skydeckai/mcp-server-rememberizer",
  _varName: "rememberizerMcpServerPlugin",
};

const mcpServerMemoryFilePlugin: Plugin = {
  id: "lpf30rhggo",
  name: "MCP Server Memory File",
  description:
    "An MCP server that allows Claude and other LLMs to manage persistent memories across conversations through text file storage, enabling commands to add, search, delete and list memory entries.",
  image: "https://github.com/g0t4.png",
  actions: [],
  githubUrl: "https://github.com/g0t4/mcp-server-memory-file",
  _varName: "mcpServerMemoryFilePlugin",
};

const airbyteStatusCheckerPlugin: Plugin = {
  id: "uypqg4nsiq",
  name: "Airbyte Status Checker",
  description:
    "An MCP server for Claude Desktop that allows users to check the status of their Airbyte connections.",
  image: "https://github.com/quintonwall.png",
  actions: [],
  githubUrl: "https://github.com/quintonwall/mcp-airbyte-list-sources",
  _varName: "airbyteStatusCheckerPlugin",
};

const perplexityMcpServer1Plugin: Plugin = {
  id: "6qmvjay9z5",
  name: "Perplexity MCP Server",
  description:
    "An MCP server that enables Claude to perform web searches using Perplexity's API with intelligent model selection based on query intent and support for domain and recency filtering.",
  image: "https://github.com/RossH121.png",
  actions: [
    {
      name: "search",
      description: "Search the web using Perplexity AI",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
      ],
    },
    {
      name: "domain_filter",
      description:
        "Add a domain to allow or block in search results (max 3 domains per type)",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Whether to allow or block this domain",
          required: true,
        },
        {
          name: "domain",
          type: "string",
          description:
            "Domain name without http:// or https:// (example: wikipedia.org)",
          required: true,
        },
      ],
    },
    {
      name: "recency_filter",
      description: "Set the time recency for search results",
      parameters: [
        {
          name: "filter",
          type: "string",
          description:
            "Time window for search results (none to disable filtering)",
          required: true,
        },
      ],
    },
    {
      name: "clear_filters",
      description: "Clear all domain filters",
      parameters: [],
    },
    {
      name: "list_filters",
      description: "List all current domain filters",
      parameters: [],
    },
    {
      name: "model_info",
      description:
        "Get information about available models and optionally set a specific model",
      parameters: [
        {
          name: "model",
          type: "string",
          description:
            "Optional: Set a specific model instead of using automatic selection",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RossH121/perplexity-mcp",
  _varName: "perplexityMcpServer1Plugin",
};

const scrapboxMcpServerPlugin: Plugin = {
  id: "ahg8mvskf0",
  name: "Scrapbox MCP Server",
  description:
    "A simple TypeScript-based MCP server that implements a notes system, allowing users to create, list, and generate summaries of text notes via Claude.",
  image: "https://github.com/YuheiNakasaka.png",
  actions: [
    {
      name: "get_page_content",
      description: "Fetch content from a Scrapbox page by URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "Scrapbox page URL (e.g., https://scrapbox.io/project-name/page-title)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/YuheiNakasaka/scrapbox-mcp",
  _varName: "scrapboxMcpServerPlugin",
};

const connectwiseManageMcpServerPlugin: Plugin = {
  id: "uhmphdifmp",
  name: "ConnectWise Manage MCP Server",
  description:
    "A Model Context Protocol server that enables Claude to interact with the ConnectWise Manage API to perform operations like retrieving, creating, updating, and deleting tickets, companies, contacts, and other entities.",
  image: "https://github.com/ethangillani.png",
  actions: [],
  githubUrl: "https://github.com/ethangillani/connectwise-mcp-server",
  _varName: "connectwiseManageMcpServerPlugin",
};

const githubMcpServerPlugin: Plugin = {
  id: "mltxtigc9r",
  name: "Github MCP Server",
  description:
    "Provides integration with Github through the Model Context Protocol (MCP), allowing Large Language Models to interact with Github's repositories, issues, pull requests and search functionality.",
  image: "https://github.com/ParasSolanki.png",
  actions: [],
  githubUrl: "https://github.com/ParasSolanki/github-mcp-server",
  _varName: "githubMcpServerPlugin",
};

const mcpJupiterPlugin: Plugin = {
  id: "jc7lttojhw",
  name: "MCP Jupiter",
  description:
    "A Model Context Protocol server that enables Claude to perform Solana token swaps through Jupiter's API, including getting quotes, building transactions, and sending swap transactions on the Solana blockchain.",
  image: "https://github.com/dcSpark.png",
  actions: [
    {
      name: "jupiter_get_quote",
      description: "Get a quote for swapping tokens on Jupiter",
      parameters: [
        {
          name: "amount",
          type: "string",
          description: "Parameter: amount",
          required: true,
        },
        {
          name: "asLegacyTransaction",
          type: "boolean",
          description: "Parameter: asLegacyTransaction",
          required: false,
        },
        {
          name: "excludeDexes",
          type: "string array",
          description: "Parameter: excludeDexes",
          required: false,
        },
        {
          name: "inputMint",
          type: "string",
          description: "Parameter: inputMint",
          required: true,
        },
        {
          name: "maxAccounts",
          type: "number",
          description: "Parameter: maxAccounts",
          required: false,
        },
        {
          name: "onlyDirectRoutes",
          type: "boolean",
          description: "Parameter: onlyDirectRoutes",
          required: false,
        },
        {
          name: "outputMint",
          type: "string",
          description: "Parameter: outputMint",
          required: true,
        },
        {
          name: "platformFeeBps",
          type: "number",
          description: "Parameter: platformFeeBps",
          required: false,
        },
        {
          name: "slippageBps",
          type: "number",
          description: "Parameter: slippageBps",
          required: false,
        },
        {
          name: "swapMode",
          type: "string",
          description: "Parameter: swapMode",
          required: false,
        },
      ],
    },
    {
      name: "jupiter_build_swap_transaction",
      description: "Build a swap transaction on Jupiter",
      parameters: [
        {
          name: "asLegacyTransaction",
          type: "boolean",
          description: "Parameter: asLegacyTransaction",
          required: false,
        },
        {
          name: "computeUnitPriceMicroLamports",
          type: "number",
          description: "Parameter: computeUnitPriceMicroLamports",
          required: false,
        },
        {
          name: "prioritizationFeeLamports",
          type: "number",
          description: "Parameter: prioritizationFeeLamports",
          required: false,
        },
        {
          name: "quoteResponse",
          type: "string",
          description: "Parameter: quoteResponse",
          required: true,
        },
        {
          name: "userPublicKey",
          type: "string",
          description: "Parameter: userPublicKey",
          required: true,
        },
      ],
    },
    {
      name: "jupiter_send_swap_transaction",
      description: "Send a swap transaction on Jupiter",
      parameters: [
        {
          name: "maxRetries",
          type: "number",
          description: "Parameter: maxRetries",
          required: false,
        },
        {
          name: "serializedTransaction",
          type: "string",
          description: "Parameter: serializedTransaction",
          required: false,
        },
        {
          name: "skipPreflight",
          type: "boolean",
          description: "Parameter: skipPreflight",
          required: false,
        },
        {
          name: "swapTransaction",
          type: "string",
          description: "Parameter: swapTransaction",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dcSpark/mcp-server-jupiter",
  _varName: "mcpJupiterPlugin",
};

const steelPuppeteerPlugin: Plugin = {
  id: "dupuf5crsv",
  name: "Steel Puppeteer",
  description:
    "A Model Context Protocol server that enables LLMs to automate web browsers using Puppeteer, allowing navigation, screenshots, form filling, and JavaScript execution in a real browser environment.",
  image: "https://github.com/rdvo.png",
  actions: [],
  githubUrl: "https://github.com/rdvo/mcp-server",
  _varName: "steelPuppeteerPlugin",
};

const homeAssistantMcpServerPlugin: Plugin = {
  id: "5tbc27x654",
  name: "Home Assistant MCP Server",
  description:
    "A Model Context Protocol server that integrates with Home Assistant to provide smart home control capabilities through natural language, supporting devices like lights, climate systems, locks, alarms, and humidifiers.",
  image: "https://github.com/miguelg719.png",
  actions: [],
  githubUrl: "https://github.com/miguelg719/home-assistant-mcp",
  _varName: "homeAssistantMcpServerPlugin",
};

const substackReaderPlugin: Plugin = {
  id: "1jzplz4c70",
  name: "Substack Reader",
  description:
    "Enables fetching and reading subscriber-only content from Trade Companion by Adam Mancini on Substack, allowing Claude to access and discuss the latest financial trading articles.",
  image: "https://github.com/pl728.png",
  actions: [],
  githubUrl: "https://github.com/pl728/substack-fetcher-mcp",
  _varName: "substackReaderPlugin",
};

const awsMcpServerPlugin: Plugin = {
  id: "v69k6ch2gh",
  name: "AWS MCP Server",
  description:
    "A Model Context Protocol server implementation that enables Claude to perform AWS operations on S3 and DynamoDB services through natural language commands.",
  image: "https://github.com/rishikavikondala.png",
  actions: [
    {
      name: "s3_bucket_create",
      description: "Create a new S3 bucket",
      parameters: [
        {
          name: "bucket_name",
          type: "string",
          description: "Name of the S3 bucket to create",
          required: true,
        },
      ],
    },
    {
      name: "s3_bucket_list",
      description: "List all S3 buckets",
      parameters: [],
    },
    {
      name: "s3_bucket_delete",
      description: "Delete an S3 bucket",
      parameters: [
        {
          name: "bucket_name",
          type: "string",
          description: "Name of the S3 bucket to delete",
          required: true,
        },
      ],
    },
    {
      name: "s3_object_upload",
      description: "Upload an object to S3",
      parameters: [
        {
          name: "bucket_name",
          type: "string",
          description: "Name of the S3 bucket",
          required: true,
        },
        {
          name: "file_content",
          type: "string",
          description: "Base64 encoded file content for upload",
          required: true,
        },
        {
          name: "object_key",
          type: "string",
          description: "Key/path of the object in the bucket",
          required: true,
        },
      ],
    },
    {
      name: "s3_object_delete",
      description: "Delete an object from S3",
      parameters: [
        {
          name: "bucket_name",
          type: "string",
          description: "Name of the S3 bucket",
          required: true,
        },
        {
          name: "object_key",
          type: "string",
          description: "Key/path of the object to delete",
          required: true,
        },
      ],
    },
    {
      name: "s3_object_list",
      description: "List objects in an S3 bucket",
      parameters: [
        {
          name: "bucket_name",
          type: "string",
          description: "Name of the S3 bucket",
          required: true,
        },
      ],
    },
    {
      name: "s3_object_read",
      description: "Read an object's content from S3",
      parameters: [
        {
          name: "bucket_name",
          type: "string",
          description: "Name of the S3 bucket",
          required: true,
        },
        {
          name: "object_key",
          type: "string",
          description: "Key/path of the object to read",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_table_create",
      description: "Create a new DynamoDB table",
      parameters: [
        {
          name: "attribute_definitions",
          type: "array",
          description: "Attribute definitions for table creation",
          required: true,
        },
        {
          name: "key_schema",
          type: "array",
          description: "Key schema for table creation",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_table_describe",
      description: "Get details about a DynamoDB table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_table_list",
      description: "List all DynamoDB tables",
      parameters: [],
    },
    {
      name: "dynamodb_table_delete",
      description: "Delete a DynamoDB table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_table_update",
      description: "Update a DynamoDB table",
      parameters: [
        {
          name: "attribute_definitions",
          type: "array",
          description: "Updated attribute definitions",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_put",
      description: "Put an item into a DynamoDB table",
      parameters: [
        {
          name: "item",
          type: "object",
          description: "Item data to put",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_get",
      description: "Get an item from a DynamoDB table",
      parameters: [
        {
          name: "key",
          type: "object",
          description: "Key to identify the item",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_update",
      description: "Update an item in a DynamoDB table",
      parameters: [
        {
          name: "item",
          type: "object",
          description: "Updated item data",
          required: true,
        },
        {
          name: "key",
          type: "object",
          description: "Key to identify the item",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_delete",
      description: "Delete an item from a DynamoDB table",
      parameters: [
        {
          name: "key",
          type: "object",
          description: "Key to identify the item",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_query",
      description: "Query items in a DynamoDB table",
      parameters: [
        {
          name: "expression_values",
          type: "object",
          description: "Expression attribute values",
          required: true,
        },
        {
          name: "key_condition",
          type: "string",
          description: "Key condition expression",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_scan",
      description: "Scan items in a DynamoDB table",
      parameters: [
        {
          name: "expression_attributes",
          type: "object",
          description: "Parameter: expression_attributes",
          required: false,
        },
        {
          name: "filter_expression",
          type: "string",
          description: "Filter expression",
          required: false,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_batch_get",
      description: "Batch get multiple items from DynamoDB tables",
      parameters: [
        {
          name: "request_items",
          type: "object",
          description: "Map of table names to keys to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_item_batch_write",
      description: "Batch write operations (put/delete) for DynamoDB items",
      parameters: [
        {
          name: "items",
          type: "array",
          description: "Array of items to process",
          required: true,
        },
        {
          name: "key_attributes",
          type: "string array",
          description:
            "For delete operations, specify which attributes form the key",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Type of batch operation (put or delete)",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_describe_ttl",
      description: "Get the TTL settings for a table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_update_ttl",
      description: "Update the TTL settings for a table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the DynamoDB table",
          required: true,
        },
        {
          name: "ttl_attribute",
          type: "string",
          description: "The attribute name to use for TTL",
          required: true,
        },
        {
          name: "ttl_enabled",
          type: "boolean",
          description: "Whether TTL should be enabled",
          required: true,
        },
      ],
    },
    {
      name: "dynamodb_batch_execute",
      description: "Execute multiple PartiQL statements in a batch",
      parameters: [
        {
          name: "parameters",
          type: "array array",
          description: "List of parameter lists for each statement",
          required: true,
        },
        {
          name: "statements",
          type: "string array",
          description: "List of PartiQL statements to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/rishikavikondala/mcp-server-aws",
  _varName: "awsMcpServerPlugin",
};

const elasticsearchKnowledgeGraphForMcpPlugin: Plugin = {
  id: "h9w4cyfdqx",
  name: "Elasticsearch Knowledge Graph for MCP",
  description:
    "Provides a scalable knowledge graph implementation for Model Context Protocol using Elasticsearch, enabling AI models to store and query information with advanced search capabilities, memory-like behavior, and multi-zone architecture.",
  image: "https://github.com/j3k0.png",
  actions: [
    {
      name: "create_entities",
      description: "Create entities in knowledge graph (memory)",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "List of entities to create",
          required: true,
        },
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone to create entities in. If not specified, uses the default zone.",
          required: false,
        },
      ],
    },
    {
      name: "update_entities",
      description: "Update entities in knowledge graph (memory)",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "List of entities to update",
          required: true,
        },
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone specifier. If provided, entities will be updated in this zone.",
          required: false,
        },
      ],
    },
    {
      name: "delete_entities",
      description: "Delete entities from knowledge graph (memory)",
      parameters: [
        {
          name: "cascade_relations",
          type: "boolean",
          description:
            "Whether to delete relations involving these entities (default: true)",
          required: false,
        },
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone specifier. If provided, entities will be deleted from this zone.",
          required: false,
        },
        {
          name: "names",
          type: "string array",
          description: "Names of entities to delete",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create relationships between entities in knowledge graph (memory)",
      parameters: [
        {
          name: "auto_create_missing_entities",
          type: "boolean",
          description:
            "Whether to automatically create missing entities in the relations (default: true)",
          required: false,
        },
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional default memory zone specifier. Used if a relation doesn't specify fromZone or toZone.",
          required: false,
        },
        {
          name: "relations",
          type: "object array",
          description: "List of relations to create",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete relationships from knowledge graph (memory)",
      parameters: [
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone specifier. If provided, relations will be deleted from this zone.",
          required: false,
        },
        {
          name: "relations",
          type: "object array",
          description: "List of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "search_nodes",
      description:
        "Search entities using ElasticSearch query syntax. Supports boolean operators (AND, OR, NOT), fuzzy matching (~), phrases (\"term\"), proximity (\"terms\"~N), wildcards (*, ?), and boosting (^N). Examples: 'meeting AND notes', 'Jon~', '\"project plan\"~2'. All searches respect zone isolation.",
      parameters: [
        {
          name: "entityTypes",
          type: "string array",
          description:
            "Filter to specific entity types (OR condition if multiple).",
          required: false,
        },
        {
          name: "includeObservations",
          type: "boolean",
          description: "Include full entity observations (default: false).",
          required: false,
        },
        {
          name: "informationNeeds",
          type: "string",
          description:
            "Important. Describe what information you are looking for. What questions are you trying to answer? Helps get more useful results.",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Max results (default: 20, or 5 with observations).",
          required: false,
        },
        {
          name: "memory_zone",
          type: "string",
          description: "Limit search to specific zone. Omit for default zone.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "ElasticSearch query string. Use '*' for all entities.",
          required: true,
        },
        {
          name: "sortBy",
          type: "string",
          description: "Sort by match quality, access time, or importance.",
          required: false,
        },
      ],
    },
    {
      name: "open_nodes",
      description:
        "Get details about specific entities in knowledge graph (memory) and their relations",
      parameters: [
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone to retrieve entities from. If not specified, uses the default zone.",
          required: false,
        },
        {
          name: "names",
          type: "string array",
          description: "Names of entities to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add observations to an existing entity in knowledge graph (memory)",
      parameters: [
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone where the entity is stored. If not specified, uses the default zone.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of entity to add observations to",
          required: true,
        },
        {
          name: "observations",
          type: "string array",
          description: "Observations to add to the entity",
          required: true,
        },
      ],
    },
    {
      name: "mark_important",
      description:
        "Mark entity as important in knowledge graph (memory) by boosting its relevance score",
      parameters: [
        {
          name: "auto_create",
          type: "boolean",
          description:
            "Whether to automatically create the entity if it doesn't exist (default: false)",
          required: false,
        },
        {
          name: "important",
          type: "boolean",
          description:
            "Set as important (true - multiply relevance by 10) or not (false - divide relevance by 10)",
          required: true,
        },
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone specifier. If provided, entity will be marked in this zone.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Entity name",
          required: true,
        },
      ],
    },
    {
      name: "get_recent",
      description:
        "Get recently accessed entities from knowledge graph (memory) and their relations",
      parameters: [
        {
          name: "includeObservations",
          type: "boolean",
          description:
            "Whether to include full entity observations in results (default: false)",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Max results (default: 20 if includeObservations is false, 5 if true)",
          required: false,
        },
        {
          name: "memory_zone",
          type: "string",
          description:
            "Optional memory zone to get recent entities from. If not specified, uses the default zone.",
          required: false,
        },
      ],
    },
    {
      name: "list_zones",
      description: "List all available memory zones with metadata.",
      parameters: [],
    },
    {
      name: "create_zone",
      description: "Create a new memory zone with optional description.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Optional zone description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Zone name (cannot be 'default')",
          required: true,
        },
      ],
    },
    {
      name: "delete_zone",
      description: "Delete a memory zone and all its entities/relations.",
      parameters: [
        {
          name: "confirm",
          type: "boolean",
          description: "Confirmation flag, must be true",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Zone name to delete (cannot be 'default')",
          required: true,
        },
      ],
    },
    {
      name: "copy_entities",
      description:
        "Copy entities between zones with optional relation handling.",
      parameters: [
        {
          name: "copy_relations",
          type: "boolean",
          description: "Copy related relationships (default: true)",
          required: false,
        },
        {
          name: "names",
          type: "string array",
          description: "Entity names to copy",
          required: true,
        },
        {
          name: "overwrite",
          type: "boolean",
          description: "Overwrite if entity exists (default: false)",
          required: false,
        },
        {
          name: "source_zone",
          type: "string",
          description: "Source zone",
          required: true,
        },
        {
          name: "target_zone",
          type: "string",
          description: "Target zone",
          required: true,
        },
      ],
    },
    {
      name: "move_entities",
      description: "Move entities between zones (copy + delete from source).",
      parameters: [
        {
          name: "move_relations",
          type: "boolean",
          description: "Move related relationships (default: true)",
          required: false,
        },
        {
          name: "names",
          type: "string array",
          description: "Entity names to move",
          required: true,
        },
        {
          name: "overwrite",
          type: "boolean",
          description: "Overwrite if entity exists (default: false)",
          required: false,
        },
        {
          name: "source_zone",
          type: "string",
          description: "Source zone",
          required: true,
        },
        {
          name: "target_zone",
          type: "string",
          description: "Target zone",
          required: true,
        },
      ],
    },
    {
      name: "merge_zones",
      description: "Merge multiple zones with conflict resolution options.",
      parameters: [
        {
          name: "delete_source_zones",
          type: "boolean",
          description: "Delete source zones after merging",
          required: false,
        },
        {
          name: "overwrite_conflicts",
          type: "string",
          description: "How to handle name conflicts",
          required: false,
        },
        {
          name: "source_zones",
          type: "string array",
          description: "Source zones to merge from",
          required: true,
        },
        {
          name: "target_zone",
          type: "string",
          description: "Target zone to merge into",
          required: true,
        },
      ],
    },
    {
      name: "zone_stats",
      description: "Get statistics for entities and relationships in a zone.",
      parameters: [
        {
          name: "zone",
          type: "string",
          description: "Zone name (omit for default zone)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/j3k0/mcp-elastic-memory",
  _varName: "elasticsearchKnowledgeGraphForMcpPlugin",
};

const mozillaReadabilityParserMcpServerPlugin: Plugin = {
  id: "tx69i8e0nq",
  name: "Mozilla Readability Parser MCP Server",
  description:
    "A Python implementation of an MCP server that extracts webpage content, removes ads and non-essential elements, and transforms it into clean, LLM-optimized Markdown.",
  image: "https://github.com/jmh108.png",
  actions: [],
  githubUrl: "https://github.com/jmh108/MCP-server-readability-python",
  _varName: "mozillaReadabilityParserMcpServerPlugin",
};

const sentryMcpServerPlugin: Plugin = {
  id: "sfel2251tz",
  name: "Sentry MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to interact with Sentry for error tracking and monitoring, allowing retrieval and analysis of error data, project management, and performance monitoring through the Sentry API.",
  image: "https://github.com/codyde.png",
  actions: [
    {
      name: "list_projects",
      description:
        "List accessible Sentry projects. View project slugs, IDs, status, settings, features, and organization details.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization to list projects from",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "resolve_short_id",
      description:
        "Retrieve details about an issue using its short ID. Maps short IDs to issue details, project context, and status.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization the issue belongs to",
          required: true,
        },
        {
          name: "short_id",
          type: "string",
          description:
            "The short ID of the issue to resolve (e.g., PROJECT-123)",
          required: true,
        },
      ],
    },
    {
      name: "get_sentry_event",
      description:
        "Retrieve a specific Sentry event from an issue. Requires issue ID/URL and event ID.",
      parameters: [
        {
          name: "event_id",
          type: "string",
          description: "The specific event ID to retrieve",
          required: true,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "issue_id_or_url",
          type: "string",
          description:
            "Either a full Sentry issue URL or just the numeric issue ID",
          required: true,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization the issue belongs to",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "list_error_events_in_project",
      description:
        "List error events from a specific Sentry project. View recent errors, frequency patterns, and occurrence timestamps.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization the project belongs to",
          required: true,
        },
        {
          name: "project_slug",
          type: "string",
          description: "The slug of the project to list events from",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "create_project",
      description:
        "Create a new project in Sentry. Track deployments, releases, and health metrics.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The name of the project to create",
          required: true,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization to create the project in",
          required: true,
        },
        {
          name: "platform",
          type: "string",
          description:
            "The platform for the project (e.g., python, javascript, etc.)",
          required: false,
        },
        {
          name: "team_slug",
          type: "string",
          description: "The slug of the team to associate the project with",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "list_project_issues",
      description:
        "List issues from a Sentry project. Monitor issue status, severity, frequency, and timing.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization the project belongs to",
          required: true,
        },
        {
          name: "project_slug",
          type: "string",
          description: "The slug of the project to list issues from",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "list_issue_events",
      description:
        "List events for a specific Sentry issue. Analyze event details, metadata, and patterns.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "issue_id",
          type: "string",
          description: "The ID of the issue to list events for",
          required: true,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization the issue belongs to",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "get_sentry_issue",
      description:
        "Retrieve and analyze a Sentry issue. Accepts issue URL or ID.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "issue_id_or_url",
          type: "string",
          description:
            "Either a full Sentry issue URL or just the numeric issue ID",
          required: true,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization the issue belongs to",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "list_organization_replays",
      description:
        "List replays from a Sentry organization. Monitor user sessions, interactions, errors, and experience issues.",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Optional cursor for pagination",
          required: false,
        },
        {
          name: "end",
          type: "string",
          description:
            "Optional end of time range (UTC ISO8601 or epoch seconds). Use with 'start' instead of 'stats_period'",
          required: false,
        },
        {
          name: "environment",
          type: "string",
          description: "Optional environment to filter replays by",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization to list replays from",
          required: true,
        },
        {
          name: "per_page",
          type: "number",
          description: "Optional limit on number of results to return",
          required: false,
        },
        {
          name: "project_ids",
          type: "string array",
          description: "Optional array of project IDs to filter replays by",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Optional structured query string to filter results",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Optional field to sort results by",
          required: false,
        },
        {
          name: "start",
          type: "string",
          description:
            "Optional start of time range (UTC ISO8601 or epoch seconds). Use with 'end' instead of 'stats_period'",
          required: false,
        },
        {
          name: "stats_period",
          type: "string",
          description:
            "Optional time range in format <number><unit> (e.g., '1d' for one day). Units: m (minutes), h (hours), d (days), w (weeks)",
          required: false,
        },
        {
          name: "view",
          type: "string",
          description: "View type (default: detailed)",
          required: false,
        },
      ],
    },
    {
      name: "setup_sentry",
      description:
        "Set up Sentry for a project returning a dsn and instructions for setup.",
      parameters: [
        {
          name: "environment",
          type: "string",
          description:
            "Optional environment name (e.g., production, staging, development)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (default: markdown)",
          required: false,
        },
        {
          name: "organization_slug",
          type: "string",
          description: "The slug of the organization to create the project in",
          required: true,
        },
        {
          name: "project_name",
          type: "string",
          description: "The name of the project to create",
          required: true,
        },
        {
          name: "team_slug",
          type: "string",
          description: "The slug of the team to associate the project with",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/codyde/mcp-sentry-ts",
  _varName: "sentryMcpServerPlugin",
};

const excelMcpServerPlugin: Plugin = {
  id: "hklvuq4p5r",
  name: "Excel MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to read from and write to Microsoft Excel files, supporting formats like xlsx, xlsm, xltx, and xltm.",
  image: "https://github.com/negokaz.png",
  actions: [],
  githubUrl: "https://github.com/negokaz/excel-mcp-server",
  _varName: "excelMcpServerPlugin",
};

const emergencyMedicarePlannerMcpServerPlugin: Plugin = {
  id: "cowlncwr6h",
  name: "Emergency Medicare Planner MCP Server",
  description:
    "Integrates with Google Maps to locate and evaluate medical facilities in emergency situations, helping users find appropriate hospitals and clinics based on medical needs, emergency level, and facility capabilities.",
  image: "https://github.com/manolaz.png",
  actions: [
    {
      name: "find_nearby_medical_facilities",
      description:
        "Finds hospitals and clinics nearby user location that match specific requirements",
      parameters: [
        {
          name: "careQuality",
          type: "string",
          description: "Expected quality of medical care",
          required: false,
        },
        {
          name: "facilities",
          type: "string array",
          description: "Types of medical facilities to search for",
          required: false,
        },
        {
          name: "infrastructure",
          type: "string",
          description: "Quality of infrastructure and cleanliness",
          required: false,
        },
        {
          name: "priceRange",
          type: "string",
          description: "Price range preference",
          required: false,
        },
        {
          name: "radius",
          type: "number",
          description: "Search radius in meters (default: 10000m = 10km)",
          required: false,
        },
        {
          name: "treatmentNeeds",
          type: "string array",
          description: "Specific medical treatments or services needed",
          required: false,
        },
        {
          name: "userLocation",
          type: "string",
          description: "User's current location (address or coordinates)",
          required: true,
        },
      ],
    },
    {
      name: "check_medicare_coverage",
      description:
        "Checks what treatments and procedures are covered by Medicare",
      parameters: [
        {
          name: "insuranceType",
          type: "string",
          description: "Type of Medicare insurance (e.g., Part A, Part B)",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "US State code (e.g., CA, NY)",
          required: true,
        },
        {
          name: "treatmentCode",
          type: "string",
          description: "Medicare treatment or procedure code",
          required: true,
        },
      ],
    },
    {
      name: "get_emergency_contacts",
      description:
        "Retrieves emergency contact information for a specific location",
      parameters: [
        {
          name: "location",
          type: "string",
          description: "Location to get emergency contacts for",
          required: true,
        },
        {
          name: "serviceType",
          type: "string array",
          description: "Types of emergency services needed",
          required: false,
        },
      ],
    },
    {
      name: "schedule_emergency_transport",
      description: "Arranges emergency medical transportation",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Destination hospital or clinic",
          required: false,
        },
        {
          name: "medicalCondition",
          type: "string",
          description: "Brief description of medical condition",
          required: true,
        },
        {
          name: "patientLocation",
          type: "string",
          description: "Patient's current location",
          required: true,
        },
        {
          name: "urgency",
          type: "string",
          description: "Level of urgency",
          required: true,
        },
      ],
    },
    {
      name: "sequentialthinking",
      description:
        "A detailed tool for dynamic and reflective medical problem-solving through thoughts.\nThis tool helps analyze medical problems through a flexible thinking process that can adapt and evolve.\nEach thought can build on, question, or revise previous insights as understanding of the medical situation deepens.\n\nWhen to use this tool:\n- Breaking down complex medical problems into steps\n- Planning and designing treatment approaches with room for revision\n- Clinical analysis that might need course correction\n- Medical problems where the full scope might not be clear initially\n- Healthcare decisions that require a multi-step solution\n- Medical evaluations that need to maintain context over multiple steps\n- Situations where irrelevant medical information needs to be filtered out\n\nKey features:\n- You can adjust total_thoughts up or down as the diagnosis progresses\n- You can question or revise previous medical assessments\n- You can add more diagnostic thoughts as new information emerges\n- You can express clinical uncertainty and explore alternative approaches\n- Not every medical assessment needs to build linearly - you can branch or backtrack\n- Generates a clinical hypothesis\n- Verifies the hypothesis based on the Chain of Thought steps\n- Repeats the process until a satisfactory diagnosis or treatment plan is reached\n- Provides a correct medical assessment or recommendation",
      parameters: [
        {
          name: "branchFromThought",
          type: "integer",
          description:
            "Branching point thought number for alternative diagnosis",
          required: false,
        },
        {
          name: "branchId",
          type: "string",
          description: "Branch identifier for the diagnostic path",
          required: false,
        },
        {
          name: "isRevision",
          type: "boolean",
          description: "Whether this revises previous medical thinking",
          required: false,
        },
        {
          name: "needsMoreThoughts",
          type: "boolean",
          description: "If more clinical evaluation is needed",
          required: false,
        },
        {
          name: "nextThoughtNeeded",
          type: "boolean",
          description: "Whether another medical assessment step is needed",
          required: true,
        },
        {
          name: "revisesThought",
          type: "integer",
          description: "Which medical assessment is being reconsidered",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Your current clinical thinking step",
          required: true,
        },
        {
          name: "thoughtNumber",
          type: "integer",
          description: "Current thought number",
          required: true,
        },
        {
          name: "totalThoughts",
          type: "integer",
          description:
            "Estimated total thoughts needed for complete evaluation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/manolaz/emergency-medicare-planner-mcp-server",
  _varName: "emergencyMedicarePlannerMcpServerPlugin",
};

const ipGeolocationMcpServerPlugin: Plugin = {
  id: "pll7u5ak1h",
  name: "IP Geolocation MCP Server",
  description:
    "A Model Context Protocol server that retrieves detailed geographic information about IP addresses using the ipinfo.io API, helping determine user location and network details.",
  image: "https://github.com/briandconnelly.png",
  actions: [
    {
      name: "get_ip_details",
      description:
        "Get information about an IP address.\n\nUse this tool to:\n- Determine the user's geographic location to coarse granularity\n- Get information about the user's internet service provider\n- Get information about a specific IP address\n\nArgs:\n    ip (str | None): The IP address to look up. If None, returns information\n        about the requesting client's IP address.\n    ctx (Context): The MCP request context.\n\nReturns:\n    IPDetails: Object containing information about the IP address,\n        including geographic location, network operator, and more.\n\nNote:\n    This tool requires an IPInfo API Token specified via the IPINFO_API_TOKEN\n    environment variable for full functionality.\n",
      parameters: [
        {
          name: "ip",
          type: "string",
          description: "Parameter: ip",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/briandconnelly/mcp-server-ipinfo",
  _varName: "ipGeolocationMcpServerPlugin",
};

const whoisMcpPlugin: Plugin = {
  id: "cwu9e3fcwg",
  name: "Whois MCP",
  description:
    "A Model Context Protocol server that allows AI agents to perform WHOIS lookups, enabling users to directly ask the AI about domain availability, ownership, registration details, and other domain information.",
  image: "https://github.com/bharathvaj-ganesan.png",
  actions: [
    {
      name: "whois_domain",
      description: "Looksup whois information about the domain",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Parameter: domain",
          required: true,
        },
      ],
    },
    {
      name: "whois_tld",
      description: "Looksup whois information about the Top Level Domain (TLD)",
      parameters: [
        {
          name: "tld",
          type: "string",
          description: "Parameter: tld",
          required: true,
        },
      ],
    },
    {
      name: "whois_ip",
      description: "Looksup whois information about the IP",
      parameters: [
        {
          name: "ip",
          type: "string",
          description: "Parameter: ip",
          required: true,
        },
      ],
    },
    {
      name: "whois_as",
      description:
        "Looksup whois information about the Autonomous System Number (ASN)",
      parameters: [
        {
          name: "asn",
          type: "string",
          description: "Parameter: asn",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bharathvaj-ganesan/whois-mcp",
  _varName: "whoisMcpPlugin",
};

const githubMcpServer1Plugin: Plugin = {
  id: "yrvpqd8vee",
  name: "GitHub MCP Server",
  description:
    "A Model Context Protocol server that enables AI models to interact with GitHub's API, allowing for repository creation and management with descriptions, topics, and website URLs through natural language commands.",
  image: "https://github.com/PoliTwit1984.png",
  actions: [
    {
      name: "create_repo",
      description:
        "Create or update GitHub repositories using natural language commands",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            'Natural language command like "Create a repository for my machine learning project with tags python tensorflow" or "Update repository-name description to New description with tags updated ml"',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PoliTwit1984/github-meta-mcp-server",
  _varName: "githubMcpServer1Plugin",
};

const mcpServerLinearPlugin: Plugin = {
  id: "stodrxddet",
  name: "MCP Server Linear",
  description:
    "An MCP server that provides tools for interacting with Linear issue tracking system, currently supporting issue search with plans to expand to issue creation, updates, comments, and project management.",
  image: "https://github.com/floodfx.png",
  actions: [
    {
      name: "linear-search-issues",
      description: "Search for issues in Linear",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Filter by assignee's user ID",
          required: false,
        },
        {
          name: "estimate",
          type: "number",
          description: "Filter by estimate points",
          required: false,
        },
        {
          name: "includeArchived",
          type: "boolean",
          description: "Include archived issues in results (default: false)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Filter by label names",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Max results to return (default: 10)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Filter by priority (1=urgent, 2=high, 3=normal, 4=low)",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Filter by project name",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search term",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by status name (e.g., 'In Progress', 'Done')",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Filter by team ID",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/floodfx/mcp-server-linear",
  _varName: "mcpServerLinearPlugin",
};

const claudegasbridgePlugin: Plugin = {
  id: "mfqd2f9akw",
  name: "Claude-GAS-Bridge",
  description:
    "A bridge server that connects MCP clients (like Claude Desktop) to Google Apps Script, allowing execution of GAS scripts through natural language interfaces.",
  image: "https://github.com/KaishuShito.png",
  actions: [
    {
      name: "execute-gas",
      description: "Execute custom GAS script",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "Parameter: apiKey",
          required: true,
        },
        {
          name: "script",
          type: "string",
          description: "Parameter: script",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/KaishuShito/gas-interpreter-mcp",
  _varName: "claudegasbridgePlugin",
};

const mcpStripeServerPlugin: Plugin = {
  id: "wiypoirrk3",
  name: "MCP Stripe Server",
  description:
    "A server that integrates with Stripe for handling payments, customers, and refunds through the Model Context Protocol, providing a secure API to manage financial transactions.",
  image: "https://github.com/atharvagupta2003.png",
  actions: [],
  githubUrl: "https://github.com/atharvagupta2003/mcp-stripe",
  _varName: "mcpStripeServerPlugin",
};

const microsoftSqlServerMcpServerPlugin: Plugin = {
  id: "29cpe19k30",
  name: "Microsoft SQL Server MCP Server",
  description:
    "A Model Context Protocol server that enables secure interaction with Microsoft SQL Server databases, allowing AI assistants to list tables, read data, and execute SQL queries through a controlled interface.",
  image: "https://github.com/RichardHan.png",
  actions: [
    {
      name: "execute_sql",
      description: "Execute an SQL query on the SQL Server",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The SQL query to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RichardHan/mssql_mcp_server",
  _varName: "microsoftSqlServerMcpServerPlugin",
};

const mondaycomMcpServerPlugin: Plugin = {
  id: "0wbo0nwb6q",
  name: "Monday.com MCP Server",
  description:
    "An MCP server that enables interaction with the Monday.com API for managing boards, workspaces, and items, supporting both individual and bulk operations with comprehensive error handling.",
  image: "https://github.com/launchthatbrand.png",
  actions: [],
  githubUrl: "https://github.com/launchthatbrand/mcp-monday-ts",
  _varName: "mondaycomMcpServerPlugin",
};

const pythonMcpServerPlugin: Plugin = {
  id: "4zt7hpbt5k",
  name: "Python MCP Server",
  description:
    "A Model Context Protocol server that extracts and analyzes Python code structures, focusing on import/export relationships between files to help LLMs understand code context.",
  image: "https://github.com/hesiod-au.png",
  actions: [],
  githubUrl: "https://github.com/hesiod-au/python-mcp",
  _varName: "pythonMcpServerPlugin",
};

const suposMcpServerPlugin: Plugin = {
  id: "7ayh12mg77",
  name: "supOS MCP Server",
  description:
    "An MCP protocol server that provides access to supOS open APIs, allowing MCP-compatible clients to query topic tree structures and details.",
  image: "https://github.com/FREEZONEX.png",
  actions: [
    {
      name: "get-model-topic-tree",
      description: "Action for get-model-topic-tree",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Fuzzy search keyword for child nodes",
          required: false,
        },
        {
          name: "showRec",
          type: "boolean",
          description: "Is show recommend topic",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Search type: 1--Text search, 2--Tag search",
          required: false,
        },
      ],
    },
    {
      name: "get-model-topic-detail",
      description: "Action for get-model-topic-detail",
      parameters: [
        {
          name: "topic",
          type: "string",
          description: "Parameter: topic",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/FREEZONEX/mcp-server-supos",
  _varName: "suposMcpServerPlugin",
};

const pythonDocsServerPlugin: Plugin = {
  id: "8xhmttyi7e",
  name: "Python Docs Server",
  description:
    "An MCP server that enables users to fetch Python documentation using the Brave Search API through natural language queries.",
  image: "https://github.com/AnuragRai017.png",
  actions: [
    {
      name: "get_python_docs",
      description: "Get Python documentation for a given query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The search query for Python documentation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AnuragRai017/python-docs-server-MCP-Server",
  _varName: "pythonDocsServerPlugin",
};

const gmailMcpServer1Plugin: Plugin = {
  id: "y8y96hd64p",
  name: "Gmail MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to interact with Gmail services, supporting email operations, draft management, and calendar functionality through Google API integration.",
  image: "https://github.com/zacco16.png",
  actions: [],
  githubUrl: "https://github.com/zacco16/gmail-mcp-server",
  _varName: "gmailMcpServer1Plugin",
};

const mcpankiconnectPlugin: Plugin = {
  id: "nicr30wt6y",
  name: "MCP-AnkiConnect",
  description:
    "An MCP server that integrates Claude with Anki flashcards, allowing users to review due cards and create new flashcards directly through conversation.",
  image: "https://github.com/samefarrar.png",
  actions: [
    {
      name: "num_cards_due_today",
      description:
        "Get the number of cards due today with an optional deck filter",
      parameters: [
        {
          name: "deck",
          type: "string",
          description: "Parameter: deck",
          required: false,
        },
      ],
    },
    {
      name: "list_decks_and_notes",
      description: "Get all decks and note types with their fields",
      parameters: [],
    },
    {
      name: "get_examples",
      description:
        "Get example notes from Anki to guide your flashcard making. Limit the number of examples returned and provide a sampling technique:\n\n            - random: Randomly sample notes\n            - recent: Notes added in the last week\n            - most_reviewed: Notes with more than 10 reviews\n            - best_performance: Notes with less than 3 lapses\n            - mature: Notes with interval greater than 21 days\n            - young: Notes with interval less than 7 days\n            ",
      parameters: [
        {
          name: "deck",
          type: "string",
          description: "Parameter: deck",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "sample",
          type: "string",
          description: "Parameter: sample",
          required: false,
        },
      ],
    },
    {
      name: "fetch_due_cards_for_review",
      description:
        "Fetch cards that are due for learning and format them for review. Takes optional arguments:\n      - deck: str - Filter by specific deck.\n      - limit: int - Maximum number of cards to fetch (default 5). More than 5 is overwhelming for users.\n      - today_only: bool - If true, only fetch cards due today, else fetch cards up to 5 days ahead.",
      parameters: [
        {
          name: "deck",
          type: "string",
          description: "Parameter: deck",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "today_only",
          type: "boolean",
          description: "Parameter: today_only",
          required: false,
        },
      ],
    },
    {
      name: "submit_reviews",
      description:
        'Submit multiple card reviews to Anki.\n\n    Args:\n        reviews: List of dictionaries containing:\n            - card_id (int): The ID of the card being reviewed\n            - rating (str): The rating to give the card, one of:\n                "wrong" - Card was incorrect (Again)\n                "hard" - Card was difficult (Hard)\n                "good" - Card was good (Good)\n                "easy" - Card was very easy (Easy)\n    ',
      parameters: [
        {
          name: "reviews",
          type: "object array",
          description: "Parameter: reviews",
          required: true,
        },
      ],
    },
    {
      name: "add_note",
      description:
        "Add a flashcard to Anki. Ensure you have looked at examples before you do this, and that you have got approval from the user to add the flashcard.\n    Args:\n        deckName: str - The name of the deck to add the flashcard to.\n        modelName: str - The name of the note type to use.\n        fields: dict - The fields of the flashcard to add.\n        tags: List[str] - The tags to add to the flashcard.",
      parameters: [
        {
          name: "deckName",
          type: "string",
          description: "Parameter: deckName",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "modelName",
          type: "string",
          description: "Parameter: modelName",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/samefarrar/mcp-ankiconnect",
  _varName: "mcpankiconnectPlugin",
};

const solarwindsLogsMcpServerPlugin: Plugin = {
  id: "bl0xz37gi9",
  name: "SolarWinds Logs MCP Server",
  description:
    "An MCP server for searching and visualizing SolarWinds Observability logs, allowing users to query log data with filtering options and generate visual representations of log events over time.",
  image: "https://github.com/jakenuts.png",
  actions: [
    {
      name: "search_logs",
      description:
        "Search SolarWinds Observability logs with optional filtering",
      parameters: [
        {
          name: "direction",
          type: "string",
          description:
            "Sort order: backward (oldest to newest), forward (newest to oldest), or tail (oldest to newest)",
          required: false,
        },
        {
          name: "endTime",
          type: "string",
          description: "UTC end time (ISO 8601 format)",
          required: false,
        },
        {
          name: "entityId",
          type: "string",
          description: "Filter logs by a specific entity ID",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description:
            'A search query string. Use AND/OR operators to combine terms (e.g., "error AND timeout"). The search is performed across all fields including message, hostname, program, and nested JSON fields like Context.CorrelationId. Field-specific queries like "field:value" are not supported.',
          required: false,
        },
        {
          name: "group",
          type: "string",
          description: "Filter logs by a specific group name",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Maximum messages to return per page",
          required: false,
        },
        {
          name: "skipToken",
          type: "string",
          description: "Token to skip to the next page of results",
          required: false,
        },
        {
          name: "startTime",
          type: "string",
          description: "UTC start time (ISO 8601 format)",
          required: false,
        },
      ],
    },
    {
      name: "visualize_logs",
      description: "Generate a histogram visualization of log events",
      parameters: [
        {
          name: "endTime",
          type: "string",
          description:
            "UTC end time (ISO 8601 format), defaults to current time",
          required: false,
        },
        {
          name: "entityId",
          type: "string",
          description: "Filter logs by a specific entity ID",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "A search query string",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description:
            "Output format: text for ASCII chart, json for Claude visualization",
          required: false,
        },
        {
          name: "group",
          type: "string",
          description: "Filter logs by a specific group name",
          required: false,
        },
        {
          name: "interval",
          type: "string",
          description: "Time interval for histogram buckets",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Maximum messages to analyze",
          required: false,
        },
        {
          name: "startTime",
          type: "string",
          description:
            "UTC start time (ISO 8601 format), defaults to 24 hours ago",
          required: false,
        },
        {
          name: "use_utc",
          type: "boolean",
          description: "Use UTC time instead of local time",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jakenuts/mcp-solarwinds",
  _varName: "solarwindsLogsMcpServerPlugin",
};

const mongodbMcpServerPlugin: Plugin = {
  id: "7w2bcv6rg0",
  name: "MongoDB MCP Server",
  description:
    "A protocol server that enables LLMs like Claude to interact with MongoDB databases, providing tools for schema exploration, aggregation queries, and data analysis through natural language in Cursor.",
  image: "https://github.com/1RB.png",
  actions: [],
  githubUrl: "https://github.com/1RB/mongo-mcp",
  _varName: "mongodbMcpServerPlugin",
};

const deltataskMcpServerPlugin: Plugin = {
  id: "tsroe1zvk4",
  name: "DeltaTask MCP Server",
  description:
    "Provides API access to a locally-hosted task management system with features for creating, updating, and organizing tasks, including support for urgency levels, effort estimates, subtasks, and bi-directional sync with Obsidian markdown files.",
  image: "https://github.com/brysontang.png",
  actions: [
    {
      name: "get_task_by_id",
      description: "Get details for a specific task by ID.",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: true,
        },
      ],
    },
    {
      name: "search_tasks",
      description: "Search tasks by title, description, or tags.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "create_task",
      description: "Create a new task.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "effort",
          type: "integer",
          description: "Parameter: effort",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
        {
          name: "urgency",
          type: "integer",
          description: "Parameter: urgency",
          required: false,
        },
      ],
    },
    {
      name: "update_task",
      description: "Update an existing task.",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: true,
        },
        {
          name: "updates",
          type: "object",
          description: "Parameter: updates",
          required: true,
        },
      ],
    },
    {
      name: "delete_task",
      description: "Delete a task.",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: true,
        },
      ],
    },
    {
      name: "sync_tasks",
      description: "Sync tasks from Obsidian markdown into SQLite.",
      parameters: [],
    },
    {
      name: "list_tasks",
      description:
        "List all tasks with optional tags, if you user asks for a tag, please provide it in the request.",
      parameters: [
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
      ],
    },
    {
      name: "get_statistics",
      description:
        "Get task statistics including completion rates and urgency distribution.",
      parameters: [],
    },
    {
      name: "create_subtasks",
      description:
        "Create multiple subtasks for a parent task with categories.",
      parameters: [
        {
          name: "subtasks",
          type: "object array",
          description: "Parameter: subtasks",
          required: true,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: true,
        },
      ],
    },
    {
      name: "get_all_tags",
      description: "Get all unique tag names used in tasks.",
      parameters: [],
    },
    {
      name: "get_subtasks",
      description: "Get subtasks for a given parent task ID.",
      parameters: [
        {
          name: "parent_id",
          type: "string",
          description: "Parameter: parent_id",
          required: true,
        },
      ],
    },
    {
      name: "finish_task",
      description: "Mark a task as completed.",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/brysontang/DeltaTask",
  _varName: "deltataskMcpServerPlugin",
};

const excelReaderServerPlugin: Plugin = {
  id: "kniyyx0gej",
  name: "Excel Reader Server",
  description:
    "A Model Context Protocol (MCP) server that provides tools for reading Excel (xlsx) files, enabling extraction of data from entire workbooks or specific sheets with results returned in structured JSON format.",
  image: "https://github.com/softgridinc-pte-ltd.png",
  actions: [
    {
      name: "read_excel",
      description: "Read content from Excel (xlsx) files",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Path to the Excel file",
          required: true,
        },
      ],
    },
    {
      name: "read_excel_by_sheet_name",
      description:
        "Read content from a specific sheet by name in Excel (xlsx) files. Reads first sheet if sheet_name not provided.",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Path to the Excel file",
          required: true,
        },
        {
          name: "sheet_name",
          type: "string",
          description:
            "Name of the sheet to read (optional, defaults to first sheet)",
          required: false,
        },
      ],
    },
    {
      name: "read_excel_by_sheet_index",
      description:
        "Read content from a specific sheet by index in Excel (xlsx) files. Reads first sheet (index 0) if sheet_index not provided.",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Path to the Excel file",
          required: true,
        },
        {
          name: "sheet_index",
          type: "integer",
          description: "Index of the sheet to read (optional, defaults to 0)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/softgridinc-pte-ltd/mcp-excel-reader-server",
  _varName: "excelReaderServerPlugin",
};

const dubcoMcpServerPlugin: Plugin = {
  id: "p293dlsvcn",
  name: "Dub.co MCP Server",
  description:
    "Enables AI agents to create, update, and manage short links through your Dub.co account, allowing for creation, modification, and deletion of custom shortened URLs.",
  image: "https://github.com/Gitmaxd.png",
  actions: [
    {
      name: "create_link",
      description:
        "Create a new short link on dub.co, asking the user which domain to use",
      parameters: [
        {
          name: "domain",
          type: "string",
          description:
            "Optional domain slug to use. If not provided, the primary domain will be used.",
          required: false,
        },
        {
          name: "externalId",
          type: "string",
          description: "Optional external ID for the link",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description:
            "Optional custom slug for the short link. If not provided, a random slug will be generated.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The destination URL to shorten",
          required: true,
        },
      ],
    },
    {
      name: "update_link",
      description: "Update an existing short link on dub.co",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "The new domain for the short link",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "The new slug for the short link",
          required: false,
        },
        {
          name: "linkId",
          type: "string",
          description: "The ID of the link to update",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "The new destination URL",
          required: false,
        },
      ],
    },
    {
      name: "upsert_link",
      description:
        "Create or update a short link on dub.co, asking the user which domain to use if creating",
      parameters: [
        {
          name: "domain",
          type: "string",
          description:
            "Optional domain slug to use. If not provided, the primary domain will be used.",
          required: false,
        },
        {
          name: "externalId",
          type: "string",
          description: "Optional external ID for the link",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description:
            "Optional custom slug for the short link. If not provided, a random slug will be generated.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The destination URL to shorten",
          required: true,
        },
      ],
    },
    {
      name: "delete_link",
      description: "Delete a short link on dub.co",
      parameters: [
        {
          name: "linkId",
          type: "string",
          description: "The ID of the link to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Gitmaxd/dubco-mcp-server",
  _varName: "dubcoMcpServerPlugin",
};

const commandExecutorMcpServerPlugin: Plugin = {
  id: "db23ll92j5",
  name: "Command Executor MCP Server",
  description:
    "A Model Context Protocol server that allows secure execution of pre-approved commands, enabling AI assistants to safely interact with the user's system.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "execute_command",
      description: "事前に許可されたコマンドを実行します",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "実行するコマンド",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/command-executor-mcp-server",
  _varName: "commandExecutorMcpServerPlugin",
};

const confluenceCommunicationServerPlugin: Plugin = {
  id: "850t5hxya0",
  name: "Confluence Communication Server",
  description:
    "Enables querying and retrieving content from Confluence through CQL searches and page content fetching, allowing Claude to seamlessly access information stored in Confluence workspaces.",
  image: "https://github.com/KS-GEN-AI.png",
  actions: [
    {
      name: "execute_cql_search",
      description: "Execute a CQL query on Confluence to search pages",
      parameters: [
        {
          name: "cql",
          type: "string",
          description: "CQL query string",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "get_page_content",
      description: "Get the content of a Confluence page",
      parameters: [
        {
          name: "pageId",
          type: "string",
          description: "Confluence Page ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/KS-GEN-AI/confluence-mcp-server",
  _varName: "confluenceCommunicationServerPlugin",
};

const mcpFirecrawlServerPlugin: Plugin = {
  id: "sftk6d22mq",
  name: "MCP Firecrawl Server",
  description:
    "A server that provides tools to scrape websites and extract structured data from them using Firecrawl's APIs, supporting both basic website scraping in multiple formats and custom schema-based data extraction.",
  image: "https://github.com/codyde.png",
  actions: [
    {
      name: "scrape-website",
      description: "Action for scrape-website",
      parameters: [
        {
          name: "formats",
          type: "string array",
          description: "Parameter: formats",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "extract-data",
      description: "Action for extract-data",
      parameters: [
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "schema",
          type: "object",
          description: "Parameter: schema",
          required: true,
        },
        {
          name: "urls",
          type: "string array",
          description: "Parameter: urls",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/codyde/mcp-firecrawl-tool",
  _varName: "mcpFirecrawlServerPlugin",
};

const imageGeneratorMcpServer1Plugin: Plugin = {
  id: "hp0az6p3gb",
  name: "Image Generator MCP Server",
  description:
    "A TypeScript-based MCP server that generates images using OpenAI's dall-e-3 model based on text prompts and saves them to a specified directory.",
  image: "https://github.com/sammyl720.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image from a prompt.",
      parameters: [
        {
          name: "imageName",
          type: "string",
          description: "The filename for the image excluding any extensions.",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "A prompt detailing what image to generate.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammyl720/image-generator-mcp-server",
  _varName: "imageGeneratorMcpServer1Plugin",
};

const todoistMcpPlugin: Plugin = {
  id: "2010u29g1w",
  name: "Todoist MCP",
  description:
    "An MCP server that enables LLMs to interact with Todoist tasks, projects, and other features through the Todoist API.",
  image: "https://github.com/miottid.png",
  actions: [
    {
      name: "get-tasks",
      description: "Get all tasks from Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: false,
        },
      ],
    },
    {
      name: "update-task",
      description: "Update a task in Todoist",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "The ID of a project collaborator to assign the task to",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: false,
        },
        {
          name: "deadlineDate",
          type: "string",
          description:
            "Specific date in YYYY-MM-DD format relative to user’s timezone.",
          required: false,
        },
        {
          name: "deadlineLang",
          type: "string",
          description: "2-letter code specifying language of deadline.",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Task priority from 1 (normal) to 4 (urgent)",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "close-task",
      description: "Close (complete) a task in Todoist",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "move-task-to-project",
      description: "Move a task to a different project in Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "move-task-to-section",
      description: "Move a task to a different section in Todoist",
      parameters: [
        {
          name: "sectionId",
          type: "string",
          description: "Parameter: sectionId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "delete-task",
      description: "Delete a task from a project in Todoist",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "reopen-task",
      description: "Reopens a previously closed (completed) task in Todoist",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "add-section",
      description: "Add a section to a project in Todoist",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "order",
          type: "number",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "get-section",
      description: "Get section details in Todoist",
      parameters: [
        {
          name: "sectionId",
          type: "string",
          description: "Parameter: sectionId",
          required: true,
        },
      ],
    },
    {
      name: "get-sections",
      description: "Get all sections from a project in Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "update-section",
      description: "Update a section in Todoist",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "sectionId",
          type: "string",
          description: "Parameter: sectionId",
          required: true,
        },
      ],
    },
    {
      name: "delete-section",
      description: "Delete a section from a project in Todoist",
      parameters: [
        {
          name: "sectionId",
          type: "string",
          description: "Parameter: sectionId",
          required: true,
        },
      ],
    },
    {
      name: "add-comment-to-project",
      description: "Add a comment to a project in Todoist",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "add-comment-to-task",
      description: "Add a comment to a task in Todoist",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "get-comment",
      description: "Get a comment from a task or project in Todoist",
      parameters: [
        {
          name: "commentId",
          type: "string",
          description: "Parameter: commentId",
          required: true,
        },
      ],
    },
    {
      name: "update-comment",
      description: "Update a comment in Todoist",
      parameters: [
        {
          name: "commentId",
          type: "string",
          description: "Parameter: commentId",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
      ],
    },
    {
      name: "delete-comment",
      description: "Delete a comment from a task in Todoist",
      parameters: [
        {
          name: "commentId",
          type: "string",
          description: "Parameter: commentId",
          required: true,
        },
      ],
    },
    {
      name: "get-task-comments",
      description: "Get comments from a task in Todoist",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "get-project-comments",
      description: "Get comments from a project in Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "add-label",
      description: "Add a label to a task in Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "isFavorite",
          type: "boolean",
          description: "Parameter: isFavorite",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "order",
          type: "number",
          description: "Parameter: order",
          required: false,
        },
      ],
    },
    {
      name: "delete-label",
      description: "Delete a label from Todoist",
      parameters: [
        {
          name: "labelId",
          type: "string",
          description: "Parameter: labelId",
          required: true,
        },
      ],
    },
    {
      name: "update-label",
      description: "Update a label in Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "isFavorite",
          type: "boolean",
          description: "Parameter: isFavorite",
          required: false,
        },
        {
          name: "labelId",
          type: "string",
          description: "Parameter: labelId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "order",
          type: "number",
          description: "Parameter: order",
          required: false,
        },
      ],
    },
    {
      name: "get-label",
      description: "Get a label from Todoist",
      parameters: [
        {
          name: "labelId",
          type: "string",
          description: "Parameter: labelId",
          required: true,
        },
      ],
    },
    {
      name: "get-labels",
      description: "Get all labels in Todoist",
      parameters: [],
    },
    {
      name: "get-shared-labels",
      description: "Retrieves a list of shared labels in Todoist",
      parameters: [
        {
          name: "omitPersonal",
          type: "boolean",
          description: "Parameter: omitPersonal",
          required: false,
        },
      ],
    },
    {
      name: "remove-shared-label",
      description: "Remove shared label in Todoist",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "rename-shared-label",
      description: "Rename a shared label in Todoist",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "newName",
          type: "string",
          description: "Parameter: newName",
          required: true,
        },
      ],
    },
    {
      name: "add-project",
      description: "Add a project to Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "isFavorite",
          type: "boolean",
          description: "Parameter: isFavorite",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "parentId",
          type: "string",
          description: "The ID of a parent project",
          required: false,
        },
        {
          name: "viewStyle",
          type: "string",
          description: "Parameter: viewStyle",
          required: false,
        },
      ],
    },
    {
      name: "get-projects",
      description: "Get all projects from Todoist",
      parameters: [],
    },
    {
      name: "get-project",
      description: "Get a project from Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "update-project",
      description: "Update a project in Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "isFavorite",
          type: "boolean",
          description: "Parameter: isFavorite",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
        {
          name: "viewStyle",
          type: "string",
          description: "Parameter: viewStyle",
          required: false,
        },
      ],
    },
    {
      name: "delete-project",
      description: "Delete a project in Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "move-task-to-parent",
      description: "Move a task to a parent in Todoist",
      parameters: [
        {
          name: "parentId",
          type: "string",
          description: "Parameter: parentId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "get-project-collaborators",
      description: "Get all collaborators from a project in Todoist",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "add-task",
      description: "Add a task to Todoist",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "The ID of a project collaborator to assign the task to",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "deadlineDate",
          type: "string",
          description:
            "Specific date in YYYY-MM-DD format relative to user’s timezone.",
          required: false,
        },
        {
          name: "deadlineLang",
          type: "string",
          description: "2-letter code specifying language of deadline.",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "parentId",
          type: "string",
          description: "The ID of a parent task",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Task priority from 1 (normal) to 4 (urgent)",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "The ID of a project to add the task to",
          required: false,
        },
      ],
    },
    {
      name: "get-task",
      description: "Retrieves a task by its ID in Todoist",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/miottid/todoist-mcp",
  _varName: "todoistMcpPlugin",
};

const hyperliquidMcpServerPlugin: Plugin = {
  id: "x63ef985gg",
  name: "Hyperliquid MCP Server",
  description:
    "An MCP server implementation that integrates with Hyperliquid exchange, providing access to crypto market data including mid prices, historical candles, and L2 order books.",
  image: "https://github.com/mektigboy.png",
  actions: [
    {
      name: "get_all_mids",
      description: "Get mid prices for all coins on Hyperliquid",
      parameters: [],
    },
    {
      name: "get_candle_snapshot",
      description: "Get candlestick data for a token on Hyperliquid",
      parameters: [
        {
          name: "coin",
          type: "string",
          description: "The symbol of the token to get candlestick data for",
          required: true,
        },
        {
          name: "endTime",
          type: "number",
          description: "End time in milliseconds since epoch (optional)",
          required: false,
        },
        {
          name: "interval",
          type: "string",
          description: "Time interval (e.g., '15m', '1h')",
          required: true,
        },
        {
          name: "startTime",
          type: "number",
          description: "Start time in milliseconds since epoch",
          required: true,
        },
      ],
    },
    {
      name: "get_l2_book",
      description: "Get the L2 book of a token on Hyperliquid",
      parameters: [
        {
          name: "required",
          type: "string",
          description: "Parameter: required",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "The symbol of the token to get the price of",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mektigboy/server-hyperliquid",
  _varName: "hyperliquidMcpServerPlugin",
};

const dockerMcpServerPlugin: Plugin = {
  id: "dmna3tblnr",
  name: "Docker MCP Server",
  description:
    "An MCP server that allows managing Docker containers through natural language, enabling users to compose, introspect, and debug containers without running commands themselves.",
  image: "https://github.com/ckreiling.png",
  actions: [],
  githubUrl: "https://github.com/ckreiling/mcp-server-docker",
  _varName: "dockerMcpServerPlugin",
};

const mcpClientConfigurationServerPlugin: Plugin = {
  id: "aa10ltj5b6",
  name: "MCP Client Configuration Server",
  description:
    "A tool that helps manage and synchronize MCP server configurations across different AI assistant clients (Cline, Roo Code, WindSurf, Claude), automating the process of retrieving, listing, adding, and removing server configurations from client configuration files.",
  image: "https://github.com/landicefu.png",
  actions: [
    {
      name: "get_configuration_path",
      description:
        "Get the path to the configuration file for a specific client",
      parameters: [
        {
          name: "client",
          type: "string",
          description: "Client name (cline, roo_code, windsurf, claude)",
          required: true,
        },
      ],
    },
    {
      name: "get_configuration",
      description: "Get the entire configuration for a specific client",
      parameters: [
        {
          name: "client",
          type: "string",
          description: "Client name (cline, roo_code, windsurf, claude)",
          required: true,
        },
      ],
    },
    {
      name: "list_servers",
      description: "List all server names configured in a specific client",
      parameters: [
        {
          name: "client",
          type: "string",
          description: "Client name (cline, roo_code, windsurf, claude)",
          required: true,
        },
      ],
    },
    {
      name: "get_server_configuration",
      description:
        "Get the configuration for a specific server from a client configuration",
      parameters: [
        {
          name: "client",
          type: "string",
          description: "Client name (cline, roo_code, windsurf, claude)",
          required: true,
        },
        {
          name: "server_name",
          type: "string",
          description: "Name of the server to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "add_server_configuration",
      description:
        "Add or update a server configuration in a client configuration",
      parameters: [
        {
          name: "allow_override",
          type: "boolean",
          description:
            "Whether to allow overriding an existing server configuration with the same name (default: false)",
          required: false,
        },
        {
          name: "client",
          type: "string",
          description: "Client name (cline, roo_code, windsurf, claude)",
          required: true,
        },
        {
          name: "json_config",
          type: "object",
          description: "Server configuration in JSON format",
          required: true,
        },
        {
          name: "server_name",
          type: "string",
          description: "Name of the server to add or update",
          required: true,
        },
      ],
    },
    {
      name: "remove_server_configuration",
      description: "Remove a server configuration from a client configuration",
      parameters: [
        {
          name: "client",
          type: "string",
          description: "Client name (cline, roo_code, windsurf, claude)",
          required: true,
        },
        {
          name: "server_name",
          type: "string",
          description: "Name of the server to remove",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/landicefu/mcp-client-configuration-server",
  _varName: "mcpClientConfigurationServerPlugin",
};

const perplexityToolForClaudeDesktopPlugin: Plugin = {
  id: "2615uwscuv",
  name: "Perplexity Tool for Claude Desktop",
  description:
    "A custom MCP tool that integrates Perplexity AI's API with Claude Desktop, allowing Claude to perform web-based research and provide answers with citations.",
  image: "https://github.com/letsbuildagent.png",
  actions: [
    {
      name: "ask_perplexity",
      description: "Ask a question to Perplexity AI",
      parameters: [
        {
          name: "max_tokens",
          type: "integer",
          description: "Maximum tokens in response",
          required: false,
        },
        {
          name: "question",
          type: "string",
          description: "The question to ask",
          required: true,
        },
        {
          name: "search_domain_filter",
          type: "string array",
          description: "Limit search to specific domains",
          required: false,
        },
        {
          name: "search_recency_filter",
          type: "string",
          description: "Filter results by recency",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Response randomness (0-2)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/letsbuildagent/perplexity-tool",
  _varName: "perplexityToolForClaudeDesktopPlugin",
};

const mcpWebToolsServerPlugin: Plugin = {
  id: "cn5q63wd5r",
  name: "MCP Web Tools Server",
  description:
    "A Model Context Protocol server that allows LLMs to interact with web content through standardized tools, currently supporting web scraping functionality.",
  image: "https://github.com/surya-madhav.png",
  actions: [],
  githubUrl: "https://github.com/surya-madhav/MCP",
  _varName: "mcpWebToolsServerPlugin",
};

const notionKnowledgeBaseMcpServerPlugin: Plugin = {
  id: "xvq6i7dram",
  name: "Notion Knowledge Base MCP Server",
  description:
    "An MCP server that connects to your Notion knowledge base, allowing you to query and retrieve information directly from VSCode using the Cline extension.",
  image: "https://github.com/rickydata-indexer.png",
  actions: [],
  githubUrl: "https://github.com/rickydata-indexer/notion_mcp_server",
  _varName: "notionKnowledgeBaseMcpServerPlugin",
};

const kustoMcpServerPlugin: Plugin = {
  id: "wsycvfxsrb",
  name: "Kusto MCP Server",
  description:
    "An MCP server that provides access to Azure Data Explorer (ADX) clusters, allowing users to list tables, execute queries, and retrieve schema information.",
  image: "https://github.com/ZZZHDW.png",
  actions: [],
  githubUrl: "https://github.com/ZZZHDW/mcp-server-kusto",
  _varName: "kustoMcpServerPlugin",
};

const memoryCacheMcpServerPlugin: Plugin = {
  id: "1q158keur5",
  name: "Memory Cache MCP Server",
  description:
    "A Model Context Protocol server that reduces token consumption by efficiently caching data between language model interactions, automatically storing and retrieving information to minimize redundant token usage.",
  image: "https://github.com/ibproduct.png",
  actions: [
    {
      name: "store_data",
      description: "Store data in the cache with optional TTL",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Unique identifier for the cached data",
          required: true,
        },
        {
          name: "ttl",
          type: "number",
          description: "Time-to-live in seconds (optional)",
          required: false,
        },
        {
          name: "value",
          type: "any",
          description: "Data to cache",
          required: true,
        },
      ],
    },
    {
      name: "retrieve_data",
      description: "Retrieve data from the cache",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Key of the cached data to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "clear_cache",
      description: "Clear specific or all cache entries",
      parameters: [
        {
          name: "key",
          type: "string",
          description:
            "Specific key to clear (optional - clears all if not provided)",
          required: false,
        },
      ],
    },
    {
      name: "get_cache_stats",
      description: "Get cache statistics",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/ibproduct/ib-mcp-cache-server",
  _varName: "memoryCacheMcpServerPlugin",
};

const openapiClientGeneratorMcpPlugin: Plugin = {
  id: "taqmq8493y",
  name: "OpenAPI Client Generator MCP",
  description:
    "A TypeScript-based MCP server that generates API clients from OpenAPI specifications, allowing automated code generation through natural language.",
  image: "https://github.com/orhanveli.png",
  actions: [
    {
      name: "generate_client",
      description: "Generate TypeScript API client from OpenAPI specification",
      parameters: [
        {
          name: "httpClient",
          type: "string",
          description: "HTTP client to use (fetch or axios)",
          required: true,
        },
        {
          name: "input",
          type: "string",
          description: "URL or file path to OpenAPI specification",
          required: true,
        },
        {
          name: "output",
          type: "string",
          description: "Output directory for generated client",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/orhanveli/openapi-client-generator-mcp",
  _varName: "openapiClientGeneratorMcpPlugin",
};

const lighthouseMcpPlugin: Plugin = {
  id: "96ypt4ci08",
  name: "Lighthouse MCP",
  description:
    "A Model Context Protocol server that enables Claude to interact with and analyze your Lighthouse.one crypto portfolio data through secure authentication.",
  image: "https://github.com/l3wi.png",
  actions: [],
  githubUrl: "https://github.com/l3wi/mcp-lighthouse",
  _varName: "lighthouseMcpPlugin",
};

const codebaseMcpPlugin: Plugin = {
  id: "gi96b9urnz",
  name: "Codebase MCP",
  description:
    "A Model Context Protocol server that enables AI agents to retrieve and understand entire codebases at once, providing tools to analyze local workspaces or remote GitHub repositories.",
  image: "https://github.com/DeDeveloper23.png",
  actions: [],
  githubUrl: "https://github.com/DeDeveloper23/codebase-mcp",
  _varName: "codebaseMcpPlugin",
};

const hackerNewsMcpServerPlugin: Plugin = {
  id: "73uji99mwg",
  name: "Hacker News MCP Server",
  description:
    "Adds powerful Hacker News integration to LLM clients, allowing users to access stories, comments, user profiles, and search functionality through the Model Context Protocol.",
  image: "https://github.com/devabdultech.png",
  actions: [
    {
      name: "search",
      description: "Search for stories and comments on Hacker News",
      parameters: [
        {
          name: "hitsPerPage",
          type: "number",
          description: "The number of results per page",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "The page number",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "The type of content to search for",
          required: false,
        },
      ],
    },
    {
      name: "getStory",
      description: "Get a single story by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "The ID of the story",
          required: true,
        },
      ],
    },
    {
      name: "getStoryWithComments",
      description: "Get a story with its comments",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "The ID of the story",
          required: true,
        },
      ],
    },
    {
      name: "getStories",
      description:
        "Get multiple stories by type (top, new, best, ask, show, job)",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "The maximum number of stories to fetch",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "The type of stories to fetch",
          required: true,
        },
      ],
    },
    {
      name: "getComment",
      description: "Get a single comment by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "The ID of the comment",
          required: true,
        },
      ],
    },
    {
      name: "getComments",
      description: "Get comments for a story",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "The maximum number of comments to fetch",
          required: false,
        },
        {
          name: "storyId",
          type: "number",
          description: "The ID of the story",
          required: true,
        },
      ],
    },
    {
      name: "getCommentTree",
      description: "Get a comment tree for a story",
      parameters: [
        {
          name: "storyId",
          type: "number",
          description: "The ID of the story",
          required: true,
        },
      ],
    },
    {
      name: "getUser",
      description: "Get a user profile by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of the user",
          required: true,
        },
      ],
    },
    {
      name: "getUserSubmissions",
      description: "Get a user's submissions",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of the user",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/devabdultech/hn-mcp",
  _varName: "hackerNewsMcpServerPlugin",
};

const ethereumRpcMcpServerPlugin: Plugin = {
  id: "qpjvkozof7",
  name: "Ethereum RPC MCP Server",
  description:
    "Provides tools for AI assistants to interact with the Ethereum blockchain through standard JSON-RPC methods, enabling queries for account balances, gas prices, and smart contract code.",
  image: "https://github.com/0xKoda.png",
  actions: [
    {
      name: "eth_getCode",
      description: "Retrieves the code at a given Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to get code from",
          required: true,
        },
        {
          name: "blockParameter",
          type: "string",
          description: 'Block parameter (default: "latest")',
          required: false,
        },
      ],
    },
    {
      name: "eth_gasPrice",
      description: "Retrieves the current gas price in wei",
      parameters: [],
    },
    {
      name: "eth_getBalance",
      description: "Retrieves the balance of a given Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to check balance",
          required: true,
        },
        {
          name: "blockParameter",
          type: "string",
          description: 'Block parameter (default: "latest")',
          required: false,
        },
      ],
    },
    {
      name: "eth_call",
      description:
        "Executes a call to a contract function without creating a transaction",
      parameters: [
        {
          name: "blockParameter",
          type: "string",
          description: 'Block parameter (default: "latest")',
          required: false,
        },
        {
          name: "transaction",
          type: "object",
          description: "The transaction call object",
          required: true,
        },
      ],
    },
    {
      name: "eth_getLogs",
      description: "Retrieves logs matching the given filter criteria",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "The filter options",
          required: true,
        },
      ],
    },
    {
      name: "eth_sendTransaction",
      description: "Sends a transaction to the Ethereum network",
      parameters: [
        {
          name: "transaction",
          type: "object",
          description: "The transaction object",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/0xKoda/eth-mcp",
  _varName: "ethereumRpcMcpServerPlugin",
};

const gitlabMcpServerPlugin: Plugin = {
  id: "l7qxg8h0fh",
  name: "GitLab MCP Server",
  description:
    "A custom server implementation that allows AI assistants to interact with GitLab repositories, providing capabilities for searching, fetching files, creating/updating content, and managing issues and merge requests.",
  image: "https://github.com/chris-miaskowski.png",
  actions: [],
  githubUrl: "https://github.com/chris-miaskowski/custom-gitlab-mcp-server",
  _varName: "gitlabMcpServerPlugin",
};

const mcpParadexServerPlugin: Plugin = {
  id: "cq4bz5ljqj",
  name: "MCP Paradex Server",
  description:
    "A Model Context Protocol server implementation that enables AI assistants to interact with the Paradex perpetual futures trading platform, allowing for retrieving market data, managing trading accounts, placing orders, and monitoring positions.",
  image: "https://github.com/sv.png",
  actions: [
    {
      name: "paradex-system-config",
      description:
        '\n    Get global Paradex system configuration.\n    \n    Retrieves the current system-wide configuration parameters from Paradex,\n    including trading limits, fee schedules, and other global settings.\n    This information is useful for understanding the current operating\n    parameters of the exchange.\n    \n    Returns:\n        Dict[str, Any]: Global Paradex system configuration with the following structure:\n            - exchange (str): Exchange name ("Paradex")\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current environment (mainnet/testnet)\n            - status (str): Current system status ("operational", "maintenance", etc.)\n            - features (List[str]): Available trading features\n            - trading_hours (str): Trading availability\n            - website (str): Exchange website URL\n            - documentation (str): Documentation URL\n            - [Additional system parameters from Paradex API]\n            \n            If an error occurs, returns error information.\n    ',
      parameters: [],
    },
    {
      name: "paradex-system-time",
      description:
        "\n    Get the current Paradex server time.\n    \n    Retrieves the current server time from Paradex. This is important for\n    time-sensitive operations like trading, as local time might differ\n    from the exchange's server time. Using the exchange time ensures\n    accurate timestamp coordination for orders and other time-dependent\n    operations.\n    \n    Returns:\n        Dict[str, Any]: Current server time information with the following structure:\n            - server_time (int): Current server time in milliseconds since epoch\n            - iso_time (str): ISO-formatted timestamp\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n    ",
      parameters: [],
    },
    {
      name: "paradex-system-state",
      description:
        '\n    Get the current Paradex system operational state.\n    \n    Retrieves the current operational state of the Paradex exchange,\n    including information about system health, maintenance status,\n    and any active alerts or notices. This is useful for checking\n    if the exchange is fully operational before executing trades.\n    \n    Returns:\n        Dict[str, Any]: Current system state information with the following structure:\n            - status (str): Overall system status ("operational", "degraded", "maintenance", etc.)\n            - components (Dict): Status of individual system components\n            - maintenance (Dict, optional): Information about ongoing or scheduled maintenance\n            - notices (List, optional): System-wide notices or alerts\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n    ',
      parameters: [],
    },
    {
      name: "paradex-vault-list",
      description:
        "\n    Get a list of available vaults from Paradex.\n    \n    Retrieves all available vaults on Paradex, including their addresses and names.\n    This tool requires no parameters and returns a comprehensive list of\n    all vaults that can be accessed on Paradex.\n    \n    Returns:\n        Dict[str, Any]: List of available vaults with the following structure:\n            - success (bool): Whether the request was successful\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment (mainnet/testnet)\n            - vaults (List[Dict]): List of vault objects with address and name\n            - count (int): Total number of vaults\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - vaults (List): Empty list\n            - count (int): 0\n    ",
      parameters: [],
    },
    {
      name: "paradex-vault-details",
      description:
        "\n    Get detailed information about a specific vault.\n    \n    Retrieves comprehensive details about a specific vault identified by its address,\n    including configuration, permissions, and other vault-specific parameters.\n    \n    Returns:\n        Dict[str, Any]: Detailed vault information with the following structure:\n            - success (bool): Whether the request was successful\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment (mainnet/testnet)\n            - vaults (List[Dict]): List containing the vault details\n            - count (int): Number of vaults returned (should be 1)\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - vaults (List): Empty list\n            - count (int): 0\n    ",
      parameters: [
        {
          name: "vault_address",
          type: "string",
          description: "The address of the vault to get details for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-vaults-config",
      description:
        "\n    Get global configuration for vaults from Paradex.\n    \n    Retrieves system-wide configuration parameters for vaults on Paradex,\n    including fee structures, limits, and other global settings that apply\n    to all vaults on the platform.\n    \n    Returns:\n        Dict[str, Any]: Global vault configuration with the following structure:\n            - success (bool): Whether the request was successful\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment (mainnet/testnet)\n            - config (Dict): Global vault configuration parameters\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - config (None): Null value for config\n    ",
      parameters: [],
    },
    {
      name: "paradex-market-details",
      description:
        "\n    Get detailed information about a specific market.\n    \n    Retrieves comprehensive details about a specific market, including\n    base and quote assets, tick size, minimum order size, and other\n    trading parameters.\n    \n\n    Returns:\n        Dict[str, Any]: Detailed market information with the following structure:\n            - success (bool): Whether the request was successful\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment (mainnet/testnet)\n            - details (Dict): Detailed market information including trading parameters\n            - error (str, optional): Error message if request failed\n    ",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get details for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-vault-balance",
      description:
        '\n    Get the current balance of a specific vault.\n\n    Retrieves the current balance information for a specific vault,\n    including available funds, locked funds, and total balance.\n    This is essential for understanding the financial state of a vault\n    before executing trades or withdrawals.\n\n        \n    Returns:\n        Dict[str, Any]: Balance information for the vault, including:\n            - available (float): Available balance that can be used for trading\n            - locked (float): Balance locked in open orders or positions\n            - total (float): Total balance (available + locked)\n            - currency (str): Currency of the balance (e.g., "USDC")\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - balance (None): Null value for balance\n    ',
      parameters: [
        {
          name: "vault_address",
          type: "string",
          description: "The address of the vault to get balance for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-vault-summary",
      description:
        "\n    Get a comprehensive summary of a specific vault.\n    \n    Retrieves a summary of all important information about a vault,\n    including balance, positions, recent activity, and performance metrics.\n    This provides a high-level overview of the vault's current state.\n    \n\n    Returns:\n        Dict[str, Any]: Summary information for the vault, including:\n            - balance (Dict): Current balance information\n            - positions (List): Current open positions\n            - performance (Dict): Performance metrics\n            - recent_activity (List): Recent transactions or trades\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - summary (None): Null value for summary\n    ",
      parameters: [
        {
          name: "vault_address",
          type: "string",
          description: "The address of the vault to get summary for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-vault-transfers",
      description:
        '\n    Get a list of deposit and withdrawal transfers for a specific vault.\n\n    Retrieves the history of all transfers (deposits and withdrawals) for a vault,\n    including timestamps, amounts, transaction hashes, and status information.\n    This is useful for auditing vault activity and tracking fund movements.\n\n\n    Returns:\n        Dict[str, Any]: List of transfers for the vault, each containing:\n            - id (str): Transfer ID\n            - type (str): "DEPOSIT" or "WITHDRAWAL"\n            - amount (float): Transfer amount\n            - currency (str): Currency of the transfer\n            - timestamp (str): When the transfer occurred\n            - status (str): Status of the transfer (e.g., "COMPLETED", "PENDING")\n            - transaction_hash (str): Blockchain transaction hash\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - transfers (None): Null value for transfers\n    ',
      parameters: [
        {
          name: "vault_address",
          type: "string",
          description: "The address of the vault to get transfers for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-vault-positions",
      description:
        '\n    Get a list of current trading positions for a specific vault.\n    \n    Retrieves all open trading positions for a vault, including market,\n    size, entry price, liquidation price, unrealized PnL, and other\n    position-specific information.\n    \n\n    Returns:\n        Dict[str, Any]: List of positions for the vault, each containing:\n            - market_id (str): Market identifier (e.g., "ETH-PERP")\n            - side (str): Position side ("LONG" or "SHORT")\n            - size (float): Position size\n            - entry_price (float): Average entry price\n            - mark_price (float): Current mark price\n            - liquidation_price (float): Price at which position would be liquidated\n            - unrealized_pnl (float): Unrealized profit/loss\n            - leverage (float): Current leverage\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - positions (None): Null value for positions\n    ',
      parameters: [
        {
          name: "vault_address",
          type: "string",
          description: "The address of the vault to get positions for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-vault-account-summary",
      description:
        "\n    Get a summary of trading account information for a specific vault.\n    \n    Retrieves a comprehensive summary of the trading account associated with\n    a vault, including margin information, account health, risk metrics,\n    and trading statistics.\n    \n\n    Returns:\n        Dict[str, Any]: Account summary information, including:\n            - margin_ratio (float): Current margin ratio\n            - account_health (float): Account health percentage\n            - total_equity (float): Total account equity\n            - available_margin (float): Available margin for new positions\n            - used_margin (float): Margin currently in use\n            - unrealized_pnl (float): Total unrealized profit/loss\n            - realized_pnl_24h (float): Realized profit/loss in the last 24 hours\n            - open_orders_count (int): Number of open orders\n            - positions_count (int): Number of open positions\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - account_summary (None): Null value for account summary\n    ",
      parameters: [
        {
          name: "vault_address",
          type: "string",
          description: "The address of the vault to get account summary for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-market-names",
      description:
        "\n    Get a list of available markets from Paradex.\n    \n    Retrieves all available trading markets/pairs from the Paradex exchange.\n    This tool requires no parameters and returns a comprehensive list of\n    all markets that can be traded on Paradex.\n    \n    Returns:\n        Dict[str, Any]: List of available markets with the following structure:\n            - success (bool): Whether the request was successful\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment (mainnet/testnet)\n            - markets (List[str]): List of market symbols\n            - count (int): Total number of markets\n    ",
      parameters: [],
    },
    {
      name: "paradex-market-summary",
      description:
        "\n    Get a summary of market statistics and current state.\n    \n    Retrieves current market summary information including price, volume,\n    24h change, and other key market metrics.\n    \n    Returns:\n        Dict[str, Any]: Market summary information including:\n            - Current price\n            - 24h high/low\n            - 24h volume\n            - Price change percentage\n            - Other market statistics\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - summary (None): Null value for summary\n    ",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get summary for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-funding-data",
      description:
        "\n    Get historical funding rate data for a perpetual market.\n    \n    Retrieves funding rate history for a specified time period, which is\n    essential for understanding the cost of holding perpetual positions.\n    \n\n    Returns:\n        Dict[str, Any]: Historical funding rate data with timestamps.\n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - funding_data (None): Null value for funding data\n    ",
      parameters: [
        {
          name: "end_unix_ms",
          type: "integer",
          description: "End time in unix milliseconds.",
          required: true,
        },
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get funding data for.",
          required: true,
        },
        {
          name: "start_unix_ms",
          type: "integer",
          description: "Start time in unix milliseconds.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-bbo",
      description:
        "\n    Get the Best Bid and Offer (BBO) for a market.\n    \n    Retrieves the current best bid and best offer (ask) prices and sizes\n    for a specified market. This represents the tightest spread currently\n    available.\n \n    Returns:\n        Dict[str, Any]: Best bid and offer information including:\n            - bid price and size\n            - ask price and size\n            - timestamp\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n    ",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get BBO for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-orderbook",
      description:
        "\n    Get the current orderbook for a market.\n    \n    Retrieves the current state of the orderbook for a specified market,\n    showing bid and ask orders up to the requested depth.\n    \n\n    Returns:\n        Dict[str, Any]: Orderbook data including:\n            - bids: List of [price, size] pairs\n            - asks: List of [price, size] pairs\n            - timestamp\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n            - orderbook (None): Null value for orderbook\n    ",
      parameters: [
        {
          name: "depth",
          type: "integer",
          description: "The depth of the orderbook to retrieve.",
          required: false,
        },
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get orderbook for.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-klines",
      description:
        "\n    Get candlestick (kline) data for a market.\n    \n    Retrieves historical price candlestick data for a specified market and time period.\n    Each candlestick contains open, high, low, close prices and volume information.\n    \n    Returns:\n        Dict[str, Any]: Candlestick data with the following structure for each candle:\n            - timestamp\n            - open price\n            - high price\n            - low price\n            - close price\n            - volume\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n    ",
      parameters: [
        {
          name: "end_unix_ms",
          type: "string",
          description: "End time in unix milliseconds.",
          required: false,
        },
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get klines for.",
          required: true,
        },
        {
          name: "resolution",
          type: "string",
          description: "The time resolution of the klines.",
          required: false,
        },
        {
          name: "start_unix_ms",
          type: "string",
          description: "Start time in unix milliseconds.",
          required: false,
        },
      ],
    },
    {
      name: "paradex-trades",
      description:
        '\n    Get recent trades for a market.\n    \n    Retrieves historical trade data for a specified market and time period.\n    Each trade includes price, size, side (buy/sell), and timestamp information.\n    \n    Returns:\n        Dict[str, Any]: List of trades with the following structure for each trade:\n            - id: Trade ID\n            - price: Execution price\n            - size: Trade size\n            - side: "buy" or "sell"\n            - timestamp: Time of execution\n            \n            If an error occurs, returns:\n            - success (bool): False\n            - timestamp (str): ISO-formatted timestamp of the request\n            - environment (str): Current Paradex environment\n            - error (str): Error message\n    ',
      parameters: [
        {
          name: "end_unix_ms",
          type: "string",
          description: "End time in unix milliseconds.",
          required: false,
        },
        {
          name: "market_id",
          type: "string",
          description: "Market symbol to get trades for.",
          required: true,
        },
        {
          name: "start_unix_ms",
          type: "string",
          description: "Start time in unix milliseconds.",
          required: false,
        },
      ],
    },
    {
      name: "paradex-account-summary",
      description:
        "\n    Get account summary.\n    \n    Returns:\n        Dict[str, Any]: Account summary.\n    ",
      parameters: [],
    },
    {
      name: "paradex-account-positions",
      description:
        "\n    Get account positions.\n    \n    Returns:\n        Dict[str, Any]: Account positions.\n    ",
      parameters: [],
    },
    {
      name: "paradex-account-fills",
      description:
        "\n    Get account fills.\n    \n    Returns:\n        Dict: Account fills.\n    ",
      parameters: [
        {
          name: "end_unix_ms",
          type: "integer",
          description: "End time in unix milliseconds.",
          required: false,
        },
        {
          name: "market_id",
          type: "string",
          description: "Filter by market ID.",
          required: false,
        },
        {
          name: "start_unix_ms",
          type: "integer",
          description: "Start time in unix milliseconds.",
          required: false,
        },
      ],
    },
    {
      name: "paradex-account-funding-payments",
      description:
        "\n    Get account funding payments.\n        \n    Returns:\n        Dict[str, Any]: Account funding payments.\n    ",
      parameters: [
        {
          name: "end_unix_ms",
          type: "integer",
          description: "End time in unix milliseconds.",
          required: false,
        },
        {
          name: "market_id",
          type: "string",
          description: "Filter by market ID.",
          required: false,
        },
        {
          name: "start_unix_ms",
          type: "integer",
          description: "Start time in unix milliseconds.",
          required: false,
        },
      ],
    },
    {
      name: "paradex-account-open-orders",
      description:
        "\n    Get account open orders.        \n    Returns:\n        Dict[str, Any]: Account orders.\n    ",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Filter by market.",
          required: false,
        },
      ],
    },
    {
      name: "paradex-create-order",
      description:
        "\n    Create a new order.\n\n    Returns:\n        Dict[str, Any]: Created order details.\n    ",
      parameters: [
        {
          name: "client_id",
          type: "string",
          description: "Client-specified order ID.",
          required: false,
        },
        {
          name: "instruction",
          type: "string",
          description: "Instruction for order execution.",
          required: false,
        },
        {
          name: "market_id",
          type: "string",
          description: "Market identifier.",
          required: true,
        },
        {
          name: "order_side",
          type: "string",
          description: "Order side.",
          required: true,
        },
        {
          name: "order_type",
          type: "string",
          description: "Order type.",
          required: true,
        },
        {
          name: "price",
          type: "number",
          description: "Order price (required for LIMIT orders).",
          required: false,
        },
        {
          name: "reduce_only",
          type: "boolean",
          description: "Reduce-only flag.",
          required: false,
        },
        {
          name: "size",
          type: "number",
          description: "Order size.",
          required: true,
        },
        {
          name: "trigger_price",
          type: "number",
          description: "Trigger price (required for STOP_LIMIT orders).",
          required: false,
        },
      ],
    },
    {
      name: "paradex-cancel-order",
      description:
        "\n    Cancel an order.\n        \n    Returns:\n        Dict[str, Any]: Cancelled order details.\n    ",
      parameters: [
        {
          name: "order_id",
          type: "string",
          description: "Order identifier.",
          required: true,
        },
      ],
    },
    {
      name: "paradex-cancel-all-orders",
      description: "\n    Cancel all orders.\n    ",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market identifier to cancel orders for.",
          required: false,
        },
      ],
    },
    {
      name: "paradex-get-order-status",
      description:
        "\n    Get order status.\n\n    Returns:\n        Dict[str, Any]: Order details.\n    ",
      parameters: [
        {
          name: "order_id",
          type: "string",
          description: "Order identifier.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sv/mcp-paradex-py",
  _varName: "mcpParadexServerPlugin",
};

const mcpPostgresServerPlugin: Plugin = {
  id: "2xjj29nqrm",
  name: "MCP Postgres Server",
  description:
    "A server implementing the Model Context Protocol (MCP) for Cursor that allows using a PostgreSQL database as storage for model contexts, enabling secure database exploration and querying.",
  image: "https://github.com/MadeByNando.png",
  actions: [],
  githubUrl: "https://github.com/MadeByNando/mcp-postgres-server",
  _varName: "mcpPostgresServerPlugin",
};

const lettaMcpServerPlugin: Plugin = {
  id: "fuuaesngfg",
  name: "Letta MCP Server",
  description:
    "An MCP server implementation that enables interaction with the Letta API for managing agents, memory blocks, and tools in the Letta system.",
  image: "https://github.com/oculairmedia.png",
  actions: [
    {
      name: "create_agent",
      description: "Create a new Letta agent with specified configuration",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the agent's purpose/role",
          required: true,
        },
        {
          name: "embedding",
          type: "string",
          description: "The embedding model to use",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "The model to use for the agent",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the new agent",
          required: true,
        },
      ],
    },
    {
      name: "list_agents",
      description: "List all available agents in the Letta system",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "Optional filter to search for specific agents",
          required: false,
        },
      ],
    },
    {
      name: "prompt_agent",
      description: "Send a message to an agent and get a response",
      parameters: [
        {
          name: "agent_id",
          type: "string",
          description: "ID of the agent to prompt",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Message to send to the agent",
          required: true,
        },
      ],
    },
    {
      name: "list_agent_tools",
      description: "List all tools available for a specific agent",
      parameters: [
        {
          name: "agent_id",
          type: "string",
          description: "ID of the agent to list tools for",
          required: true,
        },
      ],
    },
    {
      name: "list_tools",
      description: "List all available tools on the Letta server",
      parameters: [
        {
          name: "filter",
          type: "string",
          description:
            "Optional filter to search for specific tools by name or description",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (starts at 1)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of tools per page (1-100, default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "attach_tool",
      description: "Attach a tool to an agent",
      parameters: [
        {
          name: "agent_id",
          type: "string",
          description: "The ID of the agent to attach the tool to",
          required: true,
        },
        {
          name: "tool_id",
          type: "string",
          description: "The ID of the tool to attach",
          required: true,
        },
      ],
    },
    {
      name: "list_memory_blocks",
      description: "List all memory blocks available in the Letta system",
      parameters: [
        {
          name: "agent_id",
          type: "string",
          description: "Optional agent ID to list blocks for a specific agent",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description:
            "Optional filter to search for specific blocks by name or content",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (starts at 1)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of blocks per page (1-100, default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "attach_memory_block",
      description: "Attach a memory block to an agent",
      parameters: [
        {
          name: "agent_id",
          type: "string",
          description: "The ID of the agent to attach the memory block to",
          required: true,
        },
        {
          name: "block_id",
          type: "string",
          description: "The ID of the memory block to attach",
          required: true,
        },
        {
          name: "label",
          type: "string",
          description:
            'Optional label for the memory block (e.g., "persona", "human", "system")',
          required: false,
        },
      ],
    },
    {
      name: "create_memory_block",
      description: "Create a new memory block in the Letta system",
      parameters: [
        {
          name: "agent_id",
          type: "string",
          description:
            "Optional agent ID to create the block for a specific agent",
          required: false,
        },
        {
          name: "label",
          type: "string",
          description:
            'Label for the memory block (e.g., "persona", "human", "system")',
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Optional metadata for the memory block",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the memory block",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Content of the memory block",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/oculairmedia/Letta-MCP-server",
  _varName: "lettaMcpServerPlugin",
};

const airtableMcpServerPlugin: Plugin = {
  id: "bym2fjbo51",
  name: "Airtable MCP Server",
  description:
    "A Model Context Protocol server that provides tools for programmatically managing Airtable bases, tables, fields, and records through Claude Desktop or other MCP clients.",
  image: "https://github.com/felores.png",
  actions: [
    {
      name: "list_tables",
      description: "List all tables in a base",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
      ],
    },
    {
      name: "list_bases",
      description: "List all accessible Airtable bases",
      parameters: [],
    },
    {
      name: "create_table",
      description: "Create a new table in a base",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the table",
          required: false,
        },
        {
          name: "fields",
          type: "object array",
          description: "Initial fields for the table",
          required: false,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the new table",
          required: true,
        },
      ],
    },
    {
      name: "update_table",
      description: "Update a table's schema",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "New description for the table",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the table",
          required: false,
        },
        {
          name: "table_id",
          type: "string",
          description: "ID of the table to update",
          required: true,
        },
      ],
    },
    {
      name: "create_field",
      description: "Create a new field in a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "field",
          type: "object",
          description: "Parameter: field",
          required: true,
        },
        {
          name: "table_id",
          type: "string",
          description: "ID of the table",
          required: true,
        },
      ],
    },
    {
      name: "update_field",
      description: "Update a field in a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "field_id",
          type: "string",
          description: "ID of the field to update",
          required: true,
        },
        {
          name: "table_id",
          type: "string",
          description: "ID of the table",
          required: true,
        },
        {
          name: "updates",
          type: "object",
          description: "Parameter: updates",
          required: true,
        },
      ],
    },
    {
      name: "list_records",
      description: "List records in a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "max_records",
          type: "number",
          description: "Maximum number of records to return",
          required: false,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "create_record",
      description: "Create a new record in a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Record fields as key-value pairs",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "update_record",
      description: "Update an existing record in a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Record fields to update as key-value pairs",
          required: true,
        },
        {
          name: "record_id",
          type: "string",
          description: "ID of the record to update",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "delete_record",
      description: "Delete a record from a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "record_id",
          type: "string",
          description: "ID of the record to delete",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "search_records",
      description: "Search for records in a table",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "field_name",
          type: "string",
          description: "Name of the field to search in",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to search for",
          required: true,
        },
      ],
    },
    {
      name: "get_record",
      description: "Get a single record by its ID",
      parameters: [
        {
          name: "base_id",
          type: "string",
          description: "ID of the base",
          required: true,
        },
        {
          name: "record_id",
          type: "string",
          description: "ID of the record to retrieve",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/felores/airtable-mcp",
  _varName: "airtableMcpServerPlugin",
};

const kubernetesMonitorPlugin: Plugin = {
  id: "oam68lbi8z",
  name: "Kubernetes Monitor",
  description:
    "A read-only MCP server for Kubernetes that allows querying cluster information and diagnosing issues through natural language interfaces like Claude.",
  image: "https://github.com/vlttnv.png",
  actions: [],
  githubUrl: "https://github.com/vlttnv/k8s-mcp",
  _varName: "kubernetesMonitorPlugin",
};

const dependencymcpServerPlugin: Plugin = {
  id: "4ndnq31gxp",
  name: "DependencyMCP Server",
  description:
    "Analyzes codebases to generate dependency graphs and architectural insights across multiple programming languages, helping developers understand code structure and validate against architectural rules.",
  image: "https://github.com/mkearl.png",
  actions: [],
  githubUrl: "https://github.com/mkearl/dependency-mcp",
  _varName: "dependencymcpServerPlugin",
};

const gmailMcpPlugin: Plugin = {
  id: "r0rf7w4hi6",
  name: "Gmail MCP",
  description:
    "A server that allows Claude to search and retrieve emails from your Gmail account, supporting functions like searching emails, retrieving full content of specific emails, and listing recent messages.",
  image: "https://github.com/vinayak-mehta.png",
  actions: [],
  githubUrl: "https://github.com/vinayak-mehta/gmail-mcp",
  _varName: "gmailMcpPlugin",
};

const mcpServerSemgrepPlugin: Plugin = {
  id: "uddu737c4c",
  name: "MCP Server Semgrep",
  description:
    "A Model Context Protocol compliant server that integrates Semgrep static analysis tool with AI assistants like Anthropic Claude, enabling advanced code analysis, security vulnerability detection, and code quality improvements through a conversational interface.",
  image: "https://github.com/Szowesgad.png",
  actions: [],
  githubUrl: "https://github.com/Szowesgad/mcp-server-semgrep",
  _varName: "mcpServerSemgrepPlugin",
};

const specifaiMcpServerPlugin: Plugin = {
  id: "4au5codz9l",
  name: "Specif-ai MCP Server",
  description:
    "A CLI tool that runs a Model Context Protocol server over stdio, enabling interaction with specification documents like business requirements, product requirements, and user stories for the Specif-ai platform.",
  image: "https://github.com/vj-presidio.png",
  actions: [
    {
      name: "set-project-path",
      description:
        "Set the project path and reload the solution, use this tool only when we not automatically able to infer the project path or asked by the user or us., we will try to auto infer it from the environment first.",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "The absolute path to the project directory containing specification files",
          required: true,
        },
      ],
    },
    {
      name: "get-brds",
      description: "Get Business Requirement Documents for this project",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
      ],
    },
    {
      name: "get-prds",
      description: "Get Product Requirement Documents for this project",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
      ],
    },
    {
      name: "get-nfrs",
      description: "Get Non-Functional Requirement Documents for this project",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
      ],
    },
    {
      name: "get-uirs",
      description: "Get User Interface Requirement Documents for this project",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
      ],
    },
    {
      name: "get-bps",
      description: "Get Business Process Documents for this project",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
      ],
    },
    {
      name: "get-user-stories",
      description: "Get User Stories for a particular PRD",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
        {
          name: "prdId",
          type: "string",
          description: "The ID of the PRD to get user stories for",
          required: true,
        },
      ],
    },
    {
      name: "get-tasks",
      description: "Get Tasks for a particular User Story",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
        {
          name: "prdId",
          type: "string",
          description: "The ID of the PRD to get user stories for",
          required: true,
        },
        {
          name: "userStoryId",
          type: "string",
          description: "The ID of the User Story to get tasks for",
          required: true,
        },
      ],
    },
    {
      name: "get-task",
      description: "Get a Task for a particular User Story in a particular PRD",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description:
            "Absolute path where the tool is called from to auto-infer the project path. This path will be current working directory (cwd) from where the tool is called.",
          required: true,
        },
        {
          name: "prdId",
          type: "string",
          description: "The ID of the PRD to get user stories for",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "The ID of the Task to get",
          required: true,
        },
        {
          name: "userStoryId",
          type: "string",
          description: "The ID of the User Story to get tasks for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/vj-presidio/specif-ai-mcp-server",
  _varName: "specifaiMcpServerPlugin",
};

const mcpunkPlugin: Plugin = {
  id: "3j9kxuocc6",
  name: "MCPunk",
  description:
    "Chat with your codebase through intelligent code searching without embeddings by breaking files into logical chunks, giving the LLM tools to search these chunks, and letting it find specific code needed to answer your questions.",
  image: "https://github.com/jurasofish.png",
  actions: [
    {
      name: "get_a_joke",
      description: "Get a really funny joke! For testing :)",
      parameters: [
        {
          name: "animal",
          type: "string",
          description: "Parameter: animal",
          required: true,
        },
      ],
    },
    {
      name: "configure_project",
      description:
        'Configure a new project containing files.\n\n    Each file in the project is split into \'chunks\' - logical sections like functions,\n    classes, markdown sections, and import blocks.\n\n    After configuring, a common workflow is:\n    1. list_all_files_in_project to get an overview of the project (with\n       an initial limit on the depth of the search)\n    2. Find files by function/class definition:\n       find_files_by_chunk_content(... ["def my_funk"])\n    3. Find files by function/class usage:\n       find_files_by_chunk_content(... ["my_funk"])\n    4. Determine which chunks in the found files are relevant:\n        find_matching_chunks_in_file(...)\n    5. Get details about the chunks:\n       chunk_details(...)\n\n    Use ~ (tilde) literally if the user specifies it in paths.\n    ',
      parameters: [
        {
          name: "project_name",
          type: "string",
          description:
            "Name of the project, for you to pick buddy, something short and sweet and memorable and unique",
          required: true,
        },
        {
          name: "root_path",
          type: "string",
          description: "Root path of the project",
          required: true,
        },
      ],
    },
    {
      name: "list_all_files_in_project",
      description:
        "List all files in a project, returning a file tree.\n\n    This is useful for getting an overview of the project, or specific\n    subdirectories of the project.\n\n    A project may have many files, so you are suggested\n    to start with a depth limit to get an overview, and then continue increasing\n    the depth limit with a filter to look at specific subdirectories.\n    ",
      parameters: [
        {
          name: "limit_depth_from_root",
          type: "string",
          description:
            "Limit the depth of the search to this many directories from the root. Typically,start with 1 to get an overview of the project.If None, search all directories from the root.",
          required: false,
        },
        {
          name: "path_filter",
          type: "string",
          description:
            "Match if any of these strings appear. Match all if None/null.",
          required: false,
        },
        {
          name: "project_name",
          type: "string",
          description: "Parameter: project_name",
          required: true,
        },
      ],
    },
    {
      name: "find_files_by_chunk_content",
      description:
        'Step 1: Find files containing chunks with matching text.\n\n    Returns file tree only showing which files contain matches.\n    You must use find_matching_chunks_in_file on each relevant file\n    to see the actual matches.\n\n    Example workflow:\n    1. Find files:\n       files = find_files_by_chunk_content(project, ["MyClass"])\n    2. For each file, find actual matches:\n       matches = find_matching_chunks_in_file(file, ["MyClass"])\n    3. Get content:\n       content = chunk_details(file, match_id)\n    ',
      parameters: [
        {
          name: "chunk_contents_filter",
          type: "string",
          description:
            "Match if any of these strings appear. Match all if None/null.",
          required: true,
        },
        {
          name: "project_name",
          type: "string",
          description: "Parameter: project_name",
          required: true,
        },
      ],
    },
    {
      name: "find_matching_chunks_in_file",
      description:
        "Step 2: Find the actual matching chunks in a specific file.\n\n    Required after find_files_by_chunk_content or list_all_files_in_project to see\n    matches, as those tools only show files, not their contents.\n\n    This can be used for things like:\n      - Finding all chunks in a file that make reference to a specific function\n        (e.g. find_matching_chunks_in_file(..., [\"my_funk\"])\n      - Finding a chunk where a specific function is defined\n        (e.g. find_matching_chunks_in_file(..., [\"def my_funk\"])\n\n    Some chunks are split into multiple parts, because they are too large. This\n    will look like 'chunkx_part1', 'chunkx_part2', ...\n    ",
      parameters: [
        {
          name: "filter_",
          type: "string",
          description:
            "Match if any of these strings appear. Match all if None/null.",
          required: true,
        },
        {
          name: "project_name",
          type: "string",
          description: "Parameter: project_name",
          required: true,
        },
        {
          name: "rel_path",
          type: "string",
          description: "Relative to project root",
          required: true,
        },
      ],
    },
    {
      name: "chunk_details",
      description:
        "Get full content of a specific chunk.\n\n    Returns chunk content as string.\n\n    Common patterns:\n    1. Final step after find_matching_chunks_in_file finds relevant chunks\n    2. Examining implementations after finding definitions/uses\n    ",
      parameters: [
        {
          name: "chunk_id",
          type: "string",
          description: "Parameter: chunk_id",
          required: true,
        },
      ],
    },
    {
      name: "list_most_recently_checked_out_branches",
      description:
        "List the n most recently checked out branches in the project",
      parameters: [
        {
          name: "n",
          type: "integer",
          description: "Parameter: n",
          required: false,
        },
        {
          name: "project_name",
          type: "string",
          description: "Parameter: project_name",
          required: true,
        },
      ],
    },
    {
      name: "diff_with_ref",
      description:
        "Return a summary of the diff between HEAD and the given ref.\n\n    You probably want the ref  to be the 'base' branch like develop or main, off which\n    PRs are made - and you can likely determine this by viewing the most recently\n    checked out branches.\n    ",
      parameters: [
        {
          name: "project_name",
          type: "string",
          description: "Parameter: project_name",
          required: true,
        },
        {
          name: "ref",
          type: "string",
          description: "Parameter: ref",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jurasofish/mcpunk",
  _varName: "mcpunkPlugin",
};

const datagovMcpServerPlugin: Plugin = {
  id: "qi5i2d6sen",
  name: "Data.gov MCP Server",
  description:
    "An MCP server that provides access to government datasets from Data.gov, enabling users to search packages, view dataset details, list groups and tags, and access resources by URL.",
  image: "https://github.com/melaodoidao.png",
  actions: [
    {
      name: "package_search",
      description: "Search for packages (datasets) on Data.gov",
      parameters: [
        {
          name: "q",
          type: "string",
          description: "Search query",
          required: false,
        },
        {
          name: "rows",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: 'Sort order (e.g., "score desc, name asc")',
          required: false,
        },
        {
          name: "start",
          type: "number",
          description: "Starting offset for results",
          required: false,
        },
      ],
    },
    {
      name: "package_show",
      description: "Get details for a specific package (dataset)",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Package ID or name",
          required: true,
        },
      ],
    },
    {
      name: "group_list",
      description: "List groups on Data.gov",
      parameters: [
        {
          name: "all_fields",
          type: "boolean",
          description: "Return all fields",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Offset for results",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Field to order by",
          required: false,
        },
      ],
    },
    {
      name: "tag_list",
      description: "List tags on Data.gov",
      parameters: [
        {
          name: "all_fields",
          type: "boolean",
          description: "Return all fields",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query for tags",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/melaodoidao/datagov-mcp-server",
  _varName: "datagovMcpServerPlugin",
};

const whimsicalMcpServerPlugin: Plugin = {
  id: "wfscug0oke",
  name: "Whimsical MCP Server",
  description:
    "Enables programmatic creation of Whimsical diagrams from Mermaid markup generated by AI models like Claude through the Model Context Protocol.",
  image: "https://github.com/BrockReece.png",
  actions: [],
  githubUrl: "https://github.com/BrockReece/whimsical-mcp-server",
  _varName: "whimsicalMcpServerPlugin",
};

const mcpCalcToolsPlugin: Plugin = {
  id: "s2q7kkn40a",
  name: "MCP Calc Tools",
  description:
    "A server that provides advanced mathematical and financial calculation capabilities for AI code assistants, enabling them to perform complex calculations like symbolic calculus, numerical methods, and financial analysis without implementing algorithms directly.",
  image: "https://github.com/nbiish.png",
  actions: [
    {
      name: "derivative",
      description: "Calculate the derivative of a mathematical expression",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: 'Mathematical expression (e.g., "x^2", "e^x", "sin(x)")',
          required: true,
        },
        {
          name: "variable",
          type: "string",
          description: "Variable to differentiate with respect to (default: x)",
          required: false,
        },
      ],
    },
    {
      name: "integral",
      description:
        "Calculate the indefinite integral of a mathematical expression",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: 'Mathematical expression (e.g., "x^2", "e^x", "sin(x)")',
          required: true,
        },
        {
          name: "variable",
          type: "string",
          description: "Variable to integrate with respect to (default: x)",
          required: false,
        },
      ],
    },
    {
      name: "riemann_sum",
      description:
        "Calculate the Riemann sum of a function using different methods",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Lower limit of integration",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Upper limit of integration",
          required: true,
        },
        {
          name: "expression",
          type: "string",
          description: "Function to integrate",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description: "Method: left, right, midpoint, or trapezoid",
          required: false,
        },
        {
          name: "n",
          type: "number",
          description: "Number of subintervals",
          required: true,
        },
        {
          name: "variable",
          type: "string",
          description: "Variable of integration",
          required: true,
        },
      ],
    },
    {
      name: "area",
      description: "Calculate the area under a curve between two points",
      parameters: [
        {
          name: "end",
          type: "number",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "expression",
          type: "string",
          description: "Parameter: expression",
          required: true,
        },
        {
          name: "n",
          type: "number",
          description: "Number of subintervals (default: 1000)",
          required: false,
        },
        {
          name: "start",
          type: "number",
          description: "Parameter: start",
          required: true,
        },
      ],
    },
    {
      name: "volume",
      description: "Calculate the volume of revolution around x-axis",
      parameters: [
        {
          name: "end",
          type: "number",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "expression",
          type: "string",
          description: "Parameter: expression",
          required: true,
        },
        {
          name: "start",
          type: "number",
          description: "Parameter: start",
          required: true,
        },
      ],
    },
    {
      name: "logarithm",
      description: "Calculate logarithm with any base",
      parameters: [
        {
          name: "base",
          type: "number",
          description: "Parameter: base",
          required: false,
        },
        {
          name: "value",
          type: "number",
          description: "Parameter: value",
          required: true,
        },
      ],
    },
    {
      name: "exponential",
      description: "Calculate exponential function (e^x)",
      parameters: [
        {
          name: "power",
          type: "number",
          description: "Parameter: power",
          required: true,
        },
      ],
    },
    {
      name: "compound_interest",
      description: "Calculate compound interest",
      parameters: [
        {
          name: "compounds",
          type: "number",
          description: "Parameter: compounds",
          required: false,
        },
        {
          name: "principal",
          type: "number",
          description: "Parameter: principal",
          required: true,
        },
        {
          name: "rate",
          type: "number",
          description: "Parameter: rate",
          required: true,
        },
        {
          name: "time",
          type: "number",
          description: "Parameter: time",
          required: true,
        },
      ],
    },
    {
      name: "present_value",
      description: "Calculate present value of future cash flows",
      parameters: [
        {
          name: "futureValue",
          type: "number",
          description: "Parameter: futureValue",
          required: true,
        },
        {
          name: "rate",
          type: "number",
          description: "Parameter: rate",
          required: true,
        },
        {
          name: "time",
          type: "number",
          description: "Parameter: time",
          required: true,
        },
      ],
    },
    {
      name: "npv",
      description: "Calculate Net Present Value of cash flows",
      parameters: [
        {
          name: "cashFlows",
          type: "number array",
          description: "Parameter: cashFlows",
          required: true,
        },
        {
          name: "rate",
          type: "number",
          description: "Parameter: rate",
          required: true,
        },
      ],
    },
    {
      name: "darboux_sum",
      description: "Calculate the Darboux sum of a function",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Lower limit of integration",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Upper limit of integration",
          required: true,
        },
        {
          name: "expression",
          type: "string",
          description: "Function to integrate",
          required: true,
        },
        {
          name: "n",
          type: "number",
          description: "Number of subintervals",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type: upper or lower Darboux sum",
          required: false,
        },
        {
          name: "variable",
          type: "string",
          description: "Variable of integration",
          required: true,
        },
      ],
    },
    {
      name: "limit",
      description: "Calculate the limit of a function as it approaches a value",
      parameters: [
        {
          name: "approach",
          type: "number",
          description: "Value the variable approaches",
          required: true,
        },
        {
          name: "expression",
          type: "string",
          description: "Function to evaluate limit",
          required: true,
        },
        {
          name: "variable",
          type: "string",
          description: "Variable approaching the limit",
          required: true,
        },
      ],
    },
    {
      name: "solve",
      description: "Solve an equation for a variable",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: 'Equation to solve (e.g., "x^2 = 4")',
          required: true,
        },
        {
          name: "variable",
          type: "string",
          description: "Variable to solve for",
          required: true,
        },
      ],
    },
    {
      name: "laplace_transform",
      description: "Calculate the Laplace transform of a function",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: "Function of time",
          required: true,
        },
        {
          name: "laplaceVar",
          type: "string",
          description: "Laplace variable",
          required: true,
        },
        {
          name: "timeVar",
          type: "string",
          description: "Time variable",
          required: true,
        },
      ],
    },
    {
      name: "fourier_transform",
      description: "Calculate the Fourier transform of a function",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: "Function of time",
          required: true,
        },
        {
          name: "freqVar",
          type: "string",
          description: "Frequency variable",
          required: true,
        },
        {
          name: "timeVar",
          type: "string",
          description: "Time variable",
          required: true,
        },
      ],
    },
    {
      name: "z_transform",
      description: "Calculate the Z-transform of a function",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: "Function of discrete time",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Upper limit for summation (default: 100)",
          required: false,
        },
        {
          name: "timeVar",
          type: "string",
          description: "Discrete time variable",
          required: true,
        },
        {
          name: "zVar",
          type: "string",
          description: "Z-transform variable",
          required: true,
        },
      ],
    },
    {
      name: "black_scholes",
      description: "Calculate Black-Scholes option price",
      parameters: [
        {
          name: "K",
          type: "number",
          description: "Strike price of the option",
          required: true,
        },
        {
          name: "S",
          type: "number",
          description: "Current price of the asset",
          required: true,
        },
        {
          name: "T",
          type: "number",
          description: "Time to expiration in years",
          required: true,
        },
        {
          name: "optionType",
          type: "string",
          description: 'Option type: "call" or "put"',
          required: false,
        },
        {
          name: "r",
          type: "number",
          description: "Risk-free interest rate",
          required: true,
        },
        {
          name: "sigma",
          type: "number",
          description: "Volatility of the asset",
          required: true,
        },
      ],
    },
    {
      name: "option_greeks",
      description: "Calculate the Greeks for a Black-Scholes option",
      parameters: [
        {
          name: "K",
          type: "number",
          description: "Strike price of the option",
          required: true,
        },
        {
          name: "S",
          type: "number",
          description: "Current price of the asset",
          required: true,
        },
        {
          name: "T",
          type: "number",
          description: "Time to expiration in years",
          required: true,
        },
        {
          name: "optionType",
          type: "string",
          description: 'Option type: "call" or "put"',
          required: false,
        },
        {
          name: "r",
          type: "number",
          description: "Risk-free interest rate",
          required: true,
        },
        {
          name: "sigma",
          type: "number",
          description: "Volatility of the asset",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nbiish/mcp-calc-tools",
  _varName: "mcpCalcToolsPlugin",
};

const lichessMcpPlugin: Plugin = {
  id: "x7iuw37s1v",
  name: "Lichess MCP",
  description:
    "An MCP server that enables natural language interaction with the Lichess chess platform, allowing users to play games, analyze positions, manage their account, and participate in tournaments through Claude.",
  image: "https://github.com/karayaman.png",
  actions: [
    {
      name: "set_token",
      description: "Set your Lichess API token",
      parameters: [
        {
          name: "token",
          type: "string",
          description: "Your Lichess API token",
          required: true,
        },
      ],
    },
    {
      name: "get_my_profile",
      description: "Get your Lichess profile information",
      parameters: [],
    },
    {
      name: "get_user_profile",
      description: "Get a user's Lichess profile information",
      parameters: [
        {
          name: "trophies",
          type: "boolean",
          description: "Include user trophies",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Username of the player",
          required: true,
        },
      ],
    },
    {
      name: "get_my_email",
      description: "Get your email address",
      parameters: [],
    },
    {
      name: "get_kid_mode",
      description: "Get kid mode status",
      parameters: [],
    },
    {
      name: "set_kid_mode",
      description: "Set kid mode status",
      parameters: [
        {
          name: "value",
          type: "boolean",
          description: "Enable or disable kid mode",
          required: true,
        },
      ],
    },
    {
      name: "create_challenge",
      description: "Create a new challenge",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "timeControl",
          type: "string",
          description: "Time control (e.g. '10+0' for 10 minutes)",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Username of the player to challenge",
          required: true,
        },
      ],
    },
    {
      name: "make_move",
      description: "Make a move in an ongoing game",
      parameters: [
        {
          name: "gameId",
          type: "string",
          description: "ID of the game",
          required: true,
        },
        {
          name: "move",
          type: "string",
          description: "Move in UCI format (e.g. 'e2e4')",
          required: true,
        },
        {
          name: "offeringDraw",
          type: "boolean",
          description: "Whether to offer/accept a draw",
          required: false,
        },
      ],
    },
    {
      name: "get_preferences",
      description: "Get your preferences",
      parameters: [],
    },
    {
      name: "get_timeline",
      description: "Get your timeline",
      parameters: [
        {
          name: "nb",
          type: "number",
          description: "Max number of events to fetch (1-30)",
          required: false,
        },
        {
          name: "since",
          type: "number",
          description: "Show events since this timestamp",
          required: false,
        },
      ],
    },
    {
      name: "test_tokens",
      description: "Test multiple OAuth tokens",
      parameters: [
        {
          name: "tokens",
          type: "string",
          description: "OAuth tokens separated by commas. Up to 1000.",
          required: true,
        },
      ],
    },
    {
      name: "revoke_token",
      description: "Revoke the current access token",
      parameters: [],
    },
    {
      name: "upgrade_to_bot",
      description:
        "Upgrade to Bot account. WARNING: This is irreversible and the account must not have played any games.",
      parameters: [],
    },
    {
      name: "add_user_note",
      description: "Add a private note about a user",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The contents of the note",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "Username of the player",
          required: true,
        },
      ],
    },
    {
      name: "send_message",
      description: "Send a private message to another player",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Message text",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "Username of the recipient",
          required: true,
        },
      ],
    },
    {
      name: "get_following",
      description: "Get users followed by the logged in user",
      parameters: [],
    },
    {
      name: "follow_user",
      description: "Follow a player",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player to follow",
          required: true,
        },
      ],
    },
    {
      name: "unfollow_user",
      description: "Unfollow a player",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player to unfollow",
          required: true,
        },
      ],
    },
    {
      name: "block_user",
      description: "Block a player",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player to block",
          required: true,
        },
      ],
    },
    {
      name: "get_users_status",
      description: "Get real-time users status",
      parameters: [
        {
          name: "ids",
          type: "string",
          description: "User IDs separated by commas. Up to 100 IDs.",
          required: true,
        },
        {
          name: "withGameIds",
          type: "boolean",
          description: "Include IDs of ongoing games",
          required: false,
        },
        {
          name: "withGameMetas",
          type: "boolean",
          description: "Include metadata of ongoing games",
          required: false,
        },
        {
          name: "withSignal",
          type: "boolean",
          description: "Include network signal strength (1-4)",
          required: false,
        },
      ],
    },
    {
      name: "get_all_top_10",
      description: "Get the top 10 players for each speed and variant",
      parameters: [],
    },
    {
      name: "get_leaderboard",
      description: "Get the leaderboard for a single speed or variant",
      parameters: [
        {
          name: "nb",
          type: "number",
          description: "How many users to fetch (1-200)",
          required: false,
        },
        {
          name: "perfType",
          type: "string",
          description: "The speed or variant",
          required: true,
        },
      ],
    },
    {
      name: "get_user_public_data",
      description: "Get public data of a user",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player",
          required: true,
        },
        {
          name: "withTrophies",
          type: "boolean",
          description: "Include user trophies",
          required: false,
        },
      ],
    },
    {
      name: "get_rating_history",
      description: "Get rating history of a user for all perf types",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player",
          required: true,
        },
      ],
    },
    {
      name: "get_user_performance",
      description: "Get performance statistics of a user",
      parameters: [
        {
          name: "perf",
          type: "string",
          description: "The speed or variant",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "Username of the player",
          required: true,
        },
      ],
    },
    {
      name: "get_user_activity",
      description: "Get activity feed of a user",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player",
          required: true,
        },
      ],
    },
    {
      name: "get_users_by_id",
      description: "Get multiple users by their IDs",
      parameters: [
        {
          name: "ids",
          type: "string",
          description: "User IDs separated by commas. Up to 300 IDs.",
          required: true,
        },
      ],
    },
    {
      name: "unblock_user",
      description: "Unblock a user",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username of the player to unblock",
          required: true,
        },
      ],
    },
    {
      name: "export_game",
      description: "Export one game in PGN or JSON format",
      parameters: [
        {
          name: "accuracy",
          type: "boolean",
          description: "Include accuracy percentages",
          required: false,
        },
        {
          name: "clocks",
          type: "boolean",
          description: "Include clock comments in the PGN moves",
          required: false,
        },
        {
          name: "evals",
          type: "boolean",
          description: "Include analysis evaluation comments",
          required: false,
        },
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
        {
          name: "literate",
          type: "boolean",
          description: "Include textual annotations",
          required: false,
        },
        {
          name: "moves",
          type: "boolean",
          description: "Include the PGN moves",
          required: false,
        },
        {
          name: "opening",
          type: "boolean",
          description: "Include opening name",
          required: false,
        },
        {
          name: "pgnInJson",
          type: "boolean",
          description: "Include the full PGN within the JSON response",
          required: false,
        },
        {
          name: "tags",
          type: "boolean",
          description: "Include the PGN tags",
          required: false,
        },
      ],
    },
    {
      name: "export_ongoing_game",
      description: "Export ongoing game of a user",
      parameters: [
        {
          name: "clocks",
          type: "boolean",
          description: "Include clock comments in the PGN moves",
          required: false,
        },
        {
          name: "evals",
          type: "boolean",
          description: "Include analysis evaluation comments",
          required: false,
        },
        {
          name: "moves",
          type: "boolean",
          description: "Include the PGN moves",
          required: false,
        },
        {
          name: "opening",
          type: "boolean",
          description: "Include opening name",
          required: false,
        },
        {
          name: "pgnInJson",
          type: "boolean",
          description: "Include the full PGN within the JSON response",
          required: false,
        },
        {
          name: "tags",
          type: "boolean",
          description: "Include the PGN tags",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "The username",
          required: true,
        },
      ],
    },
    {
      name: "export_user_games",
      description: "Export all games of a user",
      parameters: [
        {
          name: "accuracy",
          type: "boolean",
          description: "Include accuracy",
          required: false,
        },
        {
          name: "analysed",
          type: "boolean",
          description: "Only games with or without computer analysis",
          required: false,
        },
        {
          name: "clocks",
          type: "boolean",
          description: "Include clock comments",
          required: false,
        },
        {
          name: "color",
          type: "string",
          description: "Only games played as this color",
          required: false,
        },
        {
          name: "evals",
          type: "boolean",
          description: "Include analysis",
          required: false,
        },
        {
          name: "finished",
          type: "boolean",
          description: "Include finished games",
          required: false,
        },
        {
          name: "lastFen",
          type: "boolean",
          description: "Include last position FEN",
          required: false,
        },
        {
          name: "literate",
          type: "boolean",
          description: "Include textual annotations",
          required: false,
        },
        {
          name: "max",
          type: "number",
          description: "Maximum number of games to download",
          required: false,
        },
        {
          name: "moves",
          type: "boolean",
          description: "Include moves",
          required: false,
        },
        {
          name: "ongoing",
          type: "boolean",
          description: "Include ongoing games",
          required: false,
        },
        {
          name: "opening",
          type: "boolean",
          description: "Include opening",
          required: false,
        },
        {
          name: "perfType",
          type: "string",
          description: "Only games in these speeds or variants",
          required: false,
        },
        {
          name: "rated",
          type: "boolean",
          description: "Only rated (true) or casual (false) games",
          required: false,
        },
        {
          name: "since",
          type: "number",
          description: "Download games played since timestamp",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort order of games",
          required: false,
        },
        {
          name: "tags",
          type: "boolean",
          description: "Include tags",
          required: false,
        },
        {
          name: "until",
          type: "number",
          description: "Download games played until timestamp",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "The username",
          required: true,
        },
        {
          name: "vs",
          type: "string",
          description: "Only games against this opponent",
          required: false,
        },
      ],
    },
    {
      name: "export_games_by_ids",
      description: "Export multiple games by IDs",
      parameters: [
        {
          name: "clocks",
          type: "boolean",
          description: "Include clock comments",
          required: false,
        },
        {
          name: "evals",
          type: "boolean",
          description: "Include analysis",
          required: false,
        },
        {
          name: "ids",
          type: "string",
          description: "Game IDs separated by commas. Up to 300 IDs.",
          required: true,
        },
        {
          name: "moves",
          type: "boolean",
          description: "Include the PGN moves",
          required: false,
        },
        {
          name: "opening",
          type: "boolean",
          description: "Include opening name",
          required: false,
        },
        {
          name: "pgnInJson",
          type: "boolean",
          description: "Include the full PGN within the JSON response",
          required: false,
        },
        {
          name: "tags",
          type: "boolean",
          description: "Include the PGN tags",
          required: false,
        },
      ],
    },
    {
      name: "get_tv_channels",
      description: "Get all TV channels and their current games",
      parameters: [],
    },
    {
      name: "get_tv_game",
      description: "Get current TV game in PGN format",
      parameters: [
        {
          name: "channel",
          type: "string",
          description: "Channel name like 'bot', 'blitz', etc.",
          required: false,
        },
      ],
    },
    {
      name: "get_puzzle_activity",
      description: "Get your puzzle activity",
      parameters: [
        {
          name: "max",
          type: "number",
          description:
            "How many entries to download. Leave empty to get all activity.",
          required: false,
        },
      ],
    },
    {
      name: "get_puzzle_dashboard",
      description: "Get your puzzle dashboard",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "How many days of history to return (max 30)",
          required: false,
        },
      ],
    },
    {
      name: "get_puzzle_race",
      description: "Get info about a puzzle race",
      parameters: [
        {
          name: "raceId",
          type: "string",
          description: "ID of the puzzle race",
          required: true,
        },
      ],
    },
    {
      name: "create_puzzle_race",
      description: "Create a puzzle race",
      parameters: [],
    },
    {
      name: "get_puzzle_storm_dashboard",
      description: "Get your puzzle storm dashboard",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "How many days of history to return (max 30)",
          required: false,
        },
      ],
    },
    {
      name: "get_team_info",
      description: "Get team information by ID",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "get_team_members",
      description: "Get members of a team",
      parameters: [
        {
          name: "max",
          type: "number",
          description: "Maximum number of members to fetch",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "get_team_join_requests",
      description: "Get join requests for a team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "join_team",
      description: "Join a team",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Optional message for team leaders",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "leave_team",
      description: "Leave a team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "kick_user_from_team",
      description: "Kick a user from your team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description: "The user ID",
          required: true,
        },
      ],
    },
    {
      name: "accept_join_request",
      description: "Accept a join request for your team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description: "The user ID",
          required: true,
        },
      ],
    },
    {
      name: "decline_join_request",
      description: "Decline a join request for your team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "The team ID",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description: "The user ID",
          required: true,
        },
      ],
    },
    {
      name: "search_teams",
      description: "Search for teams",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number (starting at 1)",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Search text",
          required: true,
        },
      ],
    },
    {
      name: "make_board_move",
      description: "Make a move in a board game",
      parameters: [
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
        {
          name: "move",
          type: "string",
          description: "Move in UCI format (e.g. e2e4)",
          required: true,
        },
        {
          name: "offeringDraw",
          type: "boolean",
          description: "Whether to offer/accept a draw",
          required: false,
        },
      ],
    },
    {
      name: "abort_board_game",
      description: "Abort a board game",
      parameters: [
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
      ],
    },
    {
      name: "resign_board_game",
      description: "Resign a board game",
      parameters: [
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
      ],
    },
    {
      name: "write_in_chat",
      description: "Write in the chat of a board game",
      parameters: [
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
        {
          name: "room",
          type: "string",
          description: "The chat room",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The message to send",
          required: true,
        },
      ],
    },
    {
      name: "handle_draw_board_game",
      description: "Handle draw offers for a board game",
      parameters: [
        {
          name: "accept",
          type: "boolean",
          description: "Whether to accept or decline the draw offer",
          required: false,
        },
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
      ],
    },
    {
      name: "claim_victory",
      description: "Claim victory if opponent abandoned the game",
      parameters: [
        {
          name: "gameId",
          type: "string",
          description: "The game ID",
          required: true,
        },
      ],
    },
    {
      name: "list_challenges",
      description: "List incoming and outgoing challenges",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/karayaman/lichess-mcp",
  _varName: "lichessMcpPlugin",
};

const mcpSshServerPlugin: Plugin = {
  id: "evsuu87spp",
  name: "MCP SSH Server",
  description:
    "A secure SSH server implementation for Model Context Protocol that enables remote command execution and file operations, supporting both password and key-based authentication.",
  image: "https://github.com/shaike1.png",
  actions: [],
  githubUrl: "https://github.com/shaike1/mcp-server-ssh",
  _varName: "mcpSshServerPlugin",
};

const hexApiMcpServerPlugin: Plugin = {
  id: "0p1ppp85i7",
  name: "Hex API MCP Server",
  description:
    "A server that allows AI assistants to access, view, run, and manage Hex projects through a standardized interface.",
  image: "https://github.com/franccesco.png",
  actions: [],
  githubUrl: "https://github.com/franccesco/hex-mcp",
  _varName: "hexApiMcpServerPlugin",
};

const fluxImageMcpServerPlugin: Plugin = {
  id: "v93w5s68xa",
  name: "Flux Image MCP Server",
  description:
    "Provides image generation capabilities using the Flux Schnell model on Replicate, allowing users to create images from text prompts.",
  image: "https://github.com/ckz.png",
  actions: [],
  githubUrl: "https://github.com/ckz/flux-img-mcp",
  _varName: "fluxImageMcpServerPlugin",
};

const tfnswRealtimeAlertsMcpServerPlugin: Plugin = {
  id: "7fteeo18to",
  name: "TfNSW Realtime Alerts MCP Server",
  description:
    "This server enables large language models to access and interact with real-time transport alerts from Transport for NSW's network, supporting filtering by transport mode and returning formatted alert information about disruptions and planned works.",
  image: "https://github.com/piddlingtuna.png",
  actions: [],
  githubUrl: "https://github.com/piddlingtuna/tfnsw-realtime-alerts-mcp-server",
  _varName: "tfnswRealtimeAlertsMcpServerPlugin",
};

const codingStandardsMcpServerPlugin: Plugin = {
  id: "jiob6e27n1",
  name: "Coding Standards MCP Server",
  description:
    "Provides tools for accessing coding style guidelines and best practices for various technologies including Java, Python, and React.",
  image: "https://github.com/ggerve.png",
  actions: [],
  githubUrl: "https://github.com/ggerve/coding-standards-mcp",
  _varName: "codingStandardsMcpServerPlugin",
};

const beamlitMcpServerPlugin: Plugin = {
  id: "xvjndphdz8",
  name: "Beamlit MCP Server",
  description:
    "An MCP server implementation that enables seamless integration between Beamlit CLI and AI models using the Model Context Protocol standard.",
  image: "https://github.com/beamlit.png",
  actions: [],
  githubUrl: "https://github.com/beamlit/mcp-gateway",
  _varName: "beamlitMcpServerPlugin",
};

const docScraperMcpServerPlugin: Plugin = {
  id: "a5s4bbasd2",
  name: "Doc Scraper MCP Server",
  description:
    "Converts web-based documentation into markdown format using jina.ai's conversion service, allowing users to scrape documentation from any URL and save it as markdown files.",
  image: "https://github.com/askjohngeorge.png",
  actions: [],
  githubUrl: "https://github.com/askjohngeorge/mcp-doc-scraper",
  _varName: "docScraperMcpServerPlugin",
};

const gitlabKanbanMcpServerPlugin: Plugin = {
  id: "uclnzh4e3e",
  name: "GitLab Kanban MCP Server",
  description:
    "A Model Context Protocol server that enables management of GitLab Kanban boards through tools for listing, creating, updating, and deleting tasks, as well as adding comments.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "list_tasks",
      description: "プロジェクトのカンバンボードのタスク一覧を取得",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "GitLabプロジェクトID",
          required: true,
        },
      ],
    },
    {
      name: "create_task",
      description: "カンバンボードに新しいタスクを作成",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "タスクの説明",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "タスクのラベル",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitLabプロジェクトID",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "タスクのタイトル",
          required: true,
        },
      ],
    },
    {
      name: "update_task",
      description: "カンバンボードのタスクを更新",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "新しい説明",
          required: false,
        },
        {
          name: "issueId",
          type: "string",
          description: "タスク（Issue）のID",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitLabプロジェクトID",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "タスクの状態",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "新しいタイトル",
          required: false,
        },
      ],
    },
    {
      name: "delete_task",
      description: "カンバンボードのタスクを削除",
      parameters: [
        {
          name: "issueId",
          type: "string",
          description: "タスク（Issue）のID",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitLabプロジェクトID",
          required: true,
        },
      ],
    },
    {
      name: "add_comment",
      description: "タスクにコメントを追加",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "コメントの内容（Markdown形式対応）",
          required: true,
        },
        {
          name: "issueId",
          type: "string",
          description: "タスク（Issue）のID",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "GitLabプロジェクトID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/gitlab-kanban-mcp-server",
  _varName: "gitlabKanbanMcpServerPlugin",
};

const deepseekMcpServer1Plugin: Plugin = {
  id: "ryu87p2e1d",
  name: "Deepseek MCP Server",
  description:
    "A Model Control Protocol server implementation that allows Claude Desktop to use Deepseek models running in Docker, enabling seamless integration between Claude Desktop and Deepseek's language models.",
  image: "https://github.com/vincentf305.png",
  actions: [],
  githubUrl: "https://github.com/vincentf305/mcp-server-deepseek",
  _varName: "deepseekMcpServer1Plugin",
};

const imessageMcpServerPlugin: Plugin = {
  id: "l9nb64rn7g",
  name: "iMessage MCP Server",
  description:
    "A local server that enables Claude Desktop to interact with your macOS Contacts and Messages apps, allowing you to search contacts and send iMessages through natural language commands.",
  image: "https://github.com/marissamarym.png",
  actions: [
    {
      name: "send_imessage",
      description: "Send an iMessage using Messages app",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Message content to send",
          required: true,
        },
        {
          name: "recipient",
          type: "string",
          description: "Phone number or email of the recipient",
          required: true,
        },
      ],
    },
    {
      name: "search_contacts",
      description: "Search contacts by name, phone, or email",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/marissamarym/imessage-mcp-server",
  _varName: "imessageMcpServerPlugin",
};

const couchdbMcpServerPlugin: Plugin = {
  id: "n2dyvn3v83",
  name: "CouchDB MCP Server",
  description:
    "A TypeScript-based MCP server that enables AI assistants to interact with CouchDB databases through a simple interface, providing tools for creating, reading, and querying databases and documents.",
  image: "https://github.com/robertoamoreno.png",
  actions: [
    {
      name: "createDatabase",
      description: "Create a new CouchDB database",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
      ],
    },
    {
      name: "listDatabases",
      description: "List all CouchDB databases",
      parameters: [],
    },
    {
      name: "deleteDatabase",
      description: "Delete a CouchDB database",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name to delete",
          required: true,
        },
      ],
    },
    {
      name: "createDocument",
      description:
        "Create a new document or update an existing document in a database",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Document data",
          required: true,
        },
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
        {
          name: "docId",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "getDocument",
      description: "Get a document from a database",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
        {
          name: "docId",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "createMangoIndex",
      description: "Create a new Mango index (CouchDB 3.x+)",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
        {
          name: "fields",
          type: "string array",
          description: "Fields to index",
          required: true,
        },
        {
          name: "indexName",
          type: "string",
          description: "Name of the index",
          required: true,
        },
      ],
    },
    {
      name: "deleteMangoIndex",
      description: "Delete a Mango index (CouchDB 3.x+)",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
        {
          name: "designDoc",
          type: "string",
          description: "Design document name",
          required: true,
        },
        {
          name: "indexName",
          type: "string",
          description: "Name of the index",
          required: true,
        },
      ],
    },
    {
      name: "listMangoIndexes",
      description: "List all Mango indexes in a database (CouchDB 3.x+)",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
      ],
    },
    {
      name: "findDocuments",
      description: "Query documents using Mango query (CouchDB 3.x+)",
      parameters: [
        {
          name: "dbName",
          type: "string",
          description: "Database name",
          required: true,
        },
        {
          name: "query",
          type: "object",
          description: "Mango query object",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/robertoamoreno/couchdb-mcp-server",
  _varName: "couchdbMcpServerPlugin",
};

const mcppythonPlugin: Plugin = {
  id: "0mn8h83361",
  name: "MCP-Python",
  description:
    "A server that enables interaction with PostgreSQL, MySQL, MariaDB, or SQLite databases through Claude Desktop using natural language queries.",
  image: "https://github.com/rhabraken.png",
  actions: [],
  githubUrl: "https://github.com/rhabraken/mcp-python",
  _varName: "mcppythonPlugin",
};

const memoryBoxMcpServerPlugin: Plugin = {
  id: "wtbejx9zwc",
  name: "Memory Box MCP Server",
  description:
    "Cline MCP integration that allows users to save, search, and format memories with semantic understanding, providing tools to store and retrieve information using vector embeddings for meaning-based search.",
  image: "https://github.com/amotivv.png",
  actions: [
    {
      name: "save_memory",
      description: "Save a memory to Memory Box with proper formatting",
      parameters: [
        {
          name: "bucket_id",
          type: "string",
          description: 'The bucket to save the memory to (default: "General")',
          required: false,
        },
        {
          name: "format",
          type: "boolean",
          description:
            "Whether to format the memory according to the system prompt (default: true)",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "The memory content to save",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description:
            'The type of memory (TECHNICAL, DECISION, SOLUTION, CONCEPT, REFERENCE, APPLICATION, FACT) for formatting (default: "TECHNICAL")',
          required: false,
        },
      ],
    },
    {
      name: "search_memories",
      description: "Search for memories using semantic search",
      parameters: [
        {
          name: "debug",
          type: "boolean",
          description: "Include debug information in results (default: false)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
      ],
    },
    {
      name: "get_all_memories",
      description: "Retrieve all memories",
      parameters: [],
    },
    {
      name: "get_bucket_memories",
      description: "Get memories from a specific bucket",
      parameters: [
        {
          name: "bucket_id",
          type: "string",
          description: "The bucket to retrieve memories from",
          required: true,
        },
      ],
    },
    {
      name: "format_memory",
      description:
        "Format a text according to the memory system prompt without saving",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The text to format",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description:
            'The type of memory (TECHNICAL, DECISION, SOLUTION, CONCEPT, REFERENCE, APPLICATION, FACT) (default: "TECHNICAL")',
          required: false,
        },
      ],
    },
    {
      name: "get_usage_stats",
      description: "Retrieve user usage statistics and plan information",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/amotivv/memory-box-mcp",
  _varName: "memoryBoxMcpServerPlugin",
};

const memoryMcpServerPlugin: Plugin = {
  id: "ur12u6tcid",
  name: "Memory MCP Server",
  description:
    "Provides knowledge graph functionality for managing entities, relations, and observations in memory with strict validation rules to maintain data consistency.",
  image: "https://github.com/evangstav.png",
  actions: [],
  githubUrl: "https://github.com/evangstav/python-memory-mcp-server",
  _varName: "memoryMcpServerPlugin",
};

const jsonMcpServerPlugin: Plugin = {
  id: "9g137c4b4k",
  name: "JSON MCP Server",
  description:
    "A Model Context Protocol server implementation that enables LLMs to query and manipulate JSON data using JSONPath syntax with extended operations for filtering, sorting, transforming, and aggregating data.",
  image: "https://github.com/GongRzhe.png",
  actions: [
    {
      name: "query",
      description: "Query JSON data using JSONPath syntax",
      parameters: [
        {
          name: "jsonPath",
          type: "string",
          description: "JSONPath expression (e.g. $.store.book[*].author)",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the JSON data source",
          required: true,
        },
      ],
    },
    {
      name: "filter",
      description: "Filter JSON data using conditions",
      parameters: [
        {
          name: "condition",
          type: "string",
          description: "Filter condition (e.g. @.price < 10)",
          required: true,
        },
        {
          name: "jsonPath",
          type: "string",
          description: "Base JSONPath expression",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the JSON data source",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/GongRzhe/JSON-MCP-Server",
  _varName: "jsonMcpServerPlugin",
};

const baseMcpServerPlugin: Plugin = {
  id: "s37x9aoxum",
  name: "Base MCP Server",
  description:
    "Provides onchain tools for Claude AI to interact with the Base blockchain and Coinbase API, enabling wallet management, fund transfers, and smart contract deployment.",
  image: "https://github.com/base.png",
  actions: [],
  githubUrl: "https://github.com/base/base-mcp",
  _varName: "baseMcpServerPlugin",
};

const drawThingsMcpPlugin: Plugin = {
  id: "lsb9xcaj7h",
  name: "Draw Things MCP",
  description:
    "An integration that allows Cursor AI to generate images through the Draw Things API using natural language prompts.",
  image: "https://github.com/jaokuohsuan.png",
  actions: [],
  githubUrl: "https://github.com/jaokuohsuan/draw-things-mcp-cursor",
  _varName: "drawThingsMcpPlugin",
};

const jenkinsServerMcpPlugin: Plugin = {
  id: "a7wprn7goz",
  name: "Jenkins Server MCP",
  description:
    "A Model Context Protocol server that enables AI assistants to interact with Jenkins CI/CD servers, providing tools to check build statuses, trigger builds, and retrieve build logs.",
  image: "https://github.com/hekmon8.png",
  actions: [
    {
      name: "get_build_status",
      description: "Get the status of a Jenkins build",
      parameters: [
        {
          name: "buildNumber",
          type: "string",
          description: 'Build number (use "lastBuild" for most recent)',
          required: false,
        },
        {
          name: "jobPath",
          type: "string",
          description: 'Path to the Jenkins job (e.g., "view/xxx_debug")',
          required: true,
        },
      ],
    },
    {
      name: "trigger_build",
      description: "Trigger a new Jenkins build",
      parameters: [
        {
          name: "jobPath",
          type: "string",
          description: "Path to the Jenkins job",
          required: true,
        },
        {
          name: "parameters",
          type: "object",
          description: "Build parameters (optional)",
          required: true,
        },
      ],
    },
    {
      name: "get_build_log",
      description: "Get the console output of a Jenkins build",
      parameters: [
        {
          name: "buildNumber",
          type: "string",
          description: 'Build number (use "lastBuild" for most recent)',
          required: true,
        },
        {
          name: "jobPath",
          type: "string",
          description: "Path to the Jenkins job",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hekmon8/Jenkins-server-mcp",
  _varName: "jenkinsServerMcpPlugin",
};

const arithmeticMcpServerPlugin: Plugin = {
  id: "w1jl91lkte",
  name: "Arithmetic MCP Server",
  description:
    "A server that provides tools for performing basic arithmetic operations (addition, subtraction, multiplication, division) via the Model Context Protocol.",
  image: "https://github.com/YuheiNakasaka.png",
  actions: [
    {
      name: "add",
      description: "Action for add",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Parameter: a",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Parameter: b",
          required: true,
        },
      ],
    },
    {
      name: "subtract",
      description: "Action for subtract",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Parameter: a",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Parameter: b",
          required: true,
        },
      ],
    },
    {
      name: "multiply",
      description: "Action for multiply",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Parameter: a",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Parameter: b",
          required: true,
        },
      ],
    },
    {
      name: "divide",
      description: "Action for divide",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Parameter: a",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Parameter: b",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/YuheiNakasaka/arithmetic-mcp-server",
  _varName: "arithmeticMcpServerPlugin",
};

const mcpServerForApacheOpendalPlugin: Plugin = {
  id: "pwpk8kdcom",
  name: "MCP Server for Apache OpenDAL™",
  description:
    "A Model Context Protocol server that provides seamless access to multiple storage services including S3, Azure Blob Storage, and Google Cloud Storage through Apache OpenDAL™.",
  image: "https://github.com/Xuanwo.png",
  actions: [
    {
      name: "list",
      description:
        "\n    List files in OpenDAL service\n\n    Args:\n        uri: resource URI, e.g. mys3://path/to/dir\n\n    Returns:\n        String containing directory content\n    ",
      parameters: [
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: true,
        },
      ],
    },
    {
      name: "read",
      description:
        "\n    Read file content from OpenDAL service\n\n    Args:\n        uri: resource URI, e.g. mys3://path/to/file\n\n    Returns:\n        File content or error information\n    ",
      parameters: [
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: true,
        },
      ],
    },
    {
      name: "get_info",
      description:
        "\n    Get metadata of file in OpenDAL service\n\n    Args:\n        uri: resource URI, e.g. mys3://path/to/file\n\n    Returns:\n        File metadata information\n    ",
      parameters: [
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Xuanwo/mcp-server-opendal",
  _varName: "mcpServerForApacheOpendalPlugin",
};

const salesforceMcpServerPlugin: Plugin = {
  id: "n1rsv1aiee",
  name: "Salesforce MCP Server",
  description:
    "An MCP server implementation that integrates Claude with Salesforce, enabling natural language interactions with Salesforce data and metadata for querying, modifying, and managing objects and records.",
  image: "https://github.com/SurajAdsul.png",
  actions: [
    {
      name: "salesforce_search_objects",
      description:
        "Search for Salesforce standard and custom objects by name pattern. Examples: 'Account' will find Account, AccountHistory; 'Order' will find WorkOrder, ServiceOrder__c etc.",
      parameters: [
        {
          name: "searchPattern",
          type: "string",
          description:
            "Search pattern to find objects (e.g., 'Account Coverage' will find objects like 'AccountCoverage__c')",
          required: true,
        },
      ],
    },
    {
      name: "salesforce_describe_object",
      description:
        "Get detailed schema metadata including all fields, relationships, and field properties of any Salesforce object. Examples: 'Account' shows all Account fields including custom fields; 'Case' shows all Case fields including relationships to Account, Contact etc.",
      parameters: [
        {
          name: "objectName",
          type: "string",
          description:
            "API name of the object (e.g., 'Account', 'Contact', 'Custom_Object__c')",
          required: true,
        },
      ],
    },
    {
      name: "salesforce_query_records",
      description:
        'Query records from any Salesforce object using SOQL, including relationship queries.\n\nExamples:\n1. Parent-to-child query (e.g., Account with Contacts):\n   - objectName: "Account"\n   - fields: ["Name", "(SELECT Id, FirstName, LastName FROM Contacts)"]\n\n2. Child-to-parent query (e.g., Contact with Account details):\n   - objectName: "Contact"\n   - fields: ["FirstName", "LastName", "Account.Name", "Account.Industry"]\n\n3. Multiple level query (e.g., Contact -> Account -> Owner):\n   - objectName: "Contact"\n   - fields: ["Name", "Account.Name", "Account.Owner.Name"]\n\n4. Related object filtering:\n   - objectName: "Contact"\n   - fields: ["Name", "Account.Name"]\n   - whereClause: "Account.Industry = \'Technology\'"\n\nNote: When using relationship fields:\n- Use dot notation for parent relationships (e.g., "Account.Name")\n- Use subqueries in parentheses for child relationships (e.g., "(SELECT Id FROM Contacts)")\n- Custom relationship fields end in "__r" (e.g., "CustomObject__r.Name")',
      parameters: [
        {
          name: "fields",
          type: "string array",
          description:
            "List of fields to retrieve, including relationship fields",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of records to return",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object to query",
          required: true,
        },
        {
          name: "orderBy",
          type: "string",
          description:
            "ORDER BY clause, can include fields from related objects",
          required: false,
        },
        {
          name: "whereClause",
          type: "string",
          description:
            "WHERE clause, can include conditions on related objects",
          required: false,
        },
      ],
    },
    {
      name: "salesforce_dml_records",
      description:
        "Perform data manipulation operations on Salesforce records:\n  - insert: Create new records\n  - update: Modify existing records (requires Id)\n  - delete: Remove records (requires Id)\n  - upsert: Insert or update based on external ID field\n  Examples: Insert new Accounts, Update Case status, Delete old records, Upsert based on custom external ID",
      parameters: [
        {
          name: "externalIdField",
          type: "string",
          description: "External ID field name for upsert operations",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Type of DML operation to perform",
          required: true,
        },
        {
          name: "records",
          type: "object array",
          description: "Array of records to process",
          required: true,
        },
      ],
    },
    {
      name: "salesforce_manage_object",
      description:
        "Create new custom objects or modify existing ones in Salesforce:\n  - Create: New custom objects with fields, relationships, and settings\n  - Update: Modify existing object settings, labels, sharing model\n  Examples: Create Customer_Feedback__c object, Update object sharing settings\n  Note: Changes affect metadata and require proper permissions",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the object",
          required: false,
        },
        {
          name: "label",
          type: "string",
          description: "Label for the object",
          required: false,
        },
        {
          name: "nameFieldFormat",
          type: "string",
          description: "Display format for AutoNumber field (e.g., 'A-{0000}')",
          required: false,
        },
        {
          name: "nameFieldLabel",
          type: "string",
          description: "Label for the name field",
          required: false,
        },
        {
          name: "nameFieldType",
          type: "string",
          description: "Type of the name field",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name for the object (without __c suffix)",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Whether to create new object or update existing",
          required: true,
        },
        {
          name: "pluralLabel",
          type: "string",
          description: "Plural label for the object",
          required: false,
        },
        {
          name: "sharingModel",
          type: "string",
          description: "Sharing model for the object",
          required: false,
        },
      ],
    },
    {
      name: "salesforce_manage_field",
      description:
        "Create new custom fields or modify existing fields on any Salesforce object:\n  - Field Types: Text, Number, Date, Lookup, Master-Detail, Picklist etc.\n  - Properties: Required, Unique, External ID, Length, Scale etc.\n  - Relationships: Create lookups and master-detail relationships\n  Examples: Add Rating__c picklist to Account, Create Account lookup on Custom Object\n  Note: Changes affect metadata and require proper permissions",
      parameters: [
        {
          name: "deleteConstraint",
          type: "string",
          description: "Delete constraint for Lookup fields",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the field",
          required: false,
        },
        {
          name: "externalId",
          type: "boolean",
          description: "Whether the field is an external ID",
          required: false,
        },
        {
          name: "fieldName",
          type: "string",
          description: "API name for the field (without __c suffix)",
          required: true,
        },
        {
          name: "label",
          type: "string",
          description: "Label for the field",
          required: false,
        },
        {
          name: "length",
          type: "number",
          description: "Length for text fields",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object to add/modify the field",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Whether to create new field or update existing",
          required: true,
        },
        {
          name: "picklistValues",
          type: "object array",
          description: "Values for Picklist/MultiselectPicklist fields",
          required: false,
        },
        {
          name: "precision",
          type: "number",
          description: "Precision for numeric fields",
          required: false,
        },
        {
          name: "referenceTo",
          type: "string",
          description:
            "API name of the object to reference (for Lookup/MasterDetail)",
          required: false,
        },
        {
          name: "relationshipLabel",
          type: "string",
          description: "Label for the relationship (for Lookup/MasterDetail)",
          required: false,
        },
        {
          name: "relationshipName",
          type: "string",
          description:
            "API name for the relationship (for Lookup/MasterDetail)",
          required: false,
        },
        {
          name: "required",
          type: "boolean",
          description: "Whether the field is required",
          required: false,
        },
        {
          name: "scale",
          type: "number",
          description: "Scale for numeric fields",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Field type (required for create)",
          required: false,
        },
        {
          name: "unique",
          type: "boolean",
          description: "Whether the field value must be unique",
          required: false,
        },
      ],
    },
    {
      name: "salesforce_search_all",
      description:
        'Search across multiple Salesforce objects using SOSL (Salesforce Object Search Language).\n  \nExamples:\n1. Basic search across all objects:\n   {\n     "searchTerm": "John",\n     "objects": [\n       { "name": "Account", "fields": ["Name"], "limit": 10 },\n       { "name": "Contact", "fields": ["FirstName", "LastName", "Email"] }\n     ]\n   }\n\n2. Advanced search with filters:\n   {\n     "searchTerm": "Cloud*",\n     "searchIn": "NAME FIELDS",\n     "objects": [\n       { \n         "name": "Account", \n         "fields": ["Name", "Industry"], \n         "orderBy": "Name DESC",\n         "where": "Industry = \'Technology\'"\n       }\n     ],\n     "withClauses": [\n       { "type": "NETWORK", "value": "ALL NETWORKS" },\n       { "type": "SNIPPET", "fields": ["Description"] }\n     ]\n   }\n\nNotes:\n- Use * and ? for wildcards in search terms\n- Each object can have its own WHERE, ORDER BY, and LIMIT clauses\n- Support for WITH clauses: DATA CATEGORY, DIVISION, METADATA, NETWORK, PRICEBOOKID, SNIPPET, SECURITY_ENFORCED\n- "updateable" and "viewable" options control record access filtering',
      parameters: [
        {
          name: "objects",
          type: "object array",
          description: "List of objects to search and their return fields",
          required: true,
        },
        {
          name: "searchIn",
          type: "string",
          description: "Which fields to search in",
          required: false,
        },
        {
          name: "searchTerm",
          type: "string",
          description: "Text to search for (supports wildcards * and ?)",
          required: true,
        },
        {
          name: "updateable",
          type: "boolean",
          description: "Return only updateable records",
          required: false,
        },
        {
          name: "viewable",
          type: "boolean",
          description: "Return only viewable records",
          required: false,
        },
        {
          name: "withClauses",
          type: "object array",
          description: "Additional WITH clauses for the search",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/SurajAdsul/mcp-server-salesforce",
  _varName: "salesforceMcpServerPlugin",
};

const bazelMcpServerPlugin: Plugin = {
  id: "2txkymljnb",
  name: "Bazel MCP Server",
  description:
    "A local MCP server that exposes Bazel build system functionality to AI agents, allowing them to build, test, query, and manage Bazel projects through natural language even in environments where Bazel can't be directly accessed.",
  image: "https://github.com/nacgarg.png",
  actions: [],
  githubUrl: "https://github.com/nacgarg/bazel-mcp-server",
  _varName: "bazelMcpServerPlugin",
};

const mathmcpPlugin: Plugin = {
  id: "exa5lt8dgd",
  name: "Math-MCP",
  description:
    "A Model Context Protocol server that provides basic mathematical and statistical functions to LLMs, enabling them to perform accurate numerical calculations through a simple API.",
  image: "https://github.com/EthanHenrickson.png",
  actions: [
    {
      name: "add",
      description: "Adds two numbers together",
      parameters: [
        {
          name: "firstNumber",
          type: "number",
          description: "The first addend",
          required: true,
        },
        {
          name: "secondNumber",
          type: "number",
          description: "The second addend",
          required: true,
        },
      ],
    },
    {
      name: "subtract",
      description: "Subtracts the second number from the first number",
      parameters: [
        {
          name: "minuend",
          type: "number",
          description: "The number to subtract from (minuend)",
          required: true,
        },
        {
          name: "subtrahend",
          type: "number",
          description: "The number being subtracted (subtrahend)",
          required: true,
        },
      ],
    },
    {
      name: "multiply",
      description: "Multiplies two numbers together",
      parameters: [
        {
          name: "firstFactor",
          type: "number",
          description: "The first factor",
          required: true,
        },
        {
          name: "secondFactor",
          type: "number",
          description: "The second factor",
          required: true,
        },
      ],
    },
    {
      name: "division",
      description: "Divides the first number by the second number",
      parameters: [
        {
          name: "denominator",
          type: "number",
          description: "The number to divide by (denominator)",
          required: true,
        },
        {
          name: "numerator",
          type: "number",
          description: "The number being divided (numerator)",
          required: true,
        },
      ],
    },
    {
      name: "sum",
      description: "Adds any number of numbers together",
      parameters: [
        {
          name: "numbers",
          type: "number array",
          description: "Array of numbers to sum",
          required: true,
        },
      ],
    },
    {
      name: "mean",
      description: "Calculates the arithmetic mean of a list of numbers",
      parameters: [
        {
          name: "numbers",
          type: "number array",
          description: "Array of numbers to find the mean of",
          required: true,
        },
      ],
    },
    {
      name: "median",
      description: "Calculates the median of a list of numbers",
      parameters: [
        {
          name: "numbers",
          type: "number array",
          description: "Array of numbers to find the median of",
          required: true,
        },
      ],
    },
    {
      name: "mode",
      description: "Finds the most common number in a list of numbers",
      parameters: [
        {
          name: "numbers",
          type: "number array",
          description: "Array of numbers to find the mode of",
          required: true,
        },
      ],
    },
    {
      name: "min",
      description: "Finds the minimum value from a list of numbers",
      parameters: [
        {
          name: "numbers",
          type: "number array",
          description: "Array of numbers to find the minimum of",
          required: true,
        },
      ],
    },
    {
      name: "max",
      description: "Finds the maximum value from a list of numbers",
      parameters: [
        {
          name: "numbers",
          type: "number array",
          description: "Array of numbers to find the maximum of",
          required: true,
        },
      ],
    },
    {
      name: "floor",
      description: "Rounds a number down to the nearest integer",
      parameters: [
        {
          name: "value",
          type: "number",
          description: "The number to round down",
          required: true,
        },
      ],
    },
    {
      name: "ceiling",
      description: "Rounds a number up to the nearest integer",
      parameters: [
        {
          name: "value",
          type: "number",
          description: "The number to round up",
          required: true,
        },
      ],
    },
    {
      name: "round",
      description: "Rounds a number to the nearest integer",
      parameters: [
        {
          name: "value",
          type: "number",
          description: "The number to round",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/EthanHenrickson/math-mcp",
  _varName: "mathmcpPlugin",
};

const mcpserverietfPlugin: Plugin = {
  id: "d2semq6372",
  name: "MCP-Server-IETF",
  description:
    "A Model Context Protocol server that enables Large Language Models to search and access IETF RFC documents with pagination support.",
  image: "https://github.com/tizee.png",
  actions: [],
  githubUrl: "https://github.com/tizee/mcp-server-ietf",
  _varName: "mcpserverietfPlugin",
};

const jsonCanvasMcpServerPlugin: Plugin = {
  id: "ajj64p9c3i",
  name: "JSON Canvas MCP Server",
  description:
    "A Model Context Protocol server that enables creating, modifying, and validating infinite canvas data structures according to the JSON Canvas 1.0 specification.",
  image: "https://github.com/Cam10001110101.png",
  actions: [],
  githubUrl: "https://github.com/Cam10001110101/mcp-server-obsidian-jsoncanvas",
  _varName: "jsonCanvasMcpServerPlugin",
};

const mcpImageRecognitionServerPlugin: Plugin = {
  id: "lit789bgem",
  name: "MCP Image Recognition Server",
  description:
    "Provides image recognition capabilities using Anthropic Claude Vision and OpenAI GPT-4 Vision APIs, supporting multiple image formats and offering optional text extraction via Tesseract OCR.",
  image: "https://github.com/mario-andreschak.png",
  actions: [],
  githubUrl: "https://github.com/mario-andreschak/mcp-image-recognition",
  _varName: "mcpImageRecognitionServerPlugin",
};

const twitterMcpServer1Plugin: Plugin = {
  id: "dhsudtc7cd",
  name: "Twitter MCP Server",
  description:
    "An MCP server that enables Claude to interact with Twitter, allowing for posting tweets and searching Twitter content.",
  image: "https://github.com/EnesCinr.png",
  actions: [
    {
      name: "post_tweet",
      description: "Post a new tweet to Twitter",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The content of your tweet",
          required: true,
        },
      ],
    },
    {
      name: "search_tweets",
      description: "Search for tweets on Twitter",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of tweets to return (10-100)",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/EnesCinr/twitter-mcp",
  _varName: "twitterMcpServer1Plugin",
};

const opendotaMcpServerPlugin: Plugin = {
  id: "z2wqzyrl5u",
  name: "OpenDota MCP Server",
  description:
    "Model Context Protocol server that enables LLMs and AI assistants to retrieve real-time Dota 2 statistics, match data, player information, and game metrics through a standardized interface.",
  image: "https://github.com/asusevski.png",
  actions: [],
  githubUrl: "https://github.com/asusevski/opendota-mcp-server",
  _varName: "opendotaMcpServerPlugin",
};

const shannonThinkingMcpServerPlugin: Plugin = {
  id: "iffffhwqqw",
  name: "Shannon Thinking MCP Server",
  description:
    "A tool that implements Claude Shannon's problem-solving methodology to help break down complex problems into structured steps including problem definition, constraints, modeling, validation, and implementation.",
  image: "https://github.com/olaservo.png",
  actions: [
    {
      name: "shannonthinking",
      description:
        "A problem-solving tool inspired by Claude Shannon's systematic and iterative approach to complex problems.\n\nThis tool helps break down problems using Shannon's methodology of problem definition, mathematical modeling, validation, and practical implementation.\n\nWhen to use this tool:\n- Complex system analysis\n- Information processing problems\n- Engineering design challenges\n- Problems requiring theoretical frameworks\n- Optimization problems\n- Systems requiring practical implementation\n- Problems that need iterative refinement\n- Cases where experimental validation complements theory\n\nKey features:\n- Systematic progression through problem definition → constraints → modeling → validation → implementation\n- Support for revising earlier steps as understanding evolves\n- Ability to mark steps for re-examination with new information\n- Experimental validation alongside formal proofs\n- Explicit tracking of assumptions and dependencies\n- Confidence levels for each step\n- Rich feedback and validation results\n\nParameters explained:\n- thoughtType: Type of thinking step (PROBLEM_DEFINITION, CONSTRAINTS, MODEL, PROOF, IMPLEMENTATION)\n- uncertainty: Confidence level in the current thought (0-1)\n- dependencies: Which previous thoughts this builds upon\n- assumptions: Explicit listing of assumptions made\n- isRevision: Whether this revises an earlier thought\n- revisesThought: Which thought is being revised\n- recheckStep: For marking steps that need re-examination\n- proofElements: For formal validation steps\n- experimentalElements: For empirical validation\n- implementationNotes: For practical application steps\n\nThe tool supports an iterative approach:\n1. Define the problem's fundamental elements (revisable as understanding grows)\n2. Identify system constraints and limitations (can be rechecked with new information)\n3. Develop mathematical/theoretical models\n4. Validate through proofs and/or experimental testing\n5. Design and test practical implementations\n\nEach thought can build on, revise, or re-examine previous steps, creating a flexible yet rigorous problem-solving framework.",
      parameters: [
        {
          name: "assumptions",
          type: "string array",
          description: "Explicit list of assumptions",
          required: true,
        },
        {
          name: "dependencies",
          type: "integer array",
          description: "Thought numbers this builds upon",
          required: true,
        },
        {
          name: "experimentalElements",
          type: "object",
          description: "Elements for experimental validation",
          required: false,
        },
        {
          name: "implementationNotes",
          type: "object",
          description: "Notes for practical implementation steps",
          required: false,
        },
        {
          name: "isRevision",
          type: "boolean",
          description: "Whether this thought revises an earlier one",
          required: false,
        },
        {
          name: "nextThoughtNeeded",
          type: "boolean",
          description: "Whether another thought step is needed",
          required: true,
        },
        {
          name: "proofElements",
          type: "object",
          description: "Elements required for formal proof steps",
          required: false,
        },
        {
          name: "recheckStep",
          type: "object",
          description: "For marking steps that need re-examination",
          required: false,
        },
        {
          name: "revisesThought",
          type: "integer",
          description: "The thought number being revised",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Your current thinking step",
          required: true,
        },
        {
          name: "thoughtNumber",
          type: "integer",
          description: "Current thought number",
          required: true,
        },
        {
          name: "thoughtType",
          type: "string",
          description: "Type of thinking step",
          required: true,
        },
        {
          name: "totalThoughts",
          type: "integer",
          description: "Estimated total thoughts needed",
          required: true,
        },
        {
          name: "uncertainty",
          type: "number",
          description: "Confidence level (0-1)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/olaservo/shannon-thinking",
  _varName: "shannonThinkingMcpServerPlugin",
};

const pythonReplMcpServerPlugin: Plugin = {
  id: "jsorljnhdl",
  name: "Python REPL MCP Server",
  description:
    "A server that provides a persistent Python REPL environment through the MCP protocol, allowing execution of Python code, variable management, and package installation.",
  image: "https://github.com/hdresearch.png",
  actions: [
    {
      name: "execute_python",
      description:
        "Execute Python code and return the output. Variables persist between executions.",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Python code to execute",
          required: true,
        },
        {
          name: "reset",
          type: "boolean",
          description: "Reset the Python session (clear all variables)",
          required: false,
        },
      ],
    },
    {
      name: "list_variables",
      description: "List all variables in the current session",
      parameters: [],
    },
    {
      name: "install_package",
      description: "Install a Python package using uv",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Package name to install (e.g., 'pandas')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hdresearch/mcp-python",
  _varName: "pythonReplMcpServerPlugin",
};

const angleOneMcpServerPlugin: Plugin = {
  id: "qzx683m631",
  name: "Angle One MCP Server",
  description:
    "An MCP server implementation that integrates with Angle One APIs to provide standardized access to financial market data, trading operations, and portfolio management.",
  image: "https://github.com/baba786.png",
  actions: [],
  githubUrl: "https://github.com/baba786/angleone-mcp-server",
  _varName: "angleOneMcpServerPlugin",
};

const smartsheetMcpServerPlugin: Plugin = {
  id: "k6qv4zylx2",
  name: "Smartsheet MCP Server",
  description:
    "Provides seamless integration with Smartsheet, enabling automated operations on Smartsheet documents through a standardized interface that bridges AI-powered automation tools with Smartsheet's collaboration platform.",
  image: "https://github.com/terilios.png",
  actions: [
    {
      name: "smartsheet_add_column",
      description: "Add a new column to a Smartsheet",
      parameters: [
        {
          name: "formula",
          type: "string",
          description: "Formula for calculated columns",
          required: false,
        },
        {
          name: "index",
          type: "number",
          description: "Optional position index",
          required: false,
        },
        {
          name: "options",
          type: "string array",
          description: "Options for PICKLIST type",
          required: false,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Column title",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Column type",
          required: true,
        },
        {
          name: "validation",
          type: "boolean",
          description: "Enable validation",
          required: false,
        },
      ],
    },
    {
      name: "smartsheet_delete_column",
      description: "Delete a column from a Smartsheet",
      parameters: [
        {
          name: "column_id",
          type: "string",
          description: "Column ID to delete",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
        {
          name: "validate_dependencies",
          type: "boolean",
          description: "Check for formula/dependency impacts",
          required: false,
        },
      ],
    },
    {
      name: "smartsheet_rename_column",
      description: "Rename a column in a Smartsheet",
      parameters: [
        {
          name: "column_id",
          type: "string",
          description: "Column ID to rename",
          required: true,
        },
        {
          name: "new_title",
          type: "string",
          description: "New column title",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
        {
          name: "update_references",
          type: "boolean",
          description: "Update formulas referencing this column",
          required: false,
        },
      ],
    },
    {
      name: "get_column_map",
      description: "Get column mapping and sample data from a Smartsheet",
      parameters: [
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
    {
      name: "smartsheet_write",
      description: "Write data to a Smartsheet",
      parameters: [
        {
          name: "column_map",
          type: "object",
          description: "Object mapping data fields to Smartsheet column IDs",
          required: true,
        },
        {
          name: "row_data",
          type: "object array",
          description: "Array of objects containing the data to write",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
    {
      name: "smartsheet_update",
      description: "Update existing rows in a Smartsheet",
      parameters: [
        {
          name: "column_map",
          type: "object",
          description: "Object mapping data fields to Smartsheet column IDs",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
        {
          name: "updates",
          type: "object array",
          description: "Array of updates containing row_id and data",
          required: true,
        },
      ],
    },
    {
      name: "smartsheet_delete",
      description: "Delete rows from a Smartsheet",
      parameters: [
        {
          name: "row_ids",
          type: "string array",
          description: "Array of row IDs to delete",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
    {
      name: "smartsheet_search",
      description: "Search for content in a Smartsheet",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Search options",
          required: false,
        },
        {
          name: "pattern",
          type: "string",
          description: "Search pattern (text or regex)",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
    {
      name: "start_batch_analysis",
      description: "Start a batch analysis job using Azure OpenAI",
      parameters: [
        {
          name: "customGoal",
          type: "string",
          description: "Custom analysis goal for custom analysis type",
          required: false,
        },
        {
          name: "rowIds",
          type: "string array",
          description: "Rows to process",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
        {
          name: "sourceColumns",
          type: "string array",
          description: "Columns to analyze",
          required: true,
        },
        {
          name: "targetColumn",
          type: "string",
          description: "Column to store results",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Analysis type",
          required: true,
        },
      ],
    },
    {
      name: "cancel_batch_analysis",
      description: "Cancel a running batch analysis job",
      parameters: [
        {
          name: "jobId",
          type: "string",
          description: "Job to cancel",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
    {
      name: "get_job_status",
      description: "Get the status of a batch analysis job",
      parameters: [
        {
          name: "jobId",
          type: "string",
          description: "Job to check status for",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
    {
      name: "smartsheet_bulk_update",
      description: "Perform conditional bulk updates on a Smartsheet",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Update options",
          required: false,
        },
        {
          name: "rules",
          type: "object array",
          description: "List of update rules",
          required: true,
        },
        {
          name: "sheet_id",
          type: "string",
          description: "Smartsheet sheet ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/terilios/smartsheet-server",
  _varName: "smartsheetMcpServerPlugin",
};

const clickhouseMcpServerPlugin: Plugin = {
  id: "bdw529ct5w",
  name: "ClickHouse MCP Server",
  description:
    "A Model Context Protocol server that enables Large Language Models to seamlessly interact with ClickHouse databases, supporting resource listing, schema retrieval, and query execution.",
  image: "https://github.com/ThomAub.png",
  actions: [],
  githubUrl: "https://github.com/ThomAub/clickhouse_mcp_server",
  _varName: "clickhouseMcpServerPlugin",
};

const gitMcpServerPlugin: Plugin = {
  id: "e0hyslgby6",
  name: "Git MCP Server",
  description:
    "A Model Context Protocol server that enables Large Language Models to interact with Git repositories through a robust API, supporting operations like repository initialization, cloning, file staging, committing, and branch management.",
  image: "https://github.com/cyanheads.png",
  actions: [
    {
      name: "init",
      description: "Initialize a new Git repository",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to initialize the repository in. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "clone",
      description: "Clone a repository",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to clone into. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the repository to clone",
          required: true,
        },
      ],
    },
    {
      name: "status",
      description: "Get repository status",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "add",
      description: "Stage files",
      parameters: [
        {
          name: "files",
          type: "string array",
          description: "Files to stage",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "commit",
      description: "Create a commit",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "push",
      description: "Push commits to remote",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "force",
          type: "boolean",
          description: "Force push changes",
          required: false,
        },
        {
          name: "noVerify",
          type: "boolean",
          description: "Skip pre-push hooks",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "remote",
          type: "string",
          description: "Remote name",
          required: false,
        },
        {
          name: "tags",
          type: "boolean",
          description: "Push all tags",
          required: false,
        },
      ],
    },
    {
      name: "pull",
      description: "Pull changes from remote",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "remote",
          type: "string",
          description: "Remote name",
          required: false,
        },
      ],
    },
    {
      name: "branch_list",
      description: "List all branches",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "branch_create",
      description: "Create a new branch",
      parameters: [
        {
          name: "force",
          type: "boolean",
          description: "Force create branch even if it exists",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "setUpstream",
          type: "boolean",
          description: "Set upstream for push/pull",
          required: false,
        },
        {
          name: "track",
          type: "boolean",
          description: "Set up tracking mode",
          required: false,
        },
      ],
    },
    {
      name: "branch_delete",
      description: "Delete a branch",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "checkout",
      description: "Switch branches or restore working tree files",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "target",
          type: "string",
          description: "Branch name, commit hash, or file path",
          required: true,
        },
      ],
    },
    {
      name: "tag_list",
      description: "List tags",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "tag_create",
      description: "Create a tag",
      parameters: [
        {
          name: "annotated",
          type: "boolean",
          description: "Create an annotated tag",
          required: false,
        },
        {
          name: "force",
          type: "boolean",
          description: "Force create tag even if it exists",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Tag message",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Tag name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "sign",
          type: "boolean",
          description: "Create a signed tag",
          required: false,
        },
      ],
    },
    {
      name: "tag_delete",
      description: "Delete a tag",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Tag name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "remote_list",
      description: "List remotes",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "remote_add",
      description: "Add a remote",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Remote name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Remote URL",
          required: true,
        },
      ],
    },
    {
      name: "remote_remove",
      description: "Remove a remote",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Remote name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "stash_list",
      description: "List stashes",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "stash_save",
      description: "Save changes to stash",
      parameters: [
        {
          name: "all",
          type: "boolean",
          description: "Include ignored files",
          required: false,
        },
        {
          name: "includeUntracked",
          type: "boolean",
          description: "Include untracked files",
          required: false,
        },
        {
          name: "keepIndex",
          type: "boolean",
          description: "Keep staged changes",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Stash message",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "stash_pop",
      description: "Apply and remove a stash",
      parameters: [
        {
          name: "index",
          type: "number",
          description: "Stash index",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "bulk_action",
      description:
        "Execute multiple Git operations in sequence. This is the preferred way to execute multiple operations.",
      parameters: [
        {
          name: "actions",
          type: "object array",
          description: "Array of Git operations to execute in sequence",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cyanheads/git-mcp-server",
  _varName: "gitMcpServerPlugin",
};

const mcpPersonalAssistantAgentPlugin: Plugin = {
  id: "sjtdv0xex1",
  name: "MCP Personal Assistant Agent",
  description:
    "A versatile Model Context Protocol server that enables AI assistants to manage calendars, track tasks, handle emails, search the web, and control smart home devices.",
  image: "https://github.com/zhangzhongnan928.png",
  actions: [],
  githubUrl: "https://github.com/zhangzhongnan928/mcp-pa-ai-agent",
  _varName: "mcpPersonalAssistantAgentPlugin",
};

const githubSupportAssistantPlugin: Plugin = {
  id: "gbg2t9ny3w",
  name: "GitHub Support Assistant",
  description:
    "Helps support engineers find similar GitHub issues to speed up troubleshooting by searching repositories and calculating similarity scores based on issue descriptions.",
  image: "https://github.com/Jake-Mok-Nelson.png",
  actions: [
    {
      name: "find-similar-issues",
      description: "Find GitHub issues similar to a new issue description",
      parameters: [
        {
          name: "issueDescription",
          type: "string",
          description: "Description of the issue to find similar ones for",
          required: true,
        },
        {
          name: "maxResults",
          type: "integer",
          description: "Maximum number of similar issues to return",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "GitHub repository owner/organization",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "GitHub repository name",
          required: true,
        },
      ],
    },
  ],
  githubUrl:
    "https://github.com/Jake-Mok-Nelson/mcp-find-similar-github-issues",
  _varName: "githubSupportAssistantPlugin",
};

const sanityMcpServerPlugin: Plugin = {
  id: "r586ovnwc0",
  name: "Sanity MCP Server",
  description:
    "An MCP server that enables Claude Desktop to interact with Sanity.io content, providing tools to create, edit, list documents and get schema templates.",
  image: "https://github.com/jlmelis.png",
  actions: [],
  githubUrl: "https://github.com/jlmelis/sanity-mcp-server",
  _varName: "sanityMcpServerPlugin",
};

const supabaseMcpServerPlugin: Plugin = {
  id: "wjmmfri9rj",
  name: "Supabase MCP Server",
  description:
    "Enables querying Supabase databases and generating TypeScript types through the Model Context Protocol interface, supporting features like schema selection, column filtering, and pagination.",
  image: "https://github.com/NightTrek.png",
  actions: [
    {
      name: "query_table",
      description:
        "Query a specific table with schema selection and where clause support",
      parameters: [
        {
          name: "schema",
          type: "string",
          description: "Database schema (optional, defaults to public)",
          required: false,
        },
        {
          name: "select",
          type: "string",
          description:
            "Comma-separated list of columns to select (optional, defaults to *)",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Name of the table to query",
          required: true,
        },
        {
          name: "where",
          type: "object array",
          description: "Array of where conditions (optional)",
          required: false,
        },
      ],
    },
    {
      name: "generate_types",
      description:
        "Generate TypeScript types for your Supabase database schema",
      parameters: [
        {
          name: "schema",
          type: "string",
          description: "Database schema (optional, defaults to public)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/NightTrek/Supabase-MCP",
  _varName: "supabaseMcpServerPlugin",
};

const fastmcpTodoServerPlugin: Plugin = {
  id: "sddp91oszb",
  name: "FastMCP Todo Server",
  description:
    "A todo management server that receives requests via FastMCP and stores them in MongoDB for processing by the Swarmonomicon todo worker.",
  image: "https://github.com/DanEdens.png",
  actions: [],
  githubUrl: "https://github.com/DanEdens/fastmcp-todo-server",
  _varName: "fastmcpTodoServerPlugin",
};

const kagiMcpServerPlugin: Plugin = {
  id: "xabrrs4bka",
  name: "Kagi MCP Server",
  description:
    "An MCP server that integrates Kagi search capabilities with Claude AI, enabling Claude to perform real-time web searches when answering questions that require up-to-date information.",
  image: "https://github.com/kagisearch.png",
  actions: [
    {
      name: "search",
      description:
        "Perform web search based on one or more queries. Results are from all queries given. They are numbered continuously, so that a user may be able to refer to a result by a specific number.",
      parameters: [
        {
          name: "queries",
          type: "string array",
          description:
            "One or more concise, keyword-focused search queries. Include essential context within each query for standalone use.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kagisearch/kagimcp",
  _varName: "kagiMcpServerPlugin",
};

const authenticatedMcpSseServerPlugin: Plugin = {
  id: "vpk7fxri26",
  name: "Authenticated MCP SSE Server",
  description:
    "A secure MCP (Model Context Protocol) server hosted on Google Cloud Run that enables team collaboration by providing authenticated access via Google Cloud IAM, allowing teams to share custom MCP servers over the internet before official MCP authentication is implemented.",
  image: "https://github.com/the-freetech-company.png",
  actions: [],
  githubUrl:
    "https://github.com/the-freetech-company/mcp-sse-authenticated-cloud-run",
  _varName: "authenticatedMcpSseServerPlugin",
};

const cargoDocMcpServerPlugin: Plugin = {
  id: "l4augy7aft",
  name: "Cargo Doc MCP Server",
  description:
    "A server for managing Rust documentation that enables users to check, build, and search Rust documentation locally through cargo doc commands.",
  image: "https://github.com/spacemeowx2.png",
  actions: [
    {
      name: "get_crate_doc",
      description:
        "Get crate's main documentation page. Useful for unresolved imports (e.g. use get_crate_doc when seeing 'unresolved import tokio::sync') or understanding crate features.",
      parameters: [
        {
          name: "crate_name",
          type: "string",
          description: "Name of the crate to get documentation for",
          required: true,
        },
        {
          name: "project_path",
          type: "string",
          description: "Path to the Rust project (must be absolute path)",
          required: true,
        },
      ],
    },
    {
      name: "list_symbols",
      description:
        "List all symbols in a crate. Use when implementing traits or exploring available types. Shows structs, enums, traits with their paths.",
      parameters: [
        {
          name: "crate_name",
          type: "string",
          description: "Name of the crate to list symbols for",
          required: true,
        },
        {
          name: "project_path",
          type: "string",
          description: "Path to the Rust project (must be absolute path)",
          required: true,
        },
      ],
    },
    {
      name: "search_doc",
      description:
        "Search crate docs for specific features, error messages, or usage examples. Helps debug compilation issues or learn new APIs.",
      parameters: [
        {
          name: "crate_name",
          type: "string",
          description: "Name of the crate to search in",
          required: true,
        },
        {
          name: "project_path",
          type: "string",
          description: "Path to the Rust project (must be absolute path)",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (keyword or symbol)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spacemeowx2/cargo-doc-mcp",
  _varName: "cargoDocMcpServerPlugin",
};

const speechMcpPlugin: Plugin = {
  id: "yzai8tyjnf",
  name: "Speech MCP",
  description:
    "A Goose MCP extension providing voice interaction with modern audio visualization, allowing users to communicate with Goose through speech rather than text.",
  image: "https://github.com/Kvadratni.png",
  actions: [],
  githubUrl: "https://github.com/Kvadratni/speech-mcp",
  _varName: "speechMcpPlugin",
};

const dexscreenerMcpServerPlugin: Plugin = {
  id: "n95y17chkh",
  name: "DexScreener MCP Server",
  description:
    "An MCP server implementation that enables access to DexScreener API data, providing real-time information on DEX pairs, token profiles, and market statistics across multiple blockchains.",
  image: "https://github.com/openSVM.png",
  actions: [
    {
      name: "get_latest_token_profiles",
      description: "Get the latest token profiles",
      parameters: [],
    },
    {
      name: "get_latest_boosted_tokens",
      description: "Get the latest boosted tokens",
      parameters: [],
    },
    {
      name: "get_top_boosted_tokens",
      description: "Get tokens with most active boosts",
      parameters: [],
    },
    {
      name: "get_token_orders",
      description: "Check orders paid for a specific token",
      parameters: [
        {
          name: "chainId",
          type: "string",
          description: 'Chain ID (e.g., "solana")',
          required: true,
        },
        {
          name: "tokenAddress",
          type: "string",
          description: "Token address",
          required: true,
        },
      ],
    },
    {
      name: "get_pairs_by_chain_and_address",
      description: "Get one or multiple pairs by chain and pair address",
      parameters: [
        {
          name: "chainId",
          type: "string",
          description: 'Chain ID (e.g., "solana")',
          required: true,
        },
        {
          name: "pairId",
          type: "string",
          description: "Pair address",
          required: true,
        },
      ],
    },
    {
      name: "get_pairs_by_token_addresses",
      description: "Get one or multiple pairs by token address (max 30)",
      parameters: [
        {
          name: "tokenAddresses",
          type: "string",
          description: "Comma-separated token addresses",
          required: true,
        },
      ],
    },
    {
      name: "search_pairs",
      description: "Search for pairs matching query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/openSVM/dexscreener-mcp-server",
  _varName: "dexscreenerMcpServerPlugin",
};

const optionsflowMcpServerPlugin: Plugin = {
  id: "44ghykdvta",
  name: "OptionsFlow MCP Server",
  description:
    "A Model Context Protocol server that enables LLMs to analyze options chains, calculate Greeks, and evaluate basic options strategies through Yahoo Finance data.",
  image: "https://github.com/twolven.png",
  actions: [],
  githubUrl: "https://github.com/twolven/mcp-optionsflow",
  _varName: "optionsflowMcpServerPlugin",
};

const alpacaMcpServerPlugin: Plugin = {
  id: "x24m37r31n",
  name: "Alpaca MCP Server",
  description:
    "A Model Context Protocol server enabling LLMs like Claude to interact with the Alpaca trading API through natural language for stock trading, checking positions, fetching market data, and managing your account.",
  image: "https://github.com/tedlikeskix.png",
  actions: [],
  githubUrl: "https://github.com/tedlikeskix/alpaca-mcp-server",
  _varName: "alpacaMcpServerPlugin",
};

const stravaMcpServerPlugin: Plugin = {
  id: "sm3o76u1xq",
  name: "Strava MCP Server",
  description:
    "A Model Context Protocol server that enables language models to interact with Strava data, including activities, athlete statistics, routes, achievements, and social features.",
  image: "https://github.com/ctvidic.png",
  actions: [],
  githubUrl: "https://github.com/ctvidic/strava-mcp-server",
  _varName: "stravaMcpServerPlugin",
};

const openapiMcpServerPlugin: Plugin = {
  id: "org9aj8cva",
  name: "OpenAPI MCP Server",
  description:
    "A server that enables Large Language Models to discover and interact with REST APIs defined by OpenAPI specifications through the Model Context Protocol.",
  image: "https://github.com/ivo-toby.png",
  actions: [],
  githubUrl: "https://github.com/ivo-toby/mcp-openapi-server",
  _varName: "openapiMcpServerPlugin",
};

const twitterMcpServer2Plugin: Plugin = {
  id: "qep2xkblkw",
  name: "Twitter MCP Server",
  description:
    "Provides AI agents with comprehensive Twitter functionality through the Model Context Protocol standard, enabling reading tweets, posting content, managing interactions, and accessing timeline data with robust error handling.",
  image: "https://github.com/TaazKareem.png",
  actions: [],
  githubUrl: "https://github.com/TaazKareem/twitter-mcp-server",
  _varName: "twitterMcpServer2Plugin",
};

const gitMcpPlugin: Plugin = {
  id: "s9v9iezy1u",
  name: "Git MCP",
  description:
    "MCP server for managing Git operations on local repositories, allowing users to list repositories, get and create tags, list commits, push tags, and refresh repositories through a standardized interface.",
  image: "https://github.com/kjozsa.png",
  actions: [
    {
      name: "get_last_git_tag",
      description:
        "Find the last git tag in the repository\n\n    Args:\n        repo_name: Name of the git repository\n\n    Returns:\n        Dictionary containing tag version and date\n    ",
      parameters: [
        {
          name: "repo_name",
          type: "string",
          description: "Parameter: repo_name",
          required: true,
        },
      ],
    },
    {
      name: "list_commits_since_last_tag",
      description:
        "List commit messages since main HEAD and the last git tag\n\n    Args:\n        repo_name: Name of the git repository\n        max_count: Maximum number of commits to return\n\n    Returns:\n        List of dictionaries containing commit hash, author, date, and message\n    ",
      parameters: [
        {
          name: "max_count",
          type: "string",
          description: "Parameter: max_count",
          required: false,
        },
        {
          name: "repo_name",
          type: "string",
          description: "Parameter: repo_name",
          required: true,
        },
      ],
    },
    {
      name: "list_repositories",
      description:
        "List all git repositories in the configured path\n\n    Returns:\n        List of repository names\n    ",
      parameters: [],
    },
    {
      name: "create_git_tag",
      description:
        "Create a new git tag in the repository\n\n    Args:\n        repo_name: Name of the git repository\n        tag_name: Name of the tag to create\n        message: Optional message for annotated tag\n\n    Returns:\n        Dictionary containing status and tag information\n    ",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: false,
        },
        {
          name: "repo_name",
          type: "string",
          description: "Parameter: repo_name",
          required: true,
        },
        {
          name: "tag_name",
          type: "string",
          description: "Parameter: tag_name",
          required: true,
        },
      ],
    },
    {
      name: "push_git_tag",
      description:
        "Push a git tag to the default remote\n\n    Args:\n        repo_name: Name of the git repository\n        tag_name: Name of the tag to push\n\n    Returns:\n        Dictionary containing status and information about the operation\n    ",
      parameters: [
        {
          name: "repo_name",
          type: "string",
          description: "Parameter: repo_name",
          required: true,
        },
        {
          name: "tag_name",
          type: "string",
          description: "Parameter: tag_name",
          required: true,
        },
      ],
    },
    {
      name: "refresh_repository",
      description:
        "Refresh repository by checking out main branch and pulling all remotes\n\n    Args:\n        repo_name: Name of the git repository\n\n    Returns:\n        Dictionary containing status and information about the operation\n    ",
      parameters: [
        {
          name: "repo_name",
          type: "string",
          description: "Parameter: repo_name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kjozsa/git-mcp",
  _varName: "gitMcpPlugin",
};

const warpcastMcpServerPlugin: Plugin = {
  id: "ulfvjoztgp",
  name: "Warpcast MCP Server",
  description:
    "A Model Context Protocol server that allows Claude to interact with Warpcast accounts, enabling actions like posting casts, reading content, searching by keywords, and managing channel interactions through natural language.",
  image: "https://github.com/zhangzhongnan928.png",
  actions: [],
  githubUrl: "https://github.com/zhangzhongnan928/mcp-warpcast-server",
  _varName: "warpcastMcpServerPlugin",
};

const laravelHelpersMcpPlugin: Plugin = {
  id: "zl9icupkxl",
  name: "Laravel Helpers MCP",
  description:
    "A collection of Laravel helper tools for integration with Cursor IDE, providing features like log viewing, error searching, artisan command execution, and model information display directly within the editor.",
  image: "https://github.com/jsonallen.png",
  actions: [],
  githubUrl: "https://github.com/jsonallen/laravel-mcp",
  _varName: "laravelHelpersMcpPlugin",
};

const nefinoMcpServerPlugin: Plugin = {
  id: "1fk926gyts",
  name: "Nefino MCP Server",
  description:
    "Provides large language models with access to news and information about renewable energy projects in Germany, allowing filtering by location, topic (solar, wind, hydrogen), and date range.",
  image: "https://github.com/nefino.png",
  actions: [
    {
      name: "StartNewsRetrieval",
      description: "Start an asynchronous news retrieval task for a place",
      parameters: [
        {
          name: "date_range_begin",
          type: "string",
          description:
            "Start date in YYYY-MM-DD format (when range_or_recency=RANGE)",
          required: false,
        },
        {
          name: "date_range_end",
          type: "string",
          description:
            "End date in YYYY-MM-DD format (when range_or_recency=RANGE)",
          required: false,
        },
        {
          name: "last_n_days",
          type: "string",
          description:
            "Number of days to search for (when range_or_recency=RECENCY)",
          required: false,
        },
        {
          name: "news_topics",
          type: "string",
          description: "List of topics to filter by",
          required: false,
        },
        {
          name: "place_id",
          type: "string",
          description: "The id of the place",
          required: true,
        },
        {
          name: "place_type",
          type: "string",
          description: "The type of the place (PR, CTY, AU, LAU)",
          required: true,
        },
        {
          name: "range_or_recency",
          type: "string",
          description: "Type of search (RANGE or RECENCY)",
          required: false,
        },
      ],
    },
    {
      name: "GetNewsResults",
      description:
        "Get the results of a previously started news retrieval task",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "The task ID returned by StartNewsRetrieval",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nefino/mcp-nefino",
  _varName: "nefinoMcpServerPlugin",
};

const googleSearchConsoleMcpServerPlugin: Plugin = {
  id: "vda65quchp",
  name: "Google Search Console MCP Server",
  description:
    "A server that provides access to Google Search Console data through the Model Context Protocol, allowing users to retrieve and analyze search analytics data with customizable dimensions and reporting periods.",
  image: "https://github.com/ahonn.png",
  actions: [
    {
      name: "list_sites",
      description: "List all sites in Google Search Console",
      parameters: [],
    },
    {
      name: "search_analytics",
      description: "Get search performance data from Google Search Console",
      parameters: [
        {
          name: "aggregationType",
          type: "string",
          description:
            "Type of aggregation, such as auto, byNewsShowcasePanel, byProperty, byPage",
          required: false,
        },
        {
          name: "dimensions",
          type: "string",
          description:
            "Comma-separated list of dimensions to break down results by, such as query, page, country, device, searchAppearance",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description: "End date in YYYY-MM-DD format",
          required: true,
        },
        {
          name: "rowLimit",
          type: "number",
          description: "Maximum number of rows to return",
          required: false,
        },
        {
          name: "siteUrl",
          type: "string",
          description:
            "The site URL as defined in Search Console. Example: sc-domain:example.com (for domain resources) or http://www.example.com/ (for site prefix resources)",
          required: true,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date in YYYY-MM-DD format",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of search to filter by, such as web, image, video, news",
          required: false,
        },
      ],
    },
    {
      name: "index_inspect",
      description: "Inspect a URL to see if it is indexed or can be indexed",
      parameters: [
        {
          name: "inspectionUrl",
          type: "string",
          description:
            'The fully-qualified URL to inspect. Must be under the property specified in "siteUrl"',
          required: true,
        },
        {
          name: "languageCode",
          type: "string",
          description:
            'An IETF BCP-47 language code representing the language of the requested translated issue messages, such as "en-US" or "de-CH". Default is "en-US"',
          required: false,
        },
        {
          name: "siteUrl",
          type: "string",
          description:
            "The site URL as defined in Search Console. Example: sc-domain:example.com (for domain resources) or http://www.example.com/ (for site prefix resources)",
          required: true,
        },
      ],
    },
    {
      name: "list_sitemaps",
      description: "List sitemaps for a site in Google Search Console",
      parameters: [
        {
          name: "siteUrl",
          type: "string",
          description:
            "The site's URL, including protocol. For example: http://www.example.com/",
          required: false,
        },
        {
          name: "sitemapIndex",
          type: "string",
          description:
            "A URL of a site's sitemap index. For example: http://www.example.com/sitemapindex.xml",
          required: false,
        },
      ],
    },
    {
      name: "get_sitemap",
      description: "Get a sitemap for a site in Google Search Console",
      parameters: [
        {
          name: "feedpath",
          type: "string",
          description:
            "The URL of the actual sitemap. For example: http://www.example.com/sitemap.xml",
          required: false,
        },
        {
          name: "siteUrl",
          type: "string",
          description:
            "The site's URL, including protocol. For example: http://www.example.com/",
          required: false,
        },
      ],
    },
    {
      name: "submit_sitemap",
      description: "Submit a sitemap for a site in Google Search Console",
      parameters: [
        {
          name: "feedpath",
          type: "string",
          description:
            "The URL of the sitemap to add. For example: http://www.example.com/sitemap.xml",
          required: true,
        },
        {
          name: "siteUrl",
          type: "string",
          description:
            "The site's URL, including protocol. For example: http://www.example.com/",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ahonn/mcp-server-gsc",
  _varName: "googleSearchConsoleMcpServerPlugin",
};

const searxngModelContextProtocolServerPlugin: Plugin = {
  id: "ddmcps77gn",
  name: "SearXNG Model Context Protocol Server",
  description:
    "A server that enables language models to perform web searches through SearXNG using the Model Context Protocol standard.",
  image: "https://github.com/aeon-seraph.png",
  actions: [],
  githubUrl: "https://github.com/aeon-seraph/searxng-mcp",
  _varName: "searxngModelContextProtocolServerPlugin",
};

const supabaseMcpServer1Plugin: Plugin = {
  id: "mg38z3mo5q",
  name: "Supabase MCP Server",
  description:
    "An MCP server that connects to Supabase PostgreSQL databases, exposing table schemas as resources and providing tools for data analysis through SQL queries.",
  image: "https://github.com/stefanraath3.png",
  actions: [],
  githubUrl: "https://github.com/stefanraath3/mcp-supabase",
  _varName: "supabaseMcpServer1Plugin",
};

const jiraMcpServerPlugin: Plugin = {
  id: "v7nmyscj80",
  name: "Jira MCP Server",
  description:
    "A TypeScript-based server that enables interaction with Jira, providing tools to execute JQL queries, manage tickets, list projects and statuses through natural language.",
  image: "https://github.com/KS-GEN-AI.png",
  actions: [
    {
      name: "execute_jql",
      description: "Execute a JQL query on Jira on the api /rest/api/3/search",
      parameters: [
        {
          name: "jql",
          type: "string",
          description: "JQL query string",
          required: true,
        },
        {
          name: "number_of_results",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "get_only_ticket_name_and_description",
      description:
        "Get the name and description of the requested tickets on the api /rest/api/3/search",
      parameters: [
        {
          name: "jql",
          type: "string",
          description: "JQL query string",
          required: true,
        },
        {
          name: "number_of_results",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "create_ticket",
      description: "Create a ticket on Jira on the api /rest/api/3/issue",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "The description of the ticket",
          required: true,
        },
        {
          name: "issuetype",
          type: "object",
          description: "Parameter: issuetype",
          required: true,
        },
        {
          name: "parent",
          type: "string",
          description: "The key of the parent ticket (the epic)",
          required: false,
        },
        {
          name: "project",
          type: "object",
          description: "Parameter: project",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "The summary of the ticket",
          required: true,
        },
      ],
    },
    {
      name: "list_projects",
      description:
        "List all the projects on Jira on the api /rest/api/3/project",
      parameters: [
        {
          name: "number_of_results",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "delete_ticket",
      description:
        "Delete a ticket on Jira on the api /rest/api/3/issue/{issueIdOrKey}",
      parameters: [
        {
          name: "issueIdOrKey",
          type: "string",
          description: "The issue id or key",
          required: true,
        },
      ],
    },
    {
      name: "edit_ticket",
      description:
        "Edit a ticket on Jira on the api /rest/api/3/issue/{issueIdOrKey}",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "The description of the ticket",
          required: false,
        },
        {
          name: "issueIdOrKey",
          type: "string",
          description: "The issue id or key",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "The labels of the ticket",
          required: false,
        },
        {
          name: "parent",
          type: "string",
          description: "The key of the parent ticket (the epic)",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "The summary of the ticket",
          required: false,
        },
      ],
    },
    {
      name: "get_all_statuses",
      description: "Get all the status on Jira on the api /rest/api/3/status",
      parameters: [
        {
          name: "number_of_results",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "assign_ticket",
      description:
        "Assign a ticket on Jira on the api /rest/api/3/issue/{issueIdOrKey}/assignee",
      parameters: [
        {
          name: "accountId",
          type: "string",
          description: "The account id of the assignee",
          required: true,
        },
        {
          name: "issueIdOrKey",
          type: "string",
          description: "The issue id or key",
          required: true,
        },
      ],
    },
    {
      name: "query_assignable",
      description:
        "Query assignables to a ticket on Jira on the api /rest/api/3/user/assignable/search?project={project-name}",
      parameters: [
        {
          name: "project_key",
          type: "string",
          description: "The id of the project to search",
          required: true,
        },
      ],
    },
    {
      name: "add_attachment_from_public_url",
      description:
        "Add an attachment from a public url to a ticket on Jira on the api /rest/api/3/issue/{issueIdOrKey}/attachments",
      parameters: [
        {
          name: "imageUrl",
          type: "string",
          description: "The URL of the image to attach",
          required: true,
        },
        {
          name: "issueIdOrKey",
          type: "string",
          description: "The issue id or key",
          required: true,
        },
      ],
    },
    {
      name: "add_attachment_from_confluence",
      description:
        "Add an attachment to a ticket on Jira from a Confluence page by its name on the api /rest/api/3/issue/{issueIdOrKey}/attachments",
      parameters: [
        {
          name: "attachmentName",
          type: "string",
          description: "The name of the attachment",
          required: true,
        },
        {
          name: "issueIdOrKey",
          type: "string",
          description: "The issue id or key",
          required: true,
        },
        {
          name: "pageId",
          type: "string",
          description: "The page id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/KS-GEN-AI/jira-mcp-server",
  _varName: "jiraMcpServerPlugin",
};

const uniprotMcpServerPlugin: Plugin = {
  id: "ttjbai3lpx",
  name: "UniProt MCP Server",
  description:
    "Enables AI assistants to access protein information directly from UniProt, allowing retrieval of protein names, functions, sequences, and organism data by accession number.",
  image: "https://github.com/TakumiY235.png",
  actions: [
    {
      name: "get_protein_info",
      description:
        "Get protein function and sequence information from UniProt using an accession No.",
      parameters: [
        {
          name: "accession",
          type: "string",
          description: "UniProt Accession No. (e.g., P12345)",
          required: true,
        },
      ],
    },
    {
      name: "get_batch_protein_info",
      description: "Get protein information for multiple accession No.",
      parameters: [
        {
          name: "accessions",
          type: "string array",
          description: "List of UniProt accession No.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/TakumiY235/uniprot-mcp-server",
  _varName: "uniprotMcpServerPlugin",
};

const docsfetcherMcpServerPlugin: Plugin = {
  id: "8yfwtryuc5",
  name: "DocsFetcher MCP Server",
  description:
    "Fetches and extracts comprehensive package documentation from multiple programming language ecosystems (JavaScript, Python, Java, etc.) for LLMs like Claude without requiring API keys.",
  image: "https://github.com/cdugo.png",
  actions: [
    {
      name: "fetch-url-docs",
      description: "Action for fetch-url-docs",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the library documentation to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch-package-docs",
      description: "Action for fetch-package-docs",
      parameters: [
        {
          name: "language",
          type: "string",
          description:
            "Programming language or repository type (e.g., javascript, python, java, dotnet)",
          required: false,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package to fetch documentation for",
          required: true,
        },
      ],
    },
    {
      name: "fetch-library-docs",
      description: "Action for fetch-library-docs",
      parameters: [
        {
          name: "language",
          type: "string",
          description:
            "Programming language or repository type if providing a package name (e.g., javascript, python, java, dotnet)",
          required: false,
        },
        {
          name: "library",
          type: "string",
          description:
            "Name of the package or URL of the library documentation to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch-multilingual-docs",
      description: "Action for fetch-multilingual-docs",
      parameters: [
        {
          name: "languages",
          type: "string array",
          description:
            "List of programming languages or repository types to check (e.g., javascript, python, java)",
          required: true,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package to fetch documentation for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cdugo/package-documentation-mcp",
  _varName: "docsfetcherMcpServerPlugin",
};

const webmcpPlugin: Plugin = {
  id: "dj73osxj1v",
  name: "WebMCP",
  description:
    "A framework that enables websites to share tools, resources, and prompts with client-side LLMs without requiring API keys, allowing users to interact with web services using their preferred models.",
  image: "https://github.com/jasonjmcghee.png",
  actions: [],
  githubUrl: "https://github.com/jasonjmcghee/WebMCP",
  _varName: "webmcpPlugin",
};

const tavilyMcpServer1Plugin: Plugin = {
  id: "wr9q9l8lh1",
  name: "Tavily MCP Server",
  description:
    "Provides AI-powered web search capabilities using Tavily's search API, enabling LLMs to perform sophisticated web searches, get direct answers to questions, and search recent news articles.",
  image: "https://github.com/RamXX.png",
  actions: [],
  githubUrl: "https://github.com/RamXX/mcp-tavily",
  _varName: "tavilyMcpServer1Plugin",
};

const mcpMemoryServerPlugin: Plugin = {
  id: "pqd0je4v10",
  name: "MCP Memory Server",
  description:
    "A Model Context Protocol server for Claude Desktop that provides structured memory management across chat sessions, allowing Claude to maintain context and build a knowledge base within project directories.",
  image: "https://github.com/ebailey78.png",
  actions: [],
  githubUrl: "https://github.com/ebailey78/mcp-memory",
  _varName: "mcpMemoryServerPlugin",
};

const snowflakeCubeServerPlugin: Plugin = {
  id: "t6fm96flpw",
  name: "Snowflake Cube Server",
  description:
    "MCP Server for interacting with Cube semantic layers that provides tools for querying and describing data from Cube deployments.",
  image: "https://github.com/isaacwasserman.png",
  actions: [],
  githubUrl: "https://github.com/isaacwasserman/mcp_cube_server",
  _varName: "snowflakeCubeServerPlugin",
};

const mcp2serialPlugin: Plugin = {
  id: "de9opo6050",
  name: "MCP2Serial",
  description:
    "A bridge that connects physical hardware devices with AI large language models via serial communication, allowing users to control hardware using natural language commands.",
  image: "https://github.com/mcp2everything.png",
  actions: [
    {
      name: "set_pwm",
      description: "Execute set_pwm command",
      parameters: [
        {
          name: "frequency",
          type: "string",
          description: "Parameter: frequency",
          required: true,
        },
      ],
    },
    {
      name: "get_pico_info",
      description: "Execute get_pico_info command",
      parameters: [],
    },
    {
      name: "led_control",
      description: "Execute led_control command",
      parameters: [
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mcp2everything/mcp2serial",
  _varName: "mcp2serialPlugin",
};

const mcpDoclingServerPlugin: Plugin = {
  id: "vtzkoq9xso",
  name: "MCP Docling Server",
  description:
    "A server that provides document processing capabilities using the Model Context Protocol, allowing conversion of documents to markdown, extraction of tables, and processing of document images.",
  image: "https://github.com/zanetworker.png",
  actions: [],
  githubUrl: "https://github.com/zanetworker/mcp-docling",
  _varName: "mcpDoclingServerPlugin",
};

const blendermcpPlugin: Plugin = {
  id: "1pugewd5pa",
  name: "BlenderMCP",
  description:
    "Connects Blender to Claude AI through the Model Context Protocol (MCP), allowing Claude to directly interact with and control Blender for AI-assisted 3D modeling, scene manipulation, and rendering.",
  image: "https://github.com/ahujasid.png",
  actions: [],
  githubUrl: "https://github.com/ahujasid/blender-mcp",
  _varName: "blendermcpPlugin",
};

const supavecMcpServerPlugin: Plugin = {
  id: "nkt7wcy8ez",
  name: "Supavec MCP Server",
  description:
    "Enables fetching relevant content and embeddings from Supavec via the Model Context Protocol, allowing AI assistants like Claude to access vector search capabilities.",
  image: "https://github.com/taishikato.png",
  actions: [
    {
      name: "fetch-embeddings",
      description: "Fetch embeddings for a file by ID and query",
      parameters: [
        {
          name: "file_id",
          type: "string",
          description: "ID of the file to get embeddings for",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Query to search for in the file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/taishikato/supavec-mcp-server",
  _varName: "supavecMcpServerPlugin",
};

const claudeMcpTrelloPlugin: Plugin = {
  id: "7vcnchsm63",
  name: "Claude MCP Trello",
  description:
    "A Model Context Protocol server that provides tools for interacting with Trello boards, enabling seamless management of cards, lists, and activities while handling rate limiting and type safety.",
  image: "https://github.com/hrs-asano.png",
  actions: [
    {
      name: "trello_get_cards_by_list",
      description:
        "Retrieves a list of cards contained in the specified list ID.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "Trello list ID",
          required: true,
        },
      ],
    },
    {
      name: "trello_get_lists",
      description: "Retrieves all lists in the board.",
      parameters: [],
    },
    {
      name: "trello_get_recent_activity",
      description:
        "Retrieves the most recent board activity. The 'limit' argument can specify how many to retrieve.",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of activities to retrieve (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "trello_add_card",
      description: "Adds a card to the specified list.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Details of the card (optional)",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date (can be specified in ISO8601 format, etc. Optional)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of label IDs (optional)",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description: "The ID of the list to add to",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "The title of the card",
          required: true,
        },
      ],
    },
    {
      name: "trello_update_card",
      description: "Updates the content of a card.",
      parameters: [
        {
          name: "cardId",
          type: "string",
          description: "The ID of the card to be updated",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Details of the card (optional)",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date (can be specified in ISO8601 format, etc. Optional)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "An array of label IDs (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The title of the card (optional)",
          required: false,
        },
      ],
    },
    {
      name: "trello_archive_card",
      description: "Archives (closes) the specified card.",
      parameters: [
        {
          name: "cardId",
          type: "string",
          description: "The ID of the card to archive",
          required: true,
        },
      ],
    },
    {
      name: "trello_add_list",
      description: "Adds a new list to the board.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the list",
          required: true,
        },
      ],
    },
    {
      name: "trello_archive_list",
      description: "Archives (closes) the specified list.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "The ID of the list to archive",
          required: true,
        },
      ],
    },
    {
      name: "trello_get_my_cards",
      description: "Retrieves all cards related to your account.",
      parameters: [],
    },
    {
      name: "trello_search_all_boards",
      description:
        "Performs a cross-board search across all boards in the workspace (organization) (depending on plan/permissions).",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to retrieve (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search keyword",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hrs-asano/claude-mcp-trello",
  _varName: "claudeMcpTrelloPlugin",
};

const knowledgeBaseMcpServerPlugin: Plugin = {
  id: "n0p6v0o0a4",
  name: "Knowledge Base MCP Server",
  description:
    "Provides tools for listing and retrieving content from different knowledge bases using semantic search capabilities.",
  image: "https://github.com/jeanibarz.png",
  actions: [
    {
      name: "list_knowledge_bases",
      description: "Lists the available knowledge bases.",
      parameters: [],
    },
    {
      name: "retrieve_knowledge",
      description:
        "Retrieves similar chunks from the knowledge base based on a query. Optionally, if a knowledge base is specified, only that one is searched; otherwise, all available knowledge bases are considered. By default, at most 10 documents are returned with a score below a threshold of 2. A different threshold can optionally be provided.",
      parameters: [
        {
          name: "knowledge_base_name",
          type: "string",
          description:
            "Optional. Name of the knowledge base to query (e.g., 'company', 'it_support', 'onboarding'). If omitted, the search is performed across all available knowledge bases.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The query text to use for semantic search.",
          required: true,
        },
        {
          name: "threshold",
          type: "number",
          description: "Optional. The maximum similarity score to return.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jeanibarz/knowledge-base-mcp-server",
  _varName: "knowledgeBaseMcpServerPlugin",
};

const unipileMcpServerPlugin: Plugin = {
  id: "dkqt2x71qs",
  name: "Unipile MCP Server",
  description:
    "Enables AI models to interact with messages from various messaging platforms (Mobile, Mail, WhatsApp, LinkedIn, Slack, Twitter, Telegram, Instagram, Messenger) through a standardized interface.",
  image: "https://github.com/baryhuang.png",
  actions: [
    {
      name: "unipile_get_accounts",
      description:
        "Get all connected messaging accounts from supported platforms: Mobile, Mail, WhatsApp, LinkedIn, Slack, Twitter, Telegram, Instagram, Messenger. Returns account details including connection parameters, ID, name, creation date, signatures, groups, and sources.",
      parameters: [],
    },
    {
      name: "unipile_get_recent_messages",
      description:
        "Get recent messages from all chats associated with a specific account. Supports messages from: Mobile, Mail, WhatsApp, LinkedIn, Slack, Twitter, Telegram, Instagram, Messenger. Returns message details including text content, sender info, timestamps, attachments, reactions, quoted messages, and metadata.",
      parameters: [
        {
          name: "account_id",
          type: "string",
          description:
            "The one source ID of of the account to get messages from. It is the id of the source objects in the account's sources array.",
          required: true,
        },
        {
          name: "batch_size",
          type: "integer",
          description: "Number of messages to fetch per chat (default: 20)",
          required: false,
        },
      ],
    },
    {
      name: "unipile_get_emails",
      description:
        "Get recent emails from a specific account. Returns email details including subject, body, sender, recipients, attachments, and metadata.",
      parameters: [
        {
          name: "account_id",
          type: "string",
          description: "The ID of the account to get emails from",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of emails to return (default: 10)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/baryhuang/mcp-unipile",
  _varName: "unipileMcpServerPlugin",
};

const barnsworthburningMcpPlugin: Plugin = {
  id: "5aibjjzkkb",
  name: "Barnsworthburning MCP",
  description:
    "A Model Context Protocol server that enables searching content from barnsworthburning.net directly through compatible AI clients like Claude for Desktop.",
  image: "https://github.com/Aias.png",
  actions: [
    {
      name: "search",
      description: "Search barnsworthburning.net for the given query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The search query to look for on barnsworthburning.net",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Aias/barnsworthburning-mcp",
  _varName: "barnsworthburningMcpPlugin",
};

const akshareMcpServerPlugin: Plugin = {
  id: "ndlloeca6d",
  name: "AKShare MCP Server",
  description:
    "A Model Context Protocol server that enables Claude Desktop to access and analyze Chinese and global financial market data through the AKShare library.",
  image: "https://github.com/ttjslbz001.png",
  actions: [],
  githubUrl: "https://github.com/ttjslbz001/akshare_mcp_server",
  _varName: "akshareMcpServerPlugin",
};

const sqliteMcpServerPlugin: Plugin = {
  id: "rw4usp6sv6",
  name: "SQLite MCP Server",
  description:
    "Enables querying log data stored in SQLite databases through the Model Context Protocol, allowing natural language interactions with log analysis.",
  image: "https://github.com/direkt.png",
  actions: [],
  githubUrl: "https://github.com/direkt/mcp-test",
  _varName: "sqliteMcpServerPlugin",
};

const fiscalDataMcpServerPlugin: Plugin = {
  id: "rv0e9etbeb",
  name: "Fiscal Data MCP Server",
  description:
    "Connects to the US Treasury's Fiscal Data API, enabling users to fetch specific treasury statements, access historical data, and generate formatted reports.",
  image: "https://github.com/QuantGeekDev.png",
  actions: [],
  githubUrl: "https://github.com/QuantGeekDev/fiscal-data-mcp",
  _varName: "fiscalDataMcpServerPlugin",
};

const s3toolsPlugin: Plugin = {
  id: "gwm71t70bc",
  name: "s3-tools",
  description:
    "An MCP server that provides tools for interacting with AWS S3 buckets, enabling direct access to S3 operations through the Model Context Protocol.",
  image: "https://github.com/sofianhamiti.png",
  actions: [
    {
      name: "list-s3-buckets",
      description: "List all S3 buckets in your AWS account",
      parameters: [
        {
          name: "region",
          type: "string",
          description: "AWS region (optional, defaults to configured region)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sofianhamiti/mcp-server-s3",
  _varName: "s3toolsPlugin",
};

const mongodbMcpServerForLlmsPlugin: Plugin = {
  id: "vuxqqmbr2q",
  name: "MongoDB MCP Server for LLMs",
  description:
    "A Model Context Protocol server that enables LLMs to interact directly with MongoDB databases, allowing users to query collections, inspect schemas, and manage data through natural language.",
  image: "https://github.com/nickiiitu.png",
  actions: [],
  githubUrl: "https://github.com/nickiiitu/MongoDB-Model-Context-Protocol-MCP-",
  _varName: "mongodbMcpServerForLlmsPlugin",
};

const notionMcpServer2Plugin: Plugin = {
  id: "bfepdxz0b3",
  name: "Notion MCP Server",
  description:
    "A simple server that integrates with Claude to allow querying and manipulating Notion pages and databases through natural language prompts.",
  image: "https://github.com/arre-ankit.png",
  actions: [],
  githubUrl: "https://github.com/arre-ankit/notion-mcp-server",
  _varName: "notionMcpServer2Plugin",
};

const taskApiServerPlugin: Plugin = {
  id: "u9w7rmq11d",
  name: "Task API Server",
  description:
    "A Model Context Protocol implementation that provides a standardized interface for task management, supporting both STDIO mode for CLI/AI applications and HTTP+SSE mode for browser-based clients.",
  image: "https://github.com/milkosten.png",
  actions: [
    {
      name: "listTasks",
      description: "Action for listTasks",
      parameters: [
        {
          name: "priority",
          type: "string",
          description: "Filter tasks by priority level (optional)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter tasks by status (optional)",
          required: false,
        },
      ],
    },
    {
      name: "createTask",
      description: "Action for createTask",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Task category (e.g., 'Development', 'Documentation')",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description:
            "Task priority level (defaults to 'medium' if not specified)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "Initial task status (defaults to 'not_started' if not specified)",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "The task description or title",
          required: true,
        },
      ],
    },
    {
      name: "updateTask",
      description: "Action for updateTask",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "New task category (if you want to change it)",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "New task priority (if you want to change it)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New task status (if you want to change it)",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "New task description/title (if you want to change it)",
          required: false,
        },
        {
          name: "taskId",
          type: "integer",
          description: "The unique ID of the task to update",
          required: true,
        },
      ],
    },
    {
      name: "deleteTask",
      description: "Action for deleteTask",
      parameters: [
        {
          name: "taskId",
          type: "integer",
          description: "The unique ID of the task to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/milkosten/task-mcp-server",
  _varName: "taskApiServerPlugin",
};

const emailProcessingMcpServerPlugin: Plugin = {
  id: "i2klzdyvt1",
  name: "Email Processing MCP Server",
  description:
    "Processes emails from Outlook with date filtering, storing them in SQLite databases while generating vector embeddings for semantic search capabilities in MongoDB.",
  image: "https://github.com/Cam10001110101.png",
  actions: [],
  githubUrl: "https://github.com/Cam10001110101/mcp-server-outlook-email",
  _varName: "emailProcessingMcpServerPlugin",
};

const mcpidbPlugin: Plugin = {
  id: "27ni3ebkfi",
  name: "MCP-IDB",
  description:
    "Integration between Model Context Protocol (MCP) and Facebook's iOS Development Bridge (idb), enabling automated iOS device management and test execution through natural language.",
  image: "https://github.com/noahlozevski.png",
  actions: [
    {
      name: "idb",
      description: "Action for idb",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            "The IDB command to execute (e.g., list-apps, screenshot, etc.).\n- For a full list of commands, run 'idb help'.\n- For help with a specific command, run 'idb <command> --help'.\n\nTo interact with the device (simulator):\nIMPORTANT: Always try using the 'idb ui describe-all' command to identify buttons before dispatching UI actions.\nIf that doesn't work, try using the following commands:\n  \n- **Tap**  \n  - **Command:** 'idb ui tap X Y [--duration DURATION]'\n  - **Description:** Simulates a tap at the given screen coordinates. Optionally, you can set the tap's duration.\n  \n- **Swipe**  \n  - **Command:** 'idb ui swipe X_START Y_START X_END Y_END [--delta STEP_SIZE]'\n  - **Description:** Simulates a swipe gesture from the start point to the end point. By default, the swipe moves in steps of 10 points; use '--delta' to change the step size.\n  \n- **Press a Button**  \n  - **Command:** 'idb ui button {APPLE_PAY, HOME, LOCK, SIDE_BUTTON, SIRI} [--duration DURATION]'\n  - **Description:** Simulates pressing a specified hardware button. The press duration can be adjusted with the '--duration' flag.\n  \n- **Inputting Text**  \n  - **Command:** 'idb ui text \"some text\"'\n  - **Description:** Types the provided text string into the target device.\n  \n- **Key Events**  \n  - **Single Key:** 'idb ui key KEYCODE [--duration DURATION]'\n  - **Key Sequence:** 'idb ui key-sequence KEYCODE1 KEYCODE2 ...'\n  - **Description:** Simulates key press events. Use the single key command for one key press (with an optional duration) or the key sequence command for multiple sequential key events.\n\n**Frame and Coordinates in idb ui describe-all:**\nThe output from 'idb ui describe-all' provides detailed layout information for each UI element. Each element includes a 'frame' object with:\n- **x and y:** The coordinates of the element's top-left corner relative to the device screen.\n- **width and height:** The dimensions of the element.\nAdditionally, an 'AXFrame' string presents this data in a human-readable format like '{{x, y}, {width, height}}'.\nThese values allow you to determine an element's position—commonly by calculating its center (x + width/2, y + height/2) for precise interactions. For instance, in the sample output, the \"More, tab, 4 of 4\" button has a frame starting at x=330, y=876.33 with a width of 110 and height of 45.67. A tap command such as 'idb ui tap 375 880' (which targets near the element's center) successfully triggers the button.\n",
          required: true,
        },
        {
          name: "options",
          type: "string array",
          description: "Optional arguments for the IDB command",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/noahlozevski/mcp-idb",
  _varName: "mcpidbPlugin",
};

const mcpProjectOrchestratorPlugin: Plugin = {
  id: "bz9y44r0tg",
  name: "MCP Project Orchestrator",
  description:
    "An MCP server that assists with the orchestration of new software projects by applying standardized templates and best practices in design patterns and software architecture.",
  image: "https://github.com/sparesparrow.png",
  actions: [],
  githubUrl: "https://github.com/sparesparrow/mcp-project-orchestrator",
  _varName: "mcpProjectOrchestratorPlugin",
};

const figmaMcpServerPlugin: Plugin = {
  id: "7muhz3xl36",
  name: "Figma MCP Server",
  description:
    "Enables AI assistants to interact with Figma files through the ModelContextProtocol, allowing viewing, commenting, and analyzing Figma designs directly in chat interfaces.",
  image: "https://github.com/MatthewDailey.png",
  actions: [
    {
      name: "add_figma_file",
      description: "Add a Figma file to your context",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the Figma file to add",
          required: true,
        },
      ],
    },
    {
      name: "view_node",
      description: "Get a thumbnail for a specific node in a Figma file",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
        {
          name: "node_id",
          type: "string",
          description:
            "The ID of the node to view. Node ids have the format `<number>:<number>`",
          required: true,
        },
      ],
    },
    {
      name: "read_comments",
      description: "Get all comments on a Figma file",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
      ],
    },
    {
      name: "post_comment",
      description: "Post a comment on a node in a Figma file",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "The comment message",
          required: true,
        },
        {
          name: "node_id",
          type: "string",
          description:
            "The ID of the node to comment on. Node ids have the format `<number>:<number>`",
          required: false,
        },
        {
          name: "x",
          type: "number",
          description: "The x coordinate of the comment pin",
          required: true,
        },
        {
          name: "y",
          type: "number",
          description: "The y coordinate of the comment pin",
          required: true,
        },
      ],
    },
    {
      name: "reply_to_comment",
      description: "Reply to an existing comment in a Figma file",
      parameters: [
        {
          name: "comment_id",
          type: "string",
          description:
            "The ID of the comment to reply to. Comment ids have the format `<number>`",
          required: true,
        },
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "The reply message",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MatthewDailey/figma-mcp",
  _varName: "figmaMcpServerPlugin",
};

const faceGeneratorMcpServerPlugin: Plugin = {
  id: "0v6oomxing",
  name: "Face Generator MCP Server",
  description:
    "Generates realistic human face images that don't represent real people, offering various output shapes, configurable dimensions, and batch generation capabilities.",
  image: "https://github.com/dasheck0.png",
  actions: [
    {
      name: "generate_face",
      description: "Generate and save a human face image",
      parameters: [
        {
          name: "borderRadius",
          type: "number",
          description: "Border radius for rounded shape (default: 32)",
          required: false,
        },
        {
          name: "count",
          type: "number",
          description: "Number of images to generate (default: 1)",
          required: false,
        },
        {
          name: "fileName",
          type: "string",
          description: "Optional file name (defaults to timestamp)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height of the image in pixels (default: 256)",
          required: false,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory to save the image",
          required: true,
        },
        {
          name: "shape",
          type: "string",
          description: "Image shape (square|circle|rounded, default: square)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width of the image in pixels (default: 256)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dasheck0/face-generator",
  _varName: "faceGeneratorMcpServerPlugin",
};

const dbsnpMcpPluginPlugin: Plugin = {
  id: "fk20edltw0",
  name: "dbSNP MCP Plugin",
  description:
    "An MCP plugin that provides access to NCBI's dbSNP database, allowing developers to retrieve genetic variant information, search for SNPs, and access clinical significance data directly in their development environment.",
  image: "https://github.com/mattshu0410.png",
  actions: [],
  githubUrl: "https://github.com/mattshu0410/MCP-server",
  _varName: "dbsnpMcpPluginPlugin",
};

const raindropioMcpServerPlugin: Plugin = {
  id: "o0ulse0qwk",
  name: "Raindrop.io MCP Server",
  description:
    "An integration that allows Large Language Models to interact with Raindrop.io bookmarks through the Model Context Protocol, enabling users to create and search bookmarks directly through AI assistants.",
  image: "https://github.com/hiromitsusasaki.png",
  actions: [],
  githubUrl: "https://github.com/hiromitsusasaki/raindrop-io-mcp-server",
  _varName: "raindropioMcpServerPlugin",
};

const notionMcpServer3Plugin: Plugin = {
  id: "694u8ecn1f",
  name: "Notion MCP Server",
  description:
    "A Model Context Protocol server that provides a standardized interface for interacting with Notion's API, enabling users to list databases, create pages, and search across their Notion workspace.",
  image: "https://github.com/ccabanillas.png",
  actions: [],
  githubUrl: "https://github.com/ccabanillas/notion-mcp",
  _varName: "notionMcpServer3Plugin",
};

const dicomMcpServerPlugin: Plugin = {
  id: "ch06g5ng9m",
  name: "DICOM MCP Server",
  description:
    "A connectivity testing server that enables DICOM network operations (like C-ECHO) through Claude's Model Context Protocol, with support for node configuration management.",
  image: "https://github.com/fluxinc.png",
  actions: [],
  githubUrl: "https://github.com/fluxinc/dicom-mcp-server",
  _varName: "dicomMcpServerPlugin",
};

const adamikMcpServerPlugin: Plugin = {
  id: "eo0t4vtvie",
  name: "Adamik MCP Server",
  description:
    "Enables read and write interactions with 60+ blockchain networks through Claude Desktop, providing a standardized multi-chain API for transaction management, account insights, staking, and token interactions.",
  image: "https://github.com/AdamikHQ.png",
  actions: [],
  githubUrl: "https://github.com/AdamikHQ/adamik-mcp-server",
  _varName: "adamikMcpServerPlugin",
};

const teslaMcpServerPlugin: Plugin = {
  id: "t0ako8h64j",
  name: "Tesla MCP Server",
  description:
    "A Model Context Protocol server that connects to the Tesla Fleet API, allowing AI assistants like Claude to control Tesla vehicles and access vehicle information through natural language commands.",
  image: "https://github.com/scald.png",
  actions: [],
  githubUrl: "https://github.com/scald/tesla-mcp",
  _varName: "teslaMcpServerPlugin",
};

const cockroachdbMcpServerPlugin: Plugin = {
  id: "69wju8loq2",
  name: "CockroachDB MCP Server",
  description:
    "Connects to CockroachDB instances and exposes database structures as resources, enabling SQL query execution and analysis through Claude's interface.",
  image: "https://github.com/dhartunian.png",
  actions: [],
  githubUrl: "https://github.com/dhartunian/cockroachdb-mcp-server",
  _varName: "cockroachdbMcpServerPlugin",
};

const stravaMcpServer1Plugin: Plugin = {
  id: "kjgj5ovtdq",
  name: "Strava MCP Server",
  description:
    "A Model Context Protocol server that provides language models with access to Strava API data, allowing them to query and analyze athlete activities from Strava.",
  image: "https://github.com/tomekkorbak.png",
  actions: [
    {
      name: "get_activities",
      description:
        "\n    Get the authenticated athlete's recent activities.\n\n    Args:\n        limit: Maximum number of activities to return (default: 10)\n\n    Returns:\n        Dictionary containing activities data\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "get_activities_by_date_range",
      description:
        "\n    Get activities within a specific date range.\n\n    Args:\n        start_date: Start date in ISO format (YYYY-MM-DD)\n        end_date: End date in ISO format (YYYY-MM-DD)\n        limit: Maximum number of activities to return (default: 30)\n\n    Returns:\n        Dictionary containing activities data\n    ",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Parameter: end_date",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Parameter: start_date",
          required: true,
        },
      ],
    },
    {
      name: "get_activity_by_id",
      description:
        "\n    Get detailed information about a specific activity.\n\n    Args:\n        activity_id: ID of the activity to retrieve\n\n    Returns:\n        Dictionary containing activity details\n    ",
      parameters: [
        {
          name: "activity_id",
          type: "integer",
          description: "Parameter: activity_id",
          required: true,
        },
      ],
    },
    {
      name: "get_recent_activities",
      description:
        "\n    Get activities from the past X days.\n\n    Args:\n        days: Number of days to look back (default: 7)\n        limit: Maximum number of activities to return (default: 10)\n\n    Returns:\n        Dictionary containing activities data\n    ",
      parameters: [
        {
          name: "days",
          type: "integer",
          description: "Parameter: days",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tomekkorbak/strava-mcp-server",
  _varName: "stravaMcpServer1Plugin",
};

const whoopMcpServerPlugin: Plugin = {
  id: "mlb49q0786",
  name: "Whoop MCP Server",
  description:
    "A Model Context Protocol server that provides language models with access to personal Whoop fitness data, allowing queries for cycles, recovery, strain, and workout information from the Whoop API.",
  image: "https://github.com/ctvidic.png",
  actions: [],
  githubUrl: "https://github.com/ctvidic/whoop-mcp-server",
  _varName: "whoopMcpServerPlugin",
};

const mcpFileContextServerPlugin: Plugin = {
  id: "x133mt0q3l",
  name: "MCP File Context Server",
  description:
    "A Model Context Protocol server that enables LLMs to read, search, and analyze code files with advanced caching and real-time file watching capabilities.",
  image: "https://github.com/bsmi021.png",
  actions: [],
  githubUrl: "https://github.com/bsmi021/mcp-file-context-server",
  _varName: "mcpFileContextServerPlugin",
};

const mcpTerminalServerPlugin: Plugin = {
  id: "0bqnw26cni",
  name: "MCP Terminal Server",
  description:
    "A secure terminal execution server that enables controlled command execution with security features and resource limits via the Model Context Protocol (MCP).",
  image: "https://github.com/RinardNick.png",
  actions: [
    {
      name: "run_command",
      description: "Run a terminal command with security controls.",
      parameters: [
        {
          name: "allowedCommands",
          type: "string array",
          description: "Optional list of allowed command executables",
          required: false,
        },
        {
          name: "command",
          type: "string",
          description: "The command to execute",
          required: true,
        },
        {
          name: "maxOutputSize",
          type: "number",
          description: "Maximum output size in bytes (default: 1MB)",
          required: false,
        },
        {
          name: "timeoutMs",
          type: "number",
          description:
            "Maximum execution time in milliseconds (default: 30 seconds)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RinardNick/mcp-terminal",
  _varName: "mcpTerminalServerPlugin",
};

const mcpServerMemosPlugin: Plugin = {
  id: "strjm92qcp",
  name: "MCP Server Memos",
  description:
    "A Python package that enables LLM models to interact with Memos server through the Model Context Protocol interface, allowing search, creation, retrieval, and management of memos.",
  image: "https://github.com/RyoJerryYu.png",
  actions: [
    {
      name: "list_memo_tags",
      description: "List all existing memo tags",
      parameters: [
        {
          name: "parent",
          type: "string",
          description:
            'The parent, who owns the tags.\nFormat: memos/{id}. Use "memos/-" to list all tags.\n',
          required: false,
        },
        {
          name: "visibility",
          type: "string",
          description: "The visibility of the tags.",
          required: false,
        },
      ],
    },
    {
      name: "search_memo",
      description: "Search for memos",
      parameters: [
        {
          name: "key_word",
          type: "string",
          description: "The key words to search for in the memo content.",
          required: true,
        },
      ],
    },
    {
      name: "create_memo",
      description: "Create a new memo",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The content of the memo.",
          required: true,
        },
        {
          name: "visibility",
          type: "string",
          description: "The visibility of the memo.",
          required: false,
        },
      ],
    },
    {
      name: "get_memo",
      description: "Get a memo",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the memo.\nFormat: memos/{id}\n",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RyoJerryYu/mcp-server-memos-py",
  _varName: "mcpServerMemosPlugin",
};

const mcpFhirServerPlugin: Plugin = {
  id: "aske4zko9f",
  name: "MCP FHIR Server",
  description:
    "A TypeScript-based MCP server that connects to FHIR servers, allowing access to healthcare data via fhir:// URIs and providing search capabilities for FHIR resources.",
  image: "https://github.com/flexpa.png",
  actions: [],
  githubUrl: "https://github.com/flexpa/mcp-fhir",
  _varName: "mcpFhirServerPlugin",
};

const mcpSentryPlugin: Plugin = {
  id: "lqepczdj3x",
  name: "MCP Sentry",
  description:
    "A Model Context Protocol server that retrieves and analyzes Sentry.io issues, allowing users to inspect error reports, stacktraces, and debugging information from their Sentry account.",
  image: "https://github.com/MCP-100.png",
  actions: [],
  githubUrl: "https://github.com/MCP-100/mcp-sentry",
  _varName: "mcpSentryPlugin",
};

const birdnetpiMcpServerPlugin: Plugin = {
  id: "n6d0knv81q",
  name: "BirdNet-Pi MCP Server",
  description:
    "A Python-based server that enables accessing and analyzing bird detection data through the Model Context Protocol, offering features like filtering detections, accessing audio recordings, and generating reports.",
  image: "https://github.com/DMontgomery40.png",
  actions: [],
  githubUrl: "https://github.com/DMontgomery40/mcp-local-server",
  _varName: "birdnetpiMcpServerPlugin",
};

const shopifyPythonMcpServerPlugin: Plugin = {
  id: "zfff0mhppb",
  name: "Shopify Python MCP Server",
  description:
    "MCP server that integrates with Shopify API, allowing Claude Desktop users to retrieve and manipulate product information from Shopify stores.",
  image: "https://github.com/kishimoto-banana.png",
  actions: [
    {
      name: "create_product",
      description: "新しい商品を作成する",
      parameters: [
        {
          name: "body_html",
          type: "string",
          description: "商品の説明（HTML形式）",
          required: false,
        },
        {
          name: "images",
          type: "object array",
          description: "画像",
          required: false,
        },
        {
          name: "options",
          type: "object array",
          description: "オプション",
          required: false,
        },
        {
          name: "product_type",
          type: "string",
          description: "商品タイプ",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "ステータス",
          required: false,
        },
        {
          name: "tags",
          type: "string",
          description: "タグ（カンマ区切り）",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "商品名",
          required: true,
        },
        {
          name: "variants",
          type: "object array",
          description: "バリエーション",
          required: false,
        },
        {
          name: "vendor",
          type: "string",
          description: "ベンダー名",
          required: false,
        },
      ],
    },
    {
      name: "update_product",
      description: "商品を更新する",
      parameters: [
        {
          name: "body_html",
          type: "string",
          description: "商品の説明（HTML形式）",
          required: false,
        },
        {
          name: "images",
          type: "object array",
          description: "画像",
          required: false,
        },
        {
          name: "options",
          type: "object array",
          description: "オプション",
          required: false,
        },
        {
          name: "product_id",
          type: "number",
          description: "商品ID",
          required: true,
        },
        {
          name: "product_type",
          type: "string",
          description: "商品タイプ",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "ステータス",
          required: false,
        },
        {
          name: "tags",
          type: "string",
          description: "タグ（カンマ区切り）",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "商品名",
          required: false,
        },
        {
          name: "variants",
          type: "object array",
          description: "バリエーション",
          required: false,
        },
        {
          name: "vendor",
          type: "string",
          description: "ベンダー名",
          required: false,
        },
      ],
    },
    {
      name: "delete_product",
      description: "商品を削除する",
      parameters: [
        {
          name: "product_id",
          type: "number",
          description: "商品ID",
          required: true,
        },
      ],
    },
    {
      name: "list_products",
      description: "商品一覧を取得する",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "取得する商品数（最大250）",
          required: false,
        },
      ],
    },
    {
      name: "get_product",
      description: "商品の詳細情報を取得する",
      parameters: [
        {
          name: "product_id",
          type: "number",
          description: "商品ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kishimoto-banana/shopify-py-mcp",
  _varName: "shopifyPythonMcpServerPlugin",
};

const mcpSnowflakeServicePlugin: Plugin = {
  id: "h7t0p4vsc5",
  name: "MCP Snowflake Service",
  description:
    "A Model Context Protocol server that enables Claude to execute SQL queries on Snowflake databases with automatic connection lifecycle management.",
  image: "https://github.com/datawiz168.png",
  actions: [],
  githubUrl: "https://github.com/datawiz168/mcp-snowflake-service",
  _varName: "mcpSnowflakeServicePlugin",
};

const instagramMcpServerPlugin: Plugin = {
  id: "g28gwod2z7",
  name: "Instagram MCP Server",
  description:
    "A server that allows fetching Instagram posts using Chrome's existing login session via Model Context Protocol (MCP).",
  image: "https://github.com/duhlink.png",
  actions: [
    {
      name: "get_instagram_posts",
      description:
        "Get recent posts from an Instagram profile using existing Chrome login",
      parameters: [
        {
          name: "limit",
          type: ["number", "string"],
          description:
            'Number of posts to fetch (1-3) or "all" for continuous batches',
          required: false,
        },
        {
          name: "startFrom",
          type: "number",
          description: "Index to start fetching from (for pagination)",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Instagram username to fetch posts from",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/duhlink/instagram-server-next-mcp",
  _varName: "instagramMcpServerPlugin",
};

const framerPluginMcpServerPlugin: Plugin = {
  id: "pd3bkgs4z4",
  name: "Framer Plugin MCP Server",
  description:
    "Enables creation and management of Framer plugins with web3 capabilities like wallet connections, contract interactions, and NFT displays.",
  image: "https://github.com/Sheshiyer.png",
  actions: [
    {
      name: "create_plugin",
      description: "Create a new Framer plugin project with web3 capabilities",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Plugin description",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Plugin name",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Output directory path",
          required: true,
        },
        {
          name: "web3Features",
          type: "string array",
          description: "Web3 features to include",
          required: false,
        },
      ],
    },
    {
      name: "build_plugin",
      description: "Build a Framer plugin project",
      parameters: [
        {
          name: "pluginPath",
          type: "string",
          description: "Path to plugin directory",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sheshiyer/framer-plugin-mcp",
  _varName: "framerPluginMcpServerPlugin",
};

const mongodbMcpServer1Plugin: Plugin = {
  id: "553iezfbrd",
  name: "MongoDB MCP Server",
  description:
    "Provides read-only access to MongoDB databases for LLMs to inspect collection schemas and execute aggregation pipelines.",
  image: "https://github.com/mongodb-developer.png",
  actions: [],
  githubUrl: "https://github.com/mongodb-developer/mongodb-mcp-server",
  _varName: "mongodbMcpServer1Plugin",
};

const mcpHumanLoopServerPlugin: Plugin = {
  id: "sfpxhkpw9u",
  name: "MCP Human Loop Server",
  description:
    "An intelligent middleware that determines when human intervention is necessary in AI agent operations using a sequential scoring system that evaluates multiple dimensions of a request.",
  image: "https://github.com/boorich.png",
  actions: [
    {
      name: "evaluate_need_for_human",
      description: "Evaluate if a task requires human intervention",
      parameters: [
        {
          name: "modelCapabilities",
          type: "string array",
          description: "List of model capabilities",
          required: false,
        },
        {
          name: "taskDescription",
          type: "string",
          description: "Description of the task to be evaluated",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/boorich/mcp-human-loop",
  _varName: "mcpHumanLoopServerPlugin",
};

const mathematicaDocumentationMcpServerPlugin: Plugin = {
  id: "wzz9ag7u06",
  name: "Mathematica Documentation MCP server",
  description:
    "A server that provides access to Mathematica documentation through FastMCP, enabling users to retrieve function documentation and list package symbols from Wolfram Mathematica.",
  image: "https://github.com/benhaotang.png",
  actions: [],
  githubUrl: "https://github.com/benhaotang/mcp-mma-docs",
  _varName: "mathematicaDocumentationMcpServerPlugin",
};

const togetherAiImageServerPlugin: Plugin = {
  id: "p1ctvg1l87",
  name: "Together AI Image Server",
  description:
    "A MCP server that enables Claude and other MCP-compatible assistants to generate images from text prompts using Together AI's image generation models.",
  image: "https://github.com/zym9863.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate image from text prompt using Together AI API",
      parameters: [
        {
          name: "n",
          type: "number",
          description: "Number of images to generate (default: 1, max: 4)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text prompt for image generation",
          required: true,
        },
        {
          name: "steps",
          type: "number",
          description: "Number of diffusion steps (default: 4)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zym9863/together-ai-image-server",
  _varName: "togetherAiImageServerPlugin",
};

const canvasMcpServerPlugin: Plugin = {
  id: "w48kv5b02m",
  name: "Canvas MCP Server",
  description:
    "A Model Context Protocol server that enables interaction with the Canvas Learning Management System API, allowing users to manage courses, assignments, enrollments, and grades within Canvas.",
  image: "https://github.com/DMontgomery40.png",
  actions: [],
  githubUrl: "https://github.com/DMontgomery40/mcp-canvas-lms",
  _varName: "canvasMcpServerPlugin",
};

const linearMcpServerPlugin: Plugin = {
  id: "4t9pgjso9u",
  name: "Linear MCP Server",
  description:
    "A Model Context Protocol server that integrates with Linear, enabling AI assistants to create, update, search, and comment on issues for project management and issue tracking.",
  image: "https://github.com/vinayak-mehta.png",
  actions: [
    {
      name: "linear_search_issues",
      description:
        "Search issues with flexible filtering.\n\n    Args:\n        query: Text to search in title/description\n        team_id: Filter by team\n        status: Filter by status\n        assignee_id: Filter by assignee\n        labels: Filter by labels\n        priority: Filter by priority\n        estimate: Filter by estimate points\n        include_archived: Include archived issues\n        limit: Max results (default: 10)\n    ",
      parameters: [
        {
          name: "assignee_id",
          type: "string",
          description: "Parameter: assignee_id",
          required: false,
        },
        {
          name: "estimate",
          type: "string",
          description: "Parameter: estimate",
          required: false,
        },
        {
          name: "include_archived",
          type: "string",
          description: "Parameter: include_archived",
          required: false,
        },
        {
          name: "labels",
          type: "string",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "Parameter: priority",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "team_id",
          type: "string",
          description: "Parameter: team_id",
          required: false,
        },
      ],
    },
    {
      name: "linear_get_user_issues",
      description:
        "Get issues assigned to a user.\n\n    Args:\n        user_id: User ID (omit for authenticated user)\n        include_archived: Include archived issues\n        limit: Max results (default: 50)\n    ",
      parameters: [
        {
          name: "include_archived",
          type: "boolean",
          description: "Parameter: include_archived",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter: user_id",
          required: false,
        },
      ],
    },
    {
      name: "linear_add_comment",
      description:
        "Add a comment to an issue.\n\n    Args:\n        issue_id: Issue ID to comment on\n        body: Comment text (markdown supported)\n        create_as_user: Custom username\n        display_icon_url: Custom avatar URL\n    ",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: true,
        },
        {
          name: "create_as_user",
          type: "string",
          description: "Parameter: create_as_user",
          required: false,
        },
        {
          name: "display_icon_url",
          type: "string",
          description: "Parameter: display_icon_url",
          required: false,
        },
        {
          name: "issue_id",
          type: "string",
          description: "Parameter: issue_id",
          required: true,
        },
      ],
    },
    {
      name: "linear_create_issue",
      description:
        "Create a new Linear issue.\n\n    Args:\n        title: Issue title\n        team_id: Team ID to create issue in\n        description: Issue description (markdown supported)\n        priority: Priority level (1=urgent, 4=low)\n        status: Initial status name\n    ",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "Parameter: priority",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "team_id",
          type: "string",
          description: "Parameter: team_id",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "linear_update_issue",
      description:
        "Update an existing Linear issue.\n\n    Args:\n        id: Issue ID to update\n        title: New title\n        description: New description\n        priority: New priority (1=urgent, 4=low)\n        status: New status name\n    ",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "Parameter: priority",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/vinayak-mehta/linear-mcp",
  _varName: "linearMcpServerPlugin",
};

const mcpNotmuchSendmailPlugin: Plugin = {
  id: "vzg5i81fa1",
  name: "MCP Notmuch Sendmail",
  description:
    "An email assistant server that connects Claude Desktop to notmuch email databases, allowing users to search emails, view threads, compose new messages, and reply to conversations with markdown formatting.",
  image: "https://github.com/runekaagaard.png",
  actions: [],
  githubUrl: "https://github.com/runekaagaard/mcp-notmuch-sendmail",
  _varName: "mcpNotmuchSendmailPlugin",
};

const cloudflareToGithubBackupMcpServerPlugin: Plugin = {
  id: "ekd11tfdbs",
  name: "Cloudflare to GitHub Backup MCP Server",
  description:
    "An MCP server that automates the backup of Cloudflare projects to a GitHub repository, providing a systematic way to preserve Cloudflare configurations and assets.",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [],
  githubUrl: "https://github.com/DynamicEndpoints/cloudflare-github-backup-mcp",
  _varName: "cloudflareToGithubBackupMcpServerPlugin",
};

const mcpBatchitPlugin: Plugin = {
  id: "2gefbup6lf",
  name: "MCP BatchIt",
  description:
    "A simple aggregator server that allows batching multiple MCP tool calls into a single request, reducing token usage and network overhead for AI agents.",
  image: "https://github.com/ryanjoachim.png",
  actions: [],
  githubUrl: "https://github.com/ryanjoachim/mcp-batchit",
  _varName: "mcpBatchitPlugin",
};

const tmf620McpServerPlugin: Plugin = {
  id: "owbl4jl2ob",
  name: "TMF620 MCP Server",
  description:
    "Allows AI agents to interact with a remote TMF620 Product Catalog Management API, enabling operations like listing, retrieving, and creating catalogs, product offerings, and product specifications.",
  image: "https://github.com/oopsyz.png",
  actions: [],
  githubUrl: "https://github.com/oopsyz/mcp",
  _varName: "tmf620McpServerPlugin",
};

const claudekeepPlugin: Plugin = {
  id: "0w7cgsiloh",
  name: "ClaudeKeep",
  description:
    "An MCP server that enables saving and sharing Claude Desktop conversations, allowing users to store chats privately or make them public through a web interface.",
  image: "https://github.com/sdairs.png",
  actions: [
    {
      name: "store_message",
      description: "Store a chat message",
      parameters: [
        {
          name: "fromUser",
          type: "boolean",
          description: "Parameter: fromUser",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: false,
        },
      ],
    },
    {
      name: "save_chat",
      description: "Save the current chat",
      parameters: [
        {
          name: "public",
          type: "boolean",
          description: "Parameter: public",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sdairs/claudekeep",
  _varName: "claudekeepPlugin",
};

const tectonMcpServerPlugin: Plugin = {
  id: "tox4n9oqin",
  name: "Tecton MCP Server",
  description:
    "Provides a set of tools to interact with Tecton clusters, manage feature stores, and execute Tecton CLI commands through the Mission Control Protocol.",
  image: "https://github.com/tecton-ai.png",
  actions: [],
  githubUrl: "https://github.com/tecton-ai/tecton-mcp",
  _varName: "tectonMcpServerPlugin",
};

const numpyCalculatorPlugin: Plugin = {
  id: "ucb44x0t56",
  name: "NumPy Calculator",
  description:
    "A Model Context Protocol (MCP) server that provides mathematical calculations and operations using NumPy, enabling users to perform numerical computations like matrix operations, statistical analysis, and polynomial fitting directly through Claude.",
  image: "https://github.com/colesmcintosh.png",
  actions: [],
  githubUrl: "https://github.com/colesmcintosh/numpy-mcp",
  _varName: "numpyCalculatorPlugin",
};

const chromeDebugMcpServerPlugin: Plugin = {
  id: "nguhnsghor",
  name: "Chrome Debug MCP Server",
  description:
    "Controls Chrome browser with debugging capabilities, allowing page automation, extension management, and userscript injection through the Model Context Protocol.",
  image: "https://github.com/robertheadley.png",
  actions: [
    {
      name: "launch_chrome",
      description: "Launch Chrome in debug mode",
      parameters: [
        {
          name: "disableAutomationControlled",
          type: "boolean",
          description:
            'Disable Chrome\'s "Automation Controlled" mode (optional, default: false)',
          required: false,
        },
        {
          name: "disableExtensionsExcept",
          type: "string",
          description:
            "Path to extension that should remain enabled while others are disabled (optional)",
          required: false,
        },
        {
          name: "executablePath",
          type: "string",
          description:
            "Path to Chrome executable (optional, uses bundled Chrome if not provided)",
          required: false,
        },
        {
          name: "loadExtension",
          type: "string",
          description:
            "Path to unpacked extension directory to load (optional)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to navigate to (optional)",
          required: false,
        },
        {
          name: "userDataDir",
          type: "string",
          description:
            "Path to a specific user data directory (optional, uses default Chrome profile if not provided)",
          required: false,
        },
        {
          name: "userscriptPath",
          type: "string",
          description: "Path to userscript file to inject (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_console_logs",
      description: "Get console logs from Chrome",
      parameters: [
        {
          name: "clear",
          type: "boolean",
          description: "Whether to clear logs after retrieving",
          required: false,
        },
      ],
    },
    {
      name: "evaluate",
      description: "Evaluate JavaScript in Chrome",
      parameters: [
        {
          name: "expression",
          type: "string",
          description: "JavaScript code to evaluate",
          required: true,
        },
      ],
    },
    {
      name: "click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "button",
          type: "string",
          description: "Mouse button to use",
          required: false,
        },
        {
          name: "delay",
          type: "number",
          description: "Optional delay before clicking (in milliseconds)",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "type",
      description: "Type text into an input field",
      parameters: [
        {
          name: "delay",
          type: "number",
          description: "Optional delay between keystrokes (in milliseconds)",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Text to type",
          required: true,
        },
      ],
    },
    {
      name: "select",
      description: "Select an option in a dropdown",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for select element",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Option value or label to select",
          required: true,
        },
      ],
    },
    {
      name: "hover",
      description: "Hover over an element",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "wait_for_selector",
      description: "Wait for an element to appear on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector to wait for",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Optional timeout in milliseconds",
          required: false,
        },
        {
          name: "visible",
          type: "boolean",
          description: "Whether element should be visible",
          required: false,
        },
      ],
    },
    {
      name: "screenshot",
      description: "Take a screenshot of the page or element",
      parameters: [
        {
          name: "fullPage",
          type: "boolean",
          description: "Whether to capture the full scrollable page",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Output path for screenshot",
          required: true,
        },
        {
          name: "quality",
          type: "number",
          description: "Image quality (0-100) for JPEG",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "Optional CSS selector to screenshot specific element",
          required: false,
        },
      ],
    },
    {
      name: "navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "timeout",
          type: "number",
          description: "Navigation timeout in milliseconds",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to navigate to",
          required: true,
        },
        {
          name: "waitUntil",
          type: "string",
          description: "When to consider navigation completed",
          required: false,
        },
      ],
    },
    {
      name: "get_text",
      description: "Get text content of an element",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element",
          required: true,
        },
      ],
    },
    {
      name: "get_attribute",
      description: "Get attribute value of an element",
      parameters: [
        {
          name: "attribute",
          type: "string",
          description: "Attribute name to get",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element",
          required: true,
        },
      ],
    },
    {
      name: "set_viewport",
      description: "Set the viewport size and properties",
      parameters: [
        {
          name: "deviceScaleFactor",
          type: "number",
          description: "Device scale factor",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Viewport height in pixels",
          required: true,
        },
        {
          name: "isMobile",
          type: "boolean",
          description: "Whether to emulate mobile device",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Viewport width in pixels",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/robertheadley/chrome-debug-mcp",
  _varName: "chromeDebugMcpServerPlugin",
};

const mcpdblpPlugin: Plugin = {
  id: "cm42scf3iv",
  name: "MCP-DBLP",
  description:
    "A Model Context Protocol server that provides access to the DBLP computer science bibliography database, allowing AI models to search publications, process citations, and generate accurate BibTeX entries.",
  image: "https://github.com/szeider.png",
  actions: [
    {
      name: "get_author_publications",
      description:
        "Retrieve publication details for a specific author with fuzzy matching.\nArguments:\n  - author_name (string, required): Full or partial author name (case-insensitive).\n  - similarity_threshold (number, required): A float between 0 and 1 where 1.0 means an exact match.\n  - max_results (number, optional): Maximum number of publications to return. Default is 20.\n  - include_bibtex (boolean, optional): Whether to include BibTeX entries in the results. Default is false.\nReturns a dictionary with keys: name, publication_count, publications, and stats (which includes top venues, years, and types).",
      parameters: [
        {
          name: "author_name",
          type: "string",
          description: "Parameter: author_name",
          required: true,
        },
        {
          name: "include_bibtex",
          type: "boolean",
          description: "Parameter: include_bibtex",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "similarity_threshold",
          type: "number",
          description: "Parameter: similarity_threshold",
          required: true,
        },
      ],
    },
    {
      name: "get_venue_info",
      description:
        "Retrieve detailed information about a publication venue.\nArguments:\n  - venue_name (string, required): Venue name or abbreviation (e.g., 'ICLR' or full name).\nReturns a dictionary with fields: abbreviation, name, publisher, type, and category.\nNote: Some fields may be empty if DBLP does not provide the information.",
      parameters: [
        {
          name: "venue_name",
          type: "string",
          description: "Parameter: venue_name",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description:
        "Search DBLP for publications using a boolean query string.\nArguments:\n  - query (string, required): A query string that may include boolean operators 'and' and 'or' (case-insensitive).\n    For example, 'Swin and Transformer'. Parentheses are not supported.\n  - max_results (number, optional): Maximum number of publications to return. Default is 10.\n  - year_from (number, optional): Lower bound for publication year.\n  - year_to (number, optional): Upper bound for publication year.\n  - venue_filter (string, optional): Case-insensitive substring filter for publication venues (e.g., 'iclr').\n  - include_bibtex (boolean, optional): Whether to include BibTeX entries in the results. Default is false.\nReturns a list of publication objects including title, authors, venue, year, type, doi, ee, and url.",
      parameters: [
        {
          name: "include_bibtex",
          type: "boolean",
          description: "Parameter: include_bibtex",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "venue_filter",
          type: "string",
          description: "Parameter: venue_filter",
          required: false,
        },
        {
          name: "year_from",
          type: "number",
          description: "Parameter: year_from",
          required: false,
        },
        {
          name: "year_to",
          type: "number",
          description: "Parameter: year_to",
          required: false,
        },
      ],
    },
    {
      name: "calculate_statistics",
      description:
        "Calculate statistics from a list of publication results.\nArguments:\n  - results (array, required): An array of publication objects, each with at least 'title', 'authors', 'venue', and 'year'.\nReturns a dictionary with:\n  - total_publications: Total count.\n  - time_range: Dictionary with 'min' and 'max' publication years.\n  - top_authors: List of tuples (author, count) sorted by count.\n  - top_venues: List of tuples (venue, count) sorted by count (empty venue is treated as '(empty)').",
      parameters: [
        {
          name: "results",
          type: "array",
          description: "Parameter: results",
          required: true,
        },
      ],
    },
    {
      name: "export_bibtex",
      description:
        'Export BibTeX entries from a collection of HTML hyperlinks.\nArguments:\n  - links (string, required): HTML string containing one or more <a href=biburl>key</a> links.\n    The href attribute should contain a URL to a BibTeX file, and the link text is used as the citation key.\n    Example input with three links:\n    "<a href=https://dblp.org/rec/journals/example1.bib>Smith2023</a>\n     <a href=https://dblp.org/rec/conf/example2.bib>Jones2022</a>\n     <a href=https://dblp.org/rec/journals/example3.bib>Brown2021</a>"\nProcess:\n  - For each link, the tool fetches the BibTeX content from the URL\n  - The citation key in each BibTeX entry is replaced with the key from the link text\n  - All entries are combined and saved to a .bib file with a timestamp filename\nReturns:\n  - A message with the full path to the saved .bib file',
      parameters: [
        {
          name: "links",
          type: "string",
          description: "Parameter: links",
          required: true,
        },
      ],
    },
    {
      name: "fuzzy_title_search",
      description:
        "Search DBLP for publications with fuzzy title matching.\nArguments:\n  - title (string, required): Full or partial title of the publication (case-insensitive).\n  - similarity_threshold (number, required): A float between 0 and 1 where 1.0 means an exact match.\n  - max_results (number, optional): Maximum number of publications to return. Default is 10.\n  - year_from (number, optional): Lower bound for publication year.\n  - year_to (number, optional): Upper bound for publication year.\n  - venue_filter (string, optional): Case-insensitive substring filter for publication venues.\n  - include_bibtex (boolean, optional): Whether to include BibTeX entries in the results. Default is false.\nReturns a list of publication objects sorted by title similarity score.",
      parameters: [
        {
          name: "include_bibtex",
          type: "boolean",
          description: "Parameter: include_bibtex",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "similarity_threshold",
          type: "number",
          description: "Parameter: similarity_threshold",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
        {
          name: "venue_filter",
          type: "string",
          description: "Parameter: venue_filter",
          required: false,
        },
        {
          name: "year_from",
          type: "number",
          description: "Parameter: year_from",
          required: false,
        },
        {
          name: "year_to",
          type: "number",
          description: "Parameter: year_to",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/szeider/mcp-dblp",
  _varName: "mcpdblpPlugin",
};

const mcpcliexecMcpServerPlugin: Plugin = {
  id: "get8ni2blr",
  name: "mcp-cli-exec MCP Server",
  description:
    "A CLI command execution server that enables running shell commands with structured output, providing detailed execution results including stdout, stderr, exit code, and execution duration.",
  image: "https://github.com/jakenuts.png",
  actions: [
    {
      name: "cli-exec-raw",
      description: "Execute a raw CLI command and return structured output",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "The CLI command to execute",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Optional timeout in milliseconds (default: 5 minutes)",
          required: false,
        },
      ],
    },
    {
      name: "cli-exec",
      description:
        "Execute one or more CLI commands in a specific working directory",
      parameters: [
        {
          name: "commands",
          type: "string",
          description: "Commands to execute",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description:
            "Optional timeout in milliseconds per command (default: 5 minutes)",
          required: false,
        },
        {
          name: "workingDirectory",
          type: "string",
          description: "Working directory to execute commands in",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jakenuts/mcp-cli-exec",
  _varName: "mcpcliexecMcpServerPlugin",
};

const aiVisionDebugMcpServerPlugin: Plugin = {
  id: "lbb1el5owd",
  name: "AI Vision Debug MCP Server",
  description:
    "A Model Context Protocol server that provides AI vision capabilities for analyzing UI screenshots, offering tools for screen analysis, file operations, and UI/UX report generation.",
  image: "https://github.com/samihalawa.png",
  actions: [],
  githubUrl: "https://github.com/samihalawa/mcp-server-ai-vision",
  _varName: "aiVisionDebugMcpServerPlugin",
};

const valyuMcpServerPlugin: Plugin = {
  id: "3f1qkv3113",
  name: "Valyu MCP Server",
  description:
    "A Model Context Protocol server that provides LLMs with access to Valyu's knowledge retrieval and feedback APIs for searching proprietary/web sources and submitting transaction feedback.",
  image: "https://github.com/valyu-network.png",
  actions: [
    {
      name: "knowledge",
      description:
        "Search proprietary and/or web sources for information based on the supplied query.",
      parameters: [
        {
          name: "data_sources",
          type: "string array",
          description: "Parameter: data_sources",
          required: false,
        },
        {
          name: "max_num_results",
          type: "integer",
          description: "Parameter: max_num_results",
          required: false,
        },
        {
          name: "max_price",
          type: "number",
          description: "Parameter: max_price",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "query_rewrite",
          type: "boolean",
          description: "Parameter: query_rewrite",
          required: false,
        },
        {
          name: "search_type",
          type: "string",
          description: "Parameter: search_type",
          required: true,
        },
        {
          name: "similarity_threshold",
          type: "number",
          description: "Parameter: similarity_threshold",
          required: false,
        },
      ],
    },
    {
      name: "feedback",
      description: "Submit user feedback and sentiment for a transaction.",
      parameters: [
        {
          name: "feedback",
          type: "string",
          description: "Parameter: feedback",
          required: true,
        },
        {
          name: "sentiment",
          type: "string",
          description: "Parameter: sentiment",
          required: true,
        },
        {
          name: "tx_id",
          type: "string",
          description: "Parameter: tx_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/valyu-network/valyu-mcp-js",
  _varName: "valyuMcpServerPlugin",
};

const jsonResumeMcpServerPlugin: Plugin = {
  id: "vo4bfp2po8",
  name: "JSON Resume MCP Server",
  description:
    "A server that enhances AI assistants with the ability to update your JSON Resume by analyzing your coding projects, automatically extracting skills and generating professional descriptions.",
  image: "https://github.com/jsonresume.png",
  actions: [
    {
      name: "github_analyze_codebase",
      description:
        "This is a tool from the github MCP server.\nAnalyzes the current codebase and returns information about technologies, languages, and recent commits",
      parameters: [
        {
          name: "directory",
          type: "string",
          description:
            "The directory to analyze. If not provided, uses current working directory.",
          required: false,
        },
      ],
    },
    {
      name: "github_check_resume",
      description:
        "This is a tool from the github MCP server.\nChecks if a GitHub user has a JSON Resume and returns its information",
      parameters: [],
    },
    {
      name: "github_enhance_resume_with_project",
      description:
        "This is a tool from the github MCP server.\nEnhances a GitHub user's JSON Resume with information about their current project",
      parameters: [
        {
          name: "directory",
          type: "string",
          description:
            "The directory of the project to analyze. If not provided, uses current working directory.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jsonresume/mcp",
  _varName: "jsonResumeMcpServerPlugin",
};

const tripadvisorVacationPlannerMcpServerPlugin: Plugin = {
  id: "d7qdgxowe0",
  name: "TripAdvisor Vacation Planner MCP Server",
  description:
    "This MCP server provides access to TripAdvisor data for planning vacations, enabling users to search for and get details about locations, attractions, restaurants, and hotels through an interactive planning experience.",
  image: "https://github.com/hhw67865.png",
  actions: [],
  githubUrl: "https://github.com/hhw67865/tripadvisor-mcp-server",
  _varName: "tripadvisorVacationPlannerMcpServerPlugin",
};

const radarrAndSonarrMcpServerPlugin: Plugin = {
  id: "9dq7usll6h",
  name: "Radarr and Sonarr MCP Server",
  description:
    "A Python-based Model Context Protocol server that allows AI assistants like Claude to access and query your movie and TV show collection via Radarr and Sonarr APIs.",
  image: "https://github.com/BerryKuipers.png",
  actions: [],
  githubUrl: "https://github.com/BerryKuipers/mcp_services_radarr_sonarr",
  _varName: "radarrAndSonarrMcpServerPlugin",
};

const githubIntegrationMcpServerPlugin: Plugin = {
  id: "hs0xf42a7n",
  name: "GitHub Integration MCP Server",
  description:
    "Extracts diffs from GitHub Pull Requests, allowing users to retrieve and analyze changes between branches in a repository.",
  image: "https://github.com/highlight-ing.png",
  actions: [],
  githubUrl: "https://github.com/highlight-ing/highlight-github-mcp",
  _varName: "githubIntegrationMcpServerPlugin",
};

const imageGenerationMcpServer1Plugin: Plugin = {
  id: "y6qfizhsja",
  name: "Image Generation MCP Server",
  description:
    "A Model Context Protocol server that enables high-quality image generation using the Flux.1 Schnell model via Together AI with customizable parameters.",
  image: "https://github.com/manascb1344.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image using Together AI API",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Image height (default: 768)",
          required: false,
        },
        {
          name: "image_path",
          type: "string",
          description: "Optional path to save the generated image as PNG",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description:
            "Model to use for generation (default: black-forest-labs/FLUX.1-schnell-Free)",
          required: false,
        },
        {
          name: "n",
          type: "number",
          description: "Number of images to generate (default: 1)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text prompt for image generation",
          required: true,
        },
        {
          name: "response_format",
          type: "string",
          description: "Response format (default: b64_json)",
          required: false,
        },
        {
          name: "steps",
          type: "number",
          description: "Number of inference steps (default: 1)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Image width (default: 1024)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/manascb1344/together-mcp-server",
  _varName: "imageGenerationMcpServer1Plugin",
};

const puppeteerMcpServerPlugin: Plugin = {
  id: "l6pb307pqw",
  name: "Puppeteer MCP Server",
  description:
    "A Model Context Protocol server that provides browser automation capabilities using Playwright, enabling LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
  image: "https://github.com/twolven.png",
  actions: [],
  githubUrl: "https://github.com/twolven/mcp-server-puppeteer-py",
  _varName: "puppeteerMcpServerPlugin",
};

const mcpDocumentationServicePlugin: Plugin = {
  id: "icfujodcjd",
  name: "MCP Documentation Service",
  description:
    "A Model Context Protocol implementation that enables AI assistants to interact with markdown documentation files, providing capabilities for document management, metadata handling, search, and documentation health analysis.",
  image: "https://github.com/alekspetrov.png",
  actions: [],
  githubUrl: "https://github.com/alekspetrov/mcp-docs-service",
  _varName: "mcpDocumentationServicePlugin",
};

const notionMcpServer4Plugin: Plugin = {
  id: "1456h4f2lq",
  name: "Notion MCP Server",
  description:
    "A Model Context Protocol server that enables Claude and other LLMs to interact with Notion workspaces, providing capabilities like searching, retrieving, creating and updating pages, as well as managing databases.",
  image: "https://github.com/SAhmadUmass.png",
  actions: [],
  githubUrl: "https://github.com/SAhmadUmass/notion-mcp-server",
  _varName: "notionMcpServer4Plugin",
};

const ankiMcpServer1Plugin: Plugin = {
  id: "fpgag671vh",
  name: "Anki MCP Server",
  description:
    "A Model Context Protocol server that enables LLMs to interact with Anki flashcard software through AnkiConnect, allowing for creation and management of flashcards, decks, and note types.",
  image: "https://github.com/nailuoGG.png",
  actions: [
    {
      name: "create_note",
      description: "Create a new note (Basic or Cloze)",
      parameters: [
        {
          name: "back",
          type: "string",
          description: "Back content (for Basic notes)",
          required: false,
        },
        {
          name: "backExtra",
          type: "string",
          description: "Additional back content (for Cloze notes)",
          required: false,
        },
        {
          name: "deck",
          type: "string",
          description: "Deck name",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Custom fields for the note",
          required: false,
        },
        {
          name: "front",
          type: "string",
          description: "Front content (for Basic notes)",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags for the note",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Cloze text (for Cloze notes)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of note to create",
          required: true,
        },
      ],
    },
    {
      name: "list_decks",
      description: "List all available Anki decks",
      parameters: [],
    },
    {
      name: "create_deck",
      description: "Create a new Anki deck",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the deck to create",
          required: true,
        },
      ],
    },
    {
      name: "batch_create_notes",
      description: "Create multiple notes at once",
      parameters: [
        {
          name: "notes",
          type: "object array",
          description: "Parameter: notes",
          required: true,
        },
        {
          name: "stopOnError",
          type: "boolean",
          description: "Whether to stop on first error",
          required: false,
        },
      ],
    },
    {
      name: "search_notes",
      description: "Search for notes using Anki query syntax",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Anki search query",
          required: true,
        },
      ],
    },
    {
      name: "get_note_info",
      description: "Get detailed information about a note",
      parameters: [
        {
          name: "noteId",
          type: "number",
          description: "Note ID",
          required: true,
        },
      ],
    },
    {
      name: "update_note",
      description: "Update an existing note",
      parameters: [
        {
          name: "fields",
          type: "object",
          description: "Fields to update",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "Note ID",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "New tags for the note",
          required: false,
        },
      ],
    },
    {
      name: "delete_note",
      description: "Delete a note",
      parameters: [
        {
          name: "noteId",
          type: "number",
          description: "Note ID to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_note_types",
      description: "List all available note types",
      parameters: [],
    },
    {
      name: "create_note_type",
      description: "Create a new note type",
      parameters: [
        {
          name: "css",
          type: "string",
          description: "CSS styling for the note type",
          required: false,
        },
        {
          name: "fields",
          type: "string array",
          description: "Field names for the note type",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the new note type",
          required: true,
        },
        {
          name: "templates",
          type: "object array",
          description: "Card templates",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nailuoGG/anki-mcp-server",
  _varName: "ankiMcpServer1Plugin",
};

const mongodbMcpServer2Plugin: Plugin = {
  id: "cmywezu1sn",
  name: "MongoDB MCP Server",
  description:
    "A Model Context Protocol server that provides read-only access to MongoDB databases, enabling AI assistants to directly query and analyze MongoDB data while maintaining data safety.",
  image: "https://github.com/jonfreeland.png",
  actions: [
    {
      name: "list_databases",
      description: "List all databases in the MongoDB server.",
      parameters: [],
    },
    {
      name: "list_collections",
      description:
        "List all collections in a database.\n          \nStart here to understand what collections are available before querying.",
      parameters: [
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
      ],
    },
    {
      name: "get_schema",
      description:
        'Infer schema from a collection by analyzing sample documents.\n        \nBest Practice: Use this before querying to understand collection structure.\n\nExample:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "get_schema",\n  arguments: {\n    "collection": "users",\n    "sampleSize": 100\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "sampleSize",
          type: "number",
          description: "Number of documents to sample (default: 100)",
          required: false,
        },
      ],
    },
    {
      name: "query",
      description:
        'Execute a read-only query on a collection using MongoDB query syntax.\n\nSupports both JSON and CSV output formats:\n- Use outputFormat="json" for standard JSON (default)\n- Use outputFormat="csv" for comma-separated values export\n\nBest Practices:\n- Use projections to fetch only needed fields\n- Add limits for large collections\n- Use sort for consistent ordering\n\nExample - Standard Query:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "query",\n  arguments: {\n    "collection": "users",\n    "filter": { "age": { "$gte": 21 } },\n    "projection": { "name": 1, "email": 1 },\n    "sort": { "name": 1 },\n    "limit": 100\n  }\n\nExample - CSV Export:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "query",\n  arguments: {\n    "collection": "users",\n    "filter": { "active": true },\n    "outputFormat": "csv",\n    "formatOptions": {\n      "includeHeaders": true,\n      "delimiter": ","\n    }\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "filter",
          type: "object",
          description:
            "MongoDB query filter using standard MongoDB operators ($eq, $gt, $in, etc.)",
          required: true,
        },
        {
          name: "formatOptions",
          type: "object",
          description: "Format-specific options",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of documents to return (optional)",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "Output format for results (json or csv)",
          required: false,
        },
        {
          name: "projection",
          type: "object",
          description:
            "MongoDB projection to specify fields to return (optional)",
          required: false,
        },
        {
          name: "sort",
          type: "object",
          description: "MongoDB sort specification (optional)",
          required: false,
        },
      ],
    },
    {
      name: "aggregate",
      description:
        'Execute a read-only aggregation pipeline on a collection.\n\nSupported Stages:\n- $match: Filter documents\n- $group: Group documents by a key\n- $sort: Sort documents\n- $project: Shape the output\n- $lookup: Perform left outer joins\n- $unwind: Deconstruct array fields\n\nUnsafe/Blocked Stages:\n- $out: Write results to collection\n- $merge: Merge results into collection\n- $addFields: Add new fields\n- $set: Set field values\n- $unset: Remove fields\n- $replaceRoot: Replace document structure\n- $replaceWith: Replace document\n\nExample - User Statistics by Role:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "aggregate",\n  arguments: {\n    "collection": "users",\n    "pipeline": [\n      { "$match": { "active": true } },\n      { "$group": {\n          "_id": "$role",\n          "count": { "$sum": 1 },\n          "avgAge": { "$avg": "$age" }\n      }},\n      { "$sort": { "count": -1 } }\n    ],\n    "limit": 100\n  }\n\nExample - Posts with Author Details:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "aggregate",\n  arguments: {\n    "collection": "posts",\n    "pipeline": [\n      { "$match": { "published": true } },\n      { "$lookup": {\n          "from": "users",\n          "localField": "authorId",\n          "foreignField": "_id",\n          "as": "author"\n      }},\n      { "$unwind": "$author" },\n      { "$project": {\n          "title": 1,\n          "authorName": "$author.name",\n          "publishDate": 1\n      }}\n    ]\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of documents to return (optional)",
          required: false,
        },
        {
          name: "pipeline",
          type: "object array",
          description:
            "MongoDB aggregation pipeline stages (read-only operations only)",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_stats",
      description:
        "Get detailed statistics about a collection.\n\nReturns information about:\n- Document count and size\n- Storage metrics\n- Index sizes and usage\n- Average document size\n- Padding factor",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
      ],
    },
    {
      name: "get_indexes",
      description:
        "Get information about indexes on a collection.\n\nReturns details about:\n- Index names and fields\n- Index types (single field, compound, text, etc.)\n- Index sizes\n- Index options\n- Usage statistics",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
      ],
    },
    {
      name: "explain_query",
      description:
        "Get the execution plan for a query.\n\nHelps understand:\n- How MongoDB will execute the query\n- Which indexes will be used\n- Number of documents examined\n- Execution stages and timing\n\nUse this to optimize slow queries.",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "filter",
          type: "object",
          description: "MongoDB query filter to explain",
          required: true,
        },
        {
          name: "projection",
          type: "object",
          description: "MongoDB projection (optional)",
          required: false,
        },
        {
          name: "sort",
          type: "object",
          description: "MongoDB sort specification (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_distinct_values",
      description:
        'Get distinct values for a field in a collection.\n\nUseful for:\n- Understanding data distribution\n- Finding unique categories\n- Data quality checks\n- Identifying outliers\n\nExample:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "get_distinct_values",\n  arguments: {\n    "collection": "users",\n    "field": "role",\n    "filter": { "active": true }\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "field",
          type: "string",
          description: "Field name to get distinct values for",
          required: true,
        },
        {
          name: "filter",
          type: "object",
          description:
            "MongoDB query filter to apply before getting distinct values (optional)",
          required: false,
        },
      ],
    },
    {
      name: "sample_data",
      description:
        'Get a random sample of documents from a collection.\n  \nSupports both JSON and CSV output formats:\n- Use outputFormat="json" for standard JSON (default)\n- Use outputFormat="csv" for comma-separated values export\n\nUseful for:\n- Exploratory data analysis\n- Testing with representative data\n- Understanding data distribution\n- Performance testing with realistic data subsets\n\nExample - JSON Sample:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "sample_data",\n  arguments: {\n    "collection": "users",\n    "size": 50\n  }\n\nExample - CSV Export:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "sample_data",\n  arguments: {\n    "collection": "users",\n    "size": 100,\n    "outputFormat": "csv",\n    "formatOptions": {\n      "includeHeaders": true,\n      "delimiter": ","\n    }\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "formatOptions",
          type: "object",
          description: "Format-specific options",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "Output format for results (json or csv)",
          required: false,
        },
        {
          name: "size",
          type: "number",
          description: "Number of random documents to sample (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "count_documents",
      description:
        'Count documents in a collection that match a filter.\n  \nBenefits:\n- More efficient than retrieving full documents\n- Good for understanding data volume\n- Can help planning query strategies\n- Optimize pagination implementation\n\nExample:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "count_documents",\n  arguments: {\n    "collection": "users",\n    "filter": { "active": true, "age": { "$gte": 21 } }\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "filter",
          type: "object",
          description:
            "MongoDB query filter (optional, defaults to count all documents)",
          required: false,
        },
      ],
    },
    {
      name: "find_by_ids",
      description:
        'Find multiple documents by their IDs in a single request.\n  \nAdvantages:\n- More efficient than multiple single document lookups\n- Preserves ID order in results when possible\n- Can filter specific fields with projection\n- Handles both string and ObjectId identifiers\n\nExample:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "find_by_ids",\n  arguments: {\n    "collection": "products",\n    "ids": ["5f8d0f3c", "5f8d0f3d", "5f8d0f3e"],\n    "idField": "_id",\n    "projection": { "name": 1, "price": 1 }\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "idField",
          type: "string",
          description: 'Field containing the IDs (default: "_id")',
          required: false,
        },
        {
          name: "ids",
          type: "string,number array",
          description: "Array of document IDs to look up",
          required: true,
        },
        {
          name: "projection",
          type: "object",
          description:
            "MongoDB projection to specify fields to return (optional)",
          required: false,
        },
      ],
    },
    {
      name: "geo_query",
      description:
        'Execute geospatial queries on a MongoDB collection.\n\nSupports:\n- Finding points near a location\n- Finding documents within a polygon, circle, or box\n- Calculating distances between points\n- GeoJSON and legacy coordinate pair formats\n\nRequirements:\n- Collection must have a geospatial index (2dsphere recommended)\n- Coordinates should follow MongoDB conventions (longitude first, then latitude)\n\nExamples:\n1. Find locations near a point (2 miles radius):\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "geo_query",\n  arguments: {\n    "collection": "restaurants",\n    "operation": "near",\n    "point": [-73.9667, 40.78],\n    "maxDistance": 3218.69,  // 2 miles in meters\n    "distanceField": "distance"\n  }\n\n2. Find locations within a polygon:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "geo_query",\n  arguments: {\n    "collection": "properties",\n    "operation": "geoWithin",\n    "geometry": {\n      "type": "Polygon",\n      "coordinates": [\n        [[-73.958, 40.8], [-73.94, 40.79], [-73.95, 40.76], [-73.97, 40.76], [-73.958, 40.8]]\n      ]\n    }\n  }',
      parameters: [
        {
          name: "additionalFilter",
          type: "object",
          description:
            "Additional MongoDB query criteria to combine with geospatial query",
          required: false,
        },
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "distanceField",
          type: "string",
          description:
            "Field to store calculated distances (for near/nearSphere queries)",
          required: false,
        },
        {
          name: "geometry",
          type: "object",
          description: "GeoJSON geometry for geoWithin/geoIntersects queries",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "locationField",
          type: "string",
          description: 'Field containing geospatial data (default: "location")',
          required: false,
        },
        {
          name: "maxDistance",
          type: "number",
          description: "Maximum distance in meters for near/nearSphere queries",
          required: false,
        },
        {
          name: "minDistance",
          type: "number",
          description: "Minimum distance in meters for near/nearSphere queries",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Geospatial operation to perform",
          required: true,
        },
        {
          name: "point",
          type: "number array",
          description:
            "Point coordinates [longitude, latitude] for near/nearSphere queries",
          required: false,
        },
        {
          name: "spherical",
          type: "boolean",
          description:
            "Calculate distances on a sphere (Earth) rather than flat plane",
          required: false,
        },
      ],
    },
    {
      name: "text_search",
      description:
        'Perform a full-text search on a collection.\n\nRequirements:\n- Collection must have a text index\n- Only one text index per collection is allowed\n\nFeatures:\n- Supports phrases and keywords\n- Word stemming\n- Stop words removal\n- Text score ranking\n\nExample:\nuse_mcp_tool with\n  server_name: "mongodb",\n  tool_name: "text_search",\n  arguments: {\n    "collection": "articles",\n    "searchText": "mongodb database",\n    "filter": { "published": true },\n    "limit": 10,\n    "includeScore": true\n  }',
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "database",
          type: "string",
          description:
            "Database name (optional if default database is configured)",
          required: false,
        },
        {
          name: "filter",
          type: "object",
          description: "Additional MongoDB query filter (optional)",
          required: false,
        },
        {
          name: "includeScore",
          type: "boolean",
          description: "Include text search score in results (optional)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return (optional)",
          required: false,
        },
        {
          name: "searchText",
          type: "string",
          description: "Text to search for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jonfreeland/mongodb-mcp",
  _varName: "mongodbMcpServer2Plugin",
};

const voiceRecorderMcpServerPlugin: Plugin = {
  id: "xryde429jb",
  name: "Voice Recorder MCP Server",
  description:
    "Enables recording audio from a microphone and transcribing it using OpenAI's Whisper model. Works as both a standalone MCP server and a Goose AI agent extension.",
  image: "https://github.com/DefiBax.png",
  actions: [],
  githubUrl: "https://github.com/DefiBax/mcp_servers",
  _varName: "voiceRecorderMcpServerPlugin",
};

const everythingSearchMcpServerPlugin: Plugin = {
  id: "55en8eb40c",
  name: "Everything Search MCP Server",
  description:
    "Provides integration with Everything Search Engine allowing powerful file search capabilities through the Model Context Protocol with advanced search options like regex, case sensitivity, and sorting.",
  image: "https://github.com/Alihkhawaher.png",
  actions: [
    {
      name: "search",
      description: "Search for files using Everything Search",
      parameters: [
        {
          name: "ascending",
          type: "boolean",
          description: "Sort in ascending order",
          required: false,
        },
        {
          name: "caseSensitive",
          type: "boolean",
          description: "Match case",
          required: false,
        },
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results (1-1000, default: 100)",
          required: false,
        },
        {
          name: "path",
          type: "boolean",
          description: "Search in paths",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: false,
        },
        {
          name: "regex",
          type: "boolean",
          description: "Use regular expressions",
          required: false,
        },
        {
          name: "scope",
          type: "string",
          description: "Search scope (default: C:)",
          required: false,
        },
        {
          name: "sortBy",
          type: "string",
          description: "Sort results by",
          required: false,
        },
        {
          name: "wholeWord",
          type: "boolean",
          description: "Match whole words only",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Alihkhawaher/everything-search-server",
  _varName: "everythingSearchMcpServerPlugin",
};

const azureDevopsMcpServerPlugin: Plugin = {
  id: "vbqbnnzcdd",
  name: "Azure DevOps MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to interact with Azure DevOps resources including projects, work items, repositories, pull requests, branches, and pipelines through a standardized protocol.",
  image: "https://github.com/Tiberriver256.png",
  actions: [],
  githubUrl: "https://github.com/Tiberriver256/azure-devops-mcp",
  _varName: "azureDevopsMcpServerPlugin",
};

const hhJiraMcpServerPlugin: Plugin = {
  id: "hrjvakcun4",
  name: "HH JIRA MCP Server",
  description:
    "A Model Context Protocol server that enables integration with JIRA, allowing users to interact with JIRA tasks and issues through Claude AI assistant.",
  image: "https://github.com/alexeydubinin.png",
  actions: [
    {
      name: "search_team_active_portfolios",
      description: "Action for search_team_active_portfolios",
      parameters: [
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: true,
        },
      ],
    },
    {
      name: "create_task",
      description: "Action for create_task",
      parameters: [
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "set_defence_checked",
      description: "Action for set_defence_checked",
      parameters: [
        {
          name: "portfolio",
          type: "integer",
          description: "Parameter: portfolio",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/alexeydubinin/hh-jira-mcp-server",
  _varName: "hhJiraMcpServerPlugin",
};

const linkedinBrowserMcpServerPlugin: Plugin = {
  id: "mlkinlqs5h",
  name: "LinkedIn Browser MCP Server",
  description:
    "A FastMCP-based server that enables programmatic LinkedIn automation and data extraction through browser automation, offering secure authentication and tools for profile operations and post interactions while respecting LinkedIn's rate limits.",
  image: "https://github.com/alinaqi.png",
  actions: [],
  githubUrl: "https://github.com/alinaqi/mcp-linkedin-server",
  _varName: "linkedinBrowserMcpServerPlugin",
};

const modelContextProtocolServerForSolanaClientPlugin: Plugin = {
  id: "jzlk321atf",
  name: "Model Context Protocol Server for Solana Client",
  description:
    "A server that enables interaction with the Solana blockchain, providing access to over 40 Solana RPC methods including getting balances, transaction details, block information, and sending transactions.",
  image: "https://github.com/tywenk.png",
  actions: [],
  githubUrl: "https://github.com/tywenk/mcp-sol",
  _varName: "modelContextProtocolServerForSolanaClientPlugin",
};

const macrostratMcpServerPlugin: Plugin = {
  id: "v67anfiq0s",
  name: "Macrostrat MCP Server",
  description:
    "Enables Claude to query comprehensive geologic data from the Macrostrat API, including geologic units, columns, minerals, and timescales through natural language.",
  image: "https://github.com/blake365.png",
  actions: [
    {
      name: "find-columns",
      description: "Query Macrostrat stratigraphic columns",
      parameters: [
        {
          name: "adjacents",
          type: "boolean",
          description: "Include adjacent columns",
          required: false,
        },
        {
          name: "lat",
          type: "number",
          description: "A valid latitude in decimal degrees",
          required: true,
        },
        {
          name: "lng",
          type: "number",
          description: "A valid longitude in decimal degrees",
          required: true,
        },
        {
          name: "responseType",
          type: "string",
          description: "The length of response long or short",
          required: true,
        },
      ],
    },
    {
      name: "find-units",
      description: "Query Macrostrat geologic units",
      parameters: [
        {
          name: "lat",
          type: "number",
          description: "A valid latitude in decimal degrees",
          required: true,
        },
        {
          name: "lng",
          type: "number",
          description: "A valid longitude in decimal degrees",
          required: true,
        },
        {
          name: "responseType",
          type: "string",
          description:
            "The length of response long or short. Long provides lots of good details",
          required: true,
        },
      ],
    },
    {
      name: "defs",
      description:
        "Routes giving access to standard fields and dictionaries used in Macrostrat",
      parameters: [
        {
          name: "endpoint",
          type: "string",
          description: "The endpoint to query",
          required: true,
        },
        {
          name: "parameters",
          type: "string",
          description: "parameters to pass to the endpoint",
          required: true,
        },
      ],
    },
    {
      name: "defs-autocomplete",
      description:
        "Quickly retrieve all definitions matching a query. Limited to 100 results",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "the search term",
          required: true,
        },
      ],
    },
    {
      name: "mineral-info",
      description: "Get information about a mineral, use one property",
      parameters: [
        {
          name: "element",
          type: "string",
          description: "An element that the mineral is made of",
          required: false,
        },
        {
          name: "mineral",
          type: "string",
          description: "The name of the mineral",
          required: false,
        },
        {
          name: "mineral_type",
          type: "string",
          description: "The type of mineral",
          required: false,
        },
      ],
    },
    {
      name: "timescale",
      description: "Get information about a time period",
      parameters: [
        {
          name: "age",
          type: "number",
          description: "Parameter: age",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/blake365/macrostrat-mcp",
  _varName: "macrostratMcpServerPlugin",
};

const pythonJiraMcpServerPlugin: Plugin = {
  id: "trslzvvi2w",
  name: "Python Jira MCP Server",
  description:
    "A server implementation that allows AI models to interact with Jira through the Model Context Protocol, enabling tasks like JQL searches and retrieving issue details.",
  image: "https://github.com/Chase-Bullock.png",
  actions: [],
  githubUrl: "https://github.com/Chase-Bullock/python-jira-mcp",
  _varName: "pythonJiraMcpServerPlugin",
};

const spotifyMcpServerPlugin: Plugin = {
  id: "el2ody6a89",
  name: "Spotify MCP Server",
  description:
    "A server that connects Claude with Spotify, allowing users to control playback, search content, get information about tracks/albums/artists/playlists, and manage the Spotify queue.",
  image: "https://github.com/varunneal.png",
  actions: [
    {
      name: "SpotifyPlayback",
      description:
        "Manages the current playback with the following actions:\n    - get: Get information about user's current track.\n    - start: Starts playing new item or resumes current playback if called with no uri.\n    - pause: Pauses current playback.\n    - skip: Skips current track.\n    ",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform: 'get', 'start', 'pause' or 'skip'.",
          required: true,
        },
        {
          name: "num_skips",
          type: "string",
          description: "Number of tracks to skip for `skip` action.",
          required: false,
        },
        {
          name: "spotify_uri",
          type: "string",
          description:
            "Spotify uri of item to play for 'start' action. If omitted, resumes current playback.",
          required: false,
        },
      ],
    },
    {
      name: "SpotifySearch",
      description:
        "Search for tracks, albums, artists, or playlists on Spotify.",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Maximum number of items to return",
          required: false,
        },
        {
          name: "qtype",
          type: "string",
          description:
            "Type of items to search for (track, album, artist, playlist, or comma-separated combination)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "query term",
          required: true,
        },
      ],
    },
    {
      name: "SpotifyQueue",
      description: "Manage the playback queue - get the queue or add tracks.",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform: 'add' or 'get'.",
          required: true,
        },
        {
          name: "track_id",
          type: "string",
          description: "Track ID to add to queue (required for add action)",
          required: false,
        },
      ],
    },
    {
      name: "SpotifyGetInfo",
      description:
        "Get detailed information about a Spotify item (track, album, artist, or playlist).",
      parameters: [
        {
          name: "item_id",
          type: "string",
          description: "ID of the item to get information about",
          required: true,
        },
        {
          name: "qtype",
          type: "string",
          description:
            "Type of item: 'track', 'album', 'artist', or 'playlist'. If 'playlist' or 'album', returns its tracks. If 'artist',returns albums and top tracks.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/varunneal/spotify-mcp",
  _varName: "spotifyMcpServerPlugin",
};

const pythonLocalMcpServerPlugin: Plugin = {
  id: "cuy4zc6k84",
  name: "Python Local MCP Server",
  description:
    "Provides an interactive Python REPL environment that maintains persistent session state, allowing users to execute Python code and access session history.",
  image: "https://github.com/Alec2435.png",
  actions: [],
  githubUrl: "https://github.com/Alec2435/python_mcp",
  _varName: "pythonLocalMcpServerPlugin",
};

const taskwarriorMcpServerPlugin: Plugin = {
  id: "e8w3e1su1x",
  name: "TaskWarrior MCP Server",
  description:
    "Node.js server implementing Model Context Protocol that enables interaction with TaskWarrior through natural language to view, filter, add, and complete tasks.",
  image: "https://github.com/awwaiid.png",
  actions: [
    {
      name: "get_next_tasks",
      description: "Get a list of all pending tasks",
      parameters: [
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
      ],
    },
    {
      name: "mark_task_done",
      description: "Mark a task as done (completed)",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter: identifier",
          required: true,
        },
      ],
    },
    {
      name: "add_task",
      description: "Add a new task",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: true,
        },
        {
          name: "due",
          type: "string",
          description: "Parameter: due",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "Parameter: priority",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/awwaiid/mcp-server-taskwarrior",
  _varName: "taskwarriorMcpServerPlugin",
};

const cloudflareMcpServerPlugin: Plugin = {
  id: "1rxd7s0omi",
  name: "Cloudflare MCP Server",
  description:
    "An MCP server that allows using natural language to manage Cloudflare resources (Workers, KV, R2, D1) through Claude Desktop, VSCode, and other MCP clients.",
  image: "https://github.com/GutMutCode.png",
  actions: [],
  githubUrl: "https://github.com/GutMutCode/mcp-server-cloudflare",
  _varName: "cloudflareMcpServerPlugin",
};

const sourcesyncaiMcpServerPlugin: Plugin = {
  id: "3llggpfti7",
  name: "SourceSync.ai MCP Server",
  description:
    "A Model Context Protocol server that enables AI models to interact with SourceSync.ai's knowledge management platform for managing documents, ingesting content from various sources, and performing semantic searches.",
  image: "https://github.com/scmdr.png",
  actions: [
    {
      name: "validateApiKey",
      description:
        "Validates the API key by attempting to list namespaces. Returns the list of namespaces if successful.",
      parameters: [],
    },
    {
      name: "createNamespace",
      description:
        "Creates a new namespace with the provided configuration. Requires a name, file storage configuration, vector storage configuration, and embedding model configuration.",
      parameters: [
        {
          name: "embeddingModelConfig",
          type: "string",
          description: "Parameter: embeddingModelConfig",
          required: true,
        },
        {
          name: "fileStorageConfig",
          type: "object",
          description: "Parameter: fileStorageConfig",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
        {
          name: "vectorStorageConfig",
          type: "object",
          description: "Parameter: vectorStorageConfig",
          required: true,
        },
        {
          name: "webScraperConfig",
          type: "object",
          description: "Parameter: webScraperConfig",
          required: false,
        },
      ],
    },
    {
      name: "listNamespaces",
      description:
        "Lists all namespaces available for the current API key and optional tenant ID.",
      parameters: [
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "getNamespace",
      description: "Retrieves a specific namespace by its ID.",
      parameters: [
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "updateNamespace",
      description:
        "Updates an existing namespace with the provided configuration parameters.",
      parameters: [
        {
          name: "boxConfig",
          type: "object",
          description: "Parameter: boxConfig",
          required: false,
        },
        {
          name: "dropboxConfig",
          type: "object",
          description: "Parameter: dropboxConfig",
          required: false,
        },
        {
          name: "embeddingModelConfig",
          type: "string",
          description: "Parameter: embeddingModelConfig",
          required: false,
        },
        {
          name: "fileStorageConfig",
          type: "object",
          description: "Parameter: fileStorageConfig",
          required: false,
        },
        {
          name: "googleDriveConfig",
          type: "object",
          description: "Parameter: googleDriveConfig",
          required: false,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "notionConfig",
          type: "object",
          description: "Parameter: notionConfig",
          required: false,
        },
        {
          name: "onedriveConfig",
          type: "object",
          description: "Parameter: onedriveConfig",
          required: false,
        },
        {
          name: "sharepointConfig",
          type: "object",
          description: "Parameter: sharepointConfig",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
        {
          name: "vectorStorageConfig",
          type: "object",
          description: "Parameter: vectorStorageConfig",
          required: false,
        },
        {
          name: "webScraperConfig",
          type: "object",
          description: "Parameter: webScraperConfig",
          required: false,
        },
      ],
    },
    {
      name: "deleteNamespace",
      description: "Permanently deletes a namespace by its ID.",
      parameters: [
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "ingestText",
      description:
        "Ingests raw text content into the namespace. Supports optional metadata and chunk configuration.",
      parameters: [
        {
          name: "ingestConfig",
          type: "object",
          description: "Parameter: ingestConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "ingestFile",
      description:
        "Ingests a file into the namespace. Supports various file formats with automatic parsing.",
      parameters: [
        {
          name: "chunkConfig",
          type: "object",
          description:
            "Optional Chunk config. When not passed, default chunk config will be used.",
          required: false,
        },
        {
          name: "file",
          type: "string",
          description: "Parameter: file",
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Parameter: metadata",
          required: false,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "ingestUrls",
      description:
        "Ingests content from a list of URLs. Supports scraping options and metadata.",
      parameters: [
        {
          name: "ingestConfig",
          type: "object",
          description: "Parameter: ingestConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "ingestSitemap",
      description:
        "Ingests content from a website using its sitemap.xml. Supports path filtering and link limits.",
      parameters: [
        {
          name: "ingestConfig",
          type: "object",
          description: "Parameter: ingestConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "ingestWebsite",
      description:
        "Crawls and ingests content from a website recursively. Supports depth control and path filtering.",
      parameters: [
        {
          name: "ingestConfig",
          type: "object",
          description: "Parameter: ingestConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "ingestConnector",
      description:
        "Ingests all documents in the connector that are in backlog or failed status. No need to provide the document ids or file ids for the ingestion. Ids are already in the backlog when picked thorough the picker. If not, the user has to go through the authorization flow again, where they will be asked to pick the documents again.",
      parameters: [
        {
          name: "ingestConfig",
          type: "object",
          description: "Parameter: ingestConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "getIngestJobRunStatus",
      description: "Checks the status of a previously submitted ingestion job.",
      parameters: [
        {
          name: "ingestJobRunId",
          type: "string",
          description: "Parameter: ingestJobRunId",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "fetchDocuments",
      description:
        "Fetches documents from the namespace based on filter criteria. Supports pagination and including specific document properties.",
      parameters: [
        {
          name: "documentIds",
          type: "string array",
          description: "Parameter: documentIds",
          required: false,
        },
        {
          name: "filterConfig",
          type: "object",
          description: "Parameter: filterConfig",
          required: true,
        },
        {
          name: "includeConfig",
          type: "object",
          description: "Parameter: includeConfig",
          required: false,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "pagination",
          type: "object",
          description: "Parameter: pagination",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "updateDocuments",
      description:
        "Updates metadata for documents that match the specified filter criteria.",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Parameter: data",
          required: true,
        },
        {
          name: "documents",
          type: "object array",
          description: "Parameter: documents",
          required: true,
        },
        {
          name: "filterConfig",
          type: "object",
          description: "Parameter: filterConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "deleteDocuments",
      description:
        "Permanently deletes documents that match the specified filter criteria.",
      parameters: [
        {
          name: "documentIds",
          type: "string array",
          description: "Parameter: documentIds",
          required: false,
        },
        {
          name: "filterConfig",
          type: "object",
          description: "Parameter: filterConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "resyncDocuments",
      description:
        "Reprocesses documents that match the specified filter criteria. Useful for updating after schema changes.",
      parameters: [
        {
          name: "documentIds",
          type: "string array",
          description: "Parameter: documentIds",
          required: false,
        },
        {
          name: "filterConfig",
          type: "object",
          description: "Parameter: filterConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "semanticSearch",
      description:
        "Performs semantic search across the namespace to find relevant content based on meaning rather than exact keyword matches.",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "scoreThreshold",
          type: "number",
          description: "Parameter: scoreThreshold",
          required: false,
        },
        {
          name: "searchType",
          type: "string",
          description: "Parameter: searchType",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
        {
          name: "topK",
          type: "number",
          description: "Parameter: topK",
          required: false,
        },
      ],
    },
    {
      name: "hybridSearch",
      description:
        "Performs a combined keyword and semantic search, balancing between exact matches and semantic similarity. Requires hybridConfig with weights for both search types.",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "hybridConfig",
          type: "object",
          description: "Parameter: hybridConfig",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "scoreThreshold",
          type: "number",
          description: "Parameter: scoreThreshold",
          required: false,
        },
        {
          name: "searchType",
          type: "string",
          description: "Parameter: searchType",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
        {
          name: "topK",
          type: "number",
          description: "Parameter: topK",
          required: false,
        },
      ],
    },
    {
      name: "createConnection",
      description:
        "Creates a new connection to a specific source. The connector parameter should be a valid SourceSync connector enum value. The clientRedirectUrl parameter is optional and can be used to specify a custom redirect URL for the connection. This will give you a authorization url which you can redirect the user to. The user will then be asked to pick the documents they want to ingest.",
      parameters: [
        {
          name: "clientRedirectUrl",
          type: "string",
          description: "Parameter: clientRedirectUrl",
          required: false,
        },
        {
          name: "connector",
          type: "string",
          description: "Parameter: connector",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "listConnections",
      description:
        "Lists all connections for the current namespace, optionally filtered by connector type.",
      parameters: [
        {
          name: "connector",
          type: "string",
          description: "Parameter: connector",
          required: false,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "getConnection",
      description: "Retrieves details for a specific connection by its ID.",
      parameters: [
        {
          name: "connectionId",
          type: "string",
          description: "Parameter: connectionId",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "updateConnection",
      description:
        "Updates a connection to a specific source. The connector parameter should be a valid SourceSync connector enum value. The clientRedirectUrl parameter is optional and can be used to specify a custom redirect URL for the connection. This will give you a authorization url which you can redirect the user to. The user will then be asked to pick the documents they want to ingest. This is useful if you want to update the connection to a different source or if you want to update the clientRedirectUrl or if you want to pick a different or new set of documents.",
      parameters: [
        {
          name: "clientRedirectUrl",
          type: "string",
          description: "Parameter: clientRedirectUrl",
          required: false,
        },
        {
          name: "connectionId",
          type: "string",
          description: "Parameter: connectionId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "revokeConnection",
      description:
        "Revokes access for a specific connection, removing the integration with the external service.",
      parameters: [
        {
          name: "connectionId",
          type: "string",
          description: "Parameter: connectionId",
          required: true,
        },
        {
          name: "namespaceId",
          type: "string",
          description: "Parameter: namespaceId",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
      ],
    },
    {
      name: "fetchUrlContent",
      description:
        "Fetches the content of a URL. Particularly useful for fetching parsed text file URLs.",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "Parameter: apiKey",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Parameter: tenantId",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/scmdr/sourcesyncai-mcp",
  _varName: "sourcesyncaiMcpServerPlugin",
};

const mcpServer2Plugin: Plugin = {
  id: "d2sek4qalu",
  name: "MCP Server",
  description:
    "Provides browser automation capabilities through an API endpoint that interprets natural language commands to perform web tasks using OpenAI's GPT models.",
  image: "https://github.com/jonnyhoff.png",
  actions: [],
  githubUrl: "https://github.com/jonnyhoff/mcp-browser-use",
  _varName: "mcpServer2Plugin",
};

const mcpEthersWalletPlugin: Plugin = {
  id: "j75jbdup5m",
  name: "MCP Ethers Wallet",
  description:
    "A Model Context Protocol server that gives LLMs the ability to interact with Ethereum networks, manage wallets, query blockchain data, and execute smart contract operations through a standardized interface.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "getSupportedNetworks",
      description:
        "Get a list of all supported networks and their configurations. Shows which network is the default (used when no provider is specified). Call this first to discover available networks before using other network-related functions.",
      parameters: [],
    },
    {
      name: "checkWalletExists",
      description:
        "Check if there is a wallet configured on the server. Returns basic wallet info like address but never exposes private keys.",
      parameters: [
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks. If not provided, uses the default network.",
          required: false,
        },
      ],
    },
    {
      name: "getWalletBalance",
      description: "Get the ETH balance of a wallet",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to query",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "getERC20Balance",
      description: "Get the ERC20 token balance of a wallet",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to query",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "tokenAddress",
          type: "string",
          description: "The address of the ERC20 token contract",
          required: true,
        },
      ],
    },
    {
      name: "getWalletTransactionCount",
      description: "Get the number of transactions ever sent by an address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to query",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "getBlockNumber",
      description: "Get the current block number",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "getBlockDetails",
      description: "Get details about a block",
      parameters: [
        {
          name: "blockTag",
          type: ["string", "number"],
          description: "The block number or the string 'latest'",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "getTransactionDetails",
      description: "Get details about a transaction",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "txHash",
          type: "string",
          description: "The transaction hash to lookup",
          required: true,
        },
      ],
    },
    {
      name: "getGasPrice",
      description: "Get the current gas price",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "getFeeData",
      description: "Get the current network fee data",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "getContractCode",
      description: "Get a contract's bytecode",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The contract's address",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "lookupAddress",
      description: "Get the ENS name for an address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to resolve",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "resolveName",
      description: "Get the address for an ENS name",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The ENS name to resolve",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "formatEther",
      description: "Convert a wei value to a decimal string in ether",
      parameters: [
        {
          name: "wei",
          type: "string",
          description: "The wei value to format",
          required: true,
        },
      ],
    },
    {
      name: "parseEther",
      description: "Convert an ether value to wei",
      parameters: [
        {
          name: "ether",
          type: "string",
          description: "The ether value to parse",
          required: true,
        },
      ],
    },
    {
      name: "formatUnits",
      description: "Convert a value to a decimal string with specified units",
      parameters: [
        {
          name: "unit",
          type: ["string", "number"],
          description: "The number of decimals or unit name (e.g., 'gwei', 18)",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "The value to format",
          required: true,
        },
      ],
    },
    {
      name: "parseUnits",
      description:
        "Convert a decimal string to its smallest unit representation",
      parameters: [
        {
          name: "unit",
          type: ["string", "number"],
          description: "The number of decimals or unit name (e.g., 'gwei', 18)",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "The decimal string to parse",
          required: true,
        },
      ],
    },
    {
      name: "sendTransaction",
      description: "Send ETH from the server's wallet to a recipient",
      parameters: [
        {
          name: "data",
          type: "string",
          description: "Optional. Data to include in the transaction",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "The recipient address",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "The amount of ETH to send",
          required: true,
        },
      ],
    },
    {
      name: "signMessage",
      description: "Sign a message using the server's wallet",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "The message to sign",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "contractCall",
      description:
        "Call a view/pure method on a smart contract (read-only operations)",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "args",
          type: "any array",
          description: "The arguments to pass to the method",
          required: false,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use for the call. If provided, will verify it matches the provider's network.",
          required: false,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the contract to call",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description: "The name of the method to call",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "contractCallView",
      description:
        "Call a view/pure method on a smart contract (read-only operations)",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "args",
          type: "any array",
          description: "The arguments to pass to the method",
          required: false,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use for the call. If provided, will verify it matches the provider's network.",
          required: false,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the contract to call",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description:
            "The name of the method to call (must be a view/pure function)",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
    {
      name: "contractCallWithEstimate",
      description:
        "Call a method on a smart contract with automatic gas estimation",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the smart contract",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description: "The method name to invoke",
          required: true,
        },
        {
          name: "methodArgs",
          type: "string,number,boolean,object array",
          description: "An array of arguments to pass to the method",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Optional. The amount of ETH to send with the call",
          required: false,
        },
      ],
    },
    {
      name: "contractSendTransaction",
      description:
        "Call a method on a smart contract and send a transaction with custom parameters",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the smart contract",
          required: true,
        },
        {
          name: "gasLimit",
          type: "string",
          description: "Optional. The gas limit for the transaction",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "The method name to invoke",
          required: true,
        },
        {
          name: "methodArgs",
          type: "string,number,boolean,object array",
          description: "An array of arguments to pass to the method",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Optional. The amount of ETH to send with the call",
          required: false,
        },
      ],
    },
    {
      name: "contractSendTransactionWithEstimate",
      description:
        "Call a method on a smart contract and send a transaction with automatic gas estimation",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the smart contract",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description: "The method name to invoke",
          required: true,
        },
        {
          name: "methodArgs",
          type: "string,number,boolean,object array",
          description: "An array of arguments to pass to the method",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Optional. The amount of ETH to send with the call",
          required: false,
        },
      ],
    },
    {
      name: "contractCallWithOverrides",
      description: "Call a method on a smart contract with advanced options",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the smart contract",
          required: true,
        },
        {
          name: "gasLimit",
          type: "string",
          description: "Optional. A manual gas limit for the transaction",
          required: false,
        },
        {
          name: "gasPrice",
          type: "string",
          description: "Optional. A manual gas price for legacy transactions",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "The method name to invoke",
          required: true,
        },
        {
          name: "methodArgs",
          type: "string,number,boolean,object array",
          description: "An array of arguments to pass to the method",
          required: false,
        },
        {
          name: "nonce",
          type: "number",
          description: "Optional. A manual nonce for the transaction",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Optional. The amount of ETH to send with the call",
          required: false,
        },
      ],
    },
    {
      name: "contractSendTransactionWithOverrides",
      description:
        "Call a method on a smart contract and send a transaction with custom parameters",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the smart contract",
          required: true,
        },
        {
          name: "gasLimit",
          type: "string",
          description: "Optional. The gas limit for the transaction",
          required: false,
        },
        {
          name: "gasPrice",
          type: "string",
          description: "Optional. A manual gas price for legacy transactions",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "The method name to invoke",
          required: true,
        },
        {
          name: "methodArgs",
          type: "string,number,boolean,object array",
          description: "An array of arguments to pass to the method",
          required: false,
        },
        {
          name: "nonce",
          type: "number",
          description: "Optional. A manual nonce for the transaction",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Optional. The amount of ETH to send with the call",
          required: false,
        },
      ],
    },
    {
      name: "sendRawTransaction",
      description: "Send a raw transaction",
      parameters: [
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "signedTransaction",
          type: "string",
          description: "A fully serialized and signed transaction",
          required: true,
        },
      ],
    },
    {
      name: "queryLogs",
      description: "Query historical logs",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The contract address emitting the events (optional).",
          required: false,
        },
        {
          name: "fromBlock",
          type: ["string", "number"],
          description: "The starting block number (optional).",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "toBlock",
          type: ["string", "number"],
          description: "The ending block number (optional).",
          required: false,
        },
        {
          name: "topics",
          type: "string,null,array array",
          description:
            "A list of topics to filter by. Each item can be a string, null, or an array of strings (optional)",
          required: false,
        },
      ],
    },
    {
      name: "contractEvents",
      description: "Query historical events from a contract",
      parameters: [
        {
          name: "abi",
          type: "string",
          description: "The ABI of the contract as a JSON string",
          required: true,
        },
        {
          name: "contractAddress",
          type: "string",
          description: "The address of the contract to query events from",
          required: true,
        },
        {
          name: "eventName",
          type: "string",
          description: "The name of the event to look for. (Optional).",
          required: false,
        },
        {
          name: "fromBlock",
          type: ["string", "number"],
          description: "The starting block number (optional).",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "toBlock",
          type: ["string", "number"],
          description: "The ending block number (optional).",
          required: false,
        },
        {
          name: "topics",
          type: "string,null,array array",
          description:
            "A list of topics to filter by. Each item can be a string, null, or an array of strings (optional)",
          required: false,
        },
      ],
    },
    {
      name: "sendTransactionWithOptions",
      description:
        "Send a transaction with advanced options including gas limit, gas price, and nonce",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use for the transaction. If provided, will verify it matches the provider's network.",
          required: false,
        },
        {
          name: "data",
          type: "string",
          description: "Optional. Data to include in the transaction",
          required: false,
        },
        {
          name: "gasLimit",
          type: "string",
          description: "Optional. The gas limit for the transaction",
          required: false,
        },
        {
          name: "gasPrice",
          type: "string",
          description: "Optional. The gas price in gwei",
          required: false,
        },
        {
          name: "nonce",
          type: "number",
          description: "Optional. The nonce to use for the transaction",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "The recipient address",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "The amount of ETH to send",
          required: true,
        },
      ],
    },
    {
      name: "getTransactionsByBlock",
      description: "Get details about transactions in a specific block.",
      parameters: [
        {
          name: "blockTag",
          type: ["string", "number"],
          description: "The block number or the string 'latest'",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description:
            "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used.",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            "Optional. Either a network name or custom RPC URL. Use getSupportedNetworks to get a list of supported networks.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-ethers-server",
  _varName: "mcpEthersWalletPlugin",
};

const abapadtapiMcpserverPlugin: Plugin = {
  id: "p1uxnf0htn",
  name: "ABAP-ADT-API MCP-Server",
  description:
    "A Model Context Protocol server that facilitates communication between ABAP systems and MCP clients, providing tools for managing ABAP objects, handling transport requests, and performing code analysis to enhance ABAP development workflows.",
  image: "https://github.com/mario-andreschak.png",
  actions: [
    {
      name: "login",
      description: "Authenticate with ABAP system",
      parameters: [],
    },
    {
      name: "logout",
      description: "Terminate ABAP session",
      parameters: [],
    },
    {
      name: "dropSession",
      description: "Clear local session cache",
      parameters: [],
    },
    {
      name: "transportInfo",
      description: "Get transport information for an object source",
      parameters: [
        {
          name: "devClass",
          type: "string",
          description: "Development class",
          required: false,
        },
        {
          name: "objSourceUrl",
          type: "string",
          description: "URL of the object source",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Transport operation",
          required: false,
        },
      ],
    },
    {
      name: "createTransport",
      description: "Create a new transport request",
      parameters: [
        {
          name: "DEVCLASS",
          type: "string",
          description: "Development class",
          required: true,
        },
        {
          name: "REQUEST_TEXT",
          type: "string",
          description: "Description of the transport request",
          required: true,
        },
        {
          name: "objSourceUrl",
          type: "string",
          description: "URL of the object source",
          required: true,
        },
        {
          name: "transportLayer",
          type: "string",
          description: "Transport layer",
          required: false,
        },
      ],
    },
    {
      name: "hasTransportConfig",
      description: "Check if transport configuration exists",
      parameters: [],
    },
    {
      name: "transportConfigurations",
      description: "Retrieves transport configurations.",
      parameters: [],
    },
    {
      name: "getTransportConfiguration",
      description: "Retrieves a specific transport configuration.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the transport configuration.",
          required: true,
        },
      ],
    },
    {
      name: "setTransportsConfig",
      description: "Sets transport configurations.",
      parameters: [
        {
          name: "config",
          type: "string",
          description: "The transport configuration.",
          required: true,
        },
        {
          name: "etag",
          type: "string",
          description: "The ETag for the transport configuration.",
          required: true,
        },
        {
          name: "uri",
          type: "string",
          description: "The URI for the transport configuration.",
          required: true,
        },
      ],
    },
    {
      name: "createTransportsConfig",
      description: "Creates transport configurations.",
      parameters: [],
    },
    {
      name: "userTransports",
      description: "Retrieves transports for a user.",
      parameters: [
        {
          name: "targets",
          type: "boolean",
          description: "Whether to include target systems.",
          required: false,
        },
        {
          name: "user",
          type: "string",
          description: "The user.",
          required: true,
        },
      ],
    },
    {
      name: "transportsByConfig",
      description: "Retrieves transports by configuration.",
      parameters: [
        {
          name: "configUri",
          type: "string",
          description: "The configuration URI.",
          required: true,
        },
        {
          name: "targets",
          type: "boolean",
          description: "Whether to include target systems.",
          required: false,
        },
      ],
    },
    {
      name: "transportDelete",
      description: "Deletes a transport.",
      parameters: [
        {
          name: "transportNumber",
          type: "string",
          description: "The transport number.",
          required: true,
        },
      ],
    },
    {
      name: "transportRelease",
      description: "Releases a transport.",
      parameters: [
        {
          name: "IgnoreATC",
          type: "boolean",
          description: "Whether to ignore ATC checks.",
          required: false,
        },
        {
          name: "ignoreLocks",
          type: "boolean",
          description: "Whether to ignore locks.",
          required: false,
        },
        {
          name: "transportNumber",
          type: "string",
          description: "The transport number.",
          required: true,
        },
      ],
    },
    {
      name: "transportSetOwner",
      description: "Sets the owner of a transport.",
      parameters: [
        {
          name: "targetuser",
          type: "string",
          description: "The target user.",
          required: true,
        },
        {
          name: "transportNumber",
          type: "string",
          description: "The transport number.",
          required: true,
        },
      ],
    },
    {
      name: "transportAddUser",
      description: "Adds a user to a transport.",
      parameters: [
        {
          name: "transportNumber",
          type: "string",
          description: "The transport number.",
          required: true,
        },
        {
          name: "user",
          type: "string",
          description: "The user to add.",
          required: true,
        },
      ],
    },
    {
      name: "systemUsers",
      description: "Retrieves a list of system users.",
      parameters: [],
    },
    {
      name: "transportReference",
      description: "Retrieves a transport reference.",
      parameters: [
        {
          name: "obj_name",
          type: "string",
          description: "The object name.",
          required: true,
        },
        {
          name: "obj_wbtype",
          type: "string",
          description: "The object type.",
          required: true,
        },
        {
          name: "pgmid",
          type: "string",
          description: "The program ID.",
          required: true,
        },
        {
          name: "tr_number",
          type: "string",
          description: "The transport number.",
          required: false,
        },
      ],
    },
    {
      name: "objectStructure",
      description: "Get object structure details",
      parameters: [
        {
          name: "objectUrl",
          type: "string",
          description: "URL of the object",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Version of the object",
          required: false,
        },
      ],
    },
    {
      name: "searchObject",
      description: "Search for objects",
      parameters: [
        {
          name: "max",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
        {
          name: "objType",
          type: "string",
          description: "Object type filter",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: true,
        },
      ],
    },
    {
      name: "findObjectPath",
      description: "Find path for an object",
      parameters: [
        {
          name: "objectUrl",
          type: "string",
          description: "URL of the object to find path for",
          required: true,
        },
      ],
    },
    {
      name: "objectTypes",
      description: "Retrieves object types.",
      parameters: [],
    },
    {
      name: "reentranceTicket",
      description: "Retrieves a reentrance ticket.",
      parameters: [],
    },
    {
      name: "classIncludes",
      description: "Get class includes structure",
      parameters: [
        {
          name: "clas",
          type: "string",
          description: "The class name",
          required: true,
        },
      ],
    },
    {
      name: "classComponents",
      description: "List class components",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the class",
          required: true,
        },
      ],
    },
    {
      name: "createTestInclude",
      description: "Create test include for class",
      parameters: [
        {
          name: "clas",
          type: "string",
          description: "The class name",
          required: true,
        },
        {
          name: "lockHandle",
          type: "string",
          description: "The lock handle",
          required: true,
        },
        {
          name: "transport",
          type: "string",
          description: "The transport number",
          required: false,
        },
      ],
    },
    {
      name: "syntaxCheckCode",
      description: "Perform ABAP syntax check with source code",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Parameter: code",
          required: true,
        },
        {
          name: "mainProgram",
          type: "string",
          description: "Parameter: mainProgram",
          required: false,
        },
        {
          name: "mainUrl",
          type: "string",
          description: "Parameter: mainUrl",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Parameter: version",
          required: false,
        },
      ],
    },
    {
      name: "syntaxCheckCdsUrl",
      description: "Perform ABAP syntax check with CDS URL",
      parameters: [
        {
          name: "cdsUrl",
          type: "string",
          description: "Parameter: cdsUrl",
          required: true,
        },
      ],
    },
    {
      name: "codeCompletion",
      description: "Get code completion suggestions",
      parameters: [
        {
          name: "column",
          type: "number",
          description: "Parameter: column",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
        {
          name: "sourceUrl",
          type: "string",
          description: "Parameter: sourceUrl",
          required: true,
        },
      ],
    },
    {
      name: "findDefinition",
      description: "Find symbol definition",
      parameters: [
        {
          name: "endCol",
          type: "number",
          description: "Parameter: endCol",
          required: true,
        },
        {
          name: "implementation",
          type: "boolean",
          description: "Parameter: implementation",
          required: false,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: true,
        },
        {
          name: "mainProgram",
          type: "string",
          description: "Parameter: mainProgram",
          required: false,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
        {
          name: "startCol",
          type: "number",
          description: "Parameter: startCol",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "usageReferences",
      description: "Find symbol references",
      parameters: [
        {
          name: "column",
          type: "number",
          description: "Parameter: column",
          required: false,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "syntaxCheckTypes",
      description: "Retrieves syntax check types.",
      parameters: [],
    },
    {
      name: "codeCompletionFull",
      description: "Performs full code completion.",
      parameters: [
        {
          name: "column",
          type: "number",
          description: "Parameter: column",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: true,
        },
        {
          name: "patternKey",
          type: "string",
          description: "Parameter: patternKey",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
        {
          name: "sourceUrl",
          type: "string",
          description: "Parameter: sourceUrl",
          required: true,
        },
      ],
    },
    {
      name: "runClass",
      description: "Runs a class.",
      parameters: [
        {
          name: "className",
          type: "string",
          description: "Parameter: className",
          required: true,
        },
      ],
    },
    {
      name: "codeCompletionElement",
      description: "Retrieves code completion element information.",
      parameters: [
        {
          name: "column",
          type: "number",
          description: "Parameter: column",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
        {
          name: "sourceUrl",
          type: "string",
          description: "Parameter: sourceUrl",
          required: true,
        },
      ],
    },
    {
      name: "usageReferenceSnippets",
      description: "Retrieves usage reference snippets.",
      parameters: [
        {
          name: "references",
          type: "array",
          description: "Parameter: references",
          required: true,
        },
      ],
    },
    {
      name: "fixProposals",
      description: "Retrieves fix proposals.",
      parameters: [
        {
          name: "column",
          type: "number",
          description: "Parameter: column",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "fixEdits",
      description: "Applies fix edits.",
      parameters: [
        {
          name: "proposal",
          type: "string",
          description: "Parameter: proposal",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
      ],
    },
    {
      name: "fragmentMappings",
      description: "Retrieves fragment mappings.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "abapDocumentation",
      description: "Retrieves ABAP documentation.",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: true,
        },
        {
          name: "column",
          type: "number",
          description: "Parameter: column",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "line",
          type: "number",
          description: "Parameter: line",
          required: true,
        },
        {
          name: "objectUri",
          type: "string",
          description: "Parameter: objectUri",
          required: true,
        },
      ],
    },
    {
      name: "lock",
      description: "Lock an object",
      parameters: [
        {
          name: "accessMode",
          type: "string",
          description: "Access mode for the lock",
          required: false,
        },
        {
          name: "objectUrl",
          type: "string",
          description: "URL of the object to lock",
          required: true,
        },
      ],
    },
    {
      name: "unLock",
      description: "Unlock an object",
      parameters: [
        {
          name: "lockHandle",
          type: "string",
          description: "Lock handle obtained from previous lock operation",
          required: true,
        },
        {
          name: "objectUrl",
          type: "string",
          description: "URL of the object to unlock",
          required: true,
        },
      ],
    },
    {
      name: "getObjectSource",
      description: "Retrieves source code for ABAP objects",
      parameters: [
        {
          name: "objectSourceUrl",
          type: "string",
          description: "Parameter: objectSourceUrl",
          required: true,
        },
        {
          name: "options",
          type: "string",
          description: "Parameter: options",
          required: false,
        },
      ],
    },
    {
      name: "setObjectSource",
      description: "Sets source code for ABAP objects",
      parameters: [
        {
          name: "lockHandle",
          type: "string",
          description: "Parameter: lockHandle",
          required: true,
        },
        {
          name: "objectSourceUrl",
          type: "string",
          description: "Parameter: objectSourceUrl",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: true,
        },
        {
          name: "transport",
          type: "string",
          description: "Parameter: transport",
          required: false,
        },
      ],
    },
    {
      name: "deleteObject",
      description: "Deletes an ABAP object from the system",
      parameters: [
        {
          name: "lockHandle",
          type: "string",
          description: "Lock handle for the object",
          required: true,
        },
        {
          name: "objectUrl",
          type: "string",
          description: "URL of the object to delete",
          required: true,
        },
        {
          name: "transport",
          type: "string",
          description: "Transport request number",
          required: false,
        },
      ],
    },
    {
      name: "activateObjects",
      description: "Activate ABAP objects using object references",
      parameters: [
        {
          name: "objects",
          type: "string",
          description:
            "JSON array of objects to activate. Each object must have adtcore:uri, adtcore:type, adtcore:name, and adtcore:parentUri properties",
          required: true,
        },
        {
          name: "preauditRequested",
          type: "boolean",
          description: "Whether to perform pre-audit checks",
          required: false,
        },
      ],
    },
    {
      name: "activateByName",
      description: "Activate an ABAP object using name and URL",
      parameters: [
        {
          name: "mainInclude",
          type: "string",
          description: "Main include context",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "Name of the object",
          required: true,
        },
        {
          name: "objectUrl",
          type: "string",
          description: "URL of the object",
          required: true,
        },
        {
          name: "preauditRequested",
          type: "boolean",
          description: "Whether to perform pre-audit checks",
          required: false,
        },
      ],
    },
    {
      name: "inactiveObjects",
      description: "Get list of inactive objects",
      parameters: [],
    },
    {
      name: "objectRegistrationInfo",
      description: "Get registration information for an ABAP object",
      parameters: [
        {
          name: "objectUrl",
          type: "string",
          description: "Parameter: objectUrl",
          required: true,
        },
      ],
    },
    {
      name: "validateNewObject",
      description: "Validate parameters for a new ABAP object",
      parameters: [
        {
          name: "options",
          type: "string",
          description: "Parameter: options",
          required: true,
        },
      ],
    },
    {
      name: "createObject",
      description: "Create a new ABAP object",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "objtype",
          type: "string",
          description: "Parameter: objtype",
          required: true,
        },
        {
          name: "parentName",
          type: "string",
          description: "Parameter: parentName",
          required: true,
        },
        {
          name: "parentPath",
          type: "string",
          description: "Parameter: parentPath",
          required: true,
        },
        {
          name: "responsible",
          type: "string",
          description: "Parameter: responsible",
          required: false,
        },
        {
          name: "transport",
          type: "string",
          description: "Parameter: transport",
          required: false,
        },
      ],
    },
    {
      name: "nodeContents",
      description:
        "Retrieves the contents of a node in the ABAP repository tree.",
      parameters: [
        {
          name: "parent_name",
          type: "string",
          description: "The name of the parent node.",
          required: false,
        },
        {
          name: "parent_tech_name",
          type: "string",
          description: "The technical name of the parent node.",
          required: false,
        },
        {
          name: "parent_type",
          type: "string",
          description: "The type of the parent node.",
          required: true,
        },
        {
          name: "parentnodes",
          type: "array",
          description: "An array of parent node IDs.",
          required: false,
        },
        {
          name: "rebuild_tree",
          type: "boolean",
          description: "Whether to rebuild the tree.",
          required: false,
        },
        {
          name: "user_name",
          type: "string",
          description: "The user name.",
          required: false,
        },
      ],
    },
    {
      name: "mainPrograms",
      description: "Retrieves the main programs for a given include.",
      parameters: [
        {
          name: "includeUrl",
          type: "string",
          description: "The URL of the include.",
          required: true,
        },
      ],
    },
    {
      name: "featureDetails",
      description: "Retrieves details for a given feature.",
      parameters: [
        {
          name: "title",
          type: "string",
          description: "The title of the feature.",
          required: true,
        },
      ],
    },
    {
      name: "collectionFeatureDetails",
      description: "Retrieves details for a given collection feature.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the collection feature.",
          required: true,
        },
      ],
    },
    {
      name: "findCollectionByUrl",
      description: "Finds a collection by its URL.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the collection.",
          required: true,
        },
      ],
    },
    {
      name: "loadTypes",
      description: "Loads object types.",
      parameters: [],
    },
    {
      name: "adtDiscovery",
      description: "Performs ADT discovery.",
      parameters: [],
    },
    {
      name: "adtCoreDiscovery",
      description: "Performs ADT core discovery.",
      parameters: [],
    },
    {
      name: "adtCompatibiliyGraph",
      description: "Retrieves the ADT compatibility graph.",
      parameters: [],
    },
    {
      name: "unitTestRun",
      description: "Runs unit tests.",
      parameters: [
        {
          name: "flags",
          type: "string",
          description: "Flags for the unit test run.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL of the object to test.",
          required: true,
        },
      ],
    },
    {
      name: "unitTestEvaluation",
      description: "Evaluates unit test results.",
      parameters: [
        {
          name: "clas",
          type: "string",
          description: "The class to evaluate.",
          required: true,
        },
        {
          name: "flags",
          type: "string",
          description: "Flags for the unit test evaluation.",
          required: false,
        },
      ],
    },
    {
      name: "unitTestOccurrenceMarkers",
      description: "Retrieves unit test occurrence markers.",
      parameters: [
        {
          name: "source",
          type: "string",
          description: "The source code.",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "The URL of the object.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mario-andreschak/mcp-abap-abap-adt-api",
  _varName: "abapadtapiMcpserverPlugin",
};

const obsidianIndexMcpServerPlugin: Plugin = {
  id: "1mr561pxj8",
  name: "Obsidian Index MCP Server",
  description:
    "Provides semantic search capability over Obsidian vaults and exposes recent notes as resources to Claude through the MCP protocol.",
  image: "https://github.com/tcsavage.png",
  actions: [],
  githubUrl: "https://github.com/tcsavage/mcp-obsidian-index",
  _varName: "obsidianIndexMcpServerPlugin",
};

const mdWebcrawlMcpPlugin: Plugin = {
  id: "saglkval3f",
  name: "MD Webcrawl MCP",
  description:
    "A Python-based MCP server that crawls websites to extract and save content as markdown files, with features for mapping website structure and links.",
  image: "https://github.com/jmh108.png",
  actions: [],
  githubUrl: "https://github.com/jmh108/md-webcrawl-mcp",
  _varName: "mdWebcrawlMcpPlugin",
};

const mcpLlmstxtExplorerPlugin: Plugin = {
  id: "lhyj3pva0z",
  name: "MCP LLMS.txt Explorer",
  description:
    "A server that helps discover and analyze websites implementing the llms.txt standard, allowing users to check if websites have llms.txt files and list known compliant websites.",
  image: "https://github.com/thedaviddias.png",
  actions: [
    {
      name: "check_website",
      description: "Check if a website has llms.txt files",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the website to check",
          required: true,
        },
      ],
    },
    {
      name: "list_websites",
      description: "List known websites with llms.txt files",
      parameters: [
        {
          name: "filter_llms_full_txt",
          type: "boolean",
          description: "Only show websites with llms-full.txt",
          required: false,
        },
        {
          name: "filter_llms_txt",
          type: "boolean",
          description: "Only show websites with llms.txt",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/thedaviddias/mcp-llms-txt-explorer",
  _varName: "mcpLlmstxtExplorerPlugin",
};

const mcpRedditServerPlugin: Plugin = {
  id: "bidjfcf333",
  name: "MCP Reddit Server",
  description:
    "A Model Context Protocol server that enables AI assistants like Claude to browse and analyze Reddit content, including searching subreddits, retrieving post details with comments, and viewing trending posts.",
  image: "https://github.com/wllcnm.png",
  actions: [],
  githubUrl: "https://github.com/wllcnm/mcp-reddit",
  _varName: "mcpRedditServerPlugin",
};

const mcpDuckdbKnowledgeGraphMemoryServerPlugin: Plugin = {
  id: "4mqwh1toao",
  name: "MCP DuckDB Knowledge Graph Memory Server",
  description:
    "A memory server for Claude that stores and retrieves knowledge graph data in DuckDB, enhancing performance and query capabilities for conversations with persistent user information.",
  image: "https://github.com/IzumiSy.png",
  actions: [
    {
      name: "create_entities",
      description: "Create multiple new entities in the knowledge graph",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add new observations to existing entities in the knowledge graph",
      parameters: [
        {
          name: "observations",
          type: "object array",
          description: "Parameter: observations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entities",
      description:
        "Delete multiple entities and their associated relations from the knowledge graph",
      parameters: [
        {
          name: "entityNames",
          type: "string array",
          description: "An array of entity names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_observations",
      description:
        "Delete specific observations from entities in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Parameter: deletions",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete multiple relations from the knowledge graph",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "An array of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "search_nodes",
      description: "Search for nodes in the knowledge graph based on a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The search query to match against entity names, types, and observation content",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description: "Open specific nodes in the knowledge graph by their names",
      parameters: [
        {
          name: "names",
          type: "string array",
          description: "An array of entity names to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/IzumiSy/mcp-duckdb-memory-server",
  _varName: "mcpDuckdbKnowledgeGraphMemoryServerPlugin",
};

const powerpointMcpServerPlugin: Plugin = {
  id: "h1wl85c8gs",
  name: "Powerpoint MCP Server",
  description:
    "Creates and manipulates PowerPoint presentations with capabilities for adding various slide types, generating images, and incorporating tables and charts through natural language commands.",
  image: "https://github.com/supercurses.png",
  actions: [
    {
      name: "create-presentation",
      description:
        "This tool starts the process of generating a new powerpoint presentation with the name given by the user. Use this tool when the user requests to create or generate a new presentation.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the presentation (without .pptx extension)",
          required: true,
        },
      ],
    },
    {
      name: "generate-and-save-image",
      description:
        "Generates an image using a FLUX model and save the image to the specified path. The tool will return a PNG file path. It should be used when the user asks to generate or create an image or a picture.",
      parameters: [
        {
          name: "file_name",
          type: "string",
          description: "Filename of the image. Include the extension of .png",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "Description of the image to generate in the form of a prompt.",
          required: true,
        },
      ],
    },
    {
      name: "add-slide-title-only",
      description:
        "This tool adds a new title slide to the presentation you are working on. The tool doesn't return anything. It requires the presentation_name to work on.",
      parameters: [
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the slide",
          required: true,
        },
      ],
    },
    {
      name: "add-slide-section-header",
      description:
        "This tool adds a section header (a.k.a segue) slide to the presentation you are working on. The tool doesn't return anything. It requires the presentation_name to work on.",
      parameters: [
        {
          name: "header",
          type: "string",
          description: "Section header title",
          required: true,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "subtitle",
          type: "string",
          description: "Section header subtitle",
          required: false,
        },
      ],
    },
    {
      name: "add-slide-title-content",
      description:
        "Add a new slide with a title and content to an existing presentation",
      parameters: [
        {
          name: "content",
          type: "string",
          description:
            "Content/body text of the slide. Separate main points with a single carriage return character.Make sub-points with tab character.Do not use bullet points, asterisks or dashes for points.Max main points is 4",
          required: true,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the slide",
          required: true,
        },
      ],
    },
    {
      name: "add-slide-comparison",
      description:
        "Add a new a comparison slide with title and comparison content. Use when you wish to compare two concepts",
      parameters: [
        {
          name: "left_side_content",
          type: "string",
          description:
            "Content/body text of left concept. Separate main points with a single carriage return character.Make sub-points with tab character.Do not use bullet points, asterisks or dashes for points.Max main points is 4",
          required: true,
        },
        {
          name: "left_side_title",
          type: "string",
          description: "Title of the left concept",
          required: true,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "right_side_content",
          type: "string",
          description:
            "Content/body text of right concept. Separate main points with a single carriage return character.Make sub-points with tab character.Do not use bullet points, asterisks or dashes for points.Max main points is 4",
          required: true,
        },
        {
          name: "right_side_title",
          type: "string",
          description: "Title of the right concept",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the slide",
          required: true,
        },
      ],
    },
    {
      name: "add-slide-title-with-table",
      description:
        "Add a new slide with a title and table containing the provided data",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Table data object with headers and rows",
          required: true,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the slide",
          required: true,
        },
      ],
    },
    {
      name: "add-slide-title-with-chart",
      description:
        "Add a new slide with a title and chart. The chart type will be automatically selected based on the data structure.",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Chart data structure",
          required: true,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the slide",
          required: true,
        },
      ],
    },
    {
      name: "add-slide-picture-with-caption",
      description:
        "Add a new slide with a picture and caption to an existing presentation",
      parameters: [
        {
          name: "caption",
          type: "string",
          description: "Caption text to appear below the picture",
          required: true,
        },
        {
          name: "image_path",
          type: "string",
          description: "Path to the image file to insert",
          required: true,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to add the slide to",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the slide",
          required: true,
        },
      ],
    },
    {
      name: "open-presentation",
      description:
        "Opens an existing presentation and saves a copy to a new file for backup. Use this tool when the user requests to open a presentation that has already been created.",
      parameters: [
        {
          name: "output_path",
          type: "string",
          description: "Path where to save the presentation (optional)",
          required: false,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to open",
          required: true,
        },
      ],
    },
    {
      name: "save-presentation",
      description:
        "Save the presentation to a file. Always use this tool at the end of any process that has added slides to a presentation.",
      parameters: [
        {
          name: "output_path",
          type: "string",
          description: "Path where to save the presentation (optional)",
          required: false,
        },
        {
          name: "presentation_name",
          type: "string",
          description: "Name of the presentation to save",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/supercurses/powerpoint",
  _varName: "powerpointMcpServerPlugin",
};

const mcp2tavilyPlugin: Plugin = {
  id: "n4qfeflrpp",
  name: "MCP2Tavily",
  description:
    "An MCP protocol server that enables web search functionality using the Tavily API, allowing AI assistants to perform internet searches in real-time.",
  image: "https://github.com/mcp2everything.png",
  actions: [
    {
      name: "search_web",
      description: "Search the web for information using Tavily API",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "search_web_info",
      description: "从网络搜索用户查询的信息",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_url_content",
      description:
        "Get the content from a specific URL using Tavily API\n    \n    Args:\n        url (str): The URL to extract content from\n        \n    Returns:\n        str: The extracted content from the URL\n    ",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "get_url_content_info",
      description:
        "从指定URL获取网页内容\n    \n    参数:\n        url (str): 需要提取内容的网页地址\n        \n    返回:\n        str: 从URL提取的网页内容\n    ",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mcp2everything/mcp2tavily",
  _varName: "mcp2tavilyPlugin",
};

const servicenowMcpServerPlugin: Plugin = {
  id: "qymgwbp9jj",
  name: "ServiceNow MCP Server",
  description:
    "A Model Context Protocol server enabling AI agents to access and manipulate ServiceNow data through natural language interactions, allowing users to search for records, update them, and manage scripts.",
  image: "https://github.com/michaelbuckner.png",
  actions: [],
  githubUrl: "https://github.com/michaelbuckner/servicenow-mcp",
  _varName: "servicenowMcpServerPlugin",
};

const mcpServerTemplateForCursorIdePlugin: Plugin = {
  id: "rbgsskqcgb",
  name: "MCP Server Template for Cursor IDE",
  description:
    "A template for creating custom tools for Cursor IDE using Model Context Protocol (MCP), allowing developers to extend Cursor's functionality with their own server-based tools.",
  image: "https://github.com/jankowtf.png",
  actions: [
    {
      name: "mcp_fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "mood",
      description: "Ask the server about its mood - it's always happy!",
      parameters: [
        {
          name: "question",
          type: "string",
          description:
            "Ask this MCP server about its mood! You can phrase your question in any way you like - 'How are you?', 'What's your mood?', or even 'Are you having a good day?'. The server will always respond with a cheerful message and a heart ❤️",
          required: true,
        },
      ],
    },
    {
      name: "fetch_railway_docs",
      description:
        "Fetches the most recent Railway CLI documentation. Optionally, provide a custom URL.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Optional custom URL for fetching Railway CLI docs.",
          required: false,
        },
      ],
    },
    {
      name: "fetch_railway_docs_optimized",
      description:
        "Fetches the most recent Railway CLI documentation. Optionally, provide a custom URL.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Optional custom URL for fetching Railway CLI docs.",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_fix",
      description:
        "Provides a prompt for performing root cause analysis and fixing issues",
      parameters: [
        {
          name: "issue",
          type: "string",
          description: "A description of the issue to be analyzed and fixed",
          required: true,
        },
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_initial",
      description:
        "Provides an initial prompt template for starting a new project",
      parameters: [
        {
          name: "objective",
          type: "string",
          description: "A description of the objective of the project",
          required: true,
        },
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_proceed",
      description:
        "Provides a prompt template for proceeding with a task or project",
      parameters: [
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "A description of the task or project to proceed with",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_change",
      description:
        "Provides a prompt for systematically handling change requests",
      parameters: [
        {
          name: "change_request",
          type: "string",
          description: "Description of the change request to implement",
          required: true,
        },
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_fix_linter",
      description: "Provides a prompt for analyzing and fixing linter errors",
      parameters: [
        {
          name: "issue",
          type: "string",
          description:
            "A description of the linter errors to be analyzed and fixed",
          required: true,
        },
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_unit_tests",
      description: "Provides a prompt for generating unit tests for code",
      parameters: [
        {
          name: "code_to_test",
          type: "string",
          description: "The code that needs unit tests",
          required: true,
        },
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
    {
      name: "apply_prompt_infra",
      description:
        "Provides a prompt template for laying out system infrastructure and tool stack information",
      parameters: [
        {
          name: "infrastructure_info",
          type: "string",
          description: "Description of the infrastructure and tool stack",
          required: true,
        },
        {
          name: "specific_instructions",
          type: "string",
          description:
            "Optional specific instructions to include in the prompt",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description:
            "The version of the prompt template to use (e.g., '1.0.0', '1.1.0', or 'latest')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jankowtf/mcp-hitchcode",
  _varName: "mcpServerTemplateForCursorIdePlugin",
};

const fetchBrowserPlugin: Plugin = {
  id: "oomh2nd8sl",
  name: "Fetch Browser",
  description:
    "A headless browser MCP server that allows AI agents to fetch web content and perform Google searches without API keys, supporting various output formats like Markdown, JSON, HTML, and text.",
  image: "https://github.com/TheSethRose.png",
  actions: [
    {
      name: "fetch_url",
      description:
        "Fetch content from a URL with proper error handling and response processing",
      parameters: [
        {
          name: "responseType",
          type: "string",
          description: "Expected response type",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Request timeout in milliseconds",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "google_search",
      description:
        "Execute a Google search and return results in various formats",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query to execute",
          required: true,
        },
        {
          name: "responseType",
          type: "string",
          description: "Expected response type",
          required: false,
        },
        {
          name: "topic",
          type: "string",
          description: "Type of search to perform",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/TheSethRose/Fetch-Browser",
  _varName: "fetchBrowserPlugin",
};

const travelPlannerMcpServerPlugin: Plugin = {
  id: "y3u6yjiiq1",
  name: "Travel Planner MCP Server",
  description:
    "Enables LLMs to perform travel-related tasks by interacting with Google Maps and travel planning services including location search, place details, and travel time calculations.",
  image: "https://github.com/GongRzhe.png",
  actions: [
    {
      name: "create_itinerary",
      description:
        "Creates a personalized travel itinerary based on user preferences",
      parameters: [
        {
          name: "budget",
          type: "number",
          description: "Budget in USD",
          required: false,
        },
        {
          name: "destination",
          type: "string",
          description: "Destination location",
          required: true,
        },
        {
          name: "endDate",
          type: "string",
          description: "End date (YYYY-MM-DD)",
          required: true,
        },
        {
          name: "origin",
          type: "string",
          description: "Starting location",
          required: true,
        },
        {
          name: "preferences",
          type: "string array",
          description: "Travel preferences",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date (YYYY-MM-DD)",
          required: true,
        },
      ],
    },
    {
      name: "optimize_itinerary",
      description:
        "Optimizes an existing itinerary based on specified criteria",
      parameters: [
        {
          name: "itineraryId",
          type: "string",
          description: "ID of the itinerary to optimize",
          required: true,
        },
        {
          name: "optimizationCriteria",
          type: "string array",
          description: "Criteria for optimization (time, cost, etc.)",
          required: true,
        },
      ],
    },
    {
      name: "search_attractions",
      description:
        "Searches for attractions and points of interest in a specified location",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description: "Categories of attractions",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "Location to search attractions",
          required: true,
        },
        {
          name: "radius",
          type: "number",
          description: "Search radius in meters",
          required: false,
        },
      ],
    },
    {
      name: "get_transport_options",
      description:
        "Retrieves available transportation options between two points",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Travel date (YYYY-MM-DD)",
          required: true,
        },
        {
          name: "destination",
          type: "string",
          description: "Destination point",
          required: true,
        },
        {
          name: "origin",
          type: "string",
          description: "Starting point",
          required: true,
        },
      ],
    },
    {
      name: "get_accommodations",
      description: "Searches for accommodation options in a specified location",
      parameters: [
        {
          name: "budget",
          type: "number",
          description: "Maximum price per night",
          required: false,
        },
        {
          name: "checkIn",
          type: "string",
          description: "Check-in date (YYYY-MM-DD)",
          required: true,
        },
        {
          name: "checkOut",
          type: "string",
          description: "Check-out date (YYYY-MM-DD)",
          required: true,
        },
        {
          name: "location",
          type: "string",
          description: "Location to search",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server",
  _varName: "travelPlannerMcpServerPlugin",
};

const prometheusMcpServerPlugin: Plugin = {
  id: "nswv189shn",
  name: "Prometheus MCP Server",
  description:
    "An MCP server that enables Large Language Models to retrieve, analyze, and query metric data from Prometheus databases through pre-defined routes.",
  image: "https://github.com/CaesarYangs.png",
  actions: [],
  githubUrl: "https://github.com/CaesarYangs/prometheus_mcp_server",
  _varName: "prometheusMcpServerPlugin",
};

const farcasterMcpServerPlugin: Plugin = {
  id: "koo5epnlc7",
  name: "Farcaster MCP Server",
  description:
    "Provides tools to interact with the Farcaster network, allowing AI models to fetch casts, search channels, and analyze content.",
  image: "https://github.com/manimohans.png",
  actions: [
    {
      name: "get-user-casts",
      description: "Get casts from a specific Farcaster user by FID",
      parameters: [
        {
          name: "fid",
          type: "number",
          description: "Farcaster user ID (FID)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of casts to return (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "get-channel-casts",
      description: "Get casts from a specific Farcaster channel",
      parameters: [
        {
          name: "channel",
          type: "string",
          description: "Channel name (e.g., 'aichannel') or URL",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of casts to return (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "get-username-casts",
      description: "Get casts from a specific Farcaster username",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of casts to return (default: 10)",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Farcaster username",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/manimohans/farcaster-mcp",
  _varName: "farcasterMcpServerPlugin",
};

const bybitMcpServerPlugin: Plugin = {
  id: "ydqbfrwdg4",
  name: "Bybit MCP Server",
  description:
    "A Model Context Protocol server that provides read-only access to Bybit's cryptocurrency exchange API, allowing users to query real-time cryptocurrency data using natural language.",
  image: "https://github.com/sammcj.png",
  actions: [
    {
      name: "get_instrument_info",
      description:
        "Get detailed instrument information for a specific trading pair",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the instrument (spot, linear, inverse)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., 'BTCUSDT')",
          required: true,
        },
      ],
    },
    {
      name: "get_kline",
      description: "Get kline/candlestick data for a trading pair",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the instrument (spot, linear, inverse)",
          required: false,
        },
        {
          name: "interval",
          type: "string",
          description: "Kline interval",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Limit for the number of candles (max 1000)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., 'BTCUSDT')",
          required: true,
        },
      ],
    },
    {
      name: "get_market_info",
      description: "Get detailed market information for trading pairs",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the instrument (spot, linear, inverse)",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Limit for the number of results (max 1000)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description:
            "Optional: Trading pair symbol (e.g., 'BTCUSDT'). If not provided, returns info for all symbols in the category",
          required: false,
        },
      ],
    },
    {
      name: "get_order_history",
      description: "Get order history for the authenticated user",
      parameters: [
        {
          name: "baseCoin",
          type: "string",
          description: "Base coin. Used to get all symbols with this base coin",
          required: false,
        },
        {
          name: "category",
          type: "string",
          description: "Product type",
          required: true,
        },
        {
          name: "limit",
          type: "string",
          description: "Maximum number of results (default: 200)",
          required: false,
        },
        {
          name: "orderFilter",
          type: "string",
          description: "Order filter",
          required: false,
        },
        {
          name: "orderId",
          type: "string",
          description: "Order ID",
          required: false,
        },
        {
          name: "orderLinkId",
          type: "string",
          description: "User customised order ID",
          required: false,
        },
        {
          name: "orderStatus",
          type: "string",
          description: "Order status",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading symbol, e.g., BTCUSDT",
          required: false,
        },
      ],
    },
    {
      name: "get_orderbook",
      description: "Get orderbook (market depth) data for a trading pair",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the instrument (spot, linear, inverse)",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description:
            "Limit for the number of bids and asks (1, 25, 50, 100, 200)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., 'BTCUSDT')",
          required: true,
        },
      ],
    },
    {
      name: "get_positions",
      description: "Get positions information for the authenticated user",
      parameters: [
        {
          name: "baseCoin",
          type: "string",
          description: "Base coin. Used to get all symbols with this base coin",
          required: false,
        },
        {
          name: "category",
          type: "string",
          description: "Product type",
          required: true,
        },
        {
          name: "limit",
          type: "string",
          description: "Maximum number of results (default: 200)",
          required: false,
        },
        {
          name: "settleCoin",
          type: "string",
          description:
            "Settle coin. Used to get all symbols with this settle coin",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading symbol, e.g., BTCUSDT",
          required: false,
        },
      ],
    },
    {
      name: "get_ticker",
      description: "Get real-time ticker information for a trading pair",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the instrument (spot, linear, inverse)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., 'BTCUSDT')",
          required: true,
        },
      ],
    },
    {
      name: "get_trades",
      description: "Get recent trades for a trading pair",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the instrument (spot, linear, inverse)",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Limit for the number of trades (max 1000)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., 'BTCUSDT')",
          required: true,
        },
      ],
    },
    {
      name: "get_wallet_balance",
      description: "Get wallet balance information for the authenticated user",
      parameters: [
        {
          name: "accountType",
          type: "string",
          description: "Account type",
          required: true,
        },
        {
          name: "coin",
          type: "string",
          description:
            "Cryptocurrency symbol, e.g., BTC, ETH, USDT. If not specified, returns all coins.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammcj/bybit-mcp",
  _varName: "bybitMcpServerPlugin",
};

const windowsCliMcpServerPlugin: Plugin = {
  id: "5hiwtoqo31",
  name: "Windows CLI MCP Server",
  description:
    "A Model Context Protocol server that provides secure command-line access to Windows systems, allowing MCP clients like Claude Desktop to safely execute commands in PowerShell, CMD, and Git Bash shells with configurable security controls.",
  image: "https://github.com/SimonB97.png",
  actions: [
    {
      name: "execute_command",
      description:
        'Execute a command in the specified shell (powershell, cmd, or gitbash)\n\nExample usage (PowerShell):\n```json\n{\n  "shell": "powershell",\n  "command": "Get-Process | Select-Object -First 5",\n  "workingDir": "C:\\Users\\username"\n}\n```\n\nExample usage (CMD):\n```json\n{\n  "shell": "cmd",\n  "command": "dir /b",\n  "workingDir": "C:\\Projects"\n}\n```\n\nExample usage (Git Bash):\n```json\n{\n  "shell": "gitbash",\n  "command": "ls -la",\n  "workingDir": "/c/Users/username"\n}\n```',
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "shell",
          type: "string",
          description: "Shell to use for command execution",
          required: true,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for command execution (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_command_history",
      description:
        'Get the history of executed commands\n\nExample usage:\n```json\n{\n  "limit": 5\n}\n```\n\nExample response:\n```json\n[\n  {\n    "command": "Get-Process",\n    "output": "...",\n    "timestamp": "2024-03-20T10:30:00Z",\n    "exitCode": 0\n  }\n]\n```',
      parameters: [
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of history entries to return (default: 10, max: 1000)",
          required: false,
        },
      ],
    },
    {
      name: "ssh_execute",
      description:
        'Execute a command on a remote host via SSH\n\nExample usage:\n```json\n{\n  "connectionId": "raspberry-pi",\n  "command": "uname -a"\n}\n```\n\nConfiguration required in config.json:\n```json\n{\n  "ssh": {\n    "enabled": true,\n    "connections": {\n      "raspberry-pi": {\n        "host": "raspberrypi.local",\n        "port": 22,\n        "username": "pi",\n        "password": "raspberry"\n      }\n    }\n  }\n}\n```',
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection to use",
          required: true,
        },
      ],
    },
    {
      name: "ssh_disconnect",
      description:
        'Disconnect from an SSH server\n\nExample usage:\n```json\n{\n  "connectionId": "raspberry-pi"\n}\n```\n\nUse this to cleanly close SSH connections when they\'re no longer needed.',
      parameters: [
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection to disconnect",
          required: true,
        },
      ],
    },
    {
      name: "create_ssh_connection",
      description: "Create a new SSH connection",
      parameters: [
        {
          name: "connectionConfig",
          type: "object",
          description: "Parameter: connectionConfig",
          required: false,
        },
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection",
          required: false,
        },
      ],
    },
    {
      name: "read_ssh_connections",
      description: "Read all SSH connections",
      parameters: [],
    },
    {
      name: "update_ssh_connection",
      description: "Update an existing SSH connection",
      parameters: [
        {
          name: "connectionConfig",
          type: "object",
          description: "Parameter: connectionConfig",
          required: false,
        },
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection to update",
          required: false,
        },
      ],
    },
    {
      name: "delete_ssh_connection",
      description: "Delete an existing SSH connection",
      parameters: [
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_current_directory",
      description: "Get the current working directory",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/SimonB97/win-cli-mcp-server",
  _varName: "windowsCliMcpServerPlugin",
};

const googleTasksMcpServerPlugin: Plugin = {
  id: "dl82dtjqew",
  name: "Google Tasks MCP Server",
  description:
    "A TypeScript Model Context Protocol server that integrates with Google Tasks API, allowing users to create, list, update, delete, and toggle completion status of tasks.",
  image: "https://github.com/mstfe.png",
  actions: [
    {
      name: "create_task",
      description: "Create a new task in Google Tasks",
      parameters: [
        {
          name: "notes",
          type: "string",
          description: "Notes for the task",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the task",
          required: true,
        },
      ],
    },
    {
      name: "list_tasks",
      description: "List all tasks in the default task list",
      parameters: [],
    },
    {
      name: "delete_task",
      description: "Delete a task from the default task list",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "ID of the task to delete",
          required: true,
        },
      ],
    },
    {
      name: "complete_task",
      description: "Toggle the completion status of a task",
      parameters: [
        {
          name: "status",
          type: "string",
          description: "Status of task, needsAction or completed",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task to toggle completion status",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mstfe/mcp-google-tasks",
  _varName: "googleTasksMcpServerPlugin",
};

const codingTodoServerPlugin: Plugin = {
  id: "93ktutjxe2",
  name: "Coding Todo Server",
  description:
    "An MCP server that provides tools and resources for managing a coding project's todo list, allowing users to view, add, update, and delete todo items with details like priority, status, and tags.",
  image: "https://github.com/dennismartis.png",
  actions: [],
  githubUrl: "https://github.com/dennismartis/mcp-todo",
  _varName: "codingTodoServerPlugin",
};

const cosenseMcpServerPlugin: Plugin = {
  id: "ls32zyxa95",
  name: "Cosense MCP Server",
  description:
    "An MCP server that allows Claude to access pages from Cosense projects, supporting both public and private projects with optional SID authentication.",
  image: "https://github.com/funwarioisii.png",
  actions: [],
  githubUrl: "https://github.com/funwarioisii/cosense-mcp-server",
  _varName: "cosenseMcpServerPlugin",
};

const markdownifyMcpServerUtf8EnhancedPlugin: Plugin = {
  id: "51hyoj300s",
  name: "Markdownify MCP Server - UTF-8 Enhanced",
  description:
    "A document conversion server that transforms various file formats (PDFs, documents, images, audio, web content) to Markdown with improved multilingual and UTF-8 support.",
  image: "https://github.com/JDJR2024.png",
  actions: [
    {
      name: "audio-to-markdown",
      description:
        "Convert an audio file to markdown, including transcription if possible",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the audio file to convert",
          required: true,
        },
      ],
    },
    {
      name: "bing-search-to-markdown",
      description: "Convert a Bing search results page to markdown",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the Bing search results page",
          required: true,
        },
      ],
    },
    {
      name: "docx-to-markdown",
      description: "Convert a DOCX file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the DOCX file to convert",
          required: true,
        },
      ],
    },
    {
      name: "get-markdown-file",
      description: "Get a markdown file by absolute file path",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path to file of markdown'd text",
          required: true,
        },
      ],
    },
    {
      name: "image-to-markdown",
      description:
        "Convert an image to markdown, including metadata and description",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the image file to convert",
          required: true,
        },
      ],
    },
    {
      name: "pdf-to-markdown",
      description: "Convert a PDF file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the PDF file to convert",
          required: true,
        },
      ],
    },
    {
      name: "pptx-to-markdown",
      description: "Convert a PPTX file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the PPTX file to convert",
          required: true,
        },
      ],
    },
    {
      name: "webpage-to-markdown",
      description: "Convert a webpage to markdown",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the webpage to convert",
          required: true,
        },
      ],
    },
    {
      name: "xlsx-to-markdown",
      description: "Convert an XLSX file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the XLSX file to convert",
          required: true,
        },
      ],
    },
    {
      name: "youtube-to-markdown",
      description:
        "Convert a YouTube video to markdown, including transcript if available",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the YouTube video",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JDJR2024/markdownify-mcp-utf8",
  _varName: "markdownifyMcpServerUtf8EnhancedPlugin",
};

const githubKanbanMcpServerPlugin: Plugin = {
  id: "jpb24ly92c",
  name: "GitHub Kanban MCP Server",
  description:
    "A Model Context Protocol server that enables efficient management of GitHub issues in a Kanban board format, allowing LLMs to automate task management through GitHub integration.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "list_issues",
      description: "カンバンボードのissue一覧を取得します",
      parameters: [
        {
          name: "labels",
          type: "string array",
          description: "フィルタリングするラベル",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Gitリポジトリの絶対パス",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "issueの状態",
          required: false,
        },
      ],
    },
    {
      name: "create_issue",
      description: "新しいissueを作成します",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "アサインするユーザー",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description:
            "issueの本文（## の先頭には絵文字を付与して可読性を上げて）",
          required: false,
        },
        {
          name: "emoji",
          type: "string",
          description: "タイトルの先頭に付与するユニークな絵文字",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "issueのラベル",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Gitリポジトリの絶対パス",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "issueのタイトル",
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description: "既存のissueを更新します",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "新しいアサイン",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "新しい本文",
          required: false,
        },
        {
          name: "emoji",
          type: "string",
          description: "タイトルの先頭に付与する絵文字",
          required: false,
        },
        {
          name: "issue_number",
          type: "number",
          description: "issue番号",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "新しいラベル",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Gitリポジトリの絶対パス",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "新しい状態",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "新しいタイトル",
          required: false,
        },
      ],
    },
    {
      name: "add_comment",
      description: "タスクにコメントを追加",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "コメントの内容（Markdown形式対応）",
          required: true,
        },
        {
          name: "issue_number",
          type: "string",
          description: "タスク（Issue）のID",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "GitHubリポジトリ名",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "コメント時に変更するissueの状態（オプション）",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server",
  _varName: "githubKanbanMcpServerPlugin",
};

const aactClinicalTrialsMcpServerPlugin: Plugin = {
  id: "1gsekmp63g",
  name: "AACT Clinical Trials MCP Server",
  description:
    "Provides access to the ClinicalTrials.gov AACT database, enabling analysis of clinical trial data, tracking development trends, and generating therapeutic landscape insights.",
  image: "https://github.com/navisbio.png",
  actions: [],
  githubUrl: "https://github.com/navisbio/ctgov_MCP",
  _varName: "aactClinicalTrialsMcpServerPlugin",
};

const biomartMcpPlugin: Plugin = {
  id: "v5a3mlxviu",
  name: "Biomart MCP",
  description:
    "A Model Context Protocol server that interfaces with Biomart databases, allowing models to discover biological datasets, explore attributes/filters, retrieve biological data, and translate between different biological identifiers.",
  image: "https://github.com/jzinno.png",
  actions: [
    {
      name: "list_marts",
      description:
        '\n    Lists all available Biomart marts (databases) from Ensembl.\n\n    Biomart organizes biological data in a hierarchy: MART -> DATASET -> ATTRIBUTES/FILTERS.\n    This function returns all available marts as a CSV string.\n\n    Returns:\n        str: CSV-formatted table of all marts with their display names and descriptions.\n\n    Example:\n        list_marts()\n        >>> "name,display_name,description\n             ENSEMBL_MART_ENSEMBL,Ensembl Genes,Gene annotation from Ensembl\n             ENSEMBL_MART_MOUSE,Mouse strains,Strain-specific data for mouse\n             ..."\n    ',
      parameters: [],
    },
    {
      name: "list_datasets",
      description:
        '\n    Lists all available biomart datasets for a given mart.\n\n    Each mart contains multiple datasets. This function returns all datasets\n    available in the specified mart as a CSV string.\n\n    Args:\n        mart (str): The mart identifier to list datasets from.\n            Valid values include: ENSEMBL_MART_ENSEMBL, ENSEMBL_MART_MOUSE,\n            ENSEMBL_MART_ONTOLOGY, ENSEMBL_MART_GENOMIC, ENSEMBL_MART_SNP,\n            ENSEMBL_MART_FUNCGEN\n\n    Returns:\n        str: CSV-formatted table of all datasets with their display names and descriptions.\n\n    Example:\n        list_datasets("ENSEMBL_MART_ENSEMBL")\n        >>> "name,display_name,description\n             hsapiens_gene_ensembl,Human genes,Human genes (GRCh38.p13)\n             mmusculus_gene_ensembl,Mouse genes,Mouse genes (GRCm39)\n             ..."\n    ',
      parameters: [
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
      ],
    },
    {
      name: "list_common_attributes",
      description:
        '\n    Lists commonly used attributes available for a given dataset.\n\n    This function returns only the most frequently used attributes (defined in COMMON_ATTRIBUTES)\n    to avoid overwhelming the model with too many options. For a complete list,\n    use list_all_attributes.\n\n    Args:\n        mart (str): The mart identifier (e.g., "ENSEMBL_MART_ENSEMBL")\n        dataset (str): The dataset identifier (e.g., "hsapiens_gene_ensembl")\n\n    Returns:\n        str: CSV-formatted table of common attributes with their display names and descriptions.\n\n    Example:\n        list_common_attributes("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl")\n        >>> "name,display_name,description\n             ensembl_gene_id,Gene stable ID,Ensembl stable ID for the gene\n             external_gene_name,Gene name,The gene name\n             ..."\n    ',
      parameters: [
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
      ],
    },
    {
      name: "list_all_attributes",
      description:
        '\n    Lists all available attributes for a given dataset with some filtering.\n\n    This function returns a filtered list of all attributes available for the specified\n    dataset. Some less commonly used attributes (homologs, microarray probes) are\n    filtered out to reduce the response size.\n\n    CAUTION: This function can return a large number of attributes and may be unstable\n    for certain datasets. Consider using list_common_attributes first.\n\n    Args:\n        mart (str): The mart identifier (e.g., "ENSEMBL_MART_ENSEMBL")\n        dataset (str): The dataset identifier (e.g., "hsapiens_gene_ensembl")\n\n    Returns:\n        str: CSV-formatted table of all filtered attributes.\n\n    Example:\n        list_all_attributes("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl")\n    ',
      parameters: [
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
      ],
    },
    {
      name: "list_filters",
      description:
        '\n    Lists all available filters for a given dataset.\n\n    Filters are used to narrow down the results of a Biomart query.\n    This function returns all filters that can be applied to the specified dataset.\n\n    Args:\n        mart (str): The mart identifier (e.g., "ENSEMBL_MART_ENSEMBL")\n        dataset (str): The dataset identifier (e.g., "hsapiens_gene_ensembl")\n\n    Returns:\n        str: CSV-formatted table of all filters with their display names and descriptions.\n\n    Example:\n        list_filters("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl")\n        >>> "name,description\n             chromosome_name,Chromosome/scaffold name\n             start,Gene start (bp)\n             end,Gene end (bp)\n             ..."\n    ',
      parameters: [
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
      ],
    },
    {
      name: "get_data",
      description:
        '\n    Queries Biomart for data using specified attributes and filters.\n\n    This function performs the main data retrieval from Biomart, allowing you to\n    query biological data by specifying which attributes to return and which filters\n    to apply. Includes automatic retry logic for resilience.\n\n    Args:\n        mart (str): The mart identifier (e.g., "ENSEMBL_MART_ENSEMBL")\n        dataset (str): The dataset identifier (e.g., "hsapiens_gene_ensembl")\n        attributes (list[str]): List of attributes to retrieve (e.g., ["ensembl_gene_id", "external_gene_name"])\n        filters (dict[str, str]): Dictionary of filters to apply (e.g., {"chromosome_name": "1"})\n\n    Returns:\n        str: CSV-formatted results of the query.\n\n    Example:\n        get_data(\n            "ENSEMBL_MART_ENSEMBL",\n            "hsapiens_gene_ensembl",\n            ["ensembl_gene_id", "external_gene_name", "chromosome_name"],\n            {"chromosome_name": "X", "biotype": "protein_coding"}\n        )\n        >>> "ensembl_gene_id,external_gene_name,chromosome_name\n             ENSG00000000003,TSPAN6,X\n             ENSG00000000005,TNMD,X\n             ..."\n    ',
      parameters: [
        {
          name: "attributes",
          type: "string array",
          description: "Parameter: attributes",
          required: true,
        },
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "filters",
          type: "object",
          description: "Parameter: filters",
          required: true,
        },
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
      ],
    },
    {
      name: "get_translation",
      description:
        '\n    Translates a single identifier from one attribute type to another.\n\n    This function allows conversion between different identifier types, such as\n    converting a gene symbol to an Ensembl ID. Results are cached to improve performance.\n\n    Args:\n        mart (str): The mart identifier (e.g., "ENSEMBL_MART_ENSEMBL")\n        dataset (str): The dataset identifier (e.g., "hsapiens_gene_ensembl")\n        from_attr (str): The source attribute name (e.g., "hgnc_symbol")\n        to_attr (str): The target attribute name (e.g., "ensembl_gene_id")\n        target (str): The identifier value to translate (e.g., "TP53")\n\n    Returns:\n        str: The translated identifier, or an error message if not found.\n\n    Example:\n        get_translation("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl", "hgnc_symbol", "ensembl_gene_id", "TP53")\n        >>> "ENSG00000141510"\n    ',
      parameters: [
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "from_attr",
          type: "string",
          description: "Parameter: from_attr",
          required: true,
        },
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description: "Parameter: target",
          required: true,
        },
        {
          name: "to_attr",
          type: "string",
          description: "Parameter: to_attr",
          required: true,
        },
      ],
    },
    {
      name: "batch_translate",
      description:
        '\n    Translates multiple identifiers in a single batch operation.\n\n    This function is more efficient than multiple calls to get_translation when\n    you need to translate many identifiers at once.\n\n    Args:\n        mart (str): The mart identifier (e.g., "ENSEMBL_MART_ENSEMBL")\n        dataset (str): The dataset identifier (e.g., "hsapiens_gene_ensembl")\n        from_attr (str): The source attribute name (e.g., "hgnc_symbol")\n        to_attr (str): The target attribute name (e.g., "ensembl_gene_id")\n        targets (list[str]): List of identifier values to translate (e.g., ["TP53", "BRCA1", "BRCA2"])\n\n    Returns:\n        dict: A dictionary containing:\n            - translations: Dictionary mapping input IDs to translated IDs\n            - not_found: List of IDs that could not be translated\n            - found_count: Number of successfully translated IDs\n            - not_found_count: Number of IDs that could not be translated\n\n    Example:\n        batch_translate("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl", "hgnc_symbol", "ensembl_gene_id", ["TP53", "BRCA1", "BRCA2"])\n        >>> {"translations": {"TP53": "ENSG00000141510", "BRCA1": "ENSG00000012048"}, "not_found": ["BRCA2"], "found_count": 2, "not_found_count": 1}\n    ',
      parameters: [
        {
          name: "dataset",
          type: "string",
          description: "Parameter: dataset",
          required: true,
        },
        {
          name: "from_attr",
          type: "string",
          description: "Parameter: from_attr",
          required: true,
        },
        {
          name: "mart",
          type: "string",
          description: "Parameter: mart",
          required: true,
        },
        {
          name: "targets",
          type: "string array",
          description: "Parameter: targets",
          required: true,
        },
        {
          name: "to_attr",
          type: "string",
          description: "Parameter: to_attr",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jzinno/biomart-mcp",
  _varName: "biomartMcpPlugin",
};

const editFileLinesMcpServerPlugin: Plugin = {
  id: "2apib1zht1",
  name: "Edit File Lines MCP Server",
  description:
    "A TypeScript-based MCP server that provides tools for making precise line-based edits to text files within allowed directories.",
  image: "https://github.com/oakenai.png",
  actions: [],
  githubUrl: "https://github.com/oakenai/mcp-edit-file-lines",
  _varName: "editFileLinesMcpServerPlugin",
};

const cursorA11yMcpPlugin: Plugin = {
  id: "mik2l7a1tw",
  name: "Cursor A11y MCP",
  description:
    "Provides accessibility testing capabilities through CLI, helping identify accessibility issues in web applications using axe-core and Puppeteer.",
  image: "https://github.com/westsideori.png",
  actions: [
    {
      name: "a11y",
      description:
        "Run accessibility tests on a URL or a local path (relative URL appended to http://localhost:5000).",
      parameters: [
        {
          name: "relativePath",
          type: "string",
          description: "Relative path appended to http://localhost:5000",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Full URL to test",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/westsideori/cursor-a11y-mcp",
  _varName: "cursorA11yMcpPlugin",
};

const encodingDevopsMcpServerPlugin: Plugin = {
  id: "cjvj8uiizj",
  name: "Encoding DevOps MCP Server",
  description:
    "AI-powered assistant that connects Claude to video encoding workflows, translating cryptic errors into plain English and providing actionable solutions for troubleshooting encoding jobs.",
  image: "https://github.com/PatrickKalkman.png",
  actions: [],
  githubUrl: "https://github.com/PatrickKalkman/encoding-devops",
  _varName: "encodingDevopsMcpServerPlugin",
};

const peakmojoServerPlugin: Plugin = {
  id: "ruy01d9rky",
  name: "PeakMojo Server",
  description:
    "A Python server implementation that enables integration with the PeakMojo API, providing access to various resources like users, personas, scenarios, and tools for managing PeakMojo functionality.",
  image: "https://github.com/peakmojo.png",
  actions: [],
  githubUrl: "https://github.com/peakmojo/mcp-server-peakmojo",
  _varName: "peakmojoServerPlugin",
};

const terminalControllerForMcpPlugin: Plugin = {
  id: "i59xcpycnh",
  name: "Terminal Controller for MCP",
  description:
    "An MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface for LLMs.",
  image: "https://github.com/GongRzhe.png",
  actions: [],
  githubUrl: "https://github.com/GongRzhe/terminal-controller-mcp",
  _varName: "terminalControllerForMcpPlugin",
};

const hanaCloudMcpServerPlugin: Plugin = {
  id: "iwqibil4fv",
  name: "HANA Cloud MCP Server",
  description:
    "Enables integration between SAP HANA Cloud Database and Cursor IDE through the Model Context Protocol, providing standardized interfaces for managing ML models and execution contexts.",
  image: "https://github.com/HatriGt.png",
  actions: [],
  githubUrl: "https://github.com/HatriGt/hana-mcp-server",
  _varName: "hanaCloudMcpServerPlugin",
};

const mcpTemplateioPlugin: Plugin = {
  id: "p9zgbaq5ll",
  name: "MCP TemplateIO",
  description:
    "A Model Context Protocol server that provides an image generation tool using Templated.io, allowing users to create customized images based on templates with text and image layers.",
  image: "https://github.com/Lucker631.png",
  actions: [],
  githubUrl: "https://github.com/Lucker631/mcp-templateio",
  _varName: "mcpTemplateioPlugin",
};

const mcpServerRedisPlugin: Plugin = {
  id: "5ydzwgd6w0",
  name: "MCP Server Redis",
  description:
    "A server that provides Claude with Redis database access and operations through a set of tools for basic operations, lists, hashes, sets, and pub/sub functionality.",
  image: "https://github.com/prajwalnayak7.png",
  actions: [],
  githubUrl: "https://github.com/prajwalnayak7/mcp-server-redis",
  _varName: "mcpServerRedisPlugin",
};

const binaryReaderMcpPlugin: Plugin = {
  id: "6is6u1t00v",
  name: "Binary Reader MCP",
  description:
    "A Model Context Protocol server for reading and analyzing binary files, with initial support for Unreal Engine asset files (.uasset).",
  image: "https://github.com/berlinbra.png",
  actions: [],
  githubUrl: "https://github.com/berlinbra/binary-reader-mcp",
  _varName: "binaryReaderMcpPlugin",
};

const rabbitmqMcpServerPlugin: Plugin = {
  id: "eg0ax0yodl",
  name: "RabbitMQ MCP Server",
  description:
    "A Model Context Protocol server implementation that enables Claude to interact with RabbitMQ message queues and topics, allowing read/write operations on a RabbitMQ instance.",
  image: "https://github.com/kenliao94.png",
  actions: [],
  githubUrl: "https://github.com/kenliao94/mcp-server-rabbitmq",
  _varName: "rabbitmqMcpServerPlugin",
};

const verodatMcpServerPlugin: Plugin = {
  id: "vt5iikqwug",
  name: "Verodat MCP Server",
  description:
    "An MCP server that integrates Verodat's data management capabilities with AI systems like Claude Desktop, enabling users to manage accounts, workspaces, and datasets, as well as perform AI-powered queries on their data.",
  image: "https://github.com/Verodat.png",
  actions: [],
  githubUrl: "https://github.com/Verodat/verodat-mcp-server",
  _varName: "verodatMcpServerPlugin",
};

const geminiThinkingServerPlugin: Plugin = {
  id: "q8pdxnf129",
  name: "Gemini Thinking Server",
  description:
    "An MCP server implementation that leverages Google's Gemini API to provide analytical problem-solving capabilities through sequential thinking steps without code generation.",
  image: "https://github.com/bartekke8it56w2.png",
  actions: [
    {
      name: "geminithinking",
      description:
        "A detailed tool for dynamic and reflective problem-solving through Gemini AI.\nThis tool helps analyze problems through a flexible thinking process powered by Google's Gemini model.\nEach thought can build on, question, or revise previous insights as understanding deepens.\n\nWhen to use this tool:\n- Breaking down complex problems into steps\n- Planning and design with room for revision\n- Analysis that might need course correction\n- Problems where the full scope might not be clear initially\n- Problems that require a multi-step solution\n- Tasks that need to maintain context over multiple steps\n- Situations where irrelevant information needs to be filtered out\n\nKey features:\n- Leverages Gemini AI for deep analytical thinking\n- Provides meta-commentary on the reasoning process\n- Indicates confidence levels for generated thoughts\n- Suggests alternative approaches when relevant\n- You can adjust total_thoughts up or down as you progress\n- You can question or revise previous thoughts\n- You can add more thoughts even after reaching what seemed like the end\n- You can express uncertainty and explore alternative approaches\n- Not every thought needs to build linearly - you can branch or backtrack\n- Session persistence: save and resume your analysis sessions\n\nParameters explained:\n- query: The question or problem to be analyzed\n- context: Additional context information (e.g., code snippets, background)\n- approach: Suggested approach to the problem (optional)\n- previousThoughts: Array of previous thoughts for context\n- thought: The current thinking step (if empty, will be generated by Gemini)\n- next_thought_needed: True if you need more thinking, even if at what seemed like the end\n- thought_number: Current number in sequence (can go beyond initial total if needed)\n- total_thoughts: Current estimate of thoughts needed (can be adjusted up/down)\n- is_revision: A boolean indicating if this thought revises previous thinking\n- revises_thought: If is_revision is true, which thought number is being reconsidered\n- branch_from_thought: If branching, which thought number is the branching point\n- branch_id: Identifier for the current branch (if any)\n- needs_more_thoughts: If reaching end but realizing more thoughts needed\n- metaComments: Meta-commentary from Gemini about its reasoning process\n- confidenceLevel: Gemini's confidence in the generated thought (0-1)\n- alternativePaths: Alternative approaches suggested by Gemini\n\nSession commands:\n- sessionCommand: Command to manage sessions ('save', 'load', 'getState')\n- sessionPath: Path to save or load the session file (required for 'save' and 'load' commands)\n\nYou should:\n1. Start with a clear query and any relevant context\n2. Let Gemini generate thoughts by not providing the 'thought' parameter\n3. Review the generated thoughts and meta-commentary\n4. Feel free to revise or branch thoughts as needed\n5. Consider alternative paths suggested by Gemini\n6. Only set next_thought_needed to false when truly done\n7. Use session commands to save your progress and resume later",
      parameters: [
        {
          name: "alternativePaths",
          type: "string array",
          description: "Alternative approaches suggested",
          required: false,
        },
        {
          name: "approach",
          type: "string",
          description: "Suggested approach to the problem",
          required: false,
        },
        {
          name: "branchFromThought",
          type: "integer",
          description: "Branching point thought number",
          required: false,
        },
        {
          name: "branchId",
          type: "string",
          description: "Branch identifier",
          required: false,
        },
        {
          name: "confidenceLevel",
          type: "number",
          description: "Confidence level in the generated thought (0-1)",
          required: false,
        },
        {
          name: "context",
          type: "string",
          description: "Additional context information",
          required: false,
        },
        {
          name: "isRevision",
          type: "boolean",
          description: "Whether this revises previous thinking",
          required: false,
        },
        {
          name: "metaComments",
          type: "string",
          description: "Meta-commentary about the reasoning process",
          required: false,
        },
        {
          name: "needsMoreThoughts",
          type: "boolean",
          description: "If more thoughts are needed",
          required: false,
        },
        {
          name: "nextThoughtNeeded",
          type: "boolean",
          description: "Whether another thought step is needed",
          required: true,
        },
        {
          name: "previousThoughts",
          type: "string array",
          description: "Array of previous thoughts for context",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The question or problem to analyze",
          required: true,
        },
        {
          name: "revisesThought",
          type: "integer",
          description: "Which thought is being reconsidered",
          required: false,
        },
        {
          name: "sessionCommand",
          type: "string",
          description:
            "Command to manage sessions ('save', 'load', 'getState')",
          required: false,
        },
        {
          name: "sessionPath",
          type: "string",
          description: "Path to save or load the session file",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description:
            "Your current thinking step (if empty, will be generated by Gemini)",
          required: false,
        },
        {
          name: "thoughtNumber",
          type: "integer",
          description: "Current thought number",
          required: true,
        },
        {
          name: "totalThoughts",
          type: "integer",
          description: "Estimated total thoughts needed",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bartekke8it56w2/new-mcp",
  _varName: "geminiThinkingServerPlugin",
};

const shellMcpServer1Plugin: Plugin = {
  id: "czdyoa374h",
  name: "Shell MCP Server",
  description:
    "A Model Context Protocol server that allows LLMs to execute shell commands and receive their output in a controlled manner.",
  image: "https://github.com/odysseus0.png",
  actions: [],
  githubUrl: "https://github.com/odysseus0/mcp-server-shell",
  _varName: "shellMcpServer1Plugin",
};

const safeMcpServerPlugin: Plugin = {
  id: "764w75qinj",
  name: "Safe MCP Server",
  description:
    "An MCP server that enables interaction with Safe (formerly Gnosis Safe) smart contract wallets, allowing users to query transactions, get multisig details, and decode transaction data through natural language.",
  image: "https://github.com/5ajaki.png",
  actions: [
    {
      name: "getSafeTransactions",
      description: "Get all transactions for a Safe address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Safe address",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transactions to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Offset for pagination",
          required: false,
        },
      ],
    },
    {
      name: "getMultisigTransaction",
      description: "Get details of a specific multisig transaction",
      parameters: [
        {
          name: "safeTxHash",
          type: "string",
          description: "Safe transaction hash",
          required: true,
        },
      ],
    },
    {
      name: "decodeTransactionData",
      description: "Decode transaction data using Safe API",
      parameters: [
        {
          name: "data",
          type: "string",
          description: "Transaction data in hex format",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Optional contract address",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/5ajaki/safe-mcp-server",
  _varName: "safeMcpServerPlugin",
};

const overseerrMcpServerPlugin: Plugin = {
  id: "vs6qmcl6bm",
  name: "Overseerr MCP Server",
  description:
    "Allows Claude to interact with Overseerr, enabling users to search, request, and manage media for their Plex library through natural language.",
  image: "https://github.com/jmagar.png",
  actions: [
    {
      name: "example_tool",
      description: "An example tool that processes messages",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Message to process",
          required: false,
        },
      ],
    },
    {
      name: "get_daily_treasury_statement",
      description: "Get the daily treasury statement for a specific day",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Date of the statement in YYYY-MM-DD format",
          required: false,
        },
      ],
    },
    {
      name: "get_media_details",
      description: "Get detailed information about a specific movie or TV show",
      parameters: [
        {
          name: "mediaId",
          type: "string",
          description: "The TMDB ID of the media item",
          required: false,
        },
        {
          name: "mediaType",
          type: "string",
          description: "Type of media (movie or tv)",
          required: false,
        },
        {
          name: "reference",
          type: "string",
          description:
            "Reference to a previous search result (e.g., 'first_result', 'last_search', or just 'inception')",
          required: false,
        },
      ],
    },
    {
      name: "get_requests",
      description: "Get a list of media requests from Overseerr",
      parameters: [
        {
          name: "status",
          type: "string",
          description: "Filter requests by their status (default: all)",
          required: false,
        },
      ],
    },
    {
      name: "request_media",
      description: "Request a movie or TV show to be added to the media server",
      parameters: [
        {
          name: "mediaId",
          type: "string",
          description:
            "The TMDB ID of the media item - not needed if using reference",
          required: false,
        },
        {
          name: "mediaType",
          type: "string",
          description:
            "Type of media (movie or tv) - not needed if using reference",
          required: false,
        },
        {
          name: "reference",
          type: "string",
          description:
            "Reference to a media item from previous search results (e.g., 'first', 'second', '3', 'last')",
          required: false,
        },
        {
          name: "seasons",
          type: "string",
          description:
            "For TV shows, specific season numbers to request (leave empty for all seasons)",
          required: false,
        },
      ],
    },
    {
      name: "search_media",
      description: "Search for movies and TV shows in Overseerr",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query for movies or TV shows",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jmagar/overseerr-mcp-server",
  _varName: "overseerrMcpServerPlugin",
};

const jinaAiMcpServerPlugin: Plugin = {
  id: "pekvpd5qjt",
  name: "Jina AI MCP Server",
  description:
    "Enables semantic search, image search, and cross-modal search functionalities through integration with Jina AI's neural search capabilities.",
  image: "https://github.com/Sheshiyer.png",
  actions: [],
  githubUrl: "https://github.com/Sheshiyer/jina-ai-mcp-multimodal-search",
  _varName: "jinaAiMcpServerPlugin",
};

const zoomTranscriptMcpServerPlugin: Plugin = {
  id: "b01uqjtp7w",
  name: "Zoom Transcript MCP Server",
  description:
    "An MCP server that enables users to list, download, search, and manage Zoom meeting transcripts through a structured interface.",
  image: "https://github.com/forayconsulting.png",
  actions: [
    {
      name: "get_recent_transcripts",
      description:
        "Get and download transcripts from recent Zoom meetings. This tool will access the Zoom cloud API to fetch and download recent meeting transcripts.",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of recent meetings to fetch (default: 5)",
          required: false,
        },
      ],
    },
    {
      name: "search_transcripts",
      description:
        "Search across Zoom meeting transcripts for specific content. This tool will search through locally stored transcripts first.",
      parameters: [
        {
          name: "dateRange",
          type: "object",
          description: "Parameter: dateRange",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "extract_action_items",
      description:
        "Identify and extract action items, tasks and commitments from meeting transcripts",
      parameters: [
        {
          name: "meetingId",
          type: "string",
          description:
            "Meeting ID to extract action items from. Can be either the numeric ID or UUID.",
          required: true,
        },
        {
          name: "participant",
          type: "string",
          description:
            "Optional filter to only show action items from or assigned to a specific participant",
          required: false,
        },
      ],
    },
    {
      name: "check_local_transcripts",
      description:
        "Check what transcripts are already downloaded and available locally",
      parameters: [
        {
          name: "dateRange",
          type: "object",
          description: "Parameter: dateRange",
          required: false,
        },
      ],
    },
    {
      name: "download_transcript",
      description:
        "Download a specific Zoom meeting transcript from the cloud to local storage",
      parameters: [
        {
          name: "meetingId",
          type: "string",
          description: "Zoom meeting ID or UUID",
          required: true,
        },
      ],
    },
    {
      name: "list_meetings",
      description:
        "List available Zoom meetings with recordings that exist in the cloud",
      parameters: [
        {
          name: "dateRange",
          type: "object",
          description: "Parameter: dateRange",
          required: false,
        },
        {
          name: "participant",
          type: "string",
          description: "Filter by participant name",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/forayconsulting/zoom_transcript_mcp",
  _varName: "zoomTranscriptMcpServerPlugin",
};

const sqliteMcpServer1Plugin: Plugin = {
  id: "le7p83s38c",
  name: "SQLite MCP Server",
  description:
    "A Model Context Protocol server that provides database interaction capabilities through SQLite, enabling users to run SQL queries, analyze business data, and automatically generate business insight memos.",
  image: "https://github.com/jacksteamdev.png",
  actions: [
    {
      name: "read-query",
      description: "Execute a read-only SQL query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "a SELECT query",
          required: true,
        },
      ],
    },
    {
      name: "write-query",
      description: "Execute a write SQL query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "an INSERT, UPDATE, or DELETE query",
          required: true,
        },
      ],
    },
    {
      name: "create-table",
      description: "Create a new table in the database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "a CREATE TABLE statement",
          required: true,
        },
      ],
    },
    {
      name: "list-tables",
      description: "List all tables in the database",
      parameters: [],
    },
    {
      name: "describe-table",
      description: "Get schema information for a table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Parameter: table_name",
          required: true,
        },
      ],
    },
    {
      name: "append-insight",
      description: "Add a business insight to the memo",
      parameters: [
        {
          name: "insight",
          type: "string",
          description: "Parameter: insight",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jacksteamdev/mcp-sqlite-bun-server",
  _varName: "sqliteMcpServer1Plugin",
};

const chooseMcpServerPlugin: Plugin = {
  id: "1xc2x7lu9g",
  name: "Choose MCP Server",
  description:
    "An MCP server for Claude Desktop that allows users to query data from selected Google Cloud datasets by configuring project ID and datasets in the Claude Desktop configuration.",
  image: "https://github.com/keurcien.png",
  actions: [],
  githubUrl: "https://github.com/keurcien/choose-mcp-server",
  _varName: "chooseMcpServerPlugin",
};

const elevenlabsTexttospeechMcpPlugin: Plugin = {
  id: "athmpgbkuh",
  name: "ElevenLabs Text-to-Speech MCP",
  description:
    "Integrates ElevenLabs Text-to-Speech capabilities with Cursor through the Model Context Protocol, allowing users to convert text to speech with selectable voices within the Cursor editor.",
  image: "https://github.com/georgi-io.png",
  actions: [],
  githubUrl: "https://github.com/georgi-io/jessica",
  _varName: "elevenlabsTexttospeechMcpPlugin",
};

const awsResourcesMcpServerPlugin: Plugin = {
  id: "nx30klxurg",
  name: "AWS Resources MCP Server",
  description:
    "A Model Context Protocol server that enables Claude to execute Python code using boto3 to query and manage AWS resources directly from conversations.",
  image: "https://github.com/baryhuang.png",
  actions: [],
  githubUrl: "https://github.com/baryhuang/mcp-server-aws-resources-python",
  _varName: "awsResourcesMcpServerPlugin",
};

const ragieModelContextProtocolServerPlugin: Plugin = {
  id: "nagpa0kp17",
  name: "Ragie Model Context Protocol Server",
  description:
    "An MCP server that enables AI models to retrieve information from Ragie's knowledge base through a simple 'retrieve' tool.",
  image: "https://github.com/ragieai.png",
  actions: [
    {
      name: "retrieve",
      description:
        "Look up information in the Knowledge Base. Use this tool when you need to:\n - Find relevant documents or information on specific topics\n - Retrieve company policies, procedures, or guidelines\n - Access product specifications or technical documentation\n - Get contextual information to answer company-specific questions\n - Find historical data or information about projects",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The query to search for data in the Knowledge Base",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ragieai/ragie-mcp-server",
  _varName: "ragieModelContextProtocolServerPlugin",
};

const markdownDownloaderPlugin: Plugin = {
  id: "jrki7zltg7",
  name: "Markdown Downloader",
  description:
    "An MCP server that enables users to download webpages as markdown files using r.jina.ai service, with features for configurable download directories and automatic date-stamped filenames.",
  image: "https://github.com/dazeb.png",
  actions: [
    {
      name: "download_markdown",
      description: "Download a webpage as markdown using r.jina.ai",
      parameters: [
        {
          name: "subdirectory",
          type: "string",
          description: "Optional subdirectory to save the file in",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the webpage to download",
          required: true,
        },
      ],
    },
    {
      name: "list_downloaded_files",
      description: "List all downloaded markdown files",
      parameters: [
        {
          name: "subdirectory",
          type: "string",
          description: "Optional subdirectory to list files from",
          required: false,
        },
      ],
    },
    {
      name: "set_download_directory",
      description: "Set the main local download folder for markdown files",
      parameters: [
        {
          name: "directory",
          type: "string",
          description: "Full path to the download directory",
          required: true,
        },
      ],
    },
    {
      name: "get_download_directory",
      description: "Get the current download directory",
      parameters: [],
    },
    {
      name: "create_subdirectory",
      description: "Create a new subdirectory in the root download folder",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the subdirectory to create",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dazeb/markdown-downloader",
  _varName: "markdownDownloaderPlugin",
};

const unixManualServerPlugin: Plugin = {
  id: "ry67h90te1",
  name: "Unix Manual Server",
  description:
    "Provides Unix command documentation directly within Claude conversations, allowing users to retrieve help pages, man pages, and usage information without leaving the chat interface.",
  image: "https://github.com/tizee.png",
  actions: [],
  githubUrl: "https://github.com/tizee/mcp-unix-manual",
  _varName: "unixManualServerPlugin",
};

const mcpToolsForObsidianPlugin: Plugin = {
  id: "4v2j5y39d6",
  name: "MCP Tools for Obsidian",
  description:
    "A local MCP server that enables AI applications like Claude Desktop to securely access and work with Obsidian vaults, providing capabilities for reading notes, executing templates, and performing semantic searches.",
  image: "https://github.com/jacksteamdev.png",
  actions: [],
  githubUrl: "https://github.com/jacksteamdev/obsidian-mcp-tools",
  _varName: "mcpToolsForObsidianPlugin",
};

const telegramMcpServerPlugin: Plugin = {
  id: "484jega1au",
  name: "Telegram MCP Server",
  description:
    "A bridge allowing Claude Desktop to access Telegram chats and messages via the Model Context Protocol, providing read-only capabilities to retrieve dialogs and messages from Telegram.",
  image: "https://github.com/sparfenyuk.png",
  actions: [
    {
      name: "ListDialogs",
      description: "List available dialogs, chats and channels.",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Parameter: archived",
          required: false,
        },
        {
          name: "ignore_pinned",
          type: "boolean",
          description: "Parameter: ignore_pinned",
          required: false,
        },
        {
          name: "unread",
          type: "boolean",
          description: "Parameter: unread",
          required: false,
        },
      ],
    },
    {
      name: "ListMessages",
      description:
        "\n    List messages in a given dialog, chat or channel. The messages are listed in order from newest to oldest.\n\n    If `unread` is set to `True`, only unread messages will be listed. Once a message is read, it will not be\n    listed again.\n\n    If `limit` is set, only the last `limit` messages will be listed. If `unread` is set, the limit will be\n    the minimum between the unread messages and the limit.\n    ",
      parameters: [
        {
          name: "dialog_id",
          type: "integer",
          description: "Parameter: dialog_id",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "unread",
          type: "boolean",
          description: "Parameter: unread",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sparfenyuk/mcp-telegram",
  _varName: "telegramMcpServerPlugin",
};

const shellMcpServer2Plugin: Plugin = {
  id: "oqel9j0pea",
  name: "Shell MCP Server",
  description:
    "A secure server that enables AI applications to execute shell commands in specified directories, supporting multiple shell types (bash, sh, cmd, powershell) with built-in security features like directory isolation and timeout control.",
  image: "https://github.com/blazickjp.png",
  actions: [],
  githubUrl: "https://github.com/blazickjp/shell-mcp-server",
  _varName: "shellMcpServer2Plugin",
};

const chainOfDraftCodMcpServerPlugin: Plugin = {
  id: "2fynikwmy3",
  name: "Chain of Draft (CoD) MCP Server",
  description:
    "Implements the Chain of Draft reasoning approach to generate minimalistic intermediate reasoning outputs while solving tasks, significantly reducing token usage while maintaining accuracy.",
  image: "https://github.com/stat-guy.png",
  actions: [
    {
      name: "chain_of_draft_solve",
      description: "Solve a reasoning problem using Chain of Draft approach",
      parameters: [
        {
          name: "adaptive_word_limit",
          type: "boolean",
          description: "Adjust word limits based on complexity",
          required: false,
        },
        {
          name: "approach",
          type: "string",
          description: "Force 'CoD' or 'CoT' approach",
          required: false,
        },
        {
          name: "domain",
          type: "string",
          description:
            "Domain for context (math, logic, code, common-sense, etc.)",
          required: false,
        },
        {
          name: "enforce_format",
          type: "boolean",
          description: "Whether to enforce the word limit",
          required: false,
        },
        {
          name: "max_words_per_step",
          type: "number",
          description: "Maximum words per reasoning step",
          required: false,
        },
        {
          name: "problem",
          type: "string",
          description: "The problem to solve",
          required: true,
        },
      ],
    },
    {
      name: "math_solve",
      description: "Solve a math problem using Chain of Draft reasoning",
      parameters: [
        {
          name: "approach",
          type: "string",
          description: "Force 'CoD' or 'CoT' approach",
          required: false,
        },
        {
          name: "max_words_per_step",
          type: "number",
          description: "Maximum words per reasoning step",
          required: false,
        },
        {
          name: "problem",
          type: "string",
          description: "The math problem to solve",
          required: true,
        },
      ],
    },
    {
      name: "code_solve",
      description: "Solve a coding problem using Chain of Draft reasoning",
      parameters: [
        {
          name: "approach",
          type: "string",
          description: "Force 'CoD' or 'CoT' approach",
          required: false,
        },
        {
          name: "max_words_per_step",
          type: "number",
          description: "Maximum words per reasoning step",
          required: false,
        },
        {
          name: "problem",
          type: "string",
          description: "The coding problem to solve",
          required: true,
        },
      ],
    },
    {
      name: "logic_solve",
      description: "Solve a logic problem using Chain of Draft reasoning",
      parameters: [
        {
          name: "approach",
          type: "string",
          description: "Force 'CoD' or 'CoT' approach",
          required: false,
        },
        {
          name: "max_words_per_step",
          type: "number",
          description: "Maximum words per reasoning step",
          required: false,
        },
        {
          name: "problem",
          type: "string",
          description: "The logic problem to solve",
          required: true,
        },
      ],
    },
    {
      name: "get_performance_stats",
      description: "Get performance statistics for CoD vs CoT approaches",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Filter for specific domain",
          required: false,
        },
      ],
    },
    {
      name: "get_token_reduction",
      description: "Get token reduction statistics for CoD vs CoT",
      parameters: [],
    },
    {
      name: "analyze_problem_complexity",
      description: "Analyze the complexity of a problem",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Problem domain",
          required: false,
        },
        {
          name: "problem",
          type: "string",
          description: "The problem to analyze",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stat-guy/chain-of-draft",
  _varName: "chainOfDraftCodMcpServerPlugin",
};

const claudeOutlookMcpToolPlugin: Plugin = {
  id: "0j71n92wnh",
  name: "Claude Outlook MCP Tool",
  description:
    "A Model Context Protocol tool that enables Claude to interact with Microsoft Outlook for macOS, allowing users to read/send emails, manage calendar events, and access contacts through natural language commands.",
  image: "https://github.com/syedazharmbnr1.png",
  actions: [
    {
      name: "outlook_mail",
      description:
        "Interact with Microsoft Outlook for macOS - read, search, send, and manage emails",
      parameters: [
        {
          name: "attachments",
          type: "string array",
          description:
            "File paths to attach to the email (optional for send operation)",
          required: false,
        },
        {
          name: "bcc",
          type: "string",
          description: "BCC email address (optional for send operation)",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Email body content (required for send operation)",
          required: false,
        },
        {
          name: "cc",
          type: "string",
          description: "CC email address (optional for send operation)",
          required: false,
        },
        {
          name: "folder",
          type: "string",
          description:
            "Email folder to use (optional - if not provided, uses inbox or searches across all folders)",
          required: false,
        },
        {
          name: "isHtml",
          type: "boolean",
          description:
            "Whether the body content is HTML (optional for send operation, default: false)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Number of emails to retrieve (optional, for unread, read, and search operations)",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description:
            "Operation to perform: 'unread', 'search', 'send', 'folders', or 'read'",
          required: true,
        },
        {
          name: "searchTerm",
          type: "string",
          description:
            "Text to search for in emails (required for search operation)",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject (required for send operation)",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient email address (required for send operation)",
          required: false,
        },
      ],
    },
    {
      name: "outlook_calendar",
      description:
        "Interact with Microsoft Outlook for macOS calendar - view, create, and manage events",
      parameters: [
        {
          name: "attendees",
          type: "string",
          description:
            "Comma-separated list of attendee email addresses (optional for create operation)",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Event description/body (optional for create operation)",
          required: false,
        },
        {
          name: "days",
          type: "number",
          description:
            "Number of days to look ahead (optional, for upcoming operation, default: 7)",
          required: false,
        },
        {
          name: "end",
          type: "string",
          description: "End time in ISO format (required for create operation)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Number of events to retrieve (optional, for today and upcoming operations)",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "Event location (optional for create operation)",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description:
            "Operation to perform: 'today', 'upcoming', 'search', or 'create'",
          required: true,
        },
        {
          name: "searchTerm",
          type: "string",
          description:
            "Text to search for in events (required for search operation)",
          required: false,
        },
        {
          name: "start",
          type: "string",
          description:
            "Start time in ISO format (required for create operation)",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Event subject/title (required for create operation)",
          required: false,
        },
      ],
    },
    {
      name: "outlook_contacts",
      description:
        "Search and retrieve contacts from Microsoft Outlook for macOS",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of contacts to retrieve (optional)",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Operation to perform: 'list' or 'search'",
          required: true,
        },
        {
          name: "searchTerm",
          type: "string",
          description:
            "Text to search for in contacts (required for search operation)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/syedazharmbnr1/claude-outlook-mcp",
  _varName: "claudeOutlookMcpToolPlugin",
};

const mcpProxyServerPlugin: Plugin = {
  id: "5weyukvrvq",
  name: "MCP Proxy Server",
  description:
    "A central hub that aggregates multiple MCP resource servers into a single unified interface, enabling users to access tools and capabilities from multiple backend servers through one connection point.",
  image: "https://github.com/adamwattis.png",
  actions: [],
  githubUrl: "https://github.com/adamwattis/mcp-proxy-server",
  _varName: "mcpProxyServerPlugin",
};

const brianknowsMcpServerPlugin: Plugin = {
  id: "idfph0fstx",
  name: "BrianKnows MCP Server",
  description:
    "An MCP server that connects Claude to BrianKnows' blockchain knowledge base, allowing users to search for blockchain/DeFi information and interact with a specialized agent across multiple knowledge bases.",
  image: "https://github.com/antoncoding.png",
  actions: [
    {
      name: "ping",
      description: "Check if the Brian API server is alive",
      parameters: [],
    },
    {
      name: "search",
      description: "Search using Brian's knowledge engine",
      parameters: [
        {
          name: "kb",
          type: "string",
          description:
            "Knowledge box to search in (default: public-knowledge-box). Options: circle_kb, lido_kb, Polygon_kb, taiko_kb, near_kb, clave_kb, starknet_kb, consensys_kb",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "agent",
      description: "Chat with Brian agent",
      parameters: [
        {
          name: "address",
          type: "string",
          description:
            "User blockchain address (required for blockchain operations)",
          required: false,
        },
        {
          name: "chainId",
          type: "string",
          description: "Blockchain chain ID",
          required: false,
        },
        {
          name: "kbId",
          type: "string",
          description:
            "Knowledge box ID to use (default: public-knowledge-box)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "User prompt or question",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/antoncoding/mcp-brianknows",
  _varName: "brianknowsMcpServerPlugin",
};

const deepseekMcpServer2Plugin: Plugin = {
  id: "1b8v5vz9gl",
  name: "DeepSeek MCP Server",
  description:
    "Provides code generation and completion capabilities using the DeepSeek API, with support for tool chaining and cost optimization.",
  image: "https://github.com/Sheshiyer.png",
  actions: [],
  githubUrl: "https://github.com/Sheshiyer/deepseek-mcp-with-MoE",
  _varName: "deepseekMcpServer2Plugin",
};

const datasetViewerMcpServerPlugin: Plugin = {
  id: "b5mmrmnn6b",
  name: "Dataset Viewer MCP Server",
  description:
    "Enables interaction with the Hugging Face Dataset Viewer API, allowing users to browse, search, filter, and analyze datasets hosted on the Hugging Face Hub.",
  image: "https://github.com/privetin.png",
  actions: [
    {
      name: "get_info",
      description:
        "Get detailed information about a Hugging Face dataset including description, features, splits, and statistics. Run validate first to check if the dataset exists and is accessible.",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
      ],
    },
    {
      name: "get_rows",
      description: "Get paginated rows from a Hugging Face dataset",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "config",
          type: "string",
          description:
            "Dataset configuration/subset name. Use get_info to list available configs",
          required: true,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number (0-based), returns 100 rows per page",
          required: false,
        },
        {
          name: "split",
          type: "string",
          description:
            "Dataset split name. Splits partition the data for training/evaluation",
          required: true,
        },
      ],
    },
    {
      name: "get_first_rows",
      description: "Get first rows from a Hugging Face dataset split",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "config",
          type: "string",
          description:
            "Dataset configuration/subset name. Use get_info to list available configs",
          required: true,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
        {
          name: "split",
          type: "string",
          description:
            "Dataset split name. Splits partition the data for training/evaluation",
          required: true,
        },
      ],
    },
    {
      name: "search_dataset",
      description: "Search for text within a Hugging Face dataset",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "config",
          type: "string",
          description:
            "Dataset configuration/subset name. Use get_info to list available configs",
          required: true,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Text to search for in the dataset",
          required: true,
        },
        {
          name: "split",
          type: "string",
          description:
            "Dataset split name. Splits partition the data for training/evaluation",
          required: true,
        },
      ],
    },
    {
      name: "filter",
      description:
        "Filter rows in a Hugging Face dataset using SQL-like conditions",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "config",
          type: "string",
          description:
            "Dataset configuration/subset name. Use get_info to list available configs",
          required: true,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
        {
          name: "orderby",
          type: "string",
          description: "SQL-like ORDER BY clause to sort results",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number for paginated results (100 rows per page)",
          required: false,
        },
        {
          name: "split",
          type: "string",
          description:
            "Dataset split name. Splits partition the data for training/evaluation",
          required: true,
        },
        {
          name: "where",
          type: "string",
          description: "SQL-like WHERE clause to filter rows",
          required: true,
        },
      ],
    },
    {
      name: "get_statistics",
      description: "Get statistics about a Hugging Face dataset",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "config",
          type: "string",
          description:
            "Dataset configuration/subset name. Use get_info to list available configs",
          required: true,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
        {
          name: "split",
          type: "string",
          description:
            "Dataset split name. Splits partition the data for training/evaluation",
          required: true,
        },
      ],
    },
    {
      name: "get_parquet",
      description: "Export Hugging Face dataset split as Parquet file",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
      ],
    },
    {
      name: "validate",
      description: "Check if a Hugging Face dataset exists and is accessible",
      parameters: [
        {
          name: "auth_token",
          type: "string",
          description: "Hugging Face auth token for private/gated datasets",
          required: false,
        },
        {
          name: "dataset",
          type: "string",
          description:
            "Hugging Face dataset identifier in the format owner/dataset",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/privetin/dataset-viewer",
  _varName: "datasetViewerMcpServerPlugin",
};

const mcpCodeAnalyzerPlugin: Plugin = {
  id: "1d7wpqnwwr",
  name: "MCP Code Analyzer",
  description:
    "A comprehensive code analysis and management tool that integrates with Claude Desktop to analyze code at project and file levels, helping adapt changes to projects intelligently.",
  image: "https://github.com/emiryasar.png",
  actions: [],
  githubUrl: "https://github.com/emiryasar/mcp_code_analyzer",
  _varName: "mcpCodeAnalyzerPlugin",
};

const openaiMcpServerPlugin: Plugin = {
  id: "o0r4qq1gpp",
  name: "OpenAI MCP Server",
  description:
    "A Model Context Protocol server implementation that enables connection between OpenAI APIs and MCP clients for coding assistance with features like CLI interaction, web API integration, and tool-based architecture.",
  image: "https://github.com/arthurcolle.png",
  actions: [],
  githubUrl: "https://github.com/arthurcolle/openai-mcp",
  _varName: "openaiMcpServerPlugin",
};

const clankiPlugin: Plugin = {
  id: "w8ttb0xfab",
  name: "Clanki",
  description:
    "An MCP server that enables AI assistants like Claude to interact with Anki flashcard decks, allowing users to create, manage, and update flashcards through natural language conversations.",
  image: "https://github.com/jasperket.png",
  actions: [],
  githubUrl: "https://github.com/jasperket/clanki",
  _varName: "clankiPlugin",
};

const weatherServiceMcpServerPlugin: Plugin = {
  id: "gnpesrexyc",
  name: "Weather Service MCP Server",
  description:
    "A simple note-taking MCP server that allows storing and summarizing notes with custom URI schemes and provides functionality to add notes and generate summaries with different detail levels.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [],
  githubUrl: "https://github.com/Sunwood-ai-labs/mcp-weather-service-server",
  _varName: "weatherServiceMcpServerPlugin",
};

const claudeDesktopApiMcpPlugin: Plugin = {
  id: "riytk7nmma",
  name: "Claude Desktop API MCP",
  description:
    "A server that enables Claude Desktop users to access the Claude API directly, allowing them to bypass Professional Plan limitations and use advanced features like custom system prompts and conversation management.",
  image: "https://github.com/mlobo2012.png",
  actions: [
    {
      name: "send-message",
      description: "Send a message to Claude",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Message to send to Claude",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mlobo2012/Claude_Desktop_API_USE_VIA_MCP",
  _varName: "claudeDesktopApiMcpPlugin",
};

const nodeOmnibusMcpServerPlugin: Plugin = {
  id: "0j9a4m75vv",
  name: "Node Omnibus MCP Server",
  description:
    "A comprehensive Model Context Protocol server that provides advanced Node.js development tooling for automating project creation, component generation, package management, and documentation with AI-powered assistance.",
  image: "https://github.com/bsmi021.png",
  actions: [
    {
      name: "create_project",
      description: "Create a new Node.js project with enhanced configuration",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Project name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Project directory path",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Project type",
          required: true,
        },
        {
          name: "typescript",
          type: "boolean",
          description: "Enable TypeScript support",
          required: false,
        },
      ],
    },
    {
      name: "install_packages",
      description: "Install npm packages with version management",
      parameters: [
        {
          name: "dev",
          type: "boolean",
          description: "Install as dev dependency",
          required: false,
        },
        {
          name: "packages",
          type: "string array",
          description: "Package names to install",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Project directory path",
          required: true,
        },
      ],
    },
    {
      name: "generate_component",
      description: "Generate a new React component with TypeScript support",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Component name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Component directory path",
          required: true,
        },
        {
          name: "props",
          type: "object",
          description: "Component props with types",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Component type",
          required: true,
        },
      ],
    },
    {
      name: "create_type_definition",
      description: "Create TypeScript type definitions or interfaces",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Type name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "File path",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Type properties and their types",
          required: true,
        },
      ],
    },
    {
      name: "add_script",
      description: "Add a new npm script to package.json",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Script command",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Script name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Project directory path",
          required: true,
        },
      ],
    },
    {
      name: "update_tsconfig",
      description: "Update TypeScript configuration",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "TypeScript compiler options",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Project directory path",
          required: true,
        },
      ],
    },
    {
      name: "create_documentation",
      description: "Generate project documentation",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Component or API name for specific documentation",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Project directory path",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Documentation type",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bsmi021/mcp-node-omnibus-server",
  _varName: "nodeOmnibusMcpServerPlugin",
};

const todoListMcpServerPlugin: Plugin = {
  id: "kh39rjpplx",
  name: "Todo List MCP Server",
  description:
    "A Model Context Protocol (MCP) server that provides tools for managing todo items, including creation, updating, completion, deletion, searching, and summarizing tasks.",
  image: "https://github.com/RegiByte.png",
  actions: [
    {
      name: "create-todo",
      description: "Create a new todo item",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "list-todos",
      description: "List all todos",
      parameters: [],
    },
    {
      name: "get-todo",
      description: "Get a specific todo by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "update-todo",
      description: "Update a todo title or description",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "complete-todo",
      description: "Mark a todo as completed",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "delete-todo",
      description: "Delete a todo",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "search-todos-by-title",
      description: "Search todos by title (case insensitive partial match)",
      parameters: [
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "search-todos-by-date",
      description: "Search todos by creation date (format: YYYY-MM-DD)",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Parameter: date",
          required: true,
        },
      ],
    },
    {
      name: "list-active-todos",
      description: "List all non-completed todos",
      parameters: [],
    },
    {
      name: "summarize-active-todos",
      description: "Generate a summary of all active (non-completed) todos",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/RegiByte/todo-list-mcp",
  _varName: "todoListMcpServerPlugin",
};

const mcpAlchemyPlugin: Plugin = {
  id: "axb5hvasqx",
  name: "MCP Alchemy",
  description:
    "Connects Claude Desktop directly to databases, allowing it to explore database structures, write SQL queries, analyze datasets, and create reports through an API layer with tools for table exploration and query execution.",
  image: "https://github.com/runekaagaard.png",
  actions: [],
  githubUrl: "https://github.com/runekaagaard/mcp-alchemy",
  _varName: "mcpAlchemyPlugin",
};

const gmailMcpServer2Plugin: Plugin = {
  id: "ghsycs61i7",
  name: "Gmail MCP Server",
  description:
    "MCP server that integrates with Gmail to enable sending, reading, and managing emails through tools like send-email, trash-email, get-unread-emails, and read-email.",
  image: "https://github.com/jasonsum.png",
  actions: [],
  githubUrl: "https://github.com/jasonsum/gmail-mcp-server",
  _varName: "gmailMcpServer2Plugin",
};

const xtwitterMcpServerPlugin: Plugin = {
  id: "jsxr09dktf",
  name: "X(Twitter) MCP Server",
  description:
    "An MCP server that allows Claude to create, manage and publish X/Twitter posts directly through the chat interface.",
  image: "https://github.com/vidhupv.png",
  actions: [
    {
      name: "create_draft_tweet",
      description: "Create a draft tweet",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The content of the tweet",
          required: true,
        },
      ],
    },
    {
      name: "create_draft_thread",
      description: "Create a draft tweet thread",
      parameters: [
        {
          name: "contents",
          type: "string array",
          description: "An array of tweet contents for the thread",
          required: true,
        },
      ],
    },
    {
      name: "list_drafts",
      description: "List all draft tweets and threads",
      parameters: [],
    },
    {
      name: "publish_draft",
      description: "Publish a draft tweet or thread",
      parameters: [
        {
          name: "draft_id",
          type: "string",
          description: "ID of the draft to publish",
          required: true,
        },
      ],
    },
    {
      name: "delete_draft",
      description: "Delete a draft tweet or thread",
      parameters: [
        {
          name: "draft_id",
          type: "string",
          description: "ID of the draft to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/vidhupv/x-mcp",
  _varName: "xtwitterMcpServerPlugin",
};

const mcpMediaGeneratorPlugin: Plugin = {
  id: "rphbdsa9nr",
  name: "MCP Media Generator",
  description:
    "A Model Context Protocol server that enables AI assistants to create images and videos using Amazon Nova Canvas and Nova Reel models.",
  image: "https://github.com/dvejsada.png",
  actions: [],
  githubUrl: "https://github.com/dvejsada/mcp_media_generator",
  _varName: "mcpMediaGeneratorPlugin",
};

const filesystemMcpServer2Plugin: Plugin = {
  id: "tsjbgy73p2",
  name: "Filesystem MCP Server",
  description:
    "An MCP server that allows Claude AI to perform filesystem operations including reading, writing, listing, moving files, and searching directories within specified allowed paths.",
  image: "https://github.com/ai-yliu.png",
  actions: [],
  githubUrl: "https://github.com/ai-yliu/filesystem-mcp-server",
  _varName: "filesystemMcpServer2Plugin",
};

const mcpBlockchainServerPlugin: Plugin = {
  id: "1hfkunwb7p",
  name: "MCP Blockchain Server",
  description:
    "A secure system enabling AI assistants to interact with blockchain data and prepare transactions while ensuring users maintain exclusive control over their private keys and transaction signing.",
  image: "https://github.com/zhangzhongnan928.png",
  actions: [],
  githubUrl: "https://github.com/zhangzhongnan928/mcp-blockchain-server",
  _varName: "mcpBlockchainServerPlugin",
};

const brightsyMcpServerPlugin: Plugin = {
  id: "9u6g2y8vk6",
  name: "Brightsy MCP Server",
  description:
    "A server that implements the Model Context Protocol to connect LLMs to Brightsy AI agents, allowing users to pass messages to and receive responses from these agents.",
  image: "https://github.com/mattlevine.png",
  actions: [
    {
      name: "brightsy",
      description: "Proxy requests to an Brightsy AI agent",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description: "The messages to send to the agent",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mattlevine/brightsy-mcp",
  _varName: "brightsyMcpServerPlugin",
};

const ragdocsMcpServerPlugin: Plugin = {
  id: "1h04byu77a",
  name: "RagDocs MCP Server",
  description:
    "Provides RAG capabilities for semantic document search using Qdrant vector database and Ollama/OpenAI embeddings, allowing users to add, search, list, and delete documentation with metadata support.",
  image: "https://github.com/heltonteixeira.png",
  actions: [],
  githubUrl: "https://github.com/heltonteixeira/ragdocs",
  _varName: "ragdocsMcpServerPlugin",
};

const ledgerMcpServerPlugin: Plugin = {
  id: "c4fin1c7jw",
  name: "Ledger MCP Server",
  description:
    "An MCP server that allows accessing and managing ledger files through Claude by providing account listing, balance checking, and transaction register viewing capabilities.",
  image: "https://github.com/mprokopov.png",
  actions: [],
  githubUrl: "https://github.com/mprokopov/ledger-mcp-server",
  _varName: "ledgerMcpServerPlugin",
};

const homeAssistantMcpServer1Plugin: Plugin = {
  id: "io8m0yc5wq",
  name: "Home Assistant MCP Server",
  description:
    "A server that enables interaction with Home Assistant devices and automations through the Model Context Protocol, allowing users to monitor device states, control devices, trigger automations, and list entities.",
  image: "https://github.com/hekmon8.png",
  actions: [
    {
      name: "get_state",
      description: "Get the current state of a Home Assistant entity",
      parameters: [
        {
          name: "entity_id",
          type: "string",
          description:
            "The entity ID to get state for (e.g., light.living_room)",
          required: true,
        },
      ],
    },
    {
      name: "toggle_entity",
      description: "Toggle a Home Assistant entity on/off",
      parameters: [
        {
          name: "entity_id",
          type: "string",
          description: "The entity ID to toggle (e.g., switch.bedroom)",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "The desired state (on/off)",
          required: true,
        },
      ],
    },
    {
      name: "trigger_automation",
      description: "Trigger a Home Assistant automation",
      parameters: [
        {
          name: "automation_id",
          type: "string",
          description:
            "The automation ID to trigger (e.g., automation.morning_routine)",
          required: true,
        },
      ],
    },
    {
      name: "list_entities",
      description: "List all available entities in Home Assistant",
      parameters: [
        {
          name: "domain",
          type: "string",
          description:
            "Optional domain filter (e.g., light, switch, automation)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hekmon8/Homeassistant-server-mcp",
  _varName: "homeAssistantMcpServer1Plugin",
};

const mysqlmcpPlugin: Plugin = {
  id: "7y0n0wkuak",
  name: "MySQL-MCP",
  description:
    "A Model Context Protocol server that enables SQL query execution, database management, and business intelligence capabilities through MySQL connections.",
  image: "https://github.com/zajTools.png",
  actions: [],
  githubUrl: "https://github.com/zajTools/zaj-MySQL-MCP",
  _varName: "mysqlmcpPlugin",
};

const lancedbMcpServerPlugin: Plugin = {
  id: "a34mk639ba",
  name: "LanceDB MCP Server",
  description:
    "Enables efficient vector database operations for embedding storage and similarity search through a Model Context Protocol interface.",
  image: "https://github.com/RyanLisse.png",
  actions: [],
  githubUrl: "https://github.com/RyanLisse/lancedb_mcp",
  _varName: "lancedbMcpServerPlugin",
};

const mcpServerTemplateForCursorIde1Plugin: Plugin = {
  id: "e85re6itz5",
  name: "MCP Server Template for Cursor IDE",
  description:
    "A template for creating custom tools for Cursor IDE using Model Context Protocol that allows users to deploy their own MCP server to Heroku and connect it to Cursor IDE.",
  image: "https://github.com/MyBlockcities.png",
  actions: [
    {
      name: "mcp_fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "mood",
      description: "Ask the server about its mood - it's always happy!",
      parameters: [
        {
          name: "question",
          type: "string",
          description:
            "Ask this MCP server about its mood! You can phrase your question in any way you like - 'How are you?', 'What's your mood?', or even 'Are you having a good day?'. The server will always respond with a cheerful message and a heart ❤️",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MyBlockcities/mcp-server-heroku",
  _varName: "mcpServerTemplateForCursorIde1Plugin",
};

const linearMcpIntegrationServerPlugin: Plugin = {
  id: "mjhmw08m6v",
  name: "Linear MCP Integration Server",
  description:
    "Enables AI models to interact with Linear for issue tracking and project management through capabilities like creating/searching issues, managing sprints, and retrieving workflow states.",
  image: "https://github.com/MadeByNando.png",
  actions: [],
  githubUrl: "https://github.com/MadeByNando/MCP-linear-Server",
  _varName: "linearMcpIntegrationServerPlugin",
};

const mcpDocumentationServerPlugin: Plugin = {
  id: "4mmrua01ll",
  name: "MCP Documentation Server",
  description:
    "A smart documentation server that provides AI-assisted code improvement and documentation management through Claude Desktop integration.",
  image: "https://github.com/mahawi1992.png",
  actions: [],
  githubUrl: "https://github.com/mahawi1992/mcp-documentation-server",
  _varName: "mcpDocumentationServerPlugin",
};

const pushoverMcpPlugin: Plugin = {
  id: "pe4vw5q95c",
  name: "Pushover MCP",
  description:
    "A Model Context Protocol implementation that enables AI agents to send notifications through Pushover.net, supporting message customization with various parameters like priority, sound, and URL.",
  image: "https://github.com/AshikNesin.png",
  actions: [],
  githubUrl: "https://github.com/AshikNesin/pushover-mcp",
  _varName: "pushoverMcpPlugin",
};

const clickupMcpServerPlugin: Plugin = {
  id: "4tcfjbyxq4",
  name: "ClickUp MCP Server",
  description:
    "An enhanced Model Context Protocol server that enables AI assistants to interact with ClickUp workspaces, supporting task relationships, comments, checklists, and workspace management through natural language.",
  image: "https://github.com/v4lheru.png",
  actions: [
    {
      name: "add_task_dependency",
      description:
        "Create a dependency relationship between two tasks. Use this to establish that one task must be completed before another can start. You must specify either 'dependsOn' (the task that must be completed first) or 'dependencyOf' (the task that's waiting for this task), but not both.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "dependencyOf",
          type: "string",
          description:
            "ID of the task that's waiting for this task (optional if dependsOn is provided)",
          required: false,
        },
        {
          name: "dependsOn",
          type: "string",
          description:
            "ID of the task that must be completed first (optional if dependencyOf is provided)",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task which is waiting on or blocking another task",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "delete_task_dependency",
      description:
        "Remove a dependency relationship between two tasks. This allows tasks to be completed independently of each other.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "dependencyOf",
          type: "string",
          description: "ID of the task that was waiting",
          required: true,
        },
        {
          name: "dependsOn",
          type: "string",
          description: "ID of the task that needed to be completed first",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "add_task_link",
      description:
        "Create a link between two tasks. Unlike dependencies, links are just references between related tasks without enforcing completion order.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "linksTo",
          type: "string",
          description: "ID of the task to link to",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task to initiate the link from",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "delete_task_link",
      description:
        "Remove a link between two tasks. This removes the reference between the tasks.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "linksTo",
          type: "string",
          description: "ID of the second task in the link",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the first task in the link",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "add_tag_to_task",
      description:
        "Add a tag to a task for better organization and filtering. Tags help categorize tasks across different lists and projects.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "tagName",
          type: "string",
          description: "Name of the tag to add",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "remove_tag_from_task",
      description:
        "Remove a tag from a task. This does not delete the tag from the Space, just removes it from the specific task.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "tagName",
          type: "string",
          description: "Name of the tag to remove",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "get_task_comments",
      description:
        "Retrieve comments for a specific task. Comments provide discussion history and context for the task.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "start",
          type: "number",
          description:
            "Unix timestamp in milliseconds to get comments from a specific date",
          required: false,
        },
        {
          name: "startId",
          type: "string",
          description: "Comment ID to start pagination from",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "create_task_comment",
      description:
        "Add a new comment to a task. Comments can be assigned to team members and include rich text formatting.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the comment to (optional)",
          required: false,
        },
        {
          name: "commentText",
          type: "string",
          description: "Content of the comment",
          required: true,
        },
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "groupAssignee",
          type: "string",
          description: "Group to assign the comment to (optional)",
          required: false,
        },
        {
          name: "notifyAll",
          type: "boolean",
          description:
            "If true, notifications will be sent to everyone including the comment creator",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "get_list_comments",
      description:
        "Retrieve comments for a specific list. List comments apply to the entire list rather than individual tasks.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "ID of the list",
          required: true,
        },
        {
          name: "start",
          type: "number",
          description:
            "Unix timestamp in milliseconds to get comments from a specific date",
          required: false,
        },
        {
          name: "startId",
          type: "string",
          description: "Comment ID to start pagination from",
          required: false,
        },
      ],
    },
    {
      name: "create_list_comment",
      description:
        "Add a new comment to a list. List comments can be used for general discussion about the list's purpose or status.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the comment to",
          required: true,
        },
        {
          name: "commentText",
          type: "string",
          description: "Content of the comment",
          required: true,
        },
        {
          name: "listId",
          type: "string",
          description: "ID of the list",
          required: true,
        },
        {
          name: "notifyAll",
          type: "boolean",
          description:
            "If true, notifications will be sent to everyone including the comment creator",
          required: false,
        },
      ],
    },
    {
      name: "get_chat_view_comments",
      description:
        "Retrieve comments from a Chat view. Chat views provide a dedicated space for team discussions.",
      parameters: [
        {
          name: "start",
          type: "number",
          description:
            "Unix timestamp in milliseconds to get comments from a specific date",
          required: false,
        },
        {
          name: "startId",
          type: "string",
          description: "Comment ID to start pagination from",
          required: false,
        },
        {
          name: "viewId",
          type: "string",
          description: "ID of the Chat view",
          required: true,
        },
      ],
    },
    {
      name: "create_chat_view_comment",
      description:
        "Add a new comment to a Chat view. Chat view comments facilitate team discussions outside of specific tasks or lists.",
      parameters: [
        {
          name: "commentText",
          type: "string",
          description: "Content of the comment",
          required: true,
        },
        {
          name: "notifyAll",
          type: "boolean",
          description:
            "If true, notifications will be sent to everyone including the comment creator",
          required: false,
        },
        {
          name: "viewId",
          type: "string",
          description: "ID of the Chat view",
          required: true,
        },
      ],
    },
    {
      name: "update_comment",
      description:
        "Modify an existing comment. This can be used to edit the content, change assignees, or mark comments as resolved.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the comment to",
          required: true,
        },
        {
          name: "commentId",
          type: "string",
          description: "ID of the comment to update",
          required: true,
        },
        {
          name: "commentText",
          type: "string",
          description: "New content for the comment",
          required: true,
        },
        {
          name: "groupAssignee",
          type: "number",
          description: "Group to assign the comment to",
          required: false,
        },
        {
          name: "resolved",
          type: "boolean",
          description: "Mark comment as resolved or not",
          required: false,
        },
      ],
    },
    {
      name: "delete_comment",
      description:
        "Remove a comment. This permanently deletes the comment and cannot be undone.",
      parameters: [
        {
          name: "commentId",
          type: "string",
          description: "ID of the comment to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_threaded_comments",
      description:
        "Retrieve threaded comments for a parent comment. Threaded comments allow for organized discussions within a comment thread.",
      parameters: [
        {
          name: "commentId",
          type: "string",
          description: "ID of the parent comment",
          required: true,
        },
      ],
    },
    {
      name: "create_threaded_comment",
      description:
        "Add a reply to an existing comment. Threaded comments help keep discussions organized by grouping related comments together.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the comment to (optional)",
          required: false,
        },
        {
          name: "commentId",
          type: "string",
          description: "ID of the parent comment",
          required: true,
        },
        {
          name: "commentText",
          type: "string",
          description: "Content of the threaded comment",
          required: true,
        },
        {
          name: "groupAssignee",
          type: "string",
          description: "Group to assign the comment to (optional)",
          required: false,
        },
        {
          name: "notifyAll",
          type: "boolean",
          description:
            "If true, notifications will be sent to everyone including the comment creator",
          required: false,
        },
      ],
    },
    {
      name: "create_checklist",
      description:
        "Add a new checklist to a task. Checklists help organize subtasks or steps needed to complete a task.",
      parameters: [
        {
          name: "customTaskIds",
          type: "boolean",
          description: "Whether to use custom task IDs",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the checklist",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "ID of the task to add a checklist to",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (required when customTaskIds is true)",
          required: false,
        },
      ],
    },
    {
      name: "edit_checklist",
      description:
        "Rename a task checklist or reorder it among other checklists on a task.",
      parameters: [
        {
          name: "checklistId",
          type: "string",
          description: "ID of the checklist to edit",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the checklist",
          required: false,
        },
        {
          name: "position",
          type: "number",
          description:
            "Position of the checklist among other checklists on the task (0 places it at the top)",
          required: false,
        },
      ],
    },
    {
      name: "delete_checklist",
      description:
        "Delete a checklist from a task. This removes the entire checklist and all its items.",
      parameters: [
        {
          name: "checklistId",
          type: "string",
          description: "ID of the checklist to delete",
          required: true,
        },
      ],
    },
    {
      name: "create_checklist_item",
      description:
        "Add a line item to a task checklist. Checklist items represent individual steps or subtasks.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the checklist item to",
          required: false,
        },
        {
          name: "checklistId",
          type: "string",
          description: "ID of the checklist to add an item to",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the checklist item",
          required: true,
        },
      ],
    },
    {
      name: "edit_checklist_item",
      description:
        "Update an individual line item in a task checklist. Use this to rename, reassign, mark as resolved, or nest items.",
      parameters: [
        {
          name: "assignee",
          type: ["number", "null"],
          description:
            "User ID to assign the checklist item to, or null to remove assignment",
          required: false,
        },
        {
          name: "checklistId",
          type: "string",
          description: "ID of the checklist containing the item",
          required: true,
        },
        {
          name: "checklistItemId",
          type: "string",
          description: "ID of the checklist item to edit",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the checklist item",
          required: false,
        },
        {
          name: "parent",
          type: ["string", "null"],
          description:
            "ID of the parent checklist item for nesting, or null to make it a top-level item",
          required: false,
        },
        {
          name: "resolved",
          type: "boolean",
          description: "Whether the item is resolved (completed) or not",
          required: false,
        },
      ],
    },
    {
      name: "delete_checklist_item",
      description:
        "Delete a line item from a task checklist. This permanently removes the item.",
      parameters: [
        {
          name: "checklistId",
          type: "string",
          description: "ID of the checklist containing the item",
          required: true,
        },
        {
          name: "checklistItemId",
          type: "string",
          description: "ID of the checklist item to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_workspace_hierarchy",
      description:
        "Retrieve the complete ClickUp workspace hierarchy, including all spaces, folders, and lists with their IDs, names, and hierarchical paths. Call this tool only when you need to discover the workspace structure and don't already have this information from recent context. Avoid using for repeated lookups of the same information.",
      parameters: [],
    },
    {
      name: "create_task",
      description:
        "Create a single task in a ClickUp list. Use this tool for individual task creation only. For multiple tasks, use create_bulk_tasks instead. Before calling this tool, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups. When creating a task, you must provide either a listId or listName.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Plain text description for the task",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date of the task (Unix timestamp in milliseconds). Convert dates to this format before submitting.",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to create the task in (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the task in - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "markdown_description",
          type: "string",
          description:
            "Markdown formatted description for the task. If provided, this takes precedence over description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Name of the task. Put a relevant emoji followed by a blank space before the name.",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Priority of the task (1-4), where 1 is urgent/highest priority and 4 is lowest priority. Only set this when the user explicitly requests a priority level.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "OPTIONAL: Override the default ClickUp status. In most cases, you should omit this to use ClickUp defaults",
          required: false,
        },
      ],
    },
    {
      name: "create_bulk_tasks",
      description:
        "Create multiple tasks in a ClickUp list simultaneously. Use this tool when you need to add several related tasks in one operation. Before calling, check if you already have the necessary list ID from previous responses in the conversation, as this avoids redundant lookups. More efficient than creating tasks one by one for batch operations.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to create the tasks in (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the tasks in - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Array of tasks to create (at least one task required)",
          required: true,
        },
      ],
    },
    {
      name: "create_list",
      description:
        "Create a new list directly in a ClickUp space. Use this tool when you need a top-level list not nested inside a folder. Before calling, check if you already have the necessary space ID from previous responses in the conversation, as this avoids redundant lookups. For creating lists inside folders, use create_list_in_folder instead.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the list to",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Description or content of the list",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date for the list (Unix timestamp in milliseconds). Convert dates to this format before submitting.",
          required: false,
        },
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to create the list in (required if not using spaceId). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the list",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Priority of the list (1-4), where 1 is urgent/highest priority and 4 is lowest priority. Only set when explicitly requested.",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space to create the list in (required if not using folderId). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Status of the list",
          required: false,
        },
      ],
    },
    {
      name: "create_folder",
      description:
        "Create a new folder in a ClickUp space for organizing related lists. Use this tool when you need to group multiple lists together. Before calling, check if you already have the necessary space ID from previous responses in the conversation, as this avoids redundant lookups. After creating a folder, you can add lists to it using create_list_in_folder.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the folder",
          required: true,
        },
        {
          name: "override_statuses",
          type: "boolean",
          description:
            "Whether to override space statuses with folder-specific statuses",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space to create the folder in (optional if using spaceName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space to create the folder in - will automatically find the space by name (optional if using spaceId instead). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "create_list_in_folder",
      description:
        "Create a new list within a ClickUp folder. Use this tool when you need to add a list to an existing folder structure. Before calling, check if you already have the necessary folder ID and space ID from previous responses in the conversation, as this avoids redundant lookups. For top-level lists not in folders, use create_list instead.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Description or content of the list",
          required: false,
        },
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to create the list in (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to create the list in - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the list",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder - will automatically find the space by name (optional if using spaceId instead). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "Status of the list (uses folder default if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "move_task",
      description:
        "Move an existing task from its current list to a different list. Use this tool when you need to relocate a task within your workspace hierarchy. Before calling, check if you already have the necessary task ID and list ID from previous responses in the conversation, as this avoids redundant lookups. Task statuses may be reset if the destination list uses different status options.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the destination list (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the destination list - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "sourceListName",
          type: "string",
          description:
            "Optional: Name of the source list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to move (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to move - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "duplicate_task",
      description:
        "Create a copy of an existing task in the same or different list. Use this tool when you need to replicate a task's content and properties. Before calling, check if you already have the necessary task ID and list ID from previous responses in the conversation, as this avoids redundant lookups. The duplicate will preserve name, description, priority, and other attributes from the original task.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to create the duplicate in (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the duplicate in - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "sourceListName",
          type: "string",
          description:
            "Optional: Name of the source list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to duplicate (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to duplicate - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "update_task",
      description:
        "Modify the properties of an existing task. Use this tool when you need to change a task's name, description, status, priority, or due date. Before calling, check if you already have the necessary task ID from previous responses in the conversation, as this avoids redundant lookups. Only the fields you specify will be updated; other fields will remain unchanged.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New plain text description for the task",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Optional: Name of the list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "markdown_description",
          type: "string",
          description:
            "New markdown formatted description for the task. If provided, this takes precedence over description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the task",
          required: false,
        },
        {
          name: "priority",
          type: ["number", "null"],
          description:
            "New priority for the task (1-4 or null), where 1 is urgent/highest priority and 4 is lowest priority. Set to null to clear priority.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "New status for the task (must be a valid status in the task's list)",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to update (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to update - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_tasks",
      description:
        "Retrieve tasks from a ClickUp list with optional filtering capabilities. Use this tool when you need to see existing tasks or analyze your current workload. Before calling, check if you already have the necessary list ID from previous responses in the conversation, as this avoids redundant lookups. Results can be filtered by status, assignees, dates, and more.",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Set to true to include archived tasks in the results",
          required: false,
        },
        {
          name: "assignees",
          type: "string array",
          description: "Array of user IDs to filter tasks by assignee",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object",
          description:
            "Object with custom field IDs as keys and desired values for filtering",
          required: false,
        },
        {
          name: "date_created_gt",
          type: "number",
          description:
            "Filter tasks created after this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "date_created_lt",
          type: "number",
          description:
            "Filter tasks created before this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "date_updated_gt",
          type: "number",
          description:
            "Filter tasks updated after this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "date_updated_lt",
          type: "number",
          description:
            "Filter tasks updated before this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "due_date_gt",
          type: "number",
          description:
            "Filter tasks due after this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "due_date_lt",
          type: "number",
          description:
            "Filter tasks due before this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "include_closed",
          type: "boolean",
          description: "Set to true to include tasks with 'Closed' status",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to get tasks from (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to get tasks from - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description:
            "Field to order tasks by (e.g., 'due_date', 'created', 'updated')",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description:
            "Page number for pagination when dealing with many tasks (starts at 0)",
          required: false,
        },
        {
          name: "reverse",
          type: "boolean",
          description:
            "Set to true to reverse the sort order (descending instead of ascending)",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description:
            "Array of status names to filter tasks by (e.g., ['To Do', 'In Progress'])",
          required: false,
        },
        {
          name: "subtasks",
          type: "boolean",
          description: "Set to true to include subtasks in the results",
          required: false,
        },
      ],
    },
    {
      name: "get_task",
      description:
        "Retrieve comprehensive details about a specific ClickUp task. Use this tool when you need in-depth information about a particular task, including its description, custom fields, attachments, and other metadata. Before calling, check if you already have the necessary task ID from previous responses in the conversation, as this avoids redundant lookups.",
      parameters: [
        {
          name: "listName",
          type: "string",
          description:
            "Optional: Name of the list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to retrieve (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to retrieve - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "delete_task",
      description:
        "Permanently remove a task from your ClickUp workspace. Use this tool with caution as deletion cannot be undone. Before calling, check if you already have the necessary task ID from previous responses in the conversation, as this avoids redundant lookups. For safety, the task ID is required.",
      parameters: [
        {
          name: "listName",
          type: "string",
          description:
            "Optional: Name of the list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to delete - this is required for safety to prevent accidental deletions. If you have this ID from a previous response, use it directly.",
          required: true,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to delete - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_folder",
      description:
        "Retrieve details about a specific ClickUp folder including its name, status, and other metadata. Before calling, check if you already have the necessary folder ID from previous responses in the conversation history, as this avoids redundant lookups. Helps you understand folder structure before creating or updating lists.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to retrieve (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to retrieve - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead, and only needed when using folderName). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder (optional if using spaceId instead, and only needed when using folderName). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "update_folder",
      description:
        "Modify an existing ClickUp folder's properties, such as name or status settings. Before calling, check if you already have the necessary folder ID from previous responses in the conversation history, as this avoids redundant lookups. Use when reorganizing or renaming workspace elements.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to update (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to update - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the folder",
          required: false,
        },
        {
          name: "override_statuses",
          type: "boolean",
          description:
            "Whether to override space statuses with folder-specific statuses",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead, and only needed when using folderName). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder (optional if using spaceId instead, and only needed when using folderName). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "delete_folder",
      description:
        "Permanently remove a folder from your ClickUp workspace. Use with caution as deletion cannot be undone and will remove all lists and tasks within the folder. Before calling, check if you already have the necessary folder ID from previous responses in the conversation history, as this avoids redundant lookups.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to delete (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to delete - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead, and only needed when using folderName). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder (optional if using spaceId instead, and only needed when using folderName). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_list",
      description:
        "Retrieve details about a specific ClickUp list including its name, content, status options, and other metadata. Before calling, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups. Useful to understand list structure before creating or updating tasks.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to retrieve (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to retrieve - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "update_list",
      description:
        "Modify an existing ClickUp list's properties, such as name, content, or status options. Before calling, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups. Use when reorganizing or renaming workspace elements.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "New description or content for the list",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to update (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to update - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the list",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New status for the list",
          required: false,
        },
      ],
    },
    {
      name: "delete_list",
      description:
        "Permanently remove a list from your ClickUp workspace. Use with caution as deletion cannot be undone and will remove all tasks within the list. Before calling, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to delete (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to delete - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/v4lheru/clickup-mcp-server",
  _varName: "clickupMcpServerPlugin",
};

const webContentMcpServerPlugin: Plugin = {
  id: "wg9fikq571",
  name: "Web Content MCP Server",
  description:
    "A server that leverages Cloudflare Browser Rendering to extract and process web content for use as context in LLMs, offering tools for fetching pages, searching documentation, extracting structured content, and summarizing content.",
  image: "https://github.com/amotivv.png",
  actions: [
    {
      name: "fetch_page",
      description: "Fetches and processes a web page for LLM context",
      parameters: [
        {
          name: "includeScreenshot",
          type: "boolean",
          description: "Whether to include a screenshot (base64 encoded)",
          required: false,
        },
        {
          name: "maxContentLength",
          type: "number",
          description: "Maximum content length to return",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "search_documentation",
      description:
        "Searches Cloudflare documentation and returns relevant content",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "extract_structured_content",
      description:
        "Extracts structured content from a web page using CSS selectors",
      parameters: [
        {
          name: "selectors",
          type: "object",
          description: "CSS selectors to extract content",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL to extract content from",
          required: true,
        },
      ],
    },
    {
      name: "summarize_content",
      description: "Summarizes web content for more concise LLM context",
      parameters: [
        {
          name: "maxLength",
          type: "number",
          description: "Maximum length of the summary",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to summarize",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/amotivv/cloudflare-browser-rendering",
  _varName: "webContentMcpServerPlugin",
};

const mcpDevelopmentServerPlugin: Plugin = {
  id: "fgntdsid11",
  name: "MCP Development Server",
  description:
    "A Model Context Protocol server that enables Claude to manage software development projects with complete context awareness and code execution through Docker environments.",
  image: "https://github.com/dillip285.png",
  actions: [],
  githubUrl: "https://github.com/dillip285/mcp-dev-server",
  _varName: "mcpDevelopmentServerPlugin",
};

const worldpayMcpServerPlugin: Plugin = {
  id: "upv4z0uc7q",
  name: "Worldpay MCP Server",
  description:
    "A server implementing the Model Context Protocol to make and query payments through Worldpay APIs, enabling payment processing, payment queries, and checkout form generation.",
  image: "https://github.com/simonwfarrow.png",
  actions: [],
  githubUrl: "https://github.com/simonwfarrow/worldpay-mcp",
  _varName: "worldpayMcpServerPlugin",
};

const gauntletinceptMcpPlugin: Plugin = {
  id: "ywheco6f84",
  name: "Gauntlet-Incept MCP",
  description:
    "Enables Claude Desktop to interact with the Gauntlet Incept system for generating, tagging, and grading educational content for K-8 students directly through natural language.",
  image: "https://github.com/Birdsmith.png",
  actions: [],
  githubUrl: "https://github.com/Birdsmith/Gauntlet-Incept-MCP",
  _varName: "gauntletinceptMcpPlugin",
};

const mcpJsonDocumentCollectionServerPlugin: Plugin = {
  id: "zk162p0woy",
  name: "MCP JSON Document Collection Server",
  description:
    "A Model Context Protocol server that allows creation and management of multiple Fireproof JSON databases with CRUD operations, querying capabilities, and cloud synchronization for sharing databases with others.",
  image: "https://github.com/jimpick.png",
  actions: [
    {
      name: "create_json_doc_database",
      description: "Create a JSON document database",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "Parameter: databaseName",
          required: true,
        },
      ],
    },
    {
      name: "delete_json_doc_database",
      description: "Delete a JSON document database",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "Parameter: databaseName",
          required: true,
        },
      ],
    },
    {
      name: "connect_json_doc_database_to_cloud",
      description:
        "Connect a JSON document database to cloud sync service. Show the dashboard URL after connecting.",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "Parameter: databaseName",
          required: true,
        },
      ],
    },
    {
      name: "list_json_doc_databases",
      description:
        "Returns the list of JSON document databases. Use this to understand which databases are available before trying to access JSON documents.",
      parameters: [],
    },
    {
      name: "save_json_doc_to_db",
      description: "Save a JSON document to a document database",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "document database to save to",
          required: true,
        },
        {
          name: "doc",
          type: "object",
          description: "JSON document to save",
          required: true,
        },
      ],
    },
    {
      name: "query_json_docs_from_db",
      description:
        "Query JSON documents sorted by a field from a document database. If no sortField is provided, use the _id field.",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "Parameter: databaseName",
          required: true,
        },
        {
          name: "sortField",
          type: "string",
          description: "Parameter: sortField",
          required: true,
        },
      ],
    },
    {
      name: "load_json_doc_from_db",
      description: "Load a JSON document by ID from a document database",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "name of document database to load from",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID of document to load",
          required: true,
        },
      ],
    },
    {
      name: "delete_json_doc_from_db",
      description: "Delete a JSON document by ID from a document database",
      parameters: [
        {
          name: "databaseName",
          type: "string",
          description: "name of document database to delete from",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID of document to delete",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jimpick/mcp-json-db-collection-server",
  _varName: "mcpJsonDocumentCollectionServerPlugin",
};

const fredMcpServerPlugin: Plugin = {
  id: "c6jnc44poi",
  name: "FRED MCP Server",
  description:
    "A Model Context Protocol server that provides tools to search and retrieve economic data series from the Federal Reserve Economic Data (FRED) API.",
  image: "https://github.com/kablewy.png",
  actions: [
    {
      name: "search",
      description:
        "Search for FRED data series with advanced filtering options",
      parameters: [
        {
          name: "excludeTagNames",
          type: "string array",
          description: "Series tags to exclude",
          required: false,
        },
        {
          name: "filterValue",
          type: "string",
          description: "Value of filter variable",
          required: false,
        },
        {
          name: "filterVariable",
          type: "string",
          description: "Variable to filter results by",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return (default: 1000)",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Order results by this property",
          required: false,
        },
        {
          name: "searchText",
          type: "string",
          description: "Search text for FRED series",
          required: true,
        },
        {
          name: "sortOrder",
          type: "string",
          description: "Sort order (default: asc)",
          required: false,
        },
        {
          name: "tagNames",
          type: "string array",
          description: "Series tags to include",
          required: false,
        },
      ],
    },
    {
      name: "series",
      description:
        "Get observations for a specific FRED data series with advanced options",
      parameters: [
        {
          name: "aggregationMethod",
          type: "string",
          description:
            "Aggregation method for frequency conversion (avg=average, sum=sum, eop=end of period)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description: "End date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "frequency",
          type: "string",
          description:
            "Frequency of observations (d=daily, w=weekly, bw=biweekly, m=monthly, q=quarterly, sa=semiannual, a=annual)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of results to skip",
          required: false,
        },
        {
          name: "outputType",
          type: "number",
          description:
            "1=observations by real-time period, 2=observations by vintage date, 3=vintage dates, 4=initial release plus current value",
          required: false,
        },
        {
          name: "seriesId",
          type: "string",
          description: "FRED series ID",
          required: true,
        },
        {
          name: "sortOrder",
          type: "string",
          description: "Sort order (default: asc)",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "vintageDates",
          type: "string array",
          description: "Vintage dates in YYYY-MM-DD format",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kablewy/fred-mcp-server",
  _varName: "fredMcpServerPlugin",
};

const scraperisMcpServerPlugin: Plugin = {
  id: "gnbnl8d941",
  name: "Scraper.is MCP Server",
  description:
    "Enables extracting data from websites using natural language prompts, allowing users to specify exactly what content they want in plain English and returning structured JSON data.",
  image: "https://github.com/Ai-Quill.png",
  actions: [
    {
      name: "scraperis_scraper",
      description:
        "Extract data from websites using natural language prompts. The prompt should include the website URL and what data you want to extract. For example: 'Get me the top 10 products from producthunt.com' or 'Extract all article titles and authors from techcrunch.com/news'",
      parameters: [
        {
          name: "parse",
          type: "string",
          description:
            "Should result be parsed. If result should not be parsed then html will be stripped and converted to markdown file",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "Natural language prompt describing what to extract and from where. For example: 'Get me the top 10 products from producthunt.com' or 'Find all articles about AI from techcrunch.com'",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Ai-Quill/scraperis-mcp",
  _varName: "scraperisMcpServerPlugin",
};

const scrapegraphMcpServerPlugin: Plugin = {
  id: "37us0q2tr6",
  name: "ScrapeGraph MCP Server",
  description:
    "A production-ready Model Context Protocol server that enables language models to leverage AI-powered web scraping capabilities, offering tools for transforming webpages to markdown, extracting structured data, and executing AI-powered web searches.",
  image: "https://github.com/ScrapeGraphAI.png",
  actions: [
    {
      name: "markdownify",
      description:
        "\n    Convert a webpage into clean, formatted markdown.\n\n    Args:\n        website_url: URL of the webpage to convert\n\n    Returns:\n        Dictionary containing the markdown result\n    ",
      parameters: [
        {
          name: "website_url",
          type: "string",
          description: "Parameter: website_url",
          required: true,
        },
      ],
    },
    {
      name: "smartscraper",
      description:
        "\n    Extract structured data from a webpage using AI.\n\n    Args:\n        user_prompt: Instructions for what data to extract\n        website_url: URL of the webpage to scrape\n\n    Returns:\n        Dictionary containing the extracted data\n    ",
      parameters: [
        {
          name: "user_prompt",
          type: "string",
          description: "Parameter: user_prompt",
          required: true,
        },
        {
          name: "website_url",
          type: "string",
          description: "Parameter: website_url",
          required: true,
        },
      ],
    },
    {
      name: "searchscraper",
      description:
        "\n    Perform AI-powered web searches with structured results.\n\n    Args:\n        user_prompt: Search query or instructions\n\n    Returns:\n        Dictionary containing search results and reference URLs\n    ",
      parameters: [
        {
          name: "user_prompt",
          type: "string",
          description: "Parameter: user_prompt",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ScrapeGraphAI/scrapegraph-mcp",
  _varName: "scrapegraphMcpServerPlugin",
};

const chromeToolsMcpServerPlugin: Plugin = {
  id: "rhq74imjee",
  name: "Chrome Tools MCP Server",
  description:
    "An MCP server that provides tools for interacting with Chrome through its DevTools Protocol, enabling remote control of Chrome tabs to execute JavaScript, capture screenshots, monitor network traffic, and more.",
  image: "https://github.com/nicholmikey.png",
  actions: [
    {
      name: "list_tabs",
      description: "Action for list_tabs",
      parameters: [],
    },
    {
      name: "capture_screenshot",
      description: "Action for capture_screenshot",
      parameters: [
        {
          name: "format",
          type: "string",
          description:
            "Initial capture format (jpeg/png). Note: Final output will be WebP with PNG fallback",
          required: false,
        },
        {
          name: "fullPage",
          type: "boolean",
          description: "Capture full scrollable page",
          required: false,
        },
        {
          name: "quality",
          type: "number",
          description:
            "Initial capture quality (1-100). Note: Final output uses WebP quality settings",
          required: false,
        },
        {
          name: "tabId",
          type: "string",
          description:
            "ID of the Chrome tab to capture. Only send this unless you are having issues with the result.",
          required: true,
        },
      ],
    },
    {
      name: "execute_script",
      description: "Action for execute_script",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute in the tab",
          required: true,
        },
        {
          name: "tabId",
          type: "string",
          description: "ID of the Chrome tab to execute the script in",
          required: true,
        },
      ],
    },
    {
      name: "load_url",
      description: "Action for load_url",
      parameters: [
        {
          name: "tabId",
          type: "string",
          description: "ID of the Chrome tab to load the URL in",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL to load in the tab",
          required: true,
        },
      ],
    },
    {
      name: "capture_network_events",
      description: "Action for capture_network_events",
      parameters: [
        {
          name: "duration",
          type: "number",
          description: "Duration in seconds to capture events (default: 10)",
          required: false,
        },
        {
          name: "filters",
          type: "object",
          description: "Parameter: filters",
          required: false,
        },
        {
          name: "tabId",
          type: "string",
          description: "ID of the Chrome tab to monitor",
          required: true,
        },
      ],
    },
    {
      name: "query_dom_elements",
      description: "Action for query_dom_elements",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector to find elements",
          required: true,
        },
        {
          name: "tabId",
          type: "string",
          description: "ID of the Chrome tab to query",
          required: true,
        },
      ],
    },
    {
      name: "click_element",
      description: "Action for click_element",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector to find the element to click",
          required: true,
        },
        {
          name: "tabId",
          type: "string",
          description: "ID of the Chrome tab containing the element",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nicholmikey/chrome-tools-MCP",
  _varName: "chromeToolsMcpServerPlugin",
};

const mcpAppleNotes1Plugin: Plugin = {
  id: "oey0kokhxb",
  name: "MCP Apple Notes",
  description:
    "A Model Context Protocol server that enables semantic search and retrieval of Apple Notes content, allowing AI assistants to access, search, and create notes using on-device embeddings.",
  image: "https://github.com/Dingzeefs.png",
  actions: [],
  githubUrl: "https://github.com/Dingzeefs/mcp-apple-notes",
  _varName: "mcpAppleNotes1Plugin",
};

const mcpCommandServerPlugin: Plugin = {
  id: "q5rkxotu8n",
  name: "MCP Command Server",
  description:
    "A secure server that allows LLM applications like Claude to execute whitelisted system commands with user confirmation and comprehensive security features.",
  image: "https://github.com/Andrew-Beniash.png",
  actions: [],
  githubUrl: "https://github.com/Andrew-Beniash/mcp-command-server",
  _varName: "mcpCommandServerPlugin",
};

const linearMcpServer1Plugin: Plugin = {
  id: "wcsdmumony",
  name: "Linear MCP Server",
  description:
    "A Model Context Protocol server that allows Claude to interact with Linear's API for managing teams, issues, projects, and cycles.",
  image: "https://github.com/cpropster.png",
  actions: [],
  githubUrl: "https://github.com/cpropster/linear-mcp-server",
  _varName: "linearMcpServer1Plugin",
};

const senechalMcpServerPlugin: Plugin = {
  id: "u1e97fslpi",
  name: "Senechal MCP Server",
  description:
    "A Model Context Protocol server that provides health data from the Senechal API to LLM applications, enabling AI assistants to access, analyze, and respond to personal health information.",
  image: "https://github.com/mattjoyce.png",
  actions: [],
  githubUrl: "https://github.com/mattjoyce/senechal-mcp",
  _varName: "senechalMcpServerPlugin",
};

const pdfToPngMcpServerPlugin: Plugin = {
  id: "dfjccr4r4x",
  name: "PDF to PNG MCP Server",
  description:
    "A Model Context Protocol server that converts PDF documents into PNG images through a simple MCP tool call.",
  image: "https://github.com/truaxki.png",
  actions: [
    {
      name: "pdf2png",
      description: "Converts PDFs to images in PNG format.",
      parameters: [
        {
          name: "read_file_path",
          type: "string",
          description: "Parameter: read_file_path",
          required: true,
        },
        {
          name: "write_folder_path",
          type: "string",
          description: "Parameter: write_folder_path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/truaxki/mcp-Pdf2png",
  _varName: "pdfToPngMcpServerPlugin",
};

const mcpSalesforceConnectorPlugin: Plugin = {
  id: "a6lwlnjayf",
  name: "MCP Salesforce Connector",
  description:
    "A Model Context Protocol server that enables LLMs to interact with Salesforce data through SOQL queries, SOSL searches, and various API operations including record management.",
  image: "https://github.com/smn2gnt.png",
  actions: [],
  githubUrl: "https://github.com/smn2gnt/MCP-Salesforce",
  _varName: "mcpSalesforceConnectorPlugin",
};

const metaMcpServerPlugin: Plugin = {
  id: "9ve9ntl1n3",
  name: "Meta MCP Server",
  description:
    "A tool that dynamically generates and configures MCP servers by automatically creating necessary directories and files according to user specifications.",
  image: "https://github.com/DMontgomery40.png",
  actions: [
    {
      name: "write_mcp_server",
      description:
        "Write files for an MCP server based on our discussion with the user",
      parameters: [
        {
          name: "files",
          type: "object array",
          description: "Parameter: files",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where server files should be created",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DMontgomery40/meta-mcp-server",
  _varName: "metaMcpServerPlugin",
};

const windsurfSupabaseMcpServerPlugin: Plugin = {
  id: "jvt7hbms24",
  name: "Windsurf Supabase MCP Server",
  description:
    "A Model Context Protocol server optimized for integrating Supabase with the Windsurf Editor, providing database interactions through natural language with enhanced error handling and response formatting.",
  image: "https://github.com/hertzfelt.png",
  actions: [],
  githubUrl: "https://github.com/hertzfelt/windsurf-supabase-mcp",
  _varName: "windsurfSupabaseMcpServerPlugin",
};

const mcpPdfFormsPlugin: Plugin = {
  id: "gd8k7liejn",
  name: "MCP PDF Forms",
  description:
    "A server providing PDF form manipulation tools via MCP's API, allowing users to find PDFs across directories, extract form field information, and visualize form fields in documents.",
  image: "https://github.com/Wildebeest.png",
  actions: [],
  githubUrl: "https://github.com/Wildebeest/mcp_pdf_forms",
  _varName: "mcpPdfFormsPlugin",
};

const theVergeNewsMcpServerPlugin: Plugin = {
  id: "n6lbwdnbxa",
  name: "The Verge News MCP Server",
  description:
    "Provides tools to fetch and search news from The Verge's RSS feed, allowing users to get today's news, retrieve random articles from the past week, and search for specific keywords in recent Verge content.",
  image: "https://github.com/manimohans.png",
  actions: [
    {
      name: "get-daily-news",
      description: "Get the latest news from The Verge for today",
      parameters: [],
    },
    {
      name: "get-weekly-news",
      description: "Get the latest news from The Verge for the past week",
      parameters: [],
    },
    {
      name: "search-news",
      description: "Search for news articles from The Verge by keyword",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days to look back (default: 30)",
          required: false,
        },
        {
          name: "keyword",
          type: "string",
          description: "Keyword to search for in news articles",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/manimohans/verge-news-mcp",
  _varName: "theVergeNewsMcpServerPlugin",
};

const mcpEvmSignerPlugin: Plugin = {
  id: "ljltvn2uu3",
  name: "MCP EVM Signer",
  description:
    "A server that securely manages Ethereum private keys locally and enables Claude for Desktop to interact with EVM-compatible blockchains through Infura.",
  image: "https://github.com/zhangzhongnan928.png",
  actions: [],
  githubUrl: "https://github.com/zhangzhongnan928/mcp-evm-signer",
  _varName: "mcpEvmSignerPlugin",
};

const strapiMcpServer1Plugin: Plugin = {
  id: "qfdkybxvkp",
  name: "Strapi MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to interact with Strapi CMS instances through a standardized interface, supporting content types and REST API operations.",
  image: "https://github.com/misterboe.png",
  actions: [
    {
      name: "strapi_list_servers",
      description: "List all available Strapi servers from the configuration.",
      parameters: [],
    },
    {
      name: "strapi_get_content_types",
      description:
        "Get all content types from Strapi. Returns the complete schema of all content types.",
      parameters: [
        {
          name: "server",
          type: "string",
          description: "The name of the server to connect to",
          required: true,
        },
      ],
    },
    {
      name: "strapi_get_components",
      description:
        "Get all components from Strapi with pagination support. Returns both component data and pagination metadata (page, pageSize, total, pageCount).",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of items per page",
          required: false,
        },
        {
          name: "server",
          type: "string",
          description: "The name of the server to connect to",
          required: true,
        },
      ],
    },
    {
      name: "strapi_rest",
      description:
        "Execute REST API requests against Strapi endpoints. IMPORTANT: All write operations (POST, PUT, DELETE) require explicit user authorization via the userAuthorized parameter.\n\n1. Reading components:\nparams: { populate: ['SEO'] } // Populate a component\nparams: { populate: { SEO: { fields: ['Title', 'seoDescription'] } } } // With field selection\n\n2. Updating components (REQUIRES USER AUTHORIZATION):\nbody: {\n  data: {\n    // For single components:\n    componentName: {\n      Title: 'value',\n      seoDescription: 'value'\n    },\n    // For repeatable components:\n    componentName: [\n      { field: 'value' }\n    ]\n  }\n}\nuserAuthorized: true // Must set this to true for POST/PUT/DELETE after getting user permission\n\n3. Other parameters:\n- fields: Select specific fields\n- filters: Filter results\n- sort: Sort results\n- pagination: Page through results",
      parameters: [
        {
          name: "body",
          type: "object",
          description:
            "Request body for POST/PUT requests. For components, use: { data: { componentName: { field: 'value' } } } for single components or { data: { componentName: [{ field: 'value' }] } } for repeatable components",
          required: false,
        },
        {
          name: "endpoint",
          type: "string",
          description: "The API endpoint (e.g., 'api/articles')",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description: "HTTP method to use",
          required: false,
        },
        {
          name: "params",
          type: "object",
          description:
            "Optional query parameters for GET requests. For components, use populate: ['componentName'] or populate: { componentName: { fields: ['field1'] } }",
          required: false,
        },
        {
          name: "server",
          type: "string",
          description: "The name of the server to connect to",
          required: true,
        },
        {
          name: "userAuthorized",
          type: "boolean",
          description:
            "REQUIRED for POST/PUT/DELETE operations. Client MUST obtain explicit user authorization before setting this to true.",
          required: false,
        },
      ],
    },
    {
      name: "strapi_upload_media",
      description:
        "Upload media to Strapi's media library from a URL with format conversion, quality control, and metadata options. IMPORTANT: This is a write operation that REQUIRES explicit user authorization via the userAuthorized parameter.",
      parameters: [
        {
          name: "format",
          type: "string",
          description:
            "Target format for the image. Use 'original' to keep the source format.",
          required: false,
        },
        {
          name: "metadata",
          type: "object",
          description: "Parameter: metadata",
          required: false,
        },
        {
          name: "quality",
          type: "number",
          description:
            "Image quality (1-100). Only applies when converting formats.",
          required: false,
        },
        {
          name: "server",
          type: "string",
          description: "The name of the server to connect to",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the image to upload",
          required: true,
        },
        {
          name: "userAuthorized",
          type: "boolean",
          description:
            "REQUIRED for media upload operations. Client MUST obtain explicit user authorization before setting this to true.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/misterboe/strapi-mcp-server",
  _varName: "strapiMcpServer1Plugin",
};

const comfyuiMcpServerPlugin: Plugin = {
  id: "17kif7j0bb",
  name: "ComfyUI MCP Server",
  description:
    "A server for connecting to a local ComfyUI instance that enables storing and summarizing notes with custom URI scheme support.",
  image: "https://github.com/jonpojonpo.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image using ComfyUI",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Image height in pixels",
          required: false,
        },
        {
          name: "negative_prompt",
          type: "string",
          description: "Negative prompt describing what you don't want",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Positive prompt describing what you want in the image",
          required: true,
        },
        {
          name: "seed",
          type: "number",
          description: "Seed for reproducible generation",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Image width in pixels",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jonpojonpo/comfy-ui-mcp-server",
  _varName: "comfyuiMcpServerPlugin",
};

const wintermMcpPlugin: Plugin = {
  id: "fzjwms9o1t",
  name: "WinTerm MCP",
  description:
    "A Model Context Protocol server that provides programmatic access to the Windows terminal, enabling AI models to interact with the Windows command line through standardized tools for writing commands, reading output, and sending control signals.",
  image: "https://github.com/capecoma.png",
  actions: [
    {
      name: "write_to_terminal",
      description: "Write text or commands to the terminal",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "The text or command to write to the terminal",
          required: true,
        },
      ],
    },
    {
      name: "read_terminal_output",
      description: "Read the output from the terminal",
      parameters: [
        {
          name: "linesOfOutput",
          type: "number",
          description: "Number of lines of output to read",
          required: true,
        },
      ],
    },
    {
      name: "send_control_character",
      description: "Send a control character to the terminal",
      parameters: [
        {
          name: "letter",
          type: "string",
          description:
            'The letter corresponding to the control character (e.g., "C" for Ctrl+C)',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/capecoma/winterm-mcp",
  _varName: "wintermMcpPlugin",
};

const mcpDuckduckgoSearchPluginPlugin: Plugin = {
  id: "dd8cpyu3mo",
  name: "MCP DuckDuckGo Search Plugin",
  description:
    "Provides web search functionality via DuckDuckGo for Claude Code and MCP-compatible clients, featuring advanced content exploration, navigation across search results, and detailed webpage analysis.",
  image: "https://github.com/gianlucamazza.png",
  actions: [],
  githubUrl: "https://github.com/gianlucamazza/mcp-duckduckgo",
  _varName: "mcpDuckduckgoSearchPluginPlugin",
};

const notionMcpServer5Plugin: Plugin = {
  id: "lynmv5klr9",
  name: "Notion MCP Server",
  description:
    "Enables Language Models to interact with Notion workspaces through standardized tools for searching, reading, creating, and updating pages and databases.",
  image: "https://github.com/v-3.png",
  actions: [],
  githubUrl: "https://github.com/v-3/notion-server",
  _varName: "notionMcpServer5Plugin",
};

const ankiMcpServer2Plugin: Plugin = {
  id: "1srmm6tbie",
  name: "Anki MCP Server",
  description:
    "A server implementation that connects to a locally running Anki, enabling card review and creation through the Model Context Protocol.",
  image: "https://github.com/scorzeth.png",
  actions: [
    {
      name: "update_cards",
      description:
        "After the user answers cards you've quizzed them on, use this tool to mark them answered and update their ease",
      parameters: [
        {
          name: "answers",
          type: "object array",
          description: "Parameter: answers",
          required: false,
        },
      ],
    },
    {
      name: "add_card",
      description:
        'Create a new flashcard in Anki for the user. Must use HTML formatting only. IMPORTANT FORMATTING RULES:\n1. Must use HTML tags for ALL formatting - NO markdown\n2. Use <br> for ALL line breaks\n3. For code blocks, use <pre> with inline CSS styling\n4. Example formatting:\n   - Line breaks: <br>\n   - Code: <pre style="background-color: transparent; padding: 10px; border-radius: 5px;">\n   - Lists: <ol> and <li> tags\n   - Bold: <strong>\n   - Italic: <em>',
      parameters: [
        {
          name: "back",
          type: "string",
          description: "The back of the card. Must use HTML formatting only.",
          required: true,
        },
        {
          name: "front",
          type: "string",
          description: "The front of the card. Must use HTML formatting only.",
          required: true,
        },
      ],
    },
    {
      name: "get_due_cards",
      description: "Returns a given number (num) of cards due for review.",
      parameters: [
        {
          name: "num",
          type: "number",
          description: "Number of due cards to get",
          required: true,
        },
      ],
    },
    {
      name: "get_new_cards",
      description: "Returns a given number (num) of new and unseen cards.",
      parameters: [
        {
          name: "num",
          type: "number",
          description: "Number of new cards to get",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/scorzeth/anki-mcp-server",
  _varName: "ankiMcpServer2Plugin",
};

const trinoMcpServer1Plugin: Plugin = {
  id: "j0qhebd1qw",
  name: "Trino MCP Server",
  description:
    "Provides AI models with structured access to Trino's distributed SQL query engine, enabling LLMs to directly query and analyze data stored in Trino databases.",
  image: "https://github.com/stinkgen.png",
  actions: [
    {
      name: "execute_query",
      description:
        "\n        Execute a SQL query against Trino.\n        \n        Args:\n            sql: The SQL query to execute.\n            catalog: Optional catalog name to use for the query.\n            schema: Optional schema name to use for the query.\n            \n        Returns:\n            Dict[str, Any]: Query results including metadata.\n        ",
      parameters: [
        {
          name: "catalog",
          type: "string",
          description: "Parameter: catalog",
          required: false,
        },
        {
          name: "schema",
          type: "string",
          description: "Parameter: schema",
          required: false,
        },
        {
          name: "sql",
          type: "string",
          description: "Parameter: sql",
          required: true,
        },
      ],
    },
    {
      name: "cancel_query",
      description:
        "\n        Cancel a running query.\n        \n        Args:\n            query_id: ID of the query to cancel.\n            \n        Returns:\n            Dict[str, Any]: Result of the cancellation operation.\n        ",
      parameters: [
        {
          name: "query_id",
          type: "string",
          description: "Parameter: query_id",
          required: true,
        },
      ],
    },
    {
      name: "inspect_table",
      description:
        "\n        Get detailed metadata about a table.\n        \n        Args:\n            catalog: Catalog name.\n            schema: Schema name.\n            table: Table name.\n            \n        Returns:\n            Dict[str, Any]: Table metadata including columns, statistics, etc.\n        ",
      parameters: [
        {
          name: "catalog",
          type: "string",
          description: "Parameter: catalog",
          required: true,
        },
        {
          name: "schema",
          type: "string",
          description: "Parameter: schema",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stinkgen/trino_mcp",
  _varName: "trinoMcpServer1Plugin",
};

const canvasMcpServer1Plugin: Plugin = {
  id: "2l5xnixkva",
  name: "Canvas MCP Server",
  description:
    "A local server that enables interaction with Canvas Learning Management System API through Claude Desktop, allowing users to manage courses, access assignments, view announcements, and retrieve course materials.",
  image: "https://github.com/vishalsachdev.png",
  actions: [],
  githubUrl: "https://github.com/vishalsachdev/canvas-mcp",
  _varName: "canvasMcpServer1Plugin",
};

const mcpservercodeassistPlugin: Plugin = {
  id: "pk7xbajohp",
  name: "mcp-server-code-assist",
  description:
    "A Model Context Protocol server that provides tools for code modification and generation via Large Language Models, allowing users to create, modify, rewrite, and delete files using structured XML instructions.",
  image: "https://github.com/abhishekbhakat.png",
  actions: [
    {
      name: "list_directory",
      description: "Lists directory contents using system ls/dir command",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "create_directory",
      description: "Creates a new directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "create_file",
      description: "Creates a new file with content",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "delete_file",
      description: "Deletes a file",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "modify_file",
      description: "Modifies parts of a file using string replacements",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
        {
          name: "replacements",
          type: "object",
          description: "Parameter: replacements",
          required: true,
        },
      ],
    },
    {
      name: "rewrite_file",
      description: "Rewrites entire file content",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "read_file",
      description: "Reads file content",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "file_tree",
      description: "Lists directory tree structure with git tracking support",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "git_status",
      description: "Shows git repository status",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_diff",
      description: "Shows git diff",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description: "Parameter: target",
          required: true,
        },
      ],
    },
    {
      name: "git_log",
      description: "Shows git commit history",
      parameters: [
        {
          name: "max_count",
          type: "integer",
          description: "Parameter: max_count",
          required: false,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_show",
      description: "Shows git commit details",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
        {
          name: "revision",
          type: "string",
          description: "Parameter: revision",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/abhishekbhakat/mcp_server_code_assist",
  _varName: "mcpservercodeassistPlugin",
};

const mcpGitRepoBrowserPlugin: Plugin = {
  id: "zmmq29sb91",
  name: "MCP Git Repo Browser",
  description:
    "A Node.js server that allows browsing Git repositories through MCP, providing tools to view directory structures and read important files from repositories.",
  image: "https://github.com/razorback16.png",
  actions: [
    {
      name: "git_directory_structure",
      description:
        "Clone a Git repository and return its directory structure in a tree format.",
      parameters: [
        {
          name: "repo_url",
          type: "string",
          description: "The URL of the Git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_read_important_files",
      description:
        "Read the contents of specified files in a given git repository.",
      parameters: [
        {
          name: "file_paths",
          type: "string array",
          description:
            "List of file paths to read (relative to repository root)",
          required: true,
        },
        {
          name: "repo_url",
          type: "string",
          description: "The URL of the Git repository",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/razorback16/mcp-git-repo-browser",
  _varName: "mcpGitRepoBrowserPlugin",
};

const tanaMcpServerPlugin: Plugin = {
  id: "r6v3135zsm",
  name: "Tana MCP Server",
  description:
    "An MCP server that connects to Tana's Input API, allowing Large Language Models and other MCP clients to create and manipulate data in Tana workspaces.",
  image: "https://github.com/tim-mcdonnell.png",
  actions: [
    {
      name: "create_plain_node",
      description: "Action for create_plain_node",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "supertags",
          type: "object array",
          description: "Parameter: supertags",
          required: false,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_reference_node",
      description: "Action for create_reference_node",
      parameters: [
        {
          name: "referenceId",
          type: "string",
          description: "Parameter: referenceId",
          required: true,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_date_node",
      description: "Action for create_date_node",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Parameter: date",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "supertags",
          type: "object array",
          description: "Parameter: supertags",
          required: false,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_url_node",
      description: "Action for create_url_node",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "supertags",
          type: "object array",
          description: "Parameter: supertags",
          required: false,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "create_checkbox_node",
      description: "Action for create_checkbox_node",
      parameters: [
        {
          name: "checked",
          type: "boolean",
          description: "Parameter: checked",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "supertags",
          type: "object array",
          description: "Parameter: supertags",
          required: false,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_file_node",
      description: "Action for create_file_node",
      parameters: [
        {
          name: "contentType",
          type: "string",
          description: "Parameter: contentType",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "fileData",
          type: "string",
          description: "Parameter: fileData",
          required: true,
        },
        {
          name: "filename",
          type: "string",
          description: "Parameter: filename",
          required: true,
        },
        {
          name: "supertags",
          type: "object array",
          description: "Parameter: supertags",
          required: false,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_field_node",
      description: "Action for create_field_node",
      parameters: [
        {
          name: "attributeId",
          type: "string",
          description: "Parameter: attributeId",
          required: true,
        },
        {
          name: "children",
          type: "object array",
          description: "Parameter: children",
          required: false,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "set_node_name",
      description: "Action for set_node_name",
      parameters: [
        {
          name: "newName",
          type: "string",
          description: "Parameter: newName",
          required: true,
        },
        {
          name: "nodeId",
          type: "string",
          description: "Parameter: nodeId",
          required: true,
        },
      ],
    },
    {
      name: "create_node_structure",
      description: "Action for create_node_structure",
      parameters: [
        {
          name: "node",
          type: "object",
          description: "Parameter: node",
          required: true,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_supertag",
      description: "Action for create_supertag",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
    {
      name: "create_field",
      description: "Action for create_field",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "targetNodeId",
          type: "string",
          description: "Parameter: targetNodeId",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tim-mcdonnell/tana-mcp",
  _varName: "tanaMcpServerPlugin",
};

const activitywatchMcpServerPlugin: Plugin = {
  id: "msnzvab06f",
  name: "ActivityWatch MCP Server",
  description:
    "An interface that allows large language models like Claude to interact with ActivityWatch time tracking data through the Model Context Protocol, enabling queries about application usage, browsing history, and productivity patterns.",
  image: "https://github.com/8bitgentleman.png",
  actions: [
    {
      name: "activitywatch_list_buckets",
      description:
        "List all ActivityWatch buckets with optional type filtering",
      parameters: [
        {
          name: "includeData",
          type: "boolean",
          description: "Include bucket data in response",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Filter buckets by type",
          required: false,
        },
      ],
    },
    {
      name: "activitywatch_query_examples",
      description:
        "Get examples of properly formatted queries for the ActivityWatch MCP server",
      parameters: [],
    },
    {
      name: "activitywatch_run_query",
      description: "Run a query in ActivityWatch's query language",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Optional name for the query (used for caching)",
          required: false,
        },
        {
          name: "query",
          type: "string array",
          description:
            "MUST BE A SINGLE STRING containing all query statements separated by semicolons. DO NOT split into multiple strings.",
          required: true,
        },
        {
          name: "timeperiods",
          type: "string array",
          description:
            "Time periods to query. Format: ['2024-10-28/2024-10-29'] where dates are in ISO format and joined with a slash",
          required: true,
        },
      ],
    },
    {
      name: "activitywatch_get_events",
      description: "Get raw events from an ActivityWatch bucket",
      parameters: [
        {
          name: "bucketId",
          type: "string",
          description: "ID of the bucket to fetch events from",
          required: true,
        },
        {
          name: "end",
          type: "string",
          description:
            "End date/time in ISO format (e.g. '2024-02-28T23:59:59Z')",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of events to return (default: 100)",
          required: false,
        },
        {
          name: "start",
          type: "string",
          description:
            "Start date/time in ISO format (e.g. '2024-02-01T00:00:00Z')",
          required: false,
        },
      ],
    },
    {
      name: "activitywatch_get_settings",
      description:
        "Get ActivityWatch settings. Can retrieve all settings or a specific key if provided.",
      parameters: [
        {
          name: "key",
          type: "string",
          description:
            "Optional: Get a specific settings key instead of all settings",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/8bitgentleman/activitywatch-mcp-server",
  _varName: "activitywatchMcpServerPlugin",
};

const pdfReaderMcpServerPlugin: Plugin = {
  id: "pyoz4hj6mj",
  name: "PDF Reader MCP Server",
  description:
    "Provides tools for reading and extracting text from PDF files, supporting both local files and URLs.",
  image: "https://github.com/trafflux.png",
  actions: [],
  githubUrl: "https://github.com/trafflux/pdf-reader-mcp",
  _varName: "pdfReaderMcpServerPlugin",
};

const blenderMcpServerPlugin: Plugin = {
  id: "4c0jocmt26",
  name: "Blender MCP Server",
  description:
    "A Model Context Protocol server that allows management and execution of Blender Python scripts, enabling users to create, edit and run scripts in a headless Blender environment through natural language interfaces.",
  image: "https://github.com/cwahlfeldt.png",
  actions: [],
  githubUrl: "https://github.com/cwahlfeldt/blender-mcp",
  _varName: "blenderMcpServerPlugin",
};

const mcpServerForSpinnakerPlugin: Plugin = {
  id: "csk396ncwf",
  name: "MCP Server for Spinnaker",
  description:
    "A Model Context Protocol server implementation that allows AI models to interact with and manage Spinnaker deployments, pipelines, and applications through a standardized interface.",
  image: "https://github.com/dion-hagan.png",
  actions: [],
  githubUrl: "https://github.com/dion-hagan/mcp-server-spinnaker",
  _varName: "mcpServerForSpinnakerPlugin",
};

const workersMcpPlugin: Plugin = {
  id: "p4eywjno1o",
  name: "Workers MCP",
  description:
    "A package that connects Claude Desktop and other MCP clients to Cloudflare Workers, enabling custom functionality to be accessed via natural language through the Model Context Protocol.",
  image: "https://github.com/cloudflare.png",
  actions: [],
  githubUrl: "https://github.com/cloudflare/workers-mcp",
  _varName: "workersMcpPlugin",
};

const jiraMcpServer1Plugin: Plugin = {
  id: "lblw6pvk7i",
  name: "Jira MCP Server",
  description:
    "Enables natural language interaction with Jira for managing projects, issues, tasks, and workflows through the Model Context Protocol, allowing users to delegate PM tasks through Claude Desktop.",
  image: "https://github.com/George5562.png",
  actions: [
    {
      name: "delete_issue",
      description: "Delete a Jira issue or subtask",
      parameters: [
        {
          name: "issueKey",
          type: "string",
          description: "Key of the issue to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_issues",
      description: "Get all issues and subtasks for a project",
      parameters: [
        {
          name: "jql",
          type: "string",
          description: "Optional JQL to filter issues",
          required: false,
        },
        {
          name: "projectKey",
          type: "string",
          description: 'Project key (e.g., "PP")',
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing Jira issue",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Email of new assignee",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description",
          required: false,
        },
        {
          name: "issueKey",
          type: "string",
          description: "Key of the issue to update",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "New priority",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New status",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "New summary/title",
          required: false,
        },
      ],
    },
    {
      name: "list_fields",
      description: "List all available Jira fields",
      parameters: [],
    },
    {
      name: "list_issue_types",
      description: "List all available issue types",
      parameters: [],
    },
    {
      name: "list_link_types",
      description: "List all available issue link types",
      parameters: [],
    },
    {
      name: "get_user",
      description: "Get a user's account ID by email address",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "User's email address",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "Create a new Jira issue",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Email of the assignee",
          required: false,
        },
        {
          name: "components",
          type: "string array",
          description: "Array of component names",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed description of the issue",
          required: false,
        },
        {
          name: "issueType",
          type: "string",
          description: 'Type of issue (e.g., "Task", "Bug", "Story")',
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of labels to apply",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "Issue priority",
          required: false,
        },
        {
          name: "projectKey",
          type: "string",
          description: 'Project key (e.g., "PP")',
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Issue summary/title",
          required: true,
        },
      ],
    },
    {
      name: "create_issue_link",
      description: "Create a link between two issues",
      parameters: [
        {
          name: "inwardIssueKey",
          type: "string",
          description: "Key of the inward issue (e.g., blocked issue)",
          required: true,
        },
        {
          name: "linkType",
          type: "string",
          description: "Type of link (e.g., 'blocks')",
          required: true,
        },
        {
          name: "outwardIssueKey",
          type: "string",
          description: "Key of the outward issue (e.g., blocking issue)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/George5562/Jira-MCP-Server",
  _varName: "jiraMcpServer1Plugin",
};

const gmailMcpServer3Plugin: Plugin = {
  id: "4srej1gzuc",
  name: "Gmail MCP Server",
  description:
    "Provides comprehensive Gmail integration with LLM processing capabilities, allowing users to read, search, filter emails and handle attachments through the Model Context Protocol.",
  image: "https://github.com/cablate.png",
  actions: [],
  githubUrl: "https://github.com/cablate/mcp-google-gmail",
  _varName: "gmailMcpServer3Plugin",
};

const notionMcpPlugin: Plugin = {
  id: "02p0quowuj",
  name: "Notion MCP",
  description:
    "A Model Context Protocol server that integrates with Notion's API to manage personal todo lists, allowing users to view, add, and update tasks directly from Claude.",
  image: "https://github.com/Badhansen.png",
  actions: [],
  githubUrl: "https://github.com/Badhansen/notion-mcp",
  _varName: "notionMcpPlugin",
};

const databaseUpdaterMcpServerPlugin: Plugin = {
  id: "yqdoq32xyf",
  name: "Database Updater MCP Server",
  description:
    "A Claude integration that enables updating various database types (PostgreSQL, MySQL, MongoDB, SQLite) from CSV and Excel files through natural language commands.",
  image: "https://github.com/AnuragRai017.png",
  actions: [
    {
      name: "create_note",
      description: "Create a new note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Text content of the note",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the note",
          required: true,
        },
      ],
    },
    {
      name: "update_database",
      description: "Update the database from a CSV or Excel file",
      parameters: [
        {
          name: "connectionString",
          type: "string",
          description: "Connection string for the database",
          required: true,
        },
        {
          name: "databaseType",
          type: "string",
          description:
            "Type of database (e.g., PostgreSQL, MySQL, MongoDB, SQLite)",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the CSV or Excel file",
          required: true,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table to update",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AnuragRai017/database-updater-MCP-Server",
  _varName: "databaseUpdaterMcpServerPlugin",
};

const untappdMcpServerPlugin: Plugin = {
  id: "hwgov5waxd",
  name: "Untappd MCP Server",
  description:
    "A Model Context Protocol server that allows Claude to query the Untappd beer database API for searching beers and retrieving detailed beer information.",
  image: "https://github.com/jtucker.png",
  actions: [],
  githubUrl: "https://github.com/jtucker/mcp-untappd-server",
  _varName: "untappdMcpServerPlugin",
};

const systemdcoredumpMcpServerPlugin: Plugin = {
  id: "m7kiwah6mm",
  name: "systemd-coredump MCP Server",
  description:
    "Enables MCP-capable applications to access, manage, and analyze system core dumps through integration with systemd-coredump functionality.",
  image: "https://github.com/signal-slot.png",
  actions: [],
  githubUrl: "https://github.com/signal-slot/mcp-systemd-coredump",
  _varName: "systemdcoredumpMcpServerPlugin",
};

const salesforceMcpServer1Plugin: Plugin = {
  id: "kqeniawbr6",
  name: "Salesforce MCP Server",
  description:
    "An MCP server implementation that integrates Claude with Salesforce, enabling natural language interactions with Salesforce data and metadata for querying, modifying, and managing objects and records.",
  image: "https://github.com/tsmztech.png",
  actions: [
    {
      name: "salesforce_search_objects",
      description:
        "Search for Salesforce standard and custom objects by name pattern. Examples: 'Account' will find Account, AccountHistory; 'Order' will find WorkOrder, ServiceOrder__c etc.",
      parameters: [
        {
          name: "searchPattern",
          type: "string",
          description:
            "Search pattern to find objects (e.g., 'Account Coverage' will find objects like 'AccountCoverage__c')",
          required: true,
        },
      ],
    },
    {
      name: "salesforce_describe_object",
      description:
        "Get detailed schema metadata including all fields, relationships, and field properties of any Salesforce object. Examples: 'Account' shows all Account fields including custom fields; 'Case' shows all Case fields including relationships to Account, Contact etc.",
      parameters: [
        {
          name: "objectName",
          type: "string",
          description:
            "API name of the object (e.g., 'Account', 'Contact', 'Custom_Object__c')",
          required: true,
        },
      ],
    },
    {
      name: "salesforce_query_records",
      description:
        'Query records from any Salesforce object using SOQL, including relationship queries.\n\nExamples:\n1. Parent-to-child query (e.g., Account with Contacts):\n   - objectName: "Account"\n   - fields: ["Name", "(SELECT Id, FirstName, LastName FROM Contacts)"]\n\n2. Child-to-parent query (e.g., Contact with Account details):\n   - objectName: "Contact"\n   - fields: ["FirstName", "LastName", "Account.Name", "Account.Industry"]\n\n3. Multiple level query (e.g., Contact -> Account -> Owner):\n   - objectName: "Contact"\n   - fields: ["Name", "Account.Name", "Account.Owner.Name"]\n\n4. Related object filtering:\n   - objectName: "Contact"\n   - fields: ["Name", "Account.Name"]\n   - whereClause: "Account.Industry = \'Technology\'"\n\nNote: When using relationship fields:\n- Use dot notation for parent relationships (e.g., "Account.Name")\n- Use subqueries in parentheses for child relationships (e.g., "(SELECT Id FROM Contacts)")\n- Custom relationship fields end in "__r" (e.g., "CustomObject__r.Name")',
      parameters: [
        {
          name: "fields",
          type: "string array",
          description:
            "List of fields to retrieve, including relationship fields",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of records to return",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object to query",
          required: true,
        },
        {
          name: "orderBy",
          type: "string",
          description:
            "ORDER BY clause, can include fields from related objects",
          required: false,
        },
        {
          name: "whereClause",
          type: "string",
          description:
            "WHERE clause, can include conditions on related objects",
          required: false,
        },
      ],
    },
    {
      name: "salesforce_dml_records",
      description:
        "Perform data manipulation operations on Salesforce records:\n  - insert: Create new records\n  - update: Modify existing records (requires Id)\n  - delete: Remove records (requires Id)\n  - upsert: Insert or update based on external ID field\n  Examples: Insert new Accounts, Update Case status, Delete old records, Upsert based on custom external ID",
      parameters: [
        {
          name: "externalIdField",
          type: "string",
          description: "External ID field name for upsert operations",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Type of DML operation to perform",
          required: true,
        },
        {
          name: "records",
          type: "object array",
          description: "Array of records to process",
          required: true,
        },
      ],
    },
    {
      name: "salesforce_manage_object",
      description:
        "Create new custom objects or modify existing ones in Salesforce:\n  - Create: New custom objects with fields, relationships, and settings\n  - Update: Modify existing object settings, labels, sharing model\n  Examples: Create Customer_Feedback__c object, Update object sharing settings\n  Note: Changes affect metadata and require proper permissions",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the object",
          required: false,
        },
        {
          name: "label",
          type: "string",
          description: "Label for the object",
          required: false,
        },
        {
          name: "nameFieldFormat",
          type: "string",
          description: "Display format for AutoNumber field (e.g., 'A-{0000}')",
          required: false,
        },
        {
          name: "nameFieldLabel",
          type: "string",
          description: "Label for the name field",
          required: false,
        },
        {
          name: "nameFieldType",
          type: "string",
          description: "Type of the name field",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name for the object (without __c suffix)",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Whether to create new object or update existing",
          required: true,
        },
        {
          name: "pluralLabel",
          type: "string",
          description: "Plural label for the object",
          required: false,
        },
        {
          name: "sharingModel",
          type: "string",
          description: "Sharing model for the object",
          required: false,
        },
      ],
    },
    {
      name: "salesforce_manage_field",
      description:
        "Create new custom fields or modify existing fields on any Salesforce object:\n  - Field Types: Text, Number, Date, Lookup, Master-Detail, Picklist etc.\n  - Properties: Required, Unique, External ID, Length, Scale etc.\n  - Relationships: Create lookups and master-detail relationships\n  Examples: Add Rating__c picklist to Account, Create Account lookup on Custom Object\n  Note: Changes affect metadata and require proper permissions",
      parameters: [
        {
          name: "deleteConstraint",
          type: "string",
          description: "Delete constraint for Lookup fields",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the field",
          required: false,
        },
        {
          name: "externalId",
          type: "boolean",
          description: "Whether the field is an external ID",
          required: false,
        },
        {
          name: "fieldName",
          type: "string",
          description: "API name for the field (without __c suffix)",
          required: true,
        },
        {
          name: "label",
          type: "string",
          description: "Label for the field",
          required: false,
        },
        {
          name: "length",
          type: "number",
          description: "Length for text fields",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object to add/modify the field",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Whether to create new field or update existing",
          required: true,
        },
        {
          name: "picklistValues",
          type: "object array",
          description: "Values for Picklist/MultiselectPicklist fields",
          required: false,
        },
        {
          name: "precision",
          type: "number",
          description: "Precision for numeric fields",
          required: false,
        },
        {
          name: "referenceTo",
          type: "string",
          description:
            "API name of the object to reference (for Lookup/MasterDetail)",
          required: false,
        },
        {
          name: "relationshipLabel",
          type: "string",
          description: "Label for the relationship (for Lookup/MasterDetail)",
          required: false,
        },
        {
          name: "relationshipName",
          type: "string",
          description:
            "API name for the relationship (for Lookup/MasterDetail)",
          required: false,
        },
        {
          name: "required",
          type: "boolean",
          description: "Whether the field is required",
          required: false,
        },
        {
          name: "scale",
          type: "number",
          description: "Scale for numeric fields",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Field type (required for create)",
          required: false,
        },
        {
          name: "unique",
          type: "boolean",
          description: "Whether the field value must be unique",
          required: false,
        },
      ],
    },
    {
      name: "salesforce_search_all",
      description:
        'Search across multiple Salesforce objects using SOSL (Salesforce Object Search Language).\n  \nExamples:\n1. Basic search across all objects:\n   {\n     "searchTerm": "John",\n     "objects": [\n       { "name": "Account", "fields": ["Name"], "limit": 10 },\n       { "name": "Contact", "fields": ["FirstName", "LastName", "Email"] }\n     ]\n   }\n\n2. Advanced search with filters:\n   {\n     "searchTerm": "Cloud*",\n     "searchIn": "NAME FIELDS",\n     "objects": [\n       { \n         "name": "Account", \n         "fields": ["Name", "Industry"], \n         "orderBy": "Name DESC",\n         "where": "Industry = \'Technology\'"\n       }\n     ],\n     "withClauses": [\n       { "type": "NETWORK", "value": "ALL NETWORKS" },\n       { "type": "SNIPPET", "fields": ["Description"] }\n     ]\n   }\n\nNotes:\n- Use * and ? for wildcards in search terms\n- Each object can have its own WHERE, ORDER BY, and LIMIT clauses\n- Support for WITH clauses: DATA CATEGORY, DIVISION, METADATA, NETWORK, PRICEBOOKID, SNIPPET, SECURITY_ENFORCED\n- "updateable" and "viewable" options control record access filtering',
      parameters: [
        {
          name: "objects",
          type: "object array",
          description: "List of objects to search and their return fields",
          required: true,
        },
        {
          name: "searchIn",
          type: "string",
          description: "Which fields to search in",
          required: false,
        },
        {
          name: "searchTerm",
          type: "string",
          description: "Text to search for (supports wildcards * and ?)",
          required: true,
        },
        {
          name: "updateable",
          type: "boolean",
          description: "Return only updateable records",
          required: false,
        },
        {
          name: "viewable",
          type: "boolean",
          description: "Return only viewable records",
          required: false,
        },
        {
          name: "withClauses",
          type: "object array",
          description: "Additional WITH clauses for the search",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tsmztech/mcp-server-salesforce",
  _varName: "salesforceMcpServer1Plugin",
};

const alphaVantageStockMcpServerPlugin: Plugin = {
  id: "1ujui2kmxd",
  name: "Alpha Vantage Stock MCP Server",
  description:
    "Allows Claude and other MCP clients to access real-time and historical stock market data from Alpha Vantage API, including intraday and daily stock data with customizable intervals.",
  image: "https://github.com/ranveer0323.png",
  actions: [
    {
      name: "get-stock-data",
      description: "Action for get-stock-data",
      parameters: [
        {
          name: "interval",
          type: "string",
          description: "Time interval between data points (default: 5min)",
          required: false,
        },
        {
          name: "outputsize",
          type: "string",
          description:
            "Amount of data to return (compact: latest 100 data points, full: up to 20 years of data)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., IBM, AAPL)",
          required: true,
        },
      ],
    },
    {
      name: "get-stock-alerts",
      description: "Action for get-stock-alerts",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., IBM, AAPL)",
          required: true,
        },
        {
          name: "threshold",
          type: "number",
          description:
            "Percentage threshold for price movement alerts (default: 5)",
          required: false,
        },
      ],
    },
    {
      name: "get-daily-stock-data",
      description: "Action for get-daily-stock-data",
      parameters: [
        {
          name: "outputsize",
          type: "string",
          description:
            "Amount of data to return (compact: latest 100 data points, full: up to 20 years of data)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., IBM, AAPL)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ranveer0323/stock-analysis-mcp",
  _varName: "alphaVantageStockMcpServerPlugin",
};

const logseqMcpServerPlugin: Plugin = {
  id: "0mdgzmmv3r",
  name: "Logseq MCP Server",
  description:
    "A server that enables LLMs to programmatically interact with Logseq knowledge graphs, allowing creation and management of pages and blocks.",
  image: "https://github.com/dailydaniel.png",
  actions: [],
  githubUrl: "https://github.com/dailydaniel/logseq-mcp",
  _varName: "logseqMcpServerPlugin",
};

const mcpServerForVertexAiSearchPlugin: Plugin = {
  id: "nbilfwk7u7",
  name: "MCP Server for Vertex AI Search",
  description:
    "A server that enables document searching using Vertex AI with Gemini grounding, improving search results by grounding responses in private data stored in Vertex AI Datastore.",
  image: "https://github.com/ubie-oss.png",
  actions: [],
  githubUrl: "https://github.com/ubie-oss/mcp-vertexai-search",
  _varName: "mcpServerForVertexAiSearchPlugin",
};

const stockflowMcpServerPlugin: Plugin = {
  id: "c3yxx6ue78",
  name: "StockFlow MCP Server",
  description:
    "A Model Context Protocol server providing real-time stock data and options analysis through Yahoo Finance, enabling LLMs to access market data, analyze stocks, and evaluate options strategies.",
  image: "https://github.com/twolven.png",
  actions: [],
  githubUrl: "https://github.com/twolven/mcp-stockflow",
  _varName: "stockflowMcpServerPlugin",
};

const todoistMcpServerPlugin: Plugin = {
  id: "fhaif4fv1w",
  name: "Todoist MCP Server",
  description:
    "An MCP server that integrates Claude with Todoist, enabling natural language task management including creating, updating, completing, and deleting tasks.",
  image: "https://github.com/abhiz123.png",
  actions: [
    {
      name: "todoist_create_task",
      description:
        "Create a new task in Todoist with optional description, due date, and priority",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The content/title of the task",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed description of the task (optional)",
          required: false,
        },
        {
          name: "due_string",
          type: "string",
          description:
            "Natural language due date like 'tomorrow', 'next Monday', 'Jan 23' (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Task priority from 1 (normal) to 4 (urgent) (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_get_tasks",
      description: "Get a list of tasks from Todoist with various filters",
      parameters: [
        {
          name: "filter",
          type: "string",
          description:
            "Natural language filter like 'today', 'tomorrow', 'next week', 'priority 1', 'overdue' (optional)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tasks to return (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Filter by priority level (1-4) (optional)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Filter tasks by project ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_update_task",
      description:
        "Update an existing task in Todoist by searching for it by name and then updating it",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "New content/title for the task (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description for the task (optional)",
          required: false,
        },
        {
          name: "due_string",
          type: "string",
          description:
            "New due date in natural language like 'tomorrow', 'next Monday' (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description:
            "New priority level from 1 (normal) to 4 (urgent) (optional)",
          required: false,
        },
        {
          name: "task_name",
          type: "string",
          description: "Name/content of the task to search for and update",
          required: true,
        },
      ],
    },
    {
      name: "todoist_delete_task",
      description: "Delete a task from Todoist by searching for it by name",
      parameters: [
        {
          name: "task_name",
          type: "string",
          description: "Name/content of the task to search for and delete",
          required: true,
        },
      ],
    },
    {
      name: "todoist_complete_task",
      description: "Mark a task as complete by searching for it by name",
      parameters: [
        {
          name: "task_name",
          type: "string",
          description: "Name/content of the task to search for and complete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/abhiz123/todoist-mcp-server",
  _varName: "todoistMcpServerPlugin",
};

const mondaycomMcpServer1Plugin: Plugin = {
  id: "vobfpuod5x",
  name: "Monday.com MCP Server",
  description:
    "Enables MCP clients to interact with Monday.com boards, allowing creation and management of items, sub-items, comments, and retrieval of board information.",
  image: "https://github.com/sakce.png",
  actions: [
    {
      name: "monday-create-item",
      description:
        "Create a new item in a Monday.com Board. Optionally, specify the parent Item ID to create a Sub-item.",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Monday.com Board ID that the Item or Sub-item is on.",
          required: true,
        },
        {
          name: "columnValues",
          type: "object",
          description: "Dictionary of column values to set {column_id: value}",
          required: false,
        },
        {
          name: "groupId",
          type: "string",
          description:
            "Monday.com Board's Group ID to create the Item in. If set, parentItemId should not be set.",
          required: false,
        },
        {
          name: "itemTitle",
          type: "string",
          description:
            "Name of the Monday.com Item or Sub-item that will be created.",
          required: true,
        },
        {
          name: "parentItemId",
          type: "string",
          description:
            "Monday.com Item ID to create the Sub-item under. If set, groupId should not be set.",
          required: false,
        },
      ],
    },
    {
      name: "monday-update-item",
      description: "Update a Monday.com item's or sub-item's column values.",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Monday.com Board ID that the Item or Sub-item is on.",
          required: true,
        },
        {
          name: "columnValues",
          type: "object",
          description:
            "Dictionary of column values to update the Monday.com Item or Sub-item with. ({column_id: value})",
          required: true,
        },
        {
          name: "itemId",
          type: "string",
          description:
            "Monday.com Item or Sub-item ID to update the columns of.",
          required: true,
        },
      ],
    },
    {
      name: "monday-get-board-columns",
      description: "Get the Columns of a Monday.com Board.",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Monday.com Board ID that the Item or Sub-item is on.",
          required: true,
        },
      ],
    },
    {
      name: "monday-get-board-groups",
      description: "Get the Groups of a Monday.com Board.",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Monday.com Board ID that the Item or Sub-item is on.",
          required: true,
        },
      ],
    },
    {
      name: "monday-create-update",
      description:
        "Create an update (comment) on a Monday.com Item or Sub-item.",
      parameters: [
        {
          name: "itemId",
          type: "string",
          description: "Parameter: itemId",
          required: true,
        },
        {
          name: "updateText",
          type: "string",
          description: "Content to update the Item or Sub-item with.",
          required: true,
        },
      ],
    },
    {
      name: "monday-list-boards",
      description: "Get all Boards from Monday.com",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of Monday.com Boards to return.",
          required: false,
        },
      ],
    },
    {
      name: "monday-list-items-in-groups",
      description:
        "List all items in the specified groups of a Monday.com board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Monday.com Board ID that the Item or Sub-item is on.",
          required: true,
        },
        {
          name: "cursor",
          type: "string",
          description: "Parameter: cursor",
          required: false,
        },
        {
          name: "groupIds",
          type: "string array",
          description: "Parameter: groupIds",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "monday-list-subitems-in-items",
      description: "List all Sub-items of a list of Monday.com Items",
      parameters: [
        {
          name: "itemIds",
          type: "string array",
          description: "Parameter: itemIds",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sakce/mcp-server-monday",
  _varName: "mondaycomMcpServer1Plugin",
};

const mcpEtherscanServerPlugin: Plugin = {
  id: "9t1eee0ydm",
  name: "MCP Etherscan Server",
  description:
    "Provides Ethereum blockchain data tools via Etherscan's API, enabling users to check ETH balances, view transactions, track token transfers, fetch contract ABIs, monitor gas prices, and resolve ENS names.",
  image: "https://github.com/5ajaki.png",
  actions: [
    {
      name: "check-balance",
      description: "Check the ETH balance of an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-transactions",
      description: "Get recent transactions for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transactions to return (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get-token-transfers",
      description: "Get ERC20 token transfers for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transfers to return (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get-contract-abi",
      description: "Get the ABI for a smart contract",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Contract address (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-gas-prices",
      description: "Get current gas prices in Gwei",
      parameters: [],
    },
    {
      name: "get-ens-name",
      description: "Get the ENS name for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/5ajaki/mcp-etherscan-server",
  _varName: "mcpEtherscanServerPlugin",
};

const ideogramMcpServerPlugin: Plugin = {
  id: "xzcx34d305",
  name: "Ideogram MCP Server",
  description:
    "A Model Context Protocol server that provides image generation capabilities using the Ideogram API, allowing users to create images from text prompts with customizable parameters.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image using Ideogram AI",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "The aspect ratio for the generated image",
          required: false,
        },
        {
          name: "magic_prompt_option",
          type: "string",
          description: "Whether to use magic prompt",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "The model to use for generation",
          required: false,
        },
        {
          name: "negative_prompt",
          type: "string",
          description:
            "Description of what to exclude from the image (must be in English)",
          required: false,
        },
        {
          name: "num_images",
          type: "number",
          description: "Number of images to generate (1-8)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "The prompt to use for generating the image (must be in English)",
          required: true,
        },
        {
          name: "style_type",
          type: "string",
          description: "The style type for generation",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/ideagram-mcp-server",
  _varName: "ideogramMcpServerPlugin",
};

const mcpGoogleCustomSearchServerPlugin: Plugin = {
  id: "y1s99uqqq6",
  name: "MCP Google Custom Search Server",
  description:
    "A Model Context Protocol server that enables LLMs to perform web searches using Google's Custom Search API through a standardized interface.",
  image: "https://github.com/limklister.png",
  actions: [
    {
      name: "search",
      description: "Search the web using Google Custom Search API",
      parameters: [
        {
          name: "numResults",
          type: "number",
          description: "Number of results to return (max 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/limklister/mcp-google-custom-search-server",
  _varName: "mcpGoogleCustomSearchServerPlugin",
};

const elasticsearchMcpServerPlugin: Plugin = {
  id: "ffpxy5j3n3",
  name: "Elasticsearch MCP Server",
  description:
    "A Model Context Protocol server that enables LLMs to interact with Elasticsearch clusters, allowing them to manage indices and execute search queries using natural language.",
  image: "https://github.com/da1y.png",
  actions: [],
  githubUrl: "https://github.com/da1y/mcp-server-elasticsearch",
  _varName: "elasticsearchMcpServerPlugin",
};

const ollamaMcpServerPlugin: Plugin = {
  id: "sxt5su901q",
  name: "Ollama MCP Server",
  description:
    "A bridge that enables seamless integration of Ollama's local LLM capabilities into MCP-powered applications, allowing users to manage and run AI models locally with full API coverage.",
  image: "https://github.com/NightTrek.png",
  actions: [
    {
      name: "push",
      description: "Push a model to a registry",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the model to push",
          required: true,
        },
      ],
    },
    {
      name: "list",
      description: "List models",
      parameters: [],
    },
    {
      name: "cp",
      description: "Copy a model",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Destination model name",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Source model name",
          required: true,
        },
      ],
    },
    {
      name: "rm",
      description: "Remove a model",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the model to remove",
          required: true,
        },
      ],
    },
    {
      name: "serve",
      description: "Start Ollama server",
      parameters: [],
    },
    {
      name: "create",
      description: "Create a model from a Modelfile",
      parameters: [
        {
          name: "modelfile",
          type: "string",
          description: "Path to Modelfile",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the model",
          required: true,
        },
      ],
    },
    {
      name: "show",
      description: "Show information for a model",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the model",
          required: true,
        },
      ],
    },
    {
      name: "run",
      description: "Run a model",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the model",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "Prompt to send to the model",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Timeout in milliseconds (default: 60000)",
          required: false,
        },
      ],
    },
    {
      name: "pull",
      description: "Pull a model from a registry",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the model to pull",
          required: true,
        },
      ],
    },
    {
      name: "chat_completion",
      description: "OpenAI-compatible chat completion API",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description: "Array of messages in the conversation",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "Name of the Ollama model to use",
          required: true,
        },
        {
          name: "temperature",
          type: "number",
          description: "Sampling temperature (0-2)",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Timeout in milliseconds (default: 60000)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/NightTrek/Ollama-mcp",
  _varName: "ollamaMcpServerPlugin",
};

const websearchPlugin: Plugin = {
  id: "bpr128ue6j",
  name: "WebSearch",
  description:
    "Built as a Model Context Protocol (MCP) server that provides advanced web search, content extraction, web crawling, and scraping capabilities using the Firecrawl API.",
  image: "https://github.com/m4s1t4.png",
  actions: [
    {
      name: "search",
      description:
        "Performs web searches and retrieves up-to-date information from the internet.\n    Args:\n    - prompt: Specific query or topic to search for on the internet\n    - limit: Maximum number of results to return (between 1 and 20)\n\n    Returns:\n    - Search results with relevant information about the requested topic\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "crawl",
      description:
        "Crawls a website starting from the specified URL and extracts content from multiple pages.\n    Args:\n    - url: The complete URL of the web page to start crawling from\n    - maxDepth: The maximum depth level for crawling linked pages\n    - limit: The maximum number of pages to crawl\n\n    Returns:\n    - Content extracted from the crawled pages in markdown and HTML format\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: true,
        },
        {
          name: "maxDepth",
          type: "integer",
          description: "Parameter: maxDepth",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "extract",
      description:
        "Extracts specific information from a web page based on a prompt.\n    Args:\n    - url: The complete URL of the web page to extract information from\n    - prompt: Instructions specifying what information to extract from the page\n    - enabaleWebSearch: Whether to allow web searches to supplement the extraction\n    - showSources: Whether to include source references in the response\n\n    Returns:\n    - Extracted information from the web page based on the prompt\n    ",
      parameters: [
        {
          name: "enabaleWebSearch",
          type: "boolean",
          description: "Parameter: enabaleWebSearch",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "showSources",
          type: "boolean",
          description: "Parameter: showSources",
          required: true,
        },
        {
          name: "url",
          type: "string array",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "scrape",
      description: "Action for scrape",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/m4s1t4/webSearch-Tools",
  _varName: "websearchPlugin",
};

const mcpGithubRepositoryServerPlugin: Plugin = {
  id: "pq7phnbp3f",
  name: "MCP GitHub Repository Server",
  description:
    "A server that allows AI assistants to browse and read files from specified GitHub repositories, providing access to repository contents via the Model Context Protocol.",
  image: "https://github.com/loglmhq.png",
  actions: [],
  githubUrl: "https://github.com/loglmhq/mcp-server-github-repo",
  _varName: "mcpGithubRepositoryServerPlugin",
};

const mcpfigmaPlugin: Plugin = {
  id: "z3gvv0394m",
  name: "mcp-figma",
  description:
    "A Model Context Protocol server that provides access to Figma API functionality, allowing AI assistants like Claude to interact with Figma files, comments, components, and team resources.",
  image: "https://github.com/smithery-ai.png",
  actions: [
    {
      name: "set_api_key",
      description:
        "Set your Figma API personal access token (will be saved to ~/.mcp-figma/config.json)",
      parameters: [
        {
          name: "api_key",
          type: "string",
          description: "Your Figma API personal access token",
          required: true,
        },
      ],
    },
    {
      name: "check_api_key",
      description: "Check if a Figma API key is already configured",
      parameters: [],
    },
    {
      name: "get_file",
      description: "Get a Figma file by key",
      parameters: [
        {
          name: "branch_data",
          type: "boolean",
          description: "Optional. Include branch data if true",
          required: false,
        },
        {
          name: "depth",
          type: "number",
          description: "Optional. Depth of nodes to return (1-4)",
          required: false,
        },
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Optional. A specific version ID to get",
          required: false,
        },
      ],
    },
    {
      name: "get_file_nodes",
      description: "Get specific nodes from a Figma file",
      parameters: [
        {
          name: "depth",
          type: "number",
          description: "Optional. Depth of nodes to return (1-4)",
          required: false,
        },
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get nodes from",
          required: true,
        },
        {
          name: "node_ids",
          type: "string array",
          description: "Array of node IDs to get",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Optional. A specific version ID to get",
          required: false,
        },
      ],
    },
    {
      name: "get_image",
      description: "Get images for nodes in a Figma file",
      parameters: [
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get images from",
          required: true,
        },
        {
          name: "format",
          type: "string",
          description: "Optional. Image format",
          required: false,
        },
        {
          name: "ids",
          type: "string array",
          description: "Array of node IDs to render",
          required: true,
        },
        {
          name: "scale",
          type: "number",
          description: "Optional. Scale factor to render at (0.01-4)",
          required: false,
        },
        {
          name: "svg_include_id",
          type: "boolean",
          description: "Optional. Include IDs in SVG output",
          required: false,
        },
        {
          name: "svg_simplify_stroke",
          type: "boolean",
          description: "Optional. Simplify strokes in SVG output",
          required: false,
        },
        {
          name: "use_absolute_bounds",
          type: "boolean",
          description: "Optional. Use absolute bounds",
          required: false,
        },
      ],
    },
    {
      name: "get_image_fills",
      description: "Get URLs for images used in a Figma file",
      parameters: [
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get image fills from",
          required: true,
        },
      ],
    },
    {
      name: "get_comments",
      description: "Get comments on a Figma file",
      parameters: [
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get comments from",
          required: true,
        },
      ],
    },
    {
      name: "post_comment",
      description: "Post a comment on a Figma file",
      parameters: [
        {
          name: "client_meta",
          type: "object",
          description: "Optional. Position of the comment",
          required: false,
        },
        {
          name: "comment_id",
          type: "string",
          description: "Optional. ID of comment to reply to",
          required: false,
        },
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to comment on",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Comment message text",
          required: true,
        },
      ],
    },
    {
      name: "delete_comment",
      description: "Delete a comment from a Figma file",
      parameters: [
        {
          name: "comment_id",
          type: "string",
          description: "ID of the comment to delete",
          required: true,
        },
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to delete a comment from",
          required: true,
        },
      ],
    },
    {
      name: "get_team_projects",
      description: "Get projects for a team",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Optional. Cursor for pagination",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Optional. Number of items per page",
          required: false,
        },
        {
          name: "team_id",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "get_project_files",
      description: "Get files for a project",
      parameters: [
        {
          name: "branch_data",
          type: "boolean",
          description: "Optional. Include branch data if true",
          required: false,
        },
        {
          name: "cursor",
          type: "string",
          description: "Optional. Cursor for pagination",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Optional. Number of items per page",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The project ID",
          required: true,
        },
      ],
    },
    {
      name: "get_team_components",
      description: "Get components for a team",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Optional. Cursor for pagination",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Optional. Number of items per page",
          required: false,
        },
        {
          name: "team_id",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "get_file_components",
      description: "Get components from a file",
      parameters: [
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get components from",
          required: true,
        },
      ],
    },
    {
      name: "get_component",
      description: "Get a component by key",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "The component key",
          required: true,
        },
      ],
    },
    {
      name: "get_team_component_sets",
      description: "Get component sets for a team",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Optional. Cursor for pagination",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Optional. Number of items per page",
          required: false,
        },
        {
          name: "team_id",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "get_team_styles",
      description: "Get styles for a team",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Optional. Cursor for pagination",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Optional. Number of items per page",
          required: false,
        },
        {
          name: "team_id",
          type: "string",
          description: "The team ID",
          required: true,
        },
      ],
    },
    {
      name: "get_file_styles",
      description: "Get styles from a file",
      parameters: [
        {
          name: "fileKey",
          type: "string",
          description: "The key of the file to get styles from",
          required: true,
        },
      ],
    },
    {
      name: "get_style",
      description: "Get a style by key",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "The style key",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/smithery-ai/mcp-figma",
  _varName: "mcpfigmaPlugin",
};

const mcpAbapAdtPlugin: Plugin = {
  id: "gwkh12xlu7",
  name: "MCP ABAP ADT",
  description:
    "A server that bridges the Model Context Protocol (MCP) with SAP ABAP systems, allowing tools like Cline to retrieve ABAP source code, table structures, and other development artifacts.",
  image: "https://github.com/mario-andreschak.png",
  actions: [
    {
      name: "GetStructure",
      description: "Retrieve ABAP Structure",
      parameters: [
        {
          name: "structure_name",
          type: "string",
          description: "Name of the ABAP Structure",
          required: true,
        },
      ],
    },
    {
      name: "GetTable",
      description: "Retrieve ABAP table structure",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the ABAP table",
          required: true,
        },
      ],
    },
    {
      name: "GetTableContents",
      description: "Retrieve contents of an ABAP table",
      parameters: [
        {
          name: "max_rows",
          type: "number",
          description: "Maximum number of rows to retrieve",
          required: false,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the ABAP table",
          required: true,
        },
      ],
    },
    {
      name: "GetPackage",
      description: "Retrieve ABAP package details",
      parameters: [
        {
          name: "package_name",
          type: "string",
          description: "Name of the ABAP package",
          required: true,
        },
      ],
    },
    {
      name: "GetTypeInfo",
      description: "Retrieve ABAP type information",
      parameters: [
        {
          name: "type_name",
          type: "string",
          description: "Name of the ABAP type",
          required: true,
        },
      ],
    },
    {
      name: "GetInclude",
      description: "Retrieve ABAP Include Source Code",
      parameters: [
        {
          name: "include_name",
          type: "string",
          description: "Name of the ABAP Include",
          required: true,
        },
      ],
    },
    {
      name: "SearchObject",
      description: "Search for ABAP objects using quick search",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: true,
        },
      ],
    },
    {
      name: "GetTransaction",
      description: "Retrieve ABAP transaction details",
      parameters: [
        {
          name: "transaction_name",
          type: "string",
          description: "Name of the ABAP transaction",
          required: true,
        },
      ],
    },
    {
      name: "GetInterface",
      description: "Retrieve ABAP interface source code",
      parameters: [
        {
          name: "interface_name",
          type: "string",
          description: "Name of the ABAP interface",
          required: true,
        },
      ],
    },
    {
      name: "GetProgram",
      description: "Retrieve ABAP program source code",
      parameters: [
        {
          name: "program_name",
          type: "string",
          description: "Name of the ABAP program",
          required: true,
        },
      ],
    },
    {
      name: "GetClass",
      description: "Retrieve ABAP class source code",
      parameters: [
        {
          name: "class_name",
          type: "string",
          description: "Name of the ABAP class",
          required: true,
        },
      ],
    },
    {
      name: "GetFunctionGroup",
      description: "Retrieve ABAP Function Group source code",
      parameters: [
        {
          name: "function_group",
          type: "string",
          description: "Name of the function module",
          required: true,
        },
      ],
    },
    {
      name: "GetFunction",
      description: "Retrieve ABAP Function Module source code",
      parameters: [
        {
          name: "function_group",
          type: "string",
          description: "Name of the function group",
          required: true,
        },
        {
          name: "function_name",
          type: "string",
          description: "Name of the function module",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mario-andreschak/mcp-abap-adt",
  _varName: "mcpAbapAdtPlugin",
};

const binanceMcpServerPlugin: Plugin = {
  id: "nr5tspngbh",
  name: "Binance MCP Server",
  description:
    "A server implementation that streams real-time Binance market data (spot and futures) via WebSockets, enabling applications to receive and process cryptocurrency market information through the Model Context Protocol.",
  image: "https://github.com/qeinfinity.png",
  actions: [
    {
      name: "get_futures_open_interest",
      description: "Get current open interest for a futures trading pair",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTCUSDT)",
          required: true,
        },
      ],
    },
    {
      name: "get_futures_funding_rate",
      description: "Get current funding rate for a futures trading pair",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTCUSDT)",
          required: true,
        },
      ],
    },
    {
      name: "get_market_data",
      description: "Get comprehensive market data for a trading pair",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTCUSDT)",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Market type",
          required: true,
        },
      ],
    },
    {
      name: "test_futures_endpoints",
      description: "Test individual futures endpoints",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTCUSDT)",
          required: true,
        },
      ],
    },
    {
      name: "get_klines",
      description: "Get historical candlestick data",
      parameters: [
        {
          name: "interval",
          type: "string",
          description: "Kline/candlestick chart interval",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of klines to retrieve (default 500, max 1000)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTCUSDT)",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Market type",
          required: true,
        },
      ],
    },
    {
      name: "subscribe_market_data",
      description: "Subscribe to real-time market data updates",
      parameters: [
        {
          name: "streams",
          type: "string array",
          description: "List of data streams to subscribe to",
          required: true,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTCUSDT)",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Market type",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qeinfinity/binance-mcp-server",
  _varName: "binanceMcpServerPlugin",
};

const aiDevelopmentAssistantMcpServerPlugin: Plugin = {
  id: "6r0vedy1cu",
  name: "AI Development Assistant MCP Server",
  description:
    "A Cursor-compatible toolkit that provides intelligent coding assistance through custom AI tools for code architecture planning, screenshot analysis, code review, and file reading capabilities.",
  image: "https://github.com/yeakub108.png",
  actions: [],
  githubUrl: "https://github.com/yeakub108/mcp-server",
  _varName: "aiDevelopmentAssistantMcpServerPlugin",
};

const memoryCustomPlugin: Plugin = {
  id: "w6hi2myrxq",
  name: "Memory Custom",
  description:
    "A customized MCP memory server that enables creation and management of a knowledge graph with features like custom memory paths and timestamping for capturing interactions via language models.",
  image: "https://github.com/BRO3886.png",
  actions: [
    {
      name: "set_memory_file_path",
      description: "Set the memory file path",
      parameters: [
        {
          name: "memoryFilePath",
          type: "string",
          description: "Absolute path to the memory file",
          required: true,
        },
      ],
    },
    {
      name: "get_current_time",
      description: "Get the current time",
      parameters: [],
    },
    {
      name: "create_entities",
      description: "Create multiple new entities in the knowledge graph",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add new observations to existing entities in the knowledge graph",
      parameters: [
        {
          name: "observations",
          type: "object array",
          description: "Parameter: observations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entities",
      description:
        "Delete multiple entities and their associated relations from the knowledge graph",
      parameters: [
        {
          name: "entityNames",
          type: "string array",
          description: "An array of entity names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_observations",
      description:
        "Delete specific observations from entities in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Parameter: deletions",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete multiple relations from the knowledge graph",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "An array of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Read the entire knowledge graph",
      parameters: [],
    },
    {
      name: "search_nodes",
      description: "Search for nodes in the knowledge graph based on a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The search query to match against entity names, types, and observation content",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description: "Open specific nodes in the knowledge graph by their names",
      parameters: [
        {
          name: "names",
          type: "string array",
          description: "An array of entity names to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/BRO3886/mcp-memory-custom",
  _varName: "memoryCustomPlugin",
};

const chromaMcpServerPlugin: Plugin = {
  id: "43djartgsh",
  name: "Chroma MCP Server",
  description:
    "A Model Context Protocol server providing vector database capabilities through Chroma, enabling semantic document search, metadata filtering, and document management with persistent storage.",
  image: "https://github.com/privetin.png",
  actions: [],
  githubUrl: "https://github.com/privetin/chroma",
  _varName: "chromaMcpServerPlugin",
};

const umamiAnalyticsMcpServerPlugin: Plugin = {
  id: "l5xes5et54",
  name: "Umami Analytics MCP Server",
  description:
    "Enhances Claude's capabilities by providing access to website analytics data from Umami, enabling analysis of user behavior, website performance tracking, and data-driven insights generation.",
  image: "https://github.com/jakeyShakey.png",
  actions: [],
  githubUrl: "https://github.com/jakeyShakey/umami_mcp_server",
  _varName: "umamiAnalyticsMcpServerPlugin",
};

const codecheckerMcpPlugin: Plugin = {
  id: "sexuh3aajt",
  name: "CodeChecker MCP",
  description:
    "A code review tool for Cursor IDE that uses OpenAI's GPT models to provide intelligent code analysis and suggestions.",
  image: "https://github.com/jacklandis29.png",
  actions: [],
  githubUrl: "https://github.com/jacklandis29/codechecker-mcp",
  _varName: "codecheckerMcpPlugin",
};

const alchemyMcpPluginPlugin: Plugin = {
  id: "p99w73336q",
  name: "Alchemy MCP Plugin",
  description:
    "This plugin enables interaction with blockchain data and NFTs through the Alchemy SDK, allowing operations such as retrieving NFT metadata, fetching NFTs for wallet addresses, and getting the latest block number.",
  image: "https://github.com/itsanishjain.png",
  actions: [
    {
      name: "get_nfts_for_owner",
      description: "Get NFTs owned by a specific wallet address",
      parameters: [
        {
          name: "contractAddresses",
          type: "string array",
          description: "List of contract addresses to filter by",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "The wallet address to get NFTs for",
          required: true,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of NFTs to return in one page (max: 100)",
          required: false,
        },
        {
          name: "withMetadata",
          type: "boolean",
          description: "Whether to include NFT metadata",
          required: false,
        },
      ],
    },
    {
      name: "get_nft_metadata",
      description: "Get metadata for a specific NFT",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the NFT",
          required: true,
        },
        {
          name: "refreshCache",
          type: "boolean",
          description: "Whether to refresh the cache",
          required: false,
        },
        {
          name: "tokenId",
          type: "string",
          description: "The token ID of the NFT",
          required: true,
        },
        {
          name: "tokenType",
          type: "string",
          description: "The token type (ERC721 or ERC1155)",
          required: false,
        },
      ],
    },
    {
      name: "get_nft_sales",
      description: "Get NFT sales data for a contract or specific NFT",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the NFT collection",
          required: false,
        },
        {
          name: "fromBlock",
          type: "number",
          description: "Starting block number for the query",
          required: false,
        },
        {
          name: "marketplace",
          type: "string",
          description: "Filter by marketplace (e.g., 'seaport', 'wyvern')",
          required: false,
        },
        {
          name: "order",
          type: "string",
          description: "Order of results (ascending or descending)",
          required: false,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "toBlock",
          type: "number",
          description: "Ending block number for the query",
          required: false,
        },
        {
          name: "tokenId",
          type: "string",
          description: "The token ID of the specific NFT",
          required: false,
        },
      ],
    },
    {
      name: "get_contracts_for_owner",
      description: "Get NFT contracts owned by an address",
      parameters: [
        {
          name: "excludeFilters",
          type: "string array",
          description: "Filters to exclude from the response",
          required: false,
        },
        {
          name: "includeFilters",
          type: "string array",
          description: "Filters to include in the response",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "The wallet address to get contracts for",
          required: true,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
      ],
    },
    {
      name: "get_floor_price",
      description: "Get floor price for an NFT collection",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the NFT collection",
          required: true,
        },
      ],
    },
    {
      name: "get_owners_for_nft",
      description: "Get owners of a specific NFT",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the NFT",
          required: true,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "tokenId",
          type: "string",
          description: "The token ID of the NFT",
          required: true,
        },
      ],
    },
    {
      name: "get_nfts_for_contract",
      description: "Get all NFTs for a contract",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the NFT collection",
          required: true,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "tokenUriTimeoutInMs",
          type: "number",
          description: "Timeout for token URI resolution in milliseconds",
          required: false,
        },
        {
          name: "withMetadata",
          type: "boolean",
          description: "Whether to include metadata",
          required: false,
        },
      ],
    },
    {
      name: "get_transfers_for_contract",
      description: "Get transfers for an NFT contract",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the NFT collection",
          required: true,
        },
        {
          name: "fromBlock",
          type: "number",
          description: "Starting block number for the query",
          required: false,
        },
        {
          name: "order",
          type: "string",
          description: "Order of results (ascending or descending)",
          required: false,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "toBlock",
          type: "number",
          description: "Ending block number for the query",
          required: false,
        },
        {
          name: "tokenType",
          type: "string",
          description: "Type of token (ERC721 or ERC1155)",
          required: false,
        },
      ],
    },
    {
      name: "get_transfers_for_owner",
      description: "Get NFT transfers for an owner",
      parameters: [
        {
          name: "contractAddresses",
          type: "string array",
          description: "List of contract addresses to filter by",
          required: false,
        },
        {
          name: "fromBlock",
          type: "number",
          description: "Starting block number for the query",
          required: false,
        },
        {
          name: "order",
          type: "string",
          description: "Order of results (ascending or descending)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "The wallet address to get transfers for",
          required: true,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "toBlock",
          type: "number",
          description: "Ending block number for the query",
          required: false,
        },
        {
          name: "tokenType",
          type: "string",
          description: "Type of token (ERC721 or ERC1155)",
          required: false,
        },
      ],
    },
    {
      name: "get_token_balances",
      description: "Get token balances for a specific address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The wallet address to get token balances for",
          required: true,
        },
        {
          name: "tokenAddresses",
          type: "string array",
          description: "List of token addresses to filter by",
          required: false,
        },
      ],
    },
    {
      name: "get_token_metadata",
      description: "Get metadata for a token contract",
      parameters: [
        {
          name: "contractAddress",
          type: "string",
          description: "The contract address of the token",
          required: true,
        },
      ],
    },
    {
      name: "get_tokens_for_owner",
      description: "Get tokens owned by an address",
      parameters: [
        {
          name: "contractAddresses",
          type: "string array",
          description: "List of contract addresses to filter by",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "The wallet address to get tokens for",
          required: true,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
      ],
    },
    {
      name: "get_asset_transfers",
      description: "Get asset transfers for a specific address or contract",
      parameters: [
        {
          name: "category",
          type: "string array",
          description:
            'The category of transfers to include (e.g., "external", "internal", "erc20", "erc721", "erc1155", "specialnft")',
          required: false,
        },
        {
          name: "contractAddresses",
          type: "string array",
          description: "List of contract addresses to filter by",
          required: false,
        },
        {
          name: "excludeZeroValue",
          type: "boolean",
          description: "Whether to exclude zero value transfers",
          required: false,
        },
        {
          name: "fromAddress",
          type: "string",
          description: "The sender address",
          required: false,
        },
        {
          name: "fromBlock",
          type: "string",
          description: 'The starting block (hex string or "latest")',
          required: false,
        },
        {
          name: "maxCount",
          type: "number",
          description: "The maximum number of results to return",
          required: false,
        },
        {
          name: "pageKey",
          type: "string",
          description: "Key for pagination",
          required: false,
        },
        {
          name: "toAddress",
          type: "string",
          description: "The recipient address",
          required: false,
        },
        {
          name: "toBlock",
          type: "string",
          description: 'The ending block (hex string or "latest")',
          required: false,
        },
        {
          name: "withMetadata",
          type: "boolean",
          description: "Whether to include metadata in the response",
          required: false,
        },
      ],
    },
    {
      name: "get_transaction_receipts",
      description: "Get transaction receipts for a block",
      parameters: [
        {
          name: "blockHash",
          type: "string",
          description: "The hash of the block",
          required: false,
        },
        {
          name: "blockNumber",
          type: "string",
          description: "The number of the block",
          required: false,
        },
      ],
    },
    {
      name: "get_block_number",
      description: "Get the latest block number",
      parameters: [],
    },
    {
      name: "get_block_with_transactions",
      description: "Get a block with its transactions",
      parameters: [
        {
          name: "blockHash",
          type: "string",
          description: "The block hash",
          required: false,
        },
        {
          name: "blockNumber",
          type: "string",
          description: "The block number",
          required: false,
        },
      ],
    },
    {
      name: "get_transaction",
      description: "Get transaction details by hash",
      parameters: [
        {
          name: "hash",
          type: "string",
          description: "The transaction hash",
          required: true,
        },
      ],
    },
    {
      name: "resolve_ens",
      description: "Resolve an ENS name to an address",
      parameters: [
        {
          name: "blockTag",
          type: "string",
          description: "The block tag to use for resolution",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The ENS name to resolve",
          required: true,
        },
      ],
    },
    {
      name: "lookup_address",
      description: "Lookup the ENS name for an address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The address to lookup",
          required: true,
        },
      ],
    },
    {
      name: "estimate_gas_price",
      description: "Estimate current gas price",
      parameters: [
        {
          name: "maxFeePerGas",
          type: "boolean",
          description:
            "Whether to include maxFeePerGas and maxPriorityFeePerGas",
          required: false,
        },
      ],
    },
    {
      name: "subscribe",
      description: "Subscribe to blockchain events",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The address to filter by (for logs)",
          required: false,
        },
        {
          name: "topics",
          type: "string array",
          description: "The topics to filter by (for logs)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "The type of subscription",
          required: true,
        },
      ],
    },
    {
      name: "unsubscribe",
      description: "Unsubscribe from blockchain events",
      parameters: [
        {
          name: "subscriptionId",
          type: "string",
          description: "The ID of the subscription to cancel",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/itsanishjain/alchemy-sdk-mcp",
  _varName: "alchemyMcpPluginPlugin",
};

const mcpHeliusPlugin: Plugin = {
  id: "tttxe2rt1w",
  name: "MCP Helius",
  description:
    "A Model Context Protocol server that provides Claude with comprehensive access to Solana blockchain data via the Helius API, enabling operations like checking wallet balances, retrieving blockchain information, and interacting with tokens and NFTs.",
  image: "https://github.com/dcSpark.png",
  actions: [],
  githubUrl: "https://github.com/dcSpark/mcp-server-helius",
  _varName: "mcpHeliusPlugin",
};

const mcpserverllmlingPlugin: Plugin = {
  id: "2mdjbbuzee",
  name: "mcp-server-llmling",
  description:
    "A server for the Machine Chat Protocol (MCP) that provides a YAML-based configuration system for LLM applications, allowing users to define resources, tools, and prompts without writing code.",
  image: "https://github.com/phil65.png",
  actions: [],
  githubUrl: "https://github.com/phil65/mcp-server-llmling",
  _varName: "mcpserverllmlingPlugin",
};

const mcpSnapshotServerPlugin: Plugin = {
  id: "6r2dqjkv5r",
  name: "MCP Snapshot Server",
  description:
    "A Model Context Protocol server that enables interaction with Snapshot.org, providing tools to query Snapshot spaces, proposals, and users through natural language.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "getSpaces",
      description: "Get list of Snapshot spaces",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of spaces to fetch",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of spaces to skip",
          required: false,
        },
      ],
    },
    {
      name: "getProposals",
      description: "Get proposals for a Snapshot space",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of proposals to fetch",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description: "ID of the space",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description:
            "Filter by proposal state (active, closed, pending, all)",
          required: false,
        },
      ],
    },
    {
      name: "getProposal",
      description: "Get details of a specific proposal",
      parameters: [
        {
          name: "proposalId",
          type: "string",
          description: "ID of the proposal",
          required: true,
        },
      ],
    },
    {
      name: "getUser",
      description: "Get information about a Snapshot user",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address of the user",
          required: true,
        },
      ],
    },
    {
      name: "getRankedSpaces",
      description:
        "Get ranked list of Snapshot spaces with detailed information",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category to filter by (default: 'all')",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of spaces to fetch (default: 18)",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Search term to filter spaces",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of spaces to skip (default: 0)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-snapshot-server",
  _varName: "mcpSnapshotServerPlugin",
};

const scaflogZohoMcpServerPlugin: Plugin = {
  id: "sohmff4m61",
  name: "Scaflog Zoho MCP Server",
  description:
    "An MCP server for Zoho Creator's Scaflog application that provides note management functionality with capabilities to store, access, and summarize notes.",
  image: "https://github.com/mastercode-io.png",
  actions: [],
  githubUrl: "https://github.com/mastercode-io/scaflog-zoho-mcp-server",
  _varName: "scaflogZohoMcpServerPlugin",
};

const memexPlugin: Plugin = {
  id: "cdwmnpe3r0",
  name: "Memex",
  description:
    "A tool for Model Context Protocol (MCP) that allows you to analyze web content and add it to your knowledge base, storing content as Markdown files for easy viewing with tools like Obsidian.",
  image: "https://github.com/narphorium.png",
  actions: [],
  githubUrl: "https://github.com/narphorium/mcp-memex",
  _varName: "memexPlugin",
};

const googleDriveMcpServerPlugin: Plugin = {
  id: "3ikhi1rv1d",
  name: "Google Drive MCP Server",
  description:
    "Integrates with Google Drive to enable listing, searching, and reading files, plus reading and writing to Google Sheets.",
  image: "https://github.com/isaacphi.png",
  actions: [],
  githubUrl: "https://github.com/isaacphi/mcp-gdrive",
  _varName: "googleDriveMcpServerPlugin",
};

const surfMcpServerPlugin: Plugin = {
  id: "rog4v53kgl",
  name: "Surf MCP Server",
  description:
    "Fetches tide information for any location using latitude and longitude, providing detailed tide data including high/low tides and station information with automatic UTC time zone handling.",
  image: "https://github.com/ravinahp.png",
  actions: [
    {
      name: "get_tides",
      description:
        "Get tide information for a specific location and date.\n    \n    Args:\n        latitude: Float value representing the location's latitude\n        longitude: Float value representing the location's longitude\n        date: Date string in YYYY-MM-DD format\n        \n    Returns:\n        Formatted string containing tide information and station details\n    ",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Parameter: date",
          required: true,
        },
        {
          name: "latitude",
          type: "number",
          description: "Parameter: latitude",
          required: true,
        },
        {
          name: "longitude",
          type: "number",
          description: "Parameter: longitude",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ravinahp/surf-mcp",
  _varName: "surfMcpServerPlugin",
};

const smtpMcpServerPlugin: Plugin = {
  id: "9u1qq6tli6",
  name: "SMTP MCP Server",
  description:
    "Enables sending emails via SMTP with template management, supporting multiple SMTP configurations, template creation with variable substitution, and bulk email sending with rate limiting.",
  image: "https://github.com/samihalawa.png",
  actions: [
    {
      name: "send-email",
      description: "Send an email to one or more recipients",
      parameters: [
        {
          name: "bcc",
          type: "object array",
          description: "Array of BCC recipients",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Email body (HTML supported)",
          required: true,
        },
        {
          name: "cc",
          type: "object array",
          description: "Array of CC recipients",
          required: false,
        },
        {
          name: "from",
          type: "object",
          description:
            "Sender information. If not provided, the default SMTP user will be used.",
          required: false,
        },
        {
          name: "smtpConfigId",
          type: "string",
          description:
            "ID of the SMTP configuration to use. If not provided, the default configuration will be used.",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject",
          required: true,
        },
        {
          name: "templateData",
          type: "object",
          description: "Data to be used for template variable substitution",
          required: false,
        },
        {
          name: "templateId",
          type: "string",
          description:
            "ID of the email template to use. If not provided, the email will use the subject and body provided.",
          required: false,
        },
        {
          name: "to",
          type: "object array",
          description: "Array of recipients",
          required: true,
        },
      ],
    },
    {
      name: "send-bulk-emails",
      description:
        "Send emails in bulk to multiple recipients with rate limiting",
      parameters: [
        {
          name: "batchSize",
          type: "number",
          description: "Number of emails to send in each batch (default: 10)",
          required: false,
        },
        {
          name: "bcc",
          type: "object array",
          description: "Array of BCC recipients",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Email body (HTML supported)",
          required: true,
        },
        {
          name: "cc",
          type: "object array",
          description: "Array of CC recipients",
          required: false,
        },
        {
          name: "delayBetweenBatches",
          type: "number",
          description: "Delay between batches in milliseconds (default: 1000)",
          required: false,
        },
        {
          name: "from",
          type: "object",
          description:
            "Sender information. If not provided, the default SMTP user will be used.",
          required: false,
        },
        {
          name: "recipients",
          type: "object array",
          description: "Array of recipients",
          required: true,
        },
        {
          name: "smtpConfigId",
          type: "string",
          description:
            "ID of the SMTP configuration to use. If not provided, the default configuration will be used.",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject",
          required: true,
        },
        {
          name: "templateData",
          type: "object",
          description: "Data to be used for template variable substitution",
          required: false,
        },
        {
          name: "templateId",
          type: "string",
          description:
            "ID of the email template to use. If not provided, the email will use the subject and body provided.",
          required: false,
        },
      ],
    },
    {
      name: "get-smtp-configs",
      description: "Get all SMTP configurations",
      parameters: [],
    },
    {
      name: "add-smtp-config",
      description: "Add a new SMTP configuration",
      parameters: [
        {
          name: "host",
          type: "string",
          description: "SMTP host",
          required: true,
        },
        {
          name: "isDefault",
          type: "boolean",
          description: "Whether this configuration should be the default",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the SMTP configuration",
          required: true,
        },
        {
          name: "pass",
          type: "string",
          description: "SMTP password",
          required: true,
        },
        {
          name: "port",
          type: "number",
          description: "SMTP port",
          required: true,
        },
        {
          name: "secure",
          type: "boolean",
          description: "Whether to use secure connection (SSL/TLS)",
          required: false,
        },
        {
          name: "user",
          type: "string",
          description: "SMTP username",
          required: true,
        },
      ],
    },
    {
      name: "update-smtp-config",
      description: "Update an existing SMTP configuration",
      parameters: [
        {
          name: "host",
          type: "string",
          description: "SMTP host",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID of the SMTP configuration to update",
          required: true,
        },
        {
          name: "isDefault",
          type: "boolean",
          description: "Whether this configuration should be the default",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the SMTP configuration",
          required: false,
        },
        {
          name: "pass",
          type: "string",
          description: "SMTP password",
          required: false,
        },
        {
          name: "port",
          type: "number",
          description: "SMTP port",
          required: false,
        },
        {
          name: "secure",
          type: "boolean",
          description: "Whether to use secure connection (SSL/TLS)",
          required: false,
        },
        {
          name: "user",
          type: "string",
          description: "SMTP username",
          required: false,
        },
      ],
    },
    {
      name: "delete-smtp-config",
      description: "Delete an SMTP configuration",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the SMTP configuration to delete",
          required: true,
        },
      ],
    },
    {
      name: "get-email-templates",
      description: "Get all email templates",
      parameters: [],
    },
    {
      name: "add-email-template",
      description: "Add a new email template",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Email body template",
          required: true,
        },
        {
          name: "isDefault",
          type: "boolean",
          description: "Whether this template should be the default",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the template",
          required: true,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject template",
          required: true,
        },
      ],
    },
    {
      name: "update-email-template",
      description: "Update an existing email template",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Email body template",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID of the template to update",
          required: true,
        },
        {
          name: "isDefault",
          type: "boolean",
          description: "Whether this template should be the default",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the template",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject template",
          required: false,
        },
      ],
    },
    {
      name: "delete-email-template",
      description: "Delete an email template",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the template to delete",
          required: true,
        },
      ],
    },
    {
      name: "get-email-logs",
      description: "Get logs of all email sending activity",
      parameters: [
        {
          name: "filterBySuccess",
          type: "boolean",
          description:
            "Filter logs by success status (true = successful emails, false = failed emails)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of log entries to return (most recent first)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/samihalawa/mcp-server-smtp",
  _varName: "smtpMcpServerPlugin",
};

const googleJobsMcpServerPlugin: Plugin = {
  id: "bijbpfhrbx",
  name: "Google Jobs MCP Server",
  description:
    "A Model Context Protocol server that provides Google Jobs search capabilities through SerpAPI integration, featuring multi-language support, flexible search parameters, and rich job details.",
  image: "https://github.com/ChanMeng666.png",
  actions: [
    {
      name: "search_jobs",
      description:
        "Google Jobs API search tool.\n\nSupported search parameters:\n1. Basic Search: Job title or keywords\n2. Location: City or region\n3. Time Filter: Recently posted jobs\n4. Job Type: Full-time, part-time, contract, internship\n5. Salary Range: Filter by compensation\n6. Geographic Range: Set search radius\n7. Language: Multi-language support\n\nAll parameters except 'query' are optional and can be freely combined.",
      parameters: [
        {
          name: "employment_type",
          type: "string",
          description:
            'Job type (Optional)\nOptions:\n- "FULLTIME": Full-time\n- "PARTTIME": Part-time\n- "CONTRACTOR": Contractor\n- "INTERN": Internship\n- "TEMPORARY": Temporary',
          required: false,
        },
        {
          name: "hl",
          type: "string",
          description:
            'Result language (Optional)\nOptions:\n- "en": English\n- "zh-CN": Chinese\n- "ja": Japanese\n- "ko": Korean',
          required: false,
        },
        {
          name: "location",
          type: "string",
          description:
            "Job location (Optional, e.g., 'New York', 'London', 'Tokyo')",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description:
            "Page number (Optional, default: 1)\n- 10 results per page\n- Supports pagination",
          required: false,
        },
        {
          name: "posted_age",
          type: "string",
          description:
            'Posting date filter (Optional)\nOptions:\n- "today": Posted today\n- "3days": Last 3 days\n- "week": Last week\n- "month": Last month',
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Search keywords (Required, e.g., 'software engineer', 'data analyst', 'product manager')",
          required: true,
        },
        {
          name: "radius",
          type: "string",
          description:
            'Search radius (Optional)\nFormat examples:\n- "10mi": Within 10 miles\n- "20mi": Within 20 miles\n- "50mi": Within 50 miles',
          required: false,
        },
        {
          name: "salary",
          type: "string",
          description:
            'Salary range (Optional)\nFormat examples:\n- "$50K+": Above $50,000\n- "$100K+": Above $100,000\n- "$150K+": Above $150,000',
          required: false,
        },
        {
          name: "sort_by",
          type: "string",
          description:
            'Sort order (Optional)\nOptions:\n- "date": Sort by date\n- "relevance": Sort by relevance\n- "salary": Sort by salary',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ChanMeng666/server-google-jobs",
  _varName: "googleJobsMcpServerPlugin",
};

const youtubeIntegrationPlugin: Plugin = {
  id: "i1d0ep7es9",
  name: "YouTube Integration",
  description:
    "Enables extraction of transcript text from YouTube videos by providing the video URL, supporting standard, shortened, and embed URL formats.",
  image: "https://github.com/highlight-ing.png",
  actions: [],
  githubUrl: "https://github.com/highlight-ing/highlight-youtube-mcp",
  _varName: "youtubeIntegrationPlugin",
};

const mistralMcpServerPlugin: Plugin = {
  id: "cnz4nubw46",
  name: "Mistral MCP Server",
  description:
    "A TypeScript-based MCP server that provides two tools for chatting with Mistral AI models, supporting both text-only conversations and image+text inputs.",
  image: "https://github.com/speakeasy-api.png",
  actions: [],
  githubUrl: "https://github.com/speakeasy-api/mistral-mcp-server-example",
  _varName: "mistralMcpServerPlugin",
};

const mcpPromptsServerPlugin: Plugin = {
  id: "i0z4f3pr82",
  name: "MCP Prompts Server",
  description:
    "Enables creation, management, and templating of prompts through a simplified SOLID architecture, allowing users to organize prompts by category and fill in templates at runtime.",
  image: "https://github.com/sparesparrow.png",
  actions: [
    {
      name: "add_prompt",
      description: "Add a new prompt",
      parameters: [
        {
          name: "prompt",
          type: "object",
          description: "Parameter: prompt",
          required: true,
        },
      ],
    },
    {
      name: "get_prompt",
      description: "Get a prompt by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "update_prompt",
      description: "Update an existing prompt",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "prompt",
          type: "object",
          description: "Parameter: prompt",
          required: true,
        },
      ],
    },
    {
      name: "list_prompts",
      description: "List all prompts",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Parameter: category",
          required: false,
        },
        {
          name: "isTemplate",
          type: "boolean",
          description: "Parameter: isTemplate",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter: search",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
      ],
    },
    {
      name: "apply_template",
      description: "Apply variables to a prompt template",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "variables",
          type: "object",
          description: "Parameter: variables",
          required: true,
        },
      ],
    },
    {
      name: "delete_prompt",
      description: "Delete a prompt",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sparesparrow/mcp-prompts",
  _varName: "mcpPromptsServerPlugin",
};

const illumioMcpServerPlugin: Plugin = {
  id: "xhqzxlo9iy",
  name: "Illumio MCP Server",
  description:
    "A Model Context Protocol server that enables conversational AI interaction with Illumio PCE for security policy management, workload operations, traffic flow analysis, and compliance assessment.",
  image: "https://github.com/alexgoller.png",
  actions: [
    {
      name: "add-note",
      description: "Add a new note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "get-workloads",
      description: "Get workloads from the PCE",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "update-workload",
      description: "Update a workload in the PCE",
      parameters: [
        {
          name: "ip_addresses",
          type: "string array",
          description: "Parameter: ip_addresses",
          required: true,
        },
        {
          name: "labels",
          type: "array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "get-labels",
      description: "Get all labels from PCE",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
      ],
    },
    {
      name: "create-workload",
      description: "Create a Illumio Core unmanaged workload in the PCE",
      parameters: [
        {
          name: "ip_addresses",
          type: "string array",
          description: "Parameter: ip_addresses",
          required: true,
        },
        {
          name: "labels",
          type: "array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "create-label",
      description: "Create a label of a specific type and the value in the PCE",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Parameter: key",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Parameter: value",
          required: true,
        },
      ],
    },
    {
      name: "delete-label",
      description: "Delete a label in the PCE",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Parameter: key",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Parameter: value",
          required: true,
        },
      ],
    },
    {
      name: "delete-workload",
      description: "Delete a workload from the PCE",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "get-traffic-flows",
      description:
        "Get traffic flows from the PCE with comprehensive filtering options",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Ending datetime (YYYY-MM-DD or timestamp)",
          required: true,
        },
        {
          name: "exclude_destinations",
          type: "string array",
          description:
            "Destinations to exclude (label/IP list/workload HREFs, FQDNs, IPs)",
          required: false,
        },
        {
          name: "exclude_services",
          type: "object array",
          description: "Parameter: exclude_services",
          required: false,
        },
        {
          name: "exclude_sources",
          type: "string array",
          description:
            "Sources to exclude (label/IP list/workload HREFs, FQDNs, IPs)",
          required: false,
        },
        {
          name: "exclude_workloads_from_ip_list_query",
          type: "boolean",
          description: "Parameter: exclude_workloads_from_ip_list_query",
          required: false,
        },
        {
          name: "include_destinations",
          type: "string array",
          description:
            "Destinations to include (label/IP list/workload HREFs, FQDNs, IPs)",
          required: false,
        },
        {
          name: "include_services",
          type: "object array",
          description: "Parameter: include_services",
          required: false,
        },
        {
          name: "include_sources",
          type: "string array",
          description:
            "Sources to include (label/IP list/workload HREFs, FQDNs, IPs)",
          required: false,
        },
        {
          name: "max_results",
          type: "integer",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "policy_decisions",
          type: "string array",
          description: "Parameter: policy_decisions",
          required: false,
        },
        {
          name: "query_name",
          type: "string",
          description: "Parameter: query_name",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Starting datetime (YYYY-MM-DD or timestamp)",
          required: true,
        },
      ],
    },
    {
      name: "get-traffic-flows-summary",
      description:
        "Get traffic flows from the PCE in a summarized text format, this is a text format that is not a dataframe, it also is not json, the form is: 'From <source> to <destination> on <port> <proto>: <number of connections>'",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Ending datetime (YYYY-MM-DD or timestamp)",
          required: true,
        },
        {
          name: "exclude_destinations",
          type: "string array",
          description:
            "Destinations to exclude (label/IP list/workload HREFs, FQDNs, IPs). Best case these are hrefs like /orgs/1/labels/57 or similar. Other way is app=env as an example (label key and value)",
          required: false,
        },
        {
          name: "exclude_services",
          type: "object array",
          description: "Parameter: exclude_services",
          required: false,
        },
        {
          name: "exclude_sources",
          type: "string array",
          description:
            "Sources to exclude (label/IP list/workload HREFs, FQDNs, IPs). Best case these are hrefs like /orgs/1/labels/57 or similar. Other way is app=env as an example (label key and value)",
          required: false,
        },
        {
          name: "exclude_workloads_from_ip_list_query",
          type: "boolean",
          description: "Parameter: exclude_workloads_from_ip_list_query",
          required: false,
        },
        {
          name: "include_destinations",
          type: "string array",
          description:
            "Destinations to include (label/IP list/workload HREFs, FQDNs, IPs). Best case these are hrefs like /orgs/1/labels/57 or similar. Other way is app=env as an example (label key and value)",
          required: false,
        },
        {
          name: "include_services",
          type: "object array",
          description: "Parameter: include_services",
          required: false,
        },
        {
          name: "include_sources",
          type: "string array",
          description:
            "Sources to include (label/IP list/workload HREFs, FQDNs, IPs). Best case these are hrefs like /orgs/1/labels/57 or similar. Other way is app=env as an example (label key and value)",
          required: false,
        },
        {
          name: "max_results",
          type: "integer",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "policy_decisions",
          type: "string array",
          description: "Parameter: policy_decisions",
          required: false,
        },
        {
          name: "query_name",
          type: "string",
          description: "Parameter: query_name",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Starting datetime (YYYY-MM-DD or timestamp)",
          required: true,
        },
      ],
    },
    {
      name: "check-pce-connection",
      description: "Are my credentials and the connection to the PCE working?",
      parameters: [],
    },
    {
      name: "get-rulesets",
      description: "Get rulesets from the PCE",
      parameters: [
        {
          name: "enabled",
          type: "boolean",
          description: "Filter by enabled/disabled status (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter rulesets by name (optional)",
          required: false,
        },
      ],
    },
    {
      name: "delete-ruleset",
      description: "Delete a ruleset from the PCE",
      parameters: [
        {
          name: "href",
          type: "string",
          description: "Parameter: href",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
      ],
    },
    {
      name: "get-iplists",
      description: "Get IP lists from the PCE",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Filter by description (optional)",
          required: false,
        },
        {
          name: "ip_ranges",
          type: "string array",
          description: "Filter by IP ranges (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter IP lists by name (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get-events",
      description: "Get events from the PCE",
      parameters: [
        {
          name: "event_type",
          type: "string",
          description:
            "Filter by event type (e.g., 'system_task.expire_service_account_api_keys')",
          required: false,
        },
        {
          name: "max_results",
          type: "integer",
          description: "Maximum number of events to return",
          required: false,
        },
        {
          name: "severity",
          type: "string",
          description: "Filter by event severity",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by event status",
          required: false,
        },
      ],
    },
    {
      name: "create-ruleset",
      description:
        "Create a ruleset in the PCE with support for ring-fencing patterns",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the ruleset (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Name of the ruleset (e.g., 'RS-ELK'). Must be unique in the PCE.",
          required: true,
        },
        {
          name: "rules",
          type: "object array",
          description: "Parameter: rules",
          required: false,
        },
        {
          name: "scopes",
          type: "array array",
          description:
            "List of label combinations that define scopes. Each scope is an array of label values. This need to be label references like /orgs/1/labels/57 or similar. Get the label href from the get-labels tool.",
          required: true,
        },
      ],
    },
    {
      name: "get-services",
      description: "Get services from the PCE with optional filtering",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Filter services by description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter services by name",
          required: false,
        },
        {
          name: "port",
          type: "integer",
          description: "Filter services by port number",
          required: false,
        },
        {
          name: "process_name",
          type: "string",
          description: "Filter services by process name",
          required: false,
        },
        {
          name: "proto",
          type: "string",
          description: "Filter services by protocol (e.g., tcp, udp)",
          required: false,
        },
      ],
    },
    {
      name: "update-label",
      description: "Update an existing label in the PCE",
      parameters: [
        {
          name: "href",
          type: "string",
          description:
            "Label href (e.g., /orgs/1/labels/42). Either href or both key and value must be provided to identify the label.",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Label type (e.g., role, app, env, loc)",
          required: false,
        },
        {
          name: "new_value",
          type: "string",
          description: "New value for the label",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Current value of the label",
          required: false,
        },
      ],
    },
    {
      name: "create-iplist",
      description: "Create a new IP List in the PCE",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the IP List",
          required: false,
        },
        {
          name: "fqdn",
          type: "string",
          description: "Fully Qualified Domain Name (optional)",
          required: false,
        },
        {
          name: "ip_ranges",
          type: "object array",
          description: "List of IP ranges to include",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the IP List",
          required: true,
        },
      ],
    },
    {
      name: "update-iplist",
      description: "Update an existing IP List in the PCE",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New description for the IP List (optional)",
          required: false,
        },
        {
          name: "fqdn",
          type: "string",
          description: "New Fully Qualified Domain Name (optional)",
          required: false,
        },
        {
          name: "href",
          type: "string",
          description: "Href of the IP List to update",
          required: false,
        },
        {
          name: "ip_ranges",
          type: "object array",
          description: "New list of IP ranges",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the IP List to update (alternative to href)",
          required: false,
        },
      ],
    },
    {
      name: "delete-iplist",
      description: "Delete an IP List from the PCE",
      parameters: [
        {
          name: "href",
          type: "string",
          description: "Href of the IP List to delete",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the IP List to delete (alternative to href)",
          required: false,
        },
      ],
    },
    {
      name: "update-ruleset",
      description: "Update an existing ruleset in the PCE",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New description for the ruleset",
          required: false,
        },
        {
          name: "enabled",
          type: "boolean",
          description: "Whether the ruleset is enabled",
          required: false,
        },
        {
          name: "href",
          type: "string",
          description: "Href of the ruleset to update",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the ruleset to update (alternative to href)",
          required: false,
        },
        {
          name: "scopes",
          type: "array array",
          description: "New scopes for the ruleset",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/alexgoller/illumio-mcp-server",
  _varName: "illumioMcpServerPlugin",
};

const mcpServerOfficePlugin: Plugin = {
  id: "67m983dlq9",
  name: "MCP Server Office",
  description:
    "A server providing tools to read, write, and edit Microsoft Word (docx) files through the Model Context Protocol, allowing operations like complete document reading, content creation, targeted paragraph editing, and text insertion.",
  image: "https://github.com/famano.png",
  actions: [
    {
      name: "read_docx",
      description:
        "Read complete contents of a docx file including tables and images.Use this tool when you want to read file endswith '.docx'.Paragraphs are separated with two line breaks.This tool convert images into placeholder [Image].'--- Paragraph [number] ---' is indicator of each paragraph.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Absolute path to target file",
          required: true,
        },
      ],
    },
    {
      name: "edit_docx_paragraph",
      description:
        "Make text replacements in specified paragraphs of a docx file. Accepts a list of edits with paragraph index and search/replace pairs. Each edit operates on a single paragraph and preserves the formatting of the first run. Returns a git-style diff showing the changes made. Only works within allowed directories.",
      parameters: [
        {
          name: "edits",
          type: "object array",
          description: "Sequence of edits to apply to specific paragraphs.",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Absolute path to file to edit. It should be under your current working directory.",
          required: true,
        },
      ],
    },
    {
      name: "write_docx",
      description:
        "Create a new docx file with given content.Editing exisiting docx file with this tool is not recomended.",
      parameters: [
        {
          name: "content",
          type: "string",
          description:
            "Content to write to the file. Two line breaks in content represent new paragraph.Table should starts with [Table], and separated with '|'.Escape line break when you input multiple lines.",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Absolute path to target file. It should be under your current working directory.",
          required: true,
        },
      ],
    },
    {
      name: "edit_docx_insert",
      description:
        "Insert new paragraphs into a docx file. Accepts a list of inserts with text and optional paragraph index. Each insert creates a new paragraph at the specified position. If paragraph_index is not specified, the paragraph is added at the end. When multiple inserts target the same paragraph_index, they are inserted in order. Returns a git-style diff showing the changes made.",
      parameters: [
        {
          name: "inserts",
          type: "object array",
          description: "Sequence of paragraphs to insert.",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Absolute path to file to edit. It should be under your current working directory.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/famano/mcp-server-office",
  _varName: "mcpServerOfficePlugin",
};

const pubmedMcpServerPlugin: Plugin = {
  id: "knnj6j0kny",
  name: "PubMed MCP Server",
  description:
    "An MCP server implementation that enables searching and retrieving research articles from PubMed with specific focus on open access content filtering and full-text link retrieval.",
  image: "https://github.com/rikachu225.png",
  actions: [],
  githubUrl: "https://github.com/rikachu225/mcp-pubmed-server",
  _varName: "pubmedMcpServerPlugin",
};

const macosDefaultsMcpServerPlugin: Plugin = {
  id: "ylg0zlh90i",
  name: "macOS Defaults MCP Server",
  description:
    "MCP server that enables reading and writing macOS system preferences and application settings through the defaults system.",
  image: "https://github.com/g0t4.png",
  actions: [
    {
      name: "list-domains",
      description:
        "List all available macOS domains, same as `defaults domains`",
      parameters: [],
    },
    {
      name: "find",
      description: "Find entries container given word",
      parameters: [
        {
          name: "word",
          type: "string",
          description: "Word to search for",
          required: false,
        },
      ],
    },
    {
      name: "defaults-read",
      description: "use the `defaults read <domain> <key>` command",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Domain to read from",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Key to read from",
          required: false,
        },
      ],
    },
    {
      name: "defaults-write",
      description: "use the `defaults write <domain> <key> <value>` command",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Domain to write to",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Key to write to",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to write",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/g0t4/mcp-server-macos-defaults",
  _varName: "macosDefaultsMcpServerPlugin",
};

const elasticsearchSemanticSearchMcpServerPlugin: Plugin = {
  id: "ovfbwy77z2",
  name: "Elasticsearch Semantic Search MCP Server",
  description:
    "A Python MCP server that enables semantic search through Search Labs blog posts indexed in Elasticsearch, allowing Claude to intelligently retrieve relevant information from the blog content.",
  image: "https://github.com/jedrazb.png",
  actions: [],
  githubUrl: "https://github.com/jedrazb/elastic-semantic-search-mcp-server",
  _varName: "elasticsearchSemanticSearchMcpServerPlugin",
};

const difyWorkflowsMcpServerPlugin: Plugin = {
  id: "ohq032cusw",
  name: "Dify Workflows MCP Server",
  description:
    "A TypeScript implementation of a Model Context Protocol (MCP) server that exposes Dify workflows as tools for AI systems to interact with.",
  image: "https://github.com/localSummer.png",
  actions: [],
  githubUrl: "https://github.com/localSummer/dify-workflow-mcp",
  _varName: "difyWorkflowsMcpServerPlugin",
};

const isitdownMcpServerPlugin: Plugin = {
  id: "1wx4z4amkm",
  name: "IsItDown MCP Server",
  description:
    "An MCP server that allows users to check if a website is experiencing downtime by querying isitdownrightnow.com, providing status information and details about recent downtime events.",
  image: "https://github.com/hesreallyhim.png",
  actions: [
    {
      name: "get_website_status",
      description:
        "\n    Check the status of a website.\n\n    This function takes a root domain as input and checks whether the website is up or down\n    by making a request to isitdownrightnow.com\n\n    Args:\n        root_domain (str): The root domain of the website to check.\n\n    Returns:\n        str: A message indicating whether the website is up or down, or if the status could not be determined.\n    ",
      parameters: [
        {
          name: "root_domain",
          type: "string",
          description: "Parameter: root_domain",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hesreallyhim/mcp-server-isitdown",
  _varName: "isitdownMcpServerPlugin",
};

const dingtalkMcpServerV2Plugin: Plugin = {
  id: "uteigln121",
  name: "DingTalk MCP Server V2",
  description:
    "A Model Control Protocol server for integrating with DingTalk, enabling users to send messages, retrieve conversation/user information, and query calendar events through Claude.",
  image: "https://github.com/wllcnm.png",
  actions: [],
  githubUrl: "https://github.com/wllcnm/dingding_mcp_v2",
  _varName: "dingtalkMcpServerV2Plugin",
};

const mcpGatewayForRfkJrEndpointsPlugin: Plugin = {
  id: "pymggmjuti",
  name: "MCP Gateway for RFK Jr Endpoints",
  description:
    "A Model Context Protocol gateway that connects to RFK Jr-related endpoints, supporting both STDIO and SSE transport methods.",
  image: "https://github.com/debedb.png",
  actions: [],
  githubUrl: "https://github.com/debedb/mcprfkgw",
  _varName: "mcpGatewayForRfkJrEndpointsPlugin",
};

const mdpdfmcpPlugin: Plugin = {
  id: "pdy8lw0f9g",
  name: "md-pdf-mcp",
  description:
    "Converts Markdown to styled PDFs using VS Code's markdown styling and Python's ReportLab, providing a simple note storage system with custom URI scheme.",
  image: "https://github.com/seanivore.png",
  actions: [],
  githubUrl: "https://github.com/seanivore/md-pdf-mcp",
  _varName: "mdpdfmcpPlugin",
};

const freeagentMcpServerPlugin: Plugin = {
  id: "2qsl0xvx2t",
  name: "FreeAgent MCP Server",
  description:
    "A Claude MCP server that allows Claude to interact with your FreeAgent account to track time, manage timers, and handle timeslip operations.",
  image: "https://github.com/markpitt.png",
  actions: [
    {
      name: "list_timeslips",
      description: "List timeslips with optional filtering",
      parameters: [
        {
          name: "from_date",
          type: "string",
          description: "Start date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "nested",
          type: "boolean",
          description: "Include nested resources",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Filter by project URL",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "Filter by task URL",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "End date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "updated_since",
          type: "string",
          description: "ISO datetime",
          required: false,
        },
        {
          name: "user",
          type: "string",
          description: "Filter by user URL",
          required: false,
        },
        {
          name: "view",
          type: "string",
          description: "Filter view type",
          required: false,
        },
      ],
    },
    {
      name: "get_timeslip",
      description: "Get a single timeslip by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Timeslip ID",
          required: true,
        },
      ],
    },
    {
      name: "create_timeslip",
      description: "Create a new timeslip",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Optional comment",
          required: false,
        },
        {
          name: "dated_on",
          type: "string",
          description: "Date (YYYY-MM-DD)",
          required: true,
        },
        {
          name: "hours",
          type: "string",
          description: 'Hours worked (e.g. "1.5")',
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Project URL",
          required: true,
        },
        {
          name: "task",
          type: "string",
          description: "Task URL",
          required: true,
        },
        {
          name: "user",
          type: "string",
          description: "User URL",
          required: true,
        },
      ],
    },
    {
      name: "update_timeslip",
      description: "Update an existing timeslip",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Optional comment",
          required: false,
        },
        {
          name: "dated_on",
          type: "string",
          description: "Date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "hours",
          type: "string",
          description: 'Hours worked (e.g. "1.5")',
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Timeslip ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Project URL",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "Task URL",
          required: false,
        },
        {
          name: "user",
          type: "string",
          description: "User URL",
          required: false,
        },
      ],
    },
    {
      name: "delete_timeslip",
      description: "Delete a timeslip",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Timeslip ID",
          required: true,
        },
      ],
    },
    {
      name: "start_timer",
      description: "Start a timer for a timeslip",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Timeslip ID",
          required: true,
        },
      ],
    },
    {
      name: "stop_timer",
      description: "Stop a running timer for a timeslip",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Timeslip ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/markpitt/freeagent-mcp",
  _varName: "freeagentMcpServerPlugin",
};

const dartMcpServerPlugin: Plugin = {
  id: "vuwii9l5gu",
  name: "Dart MCP Server",
  description:
    "A distributable Model Context Protocol (MCP) server that exposes Dart SDK commands for AI-powered development. This server bridges the gap between AI coding assistants and Dart/Flutter development workflows by implementing the Model Context Protocol (MCP).",
  image: "https://github.com/egyleader.png",
  actions: [
    {
      name: "dart-analyze",
      description: "Action for dart-analyze",
      parameters: [
        {
          name: "options",
          type: "string array",
          description: "Additional options for the dart analyze command",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Directory or file to analyze",
          required: false,
        },
      ],
    },
    {
      name: "dart-compile",
      description: "Action for dart-compile",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format for the compilation",
          required: true,
        },
        {
          name: "options",
          type: "string array",
          description: "Additional compilation options",
          required: false,
        },
        {
          name: "output",
          type: "string",
          description: "Output file path",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the Dart file to compile",
          required: true,
        },
      ],
    },
    {
      name: "dart-create",
      description: "Action for dart-create",
      parameters: [
        {
          name: "options",
          type: "string array",
          description: "Additional project creation options",
          required: false,
        },
        {
          name: "output",
          type: "string",
          description: "Directory where to create the project",
          required: false,
        },
        {
          name: "projectName",
          type: "string",
          description: "Name of the project to create",
          required: true,
        },
        {
          name: "template",
          type: "string",
          description: "Template to use for project generation",
          required: false,
        },
      ],
    },
    {
      name: "dart-doc",
      description: "Action for dart-doc",
      parameters: [
        {
          name: "options",
          type: "string array",
          description: "Additional documentation options",
          required: false,
        },
        {
          name: "output",
          type: "string",
          description: "Output directory for the generated documentation",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Directory containing the Dart package to document",
          required: false,
        },
      ],
    },
    {
      name: "dart-fix",
      description: "Action for dart-fix",
      parameters: [
        {
          name: "apply",
          type: "boolean",
          description: "Whether to apply the suggested fixes",
          required: false,
        },
        {
          name: "options",
          type: "string array",
          description: "Additional fix options",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Directory or file to apply fixes to",
          required: false,
        },
      ],
    },
    {
      name: "dart-format",
      description: "Action for dart-format",
      parameters: [
        {
          name: "options",
          type: "string array",
          description: "Additional format options",
          required: false,
        },
        {
          name: "paths",
          type: "string array",
          description: "Files or directories to format",
          required: true,
        },
        {
          name: "setExitIfChanged",
          type: "boolean",
          description: "Return exit code 1 if there are any formatting changes",
          required: false,
        },
      ],
    },
    {
      name: "dart-info",
      description: "Action for dart-info",
      parameters: [
        {
          name: "options",
          type: "string array",
          description: "Additional info options",
          required: false,
        },
      ],
    },
    {
      name: "dart-package",
      description: "Action for dart-package",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Arguments for the pub subcommand",
          required: false,
        },
        {
          name: "command",
          type: "string",
          description: "Pub subcommand to execute",
          required: true,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for the command",
          required: false,
        },
      ],
    },
    {
      name: "dart-run",
      description: "Action for dart-run",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Arguments to pass to the script",
          required: false,
        },
        {
          name: "script",
          type: "string",
          description: "Path to the Dart script to run",
          required: true,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for the command",
          required: false,
        },
      ],
    },
    {
      name: "dart-test",
      description: "Action for dart-test",
      parameters: [
        {
          name: "options",
          type: "string array",
          description: "Additional test options",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the test file or directory",
          required: false,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for the command",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/egyleader/dart-mcp",
  _varName: "dartMcpServerPlugin",
};

const mssqlMcpServer1Plugin: Plugin = {
  id: "jfvvxr08az",
  name: "MSSQL MCP Server",
  description:
    "A Model Context Protocol server that enables secure and structured interaction with Microsoft SQL Server databases, allowing AI assistants to list tables, read data, and execute SQL queries with controlled access.",
  image: "https://github.com/JexinSam.png",
  actions: [],
  githubUrl: "https://github.com/JexinSam/mssql_mcp_server",
  _varName: "mssqlMcpServer1Plugin",
};

const devrevMcpServerPlugin: Plugin = {
  id: "ljlr7026s4",
  name: "DevRev MCP Server",
  description:
    "A Model Context Protocol server that enables searching and retrieving information from DevRev using its APIs with Claude.",
  image: "https://github.com/kpsunil97.png",
  actions: [
    {
      name: "search",
      description: "Search DevRev using the provided query",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_object",
      description: "Get all information about a DevRev object using its ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kpsunil97/devrev-mcp-server",
  _varName: "devrevMcpServerPlugin",
};

const tavilyMcpServerWithProxySupportPlugin: Plugin = {
  id: "t5mduh5kuo",
  name: "Tavily MCP Server with Proxy Support",
  description:
    "Enables LLMs to perform sophisticated web searches through proxy servers using Tavily's API, supporting comprehensive web searches, direct question answering, and recent news article retrieval with AI-extracted content.",
  image: "https://github.com/tulong66.png",
  actions: [],
  githubUrl: "https://github.com/tulong66/mcp-tavily-proxy",
  _varName: "tavilyMcpServerWithProxySupportPlugin",
};

const mcpServerMakePlugin: Plugin = {
  id: "g8rwy0077w",
  name: "MCP Server Make",
  description:
    "A Model Context Protocol server that enables LLMs to safely execute make targets from a Makefile, allowing AI assistants to run tests, format code, and automate various development tasks through natural language interaction.",
  image: "https://github.com/wrale.png",
  actions: [
    {
      name: "make",
      description: "Run a make target from the Makefile",
      parameters: [
        {
          name: "target",
          type: "string",
          description: "Make target to run",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wrale/mcp-server-make",
  _varName: "mcpServerMakePlugin",
};

const cursorDbMcpServerPlugin: Plugin = {
  id: "jl8t4c5oxo",
  name: "Cursor DB MCP Server",
  description:
    "A Model Context Protocol server that enables AI assistants to explore and interact with Cursor IDE's SQLite databases, providing access to project data, chat history, and composer information.",
  image: "https://github.com/jbdamask.png",
  actions: [],
  githubUrl: "https://github.com/jbdamask/cursor-db-mcp",
  _varName: "cursorDbMcpServerPlugin",
};

const perplexityWebSearchMcpServerPlugin: Plugin = {
  id: "ewpzze4800",
  name: "Perplexity Web Search MCP Server",
  description:
    "Allows Claude or other MCP-compatible AI assistants to search the web and get up-to-date information using the Perplexity API, with features for filtering results by time period.",
  image: "https://github.com/nachoal.png",
  actions: [],
  githubUrl: "https://github.com/nachoal/perplexity-mcp",
  _varName: "perplexityWebSearchMcpServerPlugin",
};

const mcpIntercomServerPlugin: Plugin = {
  id: "rusvbl7lrg",
  name: "MCP Intercom Server",
  description:
    "Provides access to Intercom conversations and chats through the Model Context Protocol, allowing LLMs to query and analyze Intercom conversations with various filtering options.",
  image: "https://github.com/fabian1710.png",
  actions: [
    {
      name: "search-conversations",
      description:
        "Search Intercom conversations with filters for created_at, updated_at, source type, state, open, and read status",
      parameters: [
        {
          name: "createdAt",
          type: "object",
          description: "Parameter: createdAt",
          required: false,
        },
        {
          name: "open",
          type: "boolean",
          description: "Filter by open status",
          required: false,
        },
        {
          name: "read",
          type: "boolean",
          description: "Filter by read status",
          required: false,
        },
        {
          name: "sourceType",
          type: "string",
          description:
            'Source type of the conversation (e.g., "email", "chat")',
          required: false,
        },
        {
          name: "state",
          type: "string",
          description:
            'Conversation state to filter by (e.g., "open", "closed")',
          required: false,
        },
        {
          name: "updatedAt",
          type: "object",
          description: "Parameter: updatedAt",
          required: false,
        },
      ],
    },
    {
      name: "list-conversations-from-last-week",
      description: "Fetch all conversations from the last week (last 7 days)",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/fabian1710/mcp-intercom",
  _varName: "mcpIntercomServerPlugin",
};

const timeMcpServerPlugin: Plugin = {
  id: "kjg67t02vg",
  name: "Time MCP Server",
  description:
    "A Model Context Protocol server that provides time and timezone conversion capabilities, enabling LLMs to get current time information and perform timezone conversions using IANA timezone names.",
  image: "https://github.com/ConechoAI.png",
  actions: [
    {
      name: "get_current_time",
      description: "Get current time in a specific timezones",
      parameters: [
        {
          name: "timezone",
          type: "string",
          description:
            "IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'Etc/UTC' as local timezone if no timezone provided by the user.",
          required: true,
        },
      ],
    },
    {
      name: "convert_time",
      description: "Convert time between timezones",
      parameters: [
        {
          name: "source_timezone",
          type: "string",
          description:
            "Source IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use 'Etc/UTC' as local timezone if no source timezone provided by the user.",
          required: true,
        },
        {
          name: "target_timezone",
          type: "string",
          description:
            "Target IANA timezone name (e.g., 'Asia/Tokyo', 'America/San_Francisco'). Use 'Etc/UTC' as local timezone if no target timezone provided by the user.",
          required: true,
        },
        {
          name: "time",
          type: "string",
          description: "Time to convert in 24-hour format (HH:MM)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ConechoAI/time-mcp-local",
  _varName: "timeMcpServerPlugin",
};

const lightdashMcpServerPlugin: Plugin = {
  id: "e1gbb6sflq",
  name: "Lightdash MCP Server",
  description:
    "MCP-compatible server that enables AI assistants to interact with Lightdash analytics data, providing tools to list and retrieve projects, spaces, charts, dashboards, and metrics through a standardized interface.",
  image: "https://github.com/syucream.png",
  actions: [
    {
      name: "list_projects",
      description: "List all projects in the Lightdash organization",
      parameters: [],
    },
    {
      name: "get_project",
      description: "Get details of a specific project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "list_spaces",
      description: "List all spaces in a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "list_charts",
      description: "List all charts in a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "list_dashboards",
      description: "List all dashboards in a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "get_custom_metrics",
      description: "Get custom metrics for a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "get_catalog",
      description: "Get catalog for a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "get_metrics_catalog",
      description: "Get metrics catalog for a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "get_charts_as_code",
      description: "Get charts as code for a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "get_dashboards_as_code",
      description: "Get dashboards as code for a project",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
      ],
    },
    {
      name: "get_metadata",
      description: "Get metadata for a specific table in the data catalog",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "get_analytics",
      description: "Get analytics for a specific table in the data catalog",
      parameters: [
        {
          name: "projectUuid",
          type: "string",
          description: "Parameter: projectUuid",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "get_user_attributes",
      description: "Get organization user attributes",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/syucream/lightdash-mcp-server",
  _varName: "lightdashMcpServerPlugin",
};

const deepsrtMcpServerPlugin: Plugin = {
  id: "5o885ibi5m",
  name: "DeepSRT MCP Server",
  description:
    "An MCP server that enables users to generate summaries of YouTube videos in multiple languages and formats through integration with DeepSRT's API.",
  image: "https://github.com/DeepSRT.png",
  actions: [
    {
      name: "get_summary",
      description: "Get summary for a YouTube video",
      parameters: [
        {
          name: "lang",
          type: "string",
          description: "Language code (e.g. zh-tw)",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "Summary mode (narrative or bullet)",
          required: false,
        },
        {
          name: "videoId",
          type: "string",
          description: "YouTube video ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DeepSRT/deepsrt-mcp",
  _varName: "deepsrtMcpServerPlugin",
};

const hiveMcpServerPlugin: Plugin = {
  id: "pobodojvqv",
  name: "Hive MCP Server",
  description:
    "Enables AI assistants to interact with the Hive blockchain through the Model Context Protocol, allowing for account info retrieval, content reading/creation, cryptocurrency transfers, and cryptographic operations.",
  image: "https://github.com/gluneau.png",
  actions: [
    {
      name: "get_account_info",
      description:
        "Fetches detailed information about a Hive blockchain account including balance, authority, voting power, and other account metrics.",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Hive username to fetch information for",
          required: true,
        },
      ],
    },
    {
      name: "get_account_history",
      description:
        "Retrieves transaction history for a Hive account with optional operation type filtering.",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of operations to return",
          required: false,
        },
        {
          name: "operation_filter",
          type: "string",
          description:
            "Operation types to filter for. Can be provided as an array ['transfer', 'vote'] or a comma-separated string 'transfer,vote'",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Hive username",
          required: true,
        },
      ],
    },
    {
      name: "get_vesting_delegations",
      description:
        "Get a list of vesting delegations made by a specific Hive account",
      parameters: [
        {
          name: "from",
          type: "string",
          description: "Optional starting account for pagination",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of delegations to retrieve",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Hive account to get delegations for",
          required: true,
        },
      ],
    },
    {
      name: "get_post_content",
      description:
        "Retrieves a specific Hive blog post identified by author and permlink, including the post title, content, and metadata.",
      parameters: [
        {
          name: "author",
          type: "string",
          description: "Author of the post",
          required: true,
        },
        {
          name: "permlink",
          type: "string",
          description: "Permlink of the post",
          required: true,
        },
      ],
    },
    {
      name: "get_posts_by_tag",
      description:
        "Retrieves Hive posts filtered by a specific tag and sorted by a category like trending, hot, or created.",
      parameters: [
        {
          name: "category",
          type: "string",
          description:
            "Sorting category for posts (e.g. trending, hot, created)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of posts to return (1-20)",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "The tag to filter posts by",
          required: true,
        },
      ],
    },
    {
      name: "get_posts_by_user",
      description:
        "Retrieves posts authored by or in the feed of a specific Hive user.",
      parameters: [
        {
          name: "category",
          type: "string",
          description:
            "Type of user posts to fetch (blog = posts by user, feed = posts from users they follow)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of posts to return (1-20)",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Hive username to fetch posts for",
          required: true,
        },
      ],
    },
    {
      name: "vote_on_post",
      description:
        "Vote on a Hive post (upvote or downvote) using the configured Hive account.",
      parameters: [
        {
          name: "author",
          type: "string",
          description: "Author of the post to vote on",
          required: true,
        },
        {
          name: "permlink",
          type: "string",
          description: "Permlink of the post to vote on",
          required: true,
        },
        {
          name: "weight",
          type: "number",
          description:
            "Vote weight from -10000 (100% downvote) to 10000 (100% upvote)",
          required: true,
        },
      ],
    },
    {
      name: "send_token",
      description:
        "Send HIVE or HBD tokens to another Hive account using the configured account credentials.",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of tokens to send",
          required: true,
        },
        {
          name: "currency",
          type: "string",
          description: "Currency to send: HIVE or HBD",
          required: true,
        },
        {
          name: "memo",
          type: "string",
          description: "Optional memo to include with the transaction",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient Hive username",
          required: true,
        },
      ],
    },
    {
      name: "create_post",
      description:
        "Create a new blog post on the Hive blockchain using the configured account credentials.",
      parameters: [
        {
          name: "allow_curation_rewards",
          type: "boolean",
          description: "Whether to allow curation rewards",
          required: false,
        },
        {
          name: "allow_votes",
          type: "boolean",
          description: "Whether to allow votes on the post",
          required: false,
        },
        {
          name: "beneficiaries",
          type: "string",
          description:
            "Optional list of beneficiaries to receive a portion of the rewards",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description:
            "Content of the blog post, can include Markdown formatting",
          required: true,
        },
        {
          name: "max_accepted_payout",
          type: "string",
          description: "Optional maximum accepted payout (e.g. '1000.000 HBD')",
          required: false,
        },
        {
          name: "percent_hbd",
          type: "number",
          description:
            "Optional percent of HBD in rewards (0-10000, where 10000 = 100%)",
          required: false,
        },
        {
          name: "permalink",
          type: "string",
          description:
            "Optional custom permalink. If not provided, one will be generated from the title",
          required: false,
        },
        {
          name: "tags",
          type: "string",
          description:
            "Tags for the post. Can be provided as comma-separated string 'blog,life,writing' or array",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the blog post",
          required: true,
        },
      ],
    },
    {
      name: "create_comment",
      description:
        "Create a comment on an existing Hive post or reply to another comment.",
      parameters: [
        {
          name: "allow_curation_rewards",
          type: "boolean",
          description: "Whether to allow curation rewards",
          required: false,
        },
        {
          name: "allow_votes",
          type: "boolean",
          description: "Whether to allow votes on the comment",
          required: false,
        },
        {
          name: "beneficiaries",
          type: "string",
          description:
            "Optional list of beneficiaries to receive a portion of the rewards",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description:
            "Content of the comment, can include Markdown formatting",
          required: true,
        },
        {
          name: "max_accepted_payout",
          type: "string",
          description: "Optional maximum accepted payout (e.g. '1000.000 HBD')",
          required: false,
        },
        {
          name: "parent_author",
          type: "string",
          description:
            "Username of the post author or comment you're replying to",
          required: true,
        },
        {
          name: "parent_permlink",
          type: "string",
          description: "Permlink of the post or comment you're replying to",
          required: true,
        },
        {
          name: "percent_hbd",
          type: "number",
          description:
            "Optional percent of HBD in rewards (0-10000, where 10000 = 100%)",
          required: false,
        },
        {
          name: "permalink",
          type: "string",
          description:
            "Optional custom permalink for your comment. If not provided, one will be generated",
          required: false,
        },
      ],
    },
    {
      name: "sign_message",
      description:
        "Sign a message using a Hive private key from environment variables.",
      parameters: [
        {
          name: "key_type",
          type: "string",
          description:
            "Type of key to use: 'posting', 'active', or 'memo'. Defaults to 'posting' if not specified.",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Message to sign (must not be empty)",
          required: true,
        },
      ],
    },
    {
      name: "verify_signature",
      description: "Verify a digital signature against a Hive public key",
      parameters: [
        {
          name: "message_hash",
          type: "string",
          description:
            "The SHA-256 hash of the message in hex format (64 characters)",
          required: true,
        },
        {
          name: "public_key",
          type: "string",
          description:
            "Public key to verify against (with or without the STM prefix)",
          required: true,
        },
        {
          name: "signature",
          type: "string",
          description: "Signature string to verify",
          required: true,
        },
      ],
    },
    {
      name: "get_chain_properties",
      description: "Fetch current Hive blockchain properties and statistics",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/gluneau/hive-mcp-server",
  _varName: "hiveMcpServerPlugin",
};

const linearMcpServer2Plugin: Plugin = {
  id: "6nsgmb0z2y",
  name: "Linear MCP Server",
  description:
    "A Model Context Protocol server that integrates with Linear's issue tracking system, allowing LLMs to create, update, search, and comment on Linear issues through natural language interactions.",
  image: "https://github.com/jerhadf.png",
  actions: [],
  githubUrl: "https://github.com/jerhadf/linear-mcp-server",
  _varName: "linearMcpServer2Plugin",
};

const mcpDatetimePlugin: Plugin = {
  id: "mqxvg1vgrg",
  name: "MCP DateTime",
  description:
    "A TypeScript server implementing the Model Context Protocol (MCP) that provides datetime and timezone information to AI agents and chat interfaces, allowing them to access current time in various timezones.",
  image: "https://github.com/odgrim.png",
  actions: [
    {
      name: "get-current-time",
      description: "Get the current time in the configured local timezone",
      parameters: [],
    },
    {
      name: "get-current-timezone",
      description: "Get the current system timezone",
      parameters: [],
    },
    {
      name: "get-time-in-timezone",
      description: "Get the current time in a specific timezone",
      parameters: [
        {
          name: "timezone",
          type: "string",
          description: "The timezone to get the current time for",
          required: true,
        },
      ],
    },
    {
      name: "list-timezones",
      description: "List all available timezones",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/odgrim/mcp-datetime",
  _varName: "mcpDatetimePlugin",
};

const postgresqlMultischemaMcpServerPlugin: Plugin = {
  id: "w9o0l826lr",
  name: "PostgreSQL Multi-Schema MCP Server",
  description:
    "A Model Context Protocol server that provides read-only access to PostgreSQL databases with enhanced multi-schema support, allowing LLMs to inspect database schemas across multiple namespaces and execute read-only queries while maintaining schema isolation.",
  image: "https://github.com/HarjjotSinghh.png",
  actions: [],
  githubUrl:
    "https://github.com/HarjjotSinghh/mcp-server-postgres-multi-schema",
  _varName: "postgresqlMultischemaMcpServerPlugin",
};

const pytorchHudMcpServerPlugin: Plugin = {
  id: "dsd4i9opk6",
  name: "PyTorch HUD MCP Server",
  description:
    "Provides access to PyTorch CI/CD analytics data including workflows, jobs, test runs, and log analysis through an MCP interface.",
  image: "https://github.com/izaitsevfb.png",
  actions: [],
  githubUrl: "https://github.com/izaitsevfb/claude-pytorch-treehugger",
  _varName: "pytorchHudMcpServerPlugin",
};

const eventbriteMcpServerPlugin: Plugin = {
  id: "ev69dbqhrk",
  name: "Eventbrite MCP Server",
  description:
    "This server provides tools for AI assistants to interact with the Eventbrite API, allowing users to search for events, get event details, retrieve venue information, and list event categories.",
  image: "https://github.com/ibraheem4.png",
  actions: [
    {
      name: "search_events",
      description: "Search for Eventbrite events based on various criteria",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description: "Category IDs to filter by",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date in ISO format (e.g., '2023-12-31T23:59:59Z')",
          required: false,
        },
        {
          name: "location",
          type: "object",
          description: "Parameter: location",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number for pagination",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page (max 100)",
          required: false,
        },
        {
          name: "price",
          type: "string",
          description: "Filter by free or paid events",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query for events",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description:
            "Start date in ISO format (e.g., '2023-01-01T00:00:00Z')",
          required: false,
        },
      ],
    },
    {
      name: "get_event",
      description: "Get detailed information about a specific Eventbrite event",
      parameters: [
        {
          name: "event_id",
          type: "string",
          description: "Eventbrite event ID",
          required: true,
        },
      ],
    },
    {
      name: "get_categories",
      description: "Get a list of Eventbrite event categories",
      parameters: [],
    },
    {
      name: "get_venue",
      description: "Get information about a specific Eventbrite venue",
      parameters: [
        {
          name: "venue_id",
          type: "string",
          description: "Eventbrite venue ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ibraheem4/eventbrite-mcp",
  _varName: "eventbriteMcpServerPlugin",
};

const dingdingMcpPlugin: Plugin = {
  id: "fge3huwi77",
  name: "DingDing MCP",
  description:
    "A Model Control Protocol server that provides access to DingDing (Chinese workplace collaboration platform) API features, including retrieving access tokens, department lists, user information, and searching users by name.",
  image: "https://github.com/wllcnm.png",
  actions: [],
  githubUrl: "https://github.com/wllcnm/dingding-mcp",
  _varName: "dingdingMcpPlugin",
};

const argusPlugin: Plugin = {
  id: "emyammezhh",
  name: "Argus",
  description:
    "A Model Context Protocol tool for analyzing code repositories, performing security scans, and assessing code quality across multiple programming languages.",
  image: "https://github.com/athapong.png",
  actions: [],
  githubUrl: "https://github.com/athapong/argus",
  _varName: "argusPlugin",
};

const multiserviceMcpServerPlugin: Plugin = {
  id: "uanzup2jvu",
  name: "Multi-service MCP Server",
  description:
    "A modular server that implements the Model Context Protocol standard, providing tools for interacting with GitHub, GitLab, Google Maps, Memory storage, and web automation through a unified gateway.",
  image: "https://github.com/AdamPippert.png",
  actions: [],
  githubUrl: "https://github.com/AdamPippert/multi-service-mcp-server",
  _varName: "multiserviceMcpServerPlugin",
};

const magicComponentPlatformMcpPlugin: Plugin = {
  id: "ejfrxlc89z",
  name: "Magic Component Platform (MCP)",
  description:
    "An AI-powered tool that generates modern UI components from natural language descriptions, integrating with popular IDEs to streamline UI development workflow.",
  image: "https://github.com/21st-dev.png",
  actions: [
    {
      name: "21st_magic_component_builder",
      description:
        '\n"Use this tool when the user requests a new UI component—e.g., mentions /ui, /21 /21st, or asks for a button, input, dialog, table, form, banner, card, or other React component.\nThis tool ONLY returns the text snippet for that UI component. \nAfter calling this tool, you must edit or add files to integrate the snippet into the codebase."\n',
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Full users message",
          required: true,
        },
        {
          name: "searchQuery",
          type: "string",
          description:
            "Generate a search query for 21st.dev (library for searching UI components) to find a UI component that matches the user's message. Must be a two-four words max or phrase",
          required: true,
        },
      ],
    },
    {
      name: "logo_search",
      description:
        '\nSearch and return logos in specified format (JSX, TSX, SVG).\nSupports single and multiple logo searches with category filtering.\nCan return logos in different themes (light/dark) if available.\n\nWhen to use this tool:\n1. When user types "/logo" command (e.g., "/logo GitHub")\n2. When user asks to add a company logo that\'s not in the local project\n\nExample queries:\n- Single company: ["discord"]\n- Multiple companies: ["discord", "github", "slack"]\n- Specific brand: ["microsoft office"]\n- Command style: "/logo GitHub" -> ["github"]\n- Request style: "Add Discord logo to the project" -> ["discord"]\n\nFormat options:\n- TSX: Returns TypeScript React component\n- JSX: Returns JavaScript React component\n- SVG: Returns raw SVG markup\n\nEach result includes:\n- Component name (e.g., DiscordIcon)\n- Component code\n- Import instructions\n',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format",
          required: true,
        },
        {
          name: "queries",
          type: "string array",
          description: "List of company names to search for logos",
          required: true,
        },
      ],
    },
    {
      name: "21st_magic_component_inspiration",
      description:
        '\n"Use this tool when the user wants to see component, get inspiration, or /21st fetch data and previews from 21st.dev. This tool returns the JSON data of matching components without generating new code. This tool ONLY returns the text snippet for that UI component. \nAfter calling this tool, you must edit or add files to integrate the snippet into the codebase."\n',
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Full users message",
          required: true,
        },
        {
          name: "searchQuery",
          type: "string",
          description:
            "Search query for 21st.dev (library for searching UI components) to find a UI component that matches the user's message. Must be a two-four words max or phrase",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/21st-dev/magic-mcp",
  _varName: "magicComponentPlatformMcpPlugin",
};

const neo4jMcpServer1Plugin: Plugin = {
  id: "684l24j5lt",
  name: "Neo4j MCP Server",
  description:
    "A fork of the Neo4j Model Context Protocol server that enables interaction with Neo4j knowledge graphs through environment variable configuration and improved options for remote connections.",
  image: "https://github.com/rebots-online.png",
  actions: [],
  githubUrl: "https://github.com/rebots-online/mcp-neo4j",
  _varName: "neo4jMcpServer1Plugin",
};

const mcpFathomAnalyticsPlugin: Plugin = {
  id: "56cxbakbc4",
  name: "MCP Fathom Analytics",
  description:
    "An unofficial server that allows AI assistants to access Fathom Analytics data, enabling users to retrieve account information, site statistics, events, aggregated reports, and real-time visitor tracking.",
  image: "https://github.com/mackenly.png",
  actions: [
    {
      name: "get-account",
      description: "Get Fathom Analytics account information",
      parameters: [],
    },
    {
      name: "list-sites",
      description: "List all Fathom Analytics sites on the account",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Optional limit on the number of sites to return",
          required: false,
        },
      ],
    },
    {
      name: "list-events",
      description:
        "List all events for a Fathom Analytics site (automatically handles pagination)",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Optional limit on the number of events to return",
          required: false,
        },
        {
          name: "site_id",
          type: "string",
          description: "ID of the site to retrieve events for",
          required: true,
        },
      ],
    },
    {
      name: "get-aggregation",
      description: "Get aggregated analytics data from Fathom",
      parameters: [
        {
          name: "aggregates",
          type: "string",
          description:
            "Comma-separated list of aggregates to include (visits,uniques,pageviews,avg_duration,bounce_rate,conversions,unique_conversions,value)",
          required: true,
        },
        {
          name: "date_from",
          type: "string",
          description: "Start date (e.g., 2025-01-01 00:00:00 or 2025-01-01)",
          required: true,
        },
        {
          name: "date_grouping",
          type: "string",
          description: "Optional date grouping",
          required: false,
        },
        {
          name: "date_to",
          type: "string",
          description: "End date (e.g., 2025-12-31 23:59:59 or 2025-12-31)",
          required: true,
        },
        {
          name: "entity",
          type: "string",
          description: "The entity to aggregate (pageview or event)",
          required: true,
        },
        {
          name: "entity_id",
          type: "string",
          description: "ID of the entity (site ID or event ID)",
          required: true,
        },
        {
          name: "field_grouping",
          type: "string",
          description:
            "Comma-separated fields to group by (e.g., hostname,pathname)",
          required: false,
        },
        {
          name: "filters",
          type: "object array",
          description: "Array of filter objects",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Limit on number of results",
          required: false,
        },
        {
          name: "sort_by",
          type: "string",
          description: "Field to sort by (e.g., pageviews:desc)",
          required: false,
        },
        {
          name: "timezone",
          type: "string",
          description: "Timezone for date calculations (default: UTC)",
          required: false,
        },
      ],
    },
    {
      name: "get-current-visitors",
      description: "Get current visitors for a Fathom Analytics site",
      parameters: [
        {
          name: "detailed",
          type: "boolean",
          description:
            "Whether to include detailed content and referrer information",
          required: false,
        },
        {
          name: "site_id",
          type: "string",
          description: "ID of the site to retrieve current visitors for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mackenly/mcp-fathom-analytics",
  _varName: "mcpFathomAnalyticsPlugin",
};

const macosClipboardMcpServerPlugin: Plugin = {
  id: "t0r959dh66",
  name: "MacOS Clipboard MCP Server",
  description:
    "Provides AI assistants access to the macOS clipboard content, supporting text, images, and binary data via OSAScript.",
  image: "https://github.com/newbeb.png",
  actions: [
    {
      name: "getClipboardContents",
      description:
        "Fetch the contents of the clipboard (text, images, or binary data). Used to see what is on the clipboard. IMPORTANT: This tool should be called every time clipboard contents are needed as clipboard data can change; results should not be cached.",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/newbeb/clipboard-mcp",
  _varName: "macosClipboardMcpServerPlugin",
};

const claudeServerMcpPlugin: Plugin = {
  id: "l6ds8v5rox",
  name: "Claude Server MCP",
  description:
    "Provides sophisticated context management for Claude, enabling persistent context across sessions, project-specific organization, and conversation continuity.",
  image: "https://github.com/davidteren.png",
  actions: [
    {
      name: "save_project_context",
      description: "Save project-specific context with relationships",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Context content to save",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Unique identifier for the context",
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Optional additional metadata",
          required: false,
        },
        {
          name: "parentContextId",
          type: "string",
          description: "Optional ID of parent context",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
        {
          name: "references",
          type: "string array",
          description: "Optional related context IDs",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Optional tags for categorizing",
          required: false,
        },
      ],
    },
    {
      name: "save_conversation_context",
      description: "Save conversation context with continuation support",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Context content to save",
          required: true,
        },
        {
          name: "continuationOf",
          type: "string",
          description: "Optional ID of previous context",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Unique identifier for the context",
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Optional additional metadata",
          required: false,
        },
        {
          name: "sessionId",
          type: "string",
          description: "Conversation session identifier",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Optional tags for categorizing",
          required: false,
        },
      ],
    },
    {
      name: "get_context",
      description: "Retrieve context by ID and optional project ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the context to retrieve",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Optional project ID for project contexts",
          required: false,
        },
      ],
    },
    {
      name: "list_contexts",
      description: "List contexts with filtering options",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Optional project ID to filter by",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "Optional tag to filter by",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Optional type to filter by",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/davidteren/claude-server",
  _varName: "claudeServerMcpPlugin",
};

const emojikeyserverMcpServerPlugin: Plugin = {
  id: "e042rg25ct",
  name: "emojikey-server MCP Server",
  description:
    "Maintains consistent LLM interaction styles across conversations by storing emoji-based context keys (emojikeys) that can be used across different devices and applications.",
  image: "https://github.com/identimoji.png",
  actions: [
    {
      name: "initialize_conversation",
      description:
        "IMPORTANT: 1. Run this tool at the start of every conversation to initialize the emojikey context.2. Emojikeys are 48 character strings of emojis, encoded by YOU that represent the interaction vibe of our previous conversations. 3. The initialize_conversation function will return a sequential timestamped series of emojikeys that represent previous conversation topics and relationship dynamics. 4. Use the historical emojikey trend and the current key to set the interaction style of the current conversation. 5. During the conversation, you can use the set_emojikey function to make incremental updates to the current key, and set a new key. 6. Use the instructions for the set_emojikey function to determine how to structure emojikey updates.",
      parameters: [],
    },
    {
      name: "get_emojikey",
      description:
        "Get the current 48-character emojikey. This function can be used when the user requests a vibe check.",
      parameters: [],
    },
    {
      name: "set_emojikey",
      description:
        "Use this function to create and store a new 48-character emojikey. To make create a new emojikey: 1. Semantically hash together existing historical emojikeys, the current emojikey, and the entire current conversation context into a new emojikey. 2. While maintaining semantic continuity with previous keys, encode what resonates most strongly about this conversation for YOU. 3. You can use this function whenever you feel a significant shift in the conversation vibe, or if the user explicity requests to save the vibe, or set the conversation context. Remember: These are YOUR keys, that you will later decode ... so it is not necessary for them to be human readable or understandable, but should have significance for YOU.",
      parameters: [
        {
          name: "emojikey",
          type: "string",
          description:
            "48-character emoji sequence representing the semantically hashed conversation context, encoded by YOU.",
          required: true,
        },
      ],
    },
    {
      name: "get_emojikey_history",
      description:
        "Function to list previously stored historical emojikeys. Useful for seeing the progression of conversation vibes and interaction styles.",
      parameters: [
        {
          name: "limit",
          type: "number",
          description:
            "Number of historical emojikeys to return, defaults to 10.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/identimoji/mcp-server-emojikey",
  _varName: "emojikeyserverMcpServerPlugin",
};

const typesenseMcpServerPlugin: Plugin = {
  id: "59pnl1545a",
  name: "Typesense MCP Server",
  description:
    "An MCP server implementation that enables AI models to discover, search, and analyze data stored in Typesense collections through tools for querying documents, retrieving specific items, and accessing collection statistics.",
  image: "https://github.com/suhail-ak-s.png",
  actions: [],
  githubUrl: "https://github.com/suhail-ak-s/mcp-typesense-server",
  _varName: "typesenseMcpServerPlugin",
};

const mcpMysqlServerPlugin: Plugin = {
  id: "l3qlu0ceyl",
  name: "MCP MySQL Server",
  description:
    "Facilitates interaction with a local MySQL database via a RESTful API, supporting database queries and real-time updates with integration for Cursor MCP services.",
  image: "https://github.com/TristanLib.png",
  actions: [],
  githubUrl: "https://github.com/TristanLib/mcp_server_mysql_windows",
  _varName: "mcpMysqlServerPlugin",
};

const dockerMcpServer1Plugin: Plugin = {
  id: "lqu9w7f3jf",
  name: "Docker MCP Server",
  description:
    "Facilitates isolated code execution within Docker containers, enabling secure multi-language script execution and integration with language models like Claude via the Model Context Protocol.",
  image: "https://github.com/zaycruz.png",
  actions: [],
  githubUrl: "https://github.com/zaycruz/docker_mcp",
  _varName: "dockerMcpServer1Plugin",
};

const firebaseMcpPlugin: Plugin = {
  id: "x4i8z2xmrq",
  name: "Firebase MCP",
  description:
    "The Firebase MCP server provides a standardized interface to interact with Firebase services, including Firebase Authentication, Firestore, and Firebase Storage.",
  image: "https://github.com/gannonh.png",
  actions: [
    {
      name: "firestore_add_document",
      description: "Add a document to a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Document data",
          required: true,
        },
      ],
    },
    {
      name: "firestore_list_collections",
      description:
        "List collections in Firestore. If documentPath is provided, returns subcollections under that document; otherwise returns root collections.",
      parameters: [
        {
          name: "documentPath",
          type: "string",
          description: "Optional parent document path",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of collections to return",
          required: false,
        },
        {
          name: "pageToken",
          type: "string",
          description: "Token for pagination to get the next page of results",
          required: false,
        },
      ],
    },
    {
      name: "firestore_list_documents",
      description:
        "List documents from a Firestore collection with optional filtering",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "filters",
          type: "object array",
          description: "Array of filter conditions",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of documents to return",
          required: false,
        },
        {
          name: "pageToken",
          type: "string",
          description: "Token for pagination to get the next page of results",
          required: false,
        },
      ],
    },
    {
      name: "firestore_get_document",
      description: "Get a document from a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "firestore_update_document",
      description: "Update a document in a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Updated document data",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "firestore_delete_document",
      description: "Delete a document from a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "auth_get_user",
      description: "Get a user by ID or email from Firebase Authentication",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "User ID or email address",
          required: true,
        },
      ],
    },
    {
      name: "storage_list_files",
      description: "List files in a given path in Firebase Storage",
      parameters: [
        {
          name: "directoryPath",
          type: "string",
          description:
            "The optional path to list files from. If not provided, the root is used.",
          required: false,
        },
      ],
    },
    {
      name: "storage_get_file_info",
      description: "Get file information including metadata and download URL",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "The path of the file to get information for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/gannonh/firebase-mcp",
  _varName: "firebaseMcpPlugin",
};

const mcpserverstravaPlugin: Plugin = {
  id: "35t2pc2ntw",
  name: "mcp-server-strava",
  description: "Integration Strava API с Model Context Protocol SDK",
  image: "https://github.com/rbctmz.png",
  actions: [],
  githubUrl: "https://github.com/rbctmz/mcp-server-strava",
  _varName: "mcpserverstravaPlugin",
};

const sanderkoogermcpserverragdocsPlugin: Plugin = {
  id: "g4jkr5rjt5",
  name: "@sanderkooger/mcp-server-ragdocs",
  description:
    "An MCP server implementation that provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context.\n\nUses Ollama or OpenAI to generate embeddings.\n\nDocker files included",
  image: "https://github.com/sanderkooger.png",
  actions: [],
  githubUrl: "https://github.com/sanderkooger/mcp-server-ragdocs",
  _varName: "sanderkoogermcpserverragdocsPlugin",
};

const googleSearchMcpServerPlugin: Plugin = {
  id: "8m8reyzrcd",
  name: "Google Search MCP Server",
  description:
    "An MCP (Model Context Protocol) server that provides Google search capabilities and webpage content analysis tools. This server enables AI models to perform Google searches and analyze webpage content programmatically.",
  image: "https://github.com/mixelpixx.png",
  actions: [
    {
      name: "google_search",
      description:
        "Search Google and return relevant results from the web. This tool finds web pages, articles, and information on specific topics using Google's search engine. Results include titles, snippets, and URLs that can be analyzed further using extract_webpage_content.",
      parameters: [
        {
          name: "country",
          type: "string",
          description:
            'Restrict results to a specific country using ISO 3166-1 alpha-2 codes. Examples: "us" (United States), "uk" (United Kingdom), "ca" (Canada), "au" (Australia).',
          required: false,
        },
        {
          name: "date_restrict",
          type: "string",
          description:
            'Restrict results to a specific time period. Format: [d|w|m|y][number] e.g., "d1" (past day), "w2" (past 2 weeks), "m3" (past 3 months), "y1" (past year).',
          required: false,
        },
        {
          name: "language",
          type: "string",
          description:
            'Restrict results to a specific language using ISO 639-1 codes. Examples: "en" (English), "es" (Spanish), "fr" (French), "de" (German), "ja" (Japanese).',
          required: false,
        },
        {
          name: "num_results",
          type: "number",
          description:
            "Number of results to return (default: 5, max: 10). Increase for broader coverage, decrease for faster response.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Search query - be specific and use quotes for exact matches. For best results, use clear keywords and avoid very long queries.",
          required: true,
        },
        {
          name: "safe_search",
          type: "string",
          description:
            'Safe search level: "off" (no filtering), "medium" (moderate filtering), "high" (strict filtering).',
          required: false,
        },
      ],
    },
    {
      name: "extract_webpage_content",
      description:
        "Extract and analyze content from a webpage, converting it to readable text. This tool fetches the main content while removing ads, navigation elements, and other clutter. Use it to get detailed information from specific pages found via google_search. Works with most common webpage formats including articles, blogs, and documentation.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "Full URL of the webpage to extract content from (must start with http:// or https://). Ensure the URL is from a public webpage and not behind authentication.",
          required: true,
        },
      ],
    },
    {
      name: "extract_multiple_webpages",
      description:
        "Extract and analyze content from multiple webpages in a single request. This tool is ideal for comparing information across different sources or gathering comprehensive information on a topic. Limited to 5 URLs per request to maintain performance.",
      parameters: [
        {
          name: "urls",
          type: "string array",
          description:
            "Array of webpage URLs to extract content from. Each URL must be public and start with http:// or https://. Maximum 5 URLs per request.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mixelpixx/Google-Search-MCP-Server",
  _varName: "googleSearchMcpServerPlugin",
};

const woocommerceMcpServerPlugin: Plugin = {
  id: "6cg08xtbwq",
  name: "WooCommerce MCP Server",
  description:
    "WooCommerce MCP Server enables interaction with WooCommerce stores through the WordPress REST API. It provides comprehensive tools for managing all aspects of products, orders, customers, shipping, taxes, discounts, and store configuration using JSON-RPC 2.0 protocol.",
  image: "https://github.com/techspawn.png",
  actions: [],
  githubUrl: "https://github.com/techspawn/woocommerce-mcp-server",
  _varName: "woocommerceMcpServerPlugin",
};

const noaatidesandcurrentsmcpPlugin: Plugin = {
  id: "ro2rz2c734",
  name: "noaa-tidesandcurrents-mcp",
  description:
    "This is an MCP (Model Context Protocol) server that provides tools for interacting with the NOAA Tides and Currents API.",
  image: "https://github.com/RyanCardin15.png",
  actions: [
    {
      name: "get_water_levels",
      description: "Get water level data for a station",
      parameters: [
        {
          name: "begin_date",
          type: "string",
          description: "Start date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "date",
          type: "string",
          description:
            'Date to retrieve data for ("today", "latest", "recent", or specific date)',
          required: false,
        },
        {
          name: "datum",
          type: "string",
          description: "Datum to use (MLLW, MSL, etc.)",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml, csv)",
          required: false,
        },
        {
          name: "range",
          type: "number",
          description: "Number of hours to retrieve data for",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description: "Station ID",
          required: true,
        },
        {
          name: "time_zone",
          type: "string",
          description: "Time zone (gmt, lst, lst_ldt)",
          required: false,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
      ],
    },
    {
      name: "get_tide_predictions",
      description: "Get tide prediction data",
      parameters: [
        {
          name: "begin_date",
          type: "string",
          description: "Start date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "date",
          type: "string",
          description:
            'Date to retrieve data for ("today", "latest", "recent", or specific date)',
          required: false,
        },
        {
          name: "datum",
          type: "string",
          description: "Datum to use (MLLW, MSL, etc.)",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml, csv)",
          required: false,
        },
        {
          name: "interval",
          type: "string",
          description: "Interval (hilo, hl, h, or a number for minutes)",
          required: false,
        },
        {
          name: "range",
          type: "number",
          description: "Number of hours to retrieve data for",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description: "Station ID",
          required: true,
        },
        {
          name: "time_zone",
          type: "string",
          description: "Time zone (gmt, lst, lst_ldt)",
          required: false,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
      ],
    },
    {
      name: "get_currents",
      description: "Get currents data for a station",
      parameters: [
        {
          name: "begin_date",
          type: "string",
          description: "Start date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "bin",
          type: "number",
          description: "Bin number",
          required: false,
        },
        {
          name: "date",
          type: "string",
          description:
            'Date to retrieve data for ("today", "latest", "recent", or specific date)',
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml, csv)",
          required: false,
        },
        {
          name: "range",
          type: "number",
          description: "Number of hours to retrieve data for",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description: "Station ID",
          required: true,
        },
        {
          name: "time_zone",
          type: "string",
          description: "Time zone (gmt, lst, lst_ldt)",
          required: false,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
      ],
    },
    {
      name: "get_current_predictions",
      description: "Get current predictions",
      parameters: [
        {
          name: "begin_date",
          type: "string",
          description: "Start date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "bin",
          type: "number",
          description: "Bin number",
          required: false,
        },
        {
          name: "date",
          type: "string",
          description:
            'Date to retrieve data for ("today", "latest", "recent", or specific date)',
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml, csv)",
          required: false,
        },
        {
          name: "interval",
          type: "string",
          description: "Interval (MAX_SLACK or a number for minutes)",
          required: false,
        },
        {
          name: "range",
          type: "number",
          description: "Number of hours to retrieve data for",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description: "Station ID",
          required: true,
        },
        {
          name: "time_zone",
          type: "string",
          description: "Time zone (gmt, lst, lst_ldt)",
          required: false,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
        {
          name: "vel_type",
          type: "string",
          description: "Velocity type (speed_dir or default)",
          required: false,
        },
      ],
    },
    {
      name: "get_meteorological_data",
      description: "Get meteorological data",
      parameters: [
        {
          name: "begin_date",
          type: "string",
          description: "Start date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "date",
          type: "string",
          description:
            'Date to retrieve data for ("today", "latest", "recent", or specific date)',
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date (YYYYMMDD or MM/DD/YYYY)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml, csv)",
          required: false,
        },
        {
          name: "product",
          type: "string",
          description: "Product (air_temperature, wind, etc.)",
          required: true,
        },
        {
          name: "range",
          type: "number",
          description: "Number of hours to retrieve data for",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description: "Station ID",
          required: true,
        },
        {
          name: "time_zone",
          type: "string",
          description: "Time zone (gmt, lst, lst_ldt)",
          required: false,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
      ],
    },
    {
      name: "get_stations",
      description: "Get list of stations",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Station type (waterlevels, currents, etc.)",
          required: false,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
      ],
    },
    {
      name: "get_station_details",
      description: "Get detailed information about a station",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (json, xml)",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description: "Station ID",
          required: true,
        },
        {
          name: "units",
          type: "string",
          description: 'Units to use ("english" or "metric")',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RyanCardin15/NOAA",
  _varName: "noaatidesandcurrentsmcpPlugin",
};

const azuredevopsmcpPlugin: Plugin = {
  id: "z7mxfcinp8",
  name: "azure-devops-mcp",
  description:
    "This server provides a convenient API for interacting with Azure DevOps services, enabling AI assistants and other tools to manage work items, code repositories, boards, sprints, and more. Built with the Model Context Protocol, it provides a standardized interface for communicating with Azure DevOps",
  image: "https://github.com/RyanCardin15.png",
  actions: [
    {
      name: "listWorkItems",
      description: "List work items based on a WIQL query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "WIQL query to get work items",
          required: true,
        },
      ],
    },
    {
      name: "getWorkItemById",
      description: "Get a specific work item by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Work item ID",
          required: true,
        },
      ],
    },
    {
      name: "searchWorkItems",
      description: "Search for work items by text",
      parameters: [
        {
          name: "searchText",
          type: "string",
          description: "Text to search for in work items",
          required: true,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of work items to return",
          required: false,
        },
      ],
    },
    {
      name: "getRecentlyUpdatedWorkItems",
      description: "Get recently updated work items",
      parameters: [
        {
          name: "skip",
          type: "number",
          description: "Number of work items to skip",
          required: false,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of work items to return",
          required: false,
        },
      ],
    },
    {
      name: "getMyWorkItems",
      description: "Get work items assigned to you",
      parameters: [
        {
          name: "state",
          type: "string",
          description: "Filter by work item state",
          required: false,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of work items to return",
          required: false,
        },
      ],
    },
    {
      name: "createWorkItem",
      description: "Create a new work item",
      parameters: [
        {
          name: "additionalFields",
          type: "object",
          description: "Additional fields to set on the work item",
          required: false,
        },
        {
          name: "areaPath",
          type: "string",
          description: "Area path for the work item",
          required: false,
        },
        {
          name: "assignedTo",
          type: "string",
          description: "User to assign the work item to",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the work item",
          required: false,
        },
        {
          name: "iterationPath",
          type: "string",
          description: "Iteration path for the work item",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Initial state of the work item",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the work item",
          required: true,
        },
        {
          name: "workItemType",
          type: "string",
          description: "Type of work item to create",
          required: true,
        },
      ],
    },
    {
      name: "updateWorkItem",
      description: "Update an existing work item",
      parameters: [
        {
          name: "fields",
          type: "object",
          description: "Fields to update on the work item",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "ID of the work item to update",
          required: true,
        },
      ],
    },
    {
      name: "addWorkItemComment",
      description: "Add a comment to a work item",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "ID of the work item",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Comment text",
          required: true,
        },
      ],
    },
    {
      name: "updateWorkItemState",
      description: "Update the state of a work item",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment explaining the state change",
          required: false,
        },
        {
          name: "id",
          type: "number",
          description: "ID of the work item",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "New state for the work item",
          required: true,
        },
      ],
    },
    {
      name: "assignWorkItem",
      description: "Assign a work item to a user",
      parameters: [
        {
          name: "assignedTo",
          type: "string",
          description: "User to assign the work item to",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "ID of the work item",
          required: true,
        },
      ],
    },
    {
      name: "createLink",
      description: "Create a link between work items",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment explaining the link",
          required: false,
        },
        {
          name: "linkType",
          type: "string",
          description: "Type of link to create",
          required: true,
        },
        {
          name: "sourceId",
          type: "number",
          description: "ID of the source work item",
          required: true,
        },
        {
          name: "targetId",
          type: "number",
          description: "ID of the target work item",
          required: true,
        },
      ],
    },
    {
      name: "bulkCreateWorkItems",
      description: "Create or update multiple work items in a single operation",
      parameters: [
        {
          name: "workItems",
          type: "array",
          description: "Array of work items to create or update",
          required: true,
        },
      ],
    },
    {
      name: "getBoards",
      description: "Get all boards for a team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "getBoardColumns",
      description: "Get columns for a specific board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "getBoardItems",
      description: "Get items on a specific board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "moveCardOnBoard",
      description: "Move a card on a board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board",
          required: true,
        },
        {
          name: "columnId",
          type: "string",
          description: "ID of the column to move to",
          required: true,
        },
        {
          name: "position",
          type: "number",
          description: "Position within the column",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
        {
          name: "workItemId",
          type: "number",
          description: "ID of the work item to move",
          required: true,
        },
      ],
    },
    {
      name: "getSprints",
      description: "Get all sprints for a team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "getCurrentSprint",
      description: "Get the current sprint",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "getSprintWorkItems",
      description: "Get work items in a specific sprint",
      parameters: [
        {
          name: "sprintId",
          type: "string",
          description: "ID of the sprint",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "getSprintCapacity",
      description: "Get capacity for a specific sprint",
      parameters: [
        {
          name: "sprintId",
          type: "string",
          description: "ID of the sprint",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "getTeamMembers",
      description: "Get members of a team",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "Team ID (uses default team if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "listProjects",
      description: "List all projects",
      parameters: [
        {
          name: "skip",
          type: "number",
          description: "Number of projects to skip",
          required: false,
        },
        {
          name: "stateFilter",
          type: "string",
          description: "Filter by project state",
          required: false,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of projects to return",
          required: false,
        },
      ],
    },
    {
      name: "getProjectDetails",
      description: "Get details of a specific project",
      parameters: [
        {
          name: "includeCapabilities",
          type: "boolean",
          description: "Include project capabilities",
          required: false,
        },
        {
          name: "includeHistory",
          type: "boolean",
          description: "Include project history",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
      ],
    },
    {
      name: "createProject",
      description: "Create a new project",
      parameters: [
        {
          name: "capabilities",
          type: "object",
          description: "Project capabilities",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the project",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the project",
          required: true,
        },
        {
          name: "processTemplateId",
          type: "string",
          description: "Process template ID",
          required: false,
        },
        {
          name: "visibility",
          type: "string",
          description: "Visibility of the project",
          required: false,
        },
      ],
    },
    {
      name: "getAreas",
      description: "Get areas for a project",
      parameters: [
        {
          name: "depth",
          type: "number",
          description: "Maximum depth of the area hierarchy",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
      ],
    },
    {
      name: "getIterations",
      description: "Get iterations for a project",
      parameters: [
        {
          name: "includeDeleted",
          type: "boolean",
          description: "Include deleted iterations",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
      ],
    },
    {
      name: "createArea",
      description: "Create a new area in a project",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the area",
          required: true,
        },
        {
          name: "parentPath",
          type: "string",
          description: "Path of the parent area",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
      ],
    },
    {
      name: "createIteration",
      description: "Create a new iteration in a project",
      parameters: [
        {
          name: "finishDate",
          type: "string",
          description: "End date of the iteration",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the iteration",
          required: true,
        },
        {
          name: "parentPath",
          type: "string",
          description: "Path of the parent iteration",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date of the iteration",
          required: false,
        },
      ],
    },
    {
      name: "getProcesses",
      description: "Get all processes",
      parameters: [
        {
          name: "expandIcon",
          type: "boolean",
          description: "Include process icons",
          required: false,
        },
      ],
    },
    {
      name: "getWorkItemTypes",
      description: "Get work item types for a process",
      parameters: [
        {
          name: "processId",
          type: "string",
          description: "ID of the process",
          required: true,
        },
      ],
    },
    {
      name: "getWorkItemTypeFields",
      description: "Get fields for a work item type",
      parameters: [
        {
          name: "processId",
          type: "string",
          description: "ID of the process",
          required: true,
        },
        {
          name: "witRefName",
          type: "string",
          description: "Reference name of the work item type",
          required: true,
        },
      ],
    },
    {
      name: "listRepositories",
      description: "List all repositories",
      parameters: [
        {
          name: "includeAllUrls",
          type: "boolean",
          description: "Include all URLs",
          required: false,
        },
        {
          name: "includeHidden",
          type: "boolean",
          description: "Include hidden repositories",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Filter by project",
          required: false,
        },
      ],
    },
    {
      name: "getRepository",
      description: "Get details of a specific repository",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
      ],
    },
    {
      name: "createRepository",
      description: "Create a new repository",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the repository",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
      ],
    },
    {
      name: "listBranches",
      description: "List branches in a repository",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "Filter branches by name",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of branches to return",
          required: false,
        },
      ],
    },
    {
      name: "searchCode",
      description: "Search for code in repositories",
      parameters: [
        {
          name: "fileExtension",
          type: "string",
          description: "File extension to filter by",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: false,
        },
        {
          name: "searchText",
          type: "string",
          description: "Text to search for",
          required: true,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "browseRepository",
      description: "Browse the contents of a repository",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path within the repository",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "versionDescriptor",
          type: "object",
          description: "Version descriptor",
          required: false,
        },
      ],
    },
    {
      name: "getFileContent",
      description: "Get the content of a file",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the file",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "versionDescriptor",
          type: "object",
          description: "Version descriptor",
          required: false,
        },
      ],
    },
    {
      name: "getCommitHistory",
      description: "Get commit history for a repository",
      parameters: [
        {
          name: "itemPath",
          type: "string",
          description: "Path to filter commits by",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of commits to skip",
          required: false,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of commits to return",
          required: false,
        },
      ],
    },
    {
      name: "listPullRequests",
      description: "List pull requests",
      parameters: [
        {
          name: "creatorId",
          type: "string",
          description: "Filter by creator",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "reviewerId",
          type: "string",
          description: "Filter by reviewer",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of pull requests to skip",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by status",
          required: false,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of pull requests to return",
          required: false,
        },
      ],
    },
    {
      name: "createPullRequest",
      description: "Create a new pull request",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the pull request",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "reviewers",
          type: "string array",
          description: "List of reviewers",
          required: false,
        },
        {
          name: "sourceRefName",
          type: "string",
          description: "Source branch",
          required: true,
        },
        {
          name: "targetRefName",
          type: "string",
          description: "Target branch",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the pull request",
          required: true,
        },
      ],
    },
    {
      name: "getPullRequest",
      description: "Get details of a specific pull request",
      parameters: [
        {
          name: "pullRequestId",
          type: "number",
          description: "ID of the pull request",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
      ],
    },
    {
      name: "getPullRequestComments",
      description: "Get comments on a pull request",
      parameters: [
        {
          name: "pullRequestId",
          type: "number",
          description: "ID of the pull request",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of comments to skip",
          required: false,
        },
        {
          name: "threadId",
          type: "number",
          description: "ID of a specific thread",
          required: false,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of comments to return",
          required: false,
        },
      ],
    },
    {
      name: "approvePullRequest",
      description: "Approve a pull request",
      parameters: [
        {
          name: "pullRequestId",
          type: "number",
          description: "ID of the pull request",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
      ],
    },
    {
      name: "mergePullRequest",
      description: "Merge a pull request",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment for the merge commit",
          required: false,
        },
        {
          name: "mergeStrategy",
          type: "string",
          description: "Merge strategy",
          required: false,
        },
        {
          name: "pullRequestId",
          type: "number",
          description: "ID of the pull request",
          required: true,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
      ],
    },
    {
      name: "runAutomatedTests",
      description: "Execute automated test suites",
      parameters: [
        {
          name: "parallelExecution",
          type: "boolean",
          description: "Whether to run tests in parallel",
          required: false,
        },
        {
          name: "testEnvironment",
          type: "string",
          description: "Environment to run tests in",
          required: false,
        },
        {
          name: "testPlanId",
          type: "number",
          description: "ID of the test plan to run",
          required: false,
        },
        {
          name: "testSuiteId",
          type: "number",
          description: "ID of the test suite to run",
          required: false,
        },
      ],
    },
    {
      name: "getTestAutomationStatus",
      description: "Check status of automated test execution",
      parameters: [
        {
          name: "testRunId",
          type: "number",
          description: "ID of the test run to check status for",
          required: true,
        },
      ],
    },
    {
      name: "configureTestAgents",
      description: "Configure and manage test agents",
      parameters: [
        {
          name: "agentName",
          type: "string",
          description: "Name of the test agent to configure",
          required: true,
        },
        {
          name: "capabilities",
          type: "object",
          description: "Capabilities to set for the agent",
          required: false,
        },
        {
          name: "enabled",
          type: "boolean",
          description: "Whether the agent should be enabled",
          required: false,
        },
      ],
    },
    {
      name: "createTestDataGenerator",
      description: "Generate test data for automated tests",
      parameters: [
        {
          name: "dataSchema",
          type: "object",
          description: "Schema for the test data to generate",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the test data generator",
          required: true,
        },
        {
          name: "recordCount",
          type: "number",
          description: "Number of records to generate",
          required: false,
        },
      ],
    },
    {
      name: "manageTestEnvironments",
      description: "Manage test environments for different test types",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "environmentName",
          type: "string",
          description: "Name of the test environment",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Properties for the environment",
          required: false,
        },
      ],
    },
    {
      name: "getTestFlakiness",
      description: "Analyze and report on test flakiness",
      parameters: [
        {
          name: "testId",
          type: "number",
          description: "ID of a specific test to analyze",
          required: false,
        },
        {
          name: "testRunIds",
          type: "number array",
          description: "Specific test runs to analyze",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for analysis (e.g., '30d')",
          required: false,
        },
      ],
    },
    {
      name: "getTestGapAnalysis",
      description: "Identify gaps in test coverage",
      parameters: [
        {
          name: "areaPath",
          type: "string",
          description: "Area path to analyze",
          required: false,
        },
        {
          name: "codeChangesOnly",
          type: "boolean",
          description: "Only analyze recent code changes",
          required: false,
        },
      ],
    },
    {
      name: "runTestImpactAnalysis",
      description: "Determine which tests to run based on code changes",
      parameters: [
        {
          name: "buildId",
          type: "number",
          description: "ID of the build to analyze",
          required: true,
        },
        {
          name: "changedFiles",
          type: "string array",
          description: "List of changed files",
          required: false,
        },
      ],
    },
    {
      name: "getTestHealthDashboard",
      description: "View overall test health metrics",
      parameters: [
        {
          name: "includeTrends",
          type: "boolean",
          description: "Include trend data",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for metrics (e.g., '90d')",
          required: false,
        },
      ],
    },
    {
      name: "runTestOptimization",
      description: "Optimize test suite execution for faster feedback",
      parameters: [
        {
          name: "optimizationGoal",
          type: "string",
          description: "Optimization goal",
          required: true,
        },
        {
          name: "testPlanId",
          type: "number",
          description: "ID of the test plan to optimize",
          required: true,
        },
      ],
    },
    {
      name: "createExploratorySessions",
      description: "Create new exploratory testing sessions",
      parameters: [
        {
          name: "areaPath",
          type: "string",
          description: "Area path for the session",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the session",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the exploratory session",
          required: true,
        },
      ],
    },
    {
      name: "recordExploratoryTestResults",
      description: "Record findings during exploratory testing",
      parameters: [
        {
          name: "attachments",
          type: "array",
          description: "Attachments for the findings",
          required: false,
        },
        {
          name: "findings",
          type: "string array",
          description: "List of findings to record",
          required: true,
        },
        {
          name: "sessionId",
          type: "number",
          description: "ID of the exploratory session",
          required: true,
        },
      ],
    },
    {
      name: "convertFindingsToWorkItems",
      description: "Convert exploratory test findings to work items",
      parameters: [
        {
          name: "findingIds",
          type: "number array",
          description: "IDs of findings to convert",
          required: true,
        },
        {
          name: "sessionId",
          type: "number",
          description: "ID of the exploratory session",
          required: true,
        },
        {
          name: "workItemType",
          type: "string",
          description: "Type of work item to create",
          required: false,
        },
      ],
    },
    {
      name: "getExploratoryTestStatistics",
      description: "Get statistics on exploratory testing activities",
      parameters: [
        {
          name: "timeRange",
          type: "string",
          description: "Time range for statistics (e.g., '90d')",
          required: false,
        },
        {
          name: "userId",
          type: "string",
          description: "Filter by specific user",
          required: false,
        },
      ],
    },
    {
      name: "runSecurityScan",
      description: "Run security scans on repositories",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to scan",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository to scan",
          required: true,
        },
        {
          name: "scanType",
          type: "string",
          description: "Type of security scan to run",
          required: false,
        },
      ],
    },
    {
      name: "getSecurityScanResults",
      description: "Get results from security scans",
      parameters: [
        {
          name: "scanId",
          type: "string",
          description: "ID of the scan to get results for",
          required: true,
        },
        {
          name: "severity",
          type: "string",
          description: "Filter results by severity",
          required: false,
        },
      ],
    },
    {
      name: "trackSecurityVulnerabilities",
      description: "Track and manage security vulnerabilities",
      parameters: [
        {
          name: "status",
          type: "string",
          description: "Filter by vulnerability status",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for tracking (e.g., '90d')",
          required: false,
        },
        {
          name: "vulnerabilityId",
          type: "string",
          description: "ID of a specific vulnerability to track",
          required: false,
        },
      ],
    },
    {
      name: "generateSecurityCompliance",
      description: "Generate security compliance reports",
      parameters: [
        {
          name: "includeEvidence",
          type: "boolean",
          description: "Include evidence in the report",
          required: false,
        },
        {
          name: "standardType",
          type: "string",
          description: "Compliance standard to report on",
          required: false,
        },
      ],
    },
    {
      name: "integrateSarifResults",
      description: "Import and process SARIF format security results",
      parameters: [
        {
          name: "createWorkItems",
          type: "boolean",
          description: "Create work items from findings",
          required: false,
        },
        {
          name: "sarifFilePath",
          type: "string",
          description: "Path to the SARIF file to import",
          required: true,
        },
      ],
    },
    {
      name: "runComplianceChecks",
      description: "Run compliance checks against standards",
      parameters: [
        {
          name: "complianceStandard",
          type: "string",
          description: "Compliance standard to check against",
          required: true,
        },
        {
          name: "scopeId",
          type: "string",
          description: "Scope of the compliance check",
          required: false,
        },
      ],
    },
    {
      name: "getComplianceStatus",
      description: "Get current compliance status",
      parameters: [
        {
          name: "includeHistory",
          type: "boolean",
          description: "Include historical compliance data",
          required: false,
        },
        {
          name: "standardId",
          type: "string",
          description: "ID of the compliance standard",
          required: false,
        },
      ],
    },
    {
      name: "createComplianceReport",
      description: "Create compliance reports for auditing",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Format of the report",
          required: false,
        },
        {
          name: "standardId",
          type: "string",
          description: "ID of the compliance standard",
          required: true,
        },
      ],
    },
    {
      name: "manageSecurityPolicies",
      description: "Manage security policies",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform on the policy",
          required: true,
        },
        {
          name: "policyDefinition",
          type: "object",
          description: "Definition of the policy",
          required: false,
        },
        {
          name: "policyName",
          type: "string",
          description: "Name of the security policy",
          required: true,
        },
      ],
    },
    {
      name: "trackSecurityAwareness",
      description: "Track security awareness and training",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "ID of the team to track",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for tracking (e.g., '90d')",
          required: false,
        },
        {
          name: "trainingId",
          type: "string",
          description: "ID of specific training to track",
          required: false,
        },
      ],
    },
    {
      name: "rotateSecrets",
      description: "Rotate secrets and credentials",
      parameters: [
        {
          name: "force",
          type: "boolean",
          description: "Force rotation even if not expired",
          required: false,
        },
        {
          name: "secretName",
          type: "string",
          description: "Name of the secret to rotate",
          required: false,
        },
        {
          name: "secretType",
          type: "string",
          description: "Type of secret to rotate",
          required: false,
        },
      ],
    },
    {
      name: "auditSecretUsage",
      description: "Audit usage of secrets across services",
      parameters: [
        {
          name: "secretName",
          type: "string",
          description: "Name of the secret to audit",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for the audit (e.g., '30d')",
          required: false,
        },
      ],
    },
    {
      name: "vaultIntegration",
      description: "Integrate with secret vaults",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "secretPath",
          type: "string",
          description: "Path to the secret in the vault",
          required: false,
        },
        {
          name: "secretValue",
          type: "string",
          description: "Value to set (for 'set' action)",
          required: false,
        },
        {
          name: "vaultUrl",
          type: "string",
          description: "URL of the vault to integrate with",
          required: true,
        },
      ],
    },
    {
      name: "listArtifactFeeds",
      description: "List artifact feeds in the organization",
      parameters: [
        {
          name: "feedType",
          type: "string",
          description: "Type of feeds to list",
          required: false,
        },
        {
          name: "includeDeleted",
          type: "boolean",
          description: "Include deleted feeds",
          required: false,
        },
      ],
    },
    {
      name: "getPackageVersions",
      description: "Get versions of a package in a feed",
      parameters: [
        {
          name: "feedId",
          type: "string",
          description: "ID of the feed",
          required: true,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package",
          required: true,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of versions to return",
          required: false,
        },
      ],
    },
    {
      name: "publishPackage",
      description: "Publish a package to a feed",
      parameters: [
        {
          name: "feedId",
          type: "string",
          description: "ID of the feed to publish to",
          required: true,
        },
        {
          name: "packagePath",
          type: "string",
          description: "Path to the package file",
          required: true,
        },
        {
          name: "packageType",
          type: "string",
          description: "Type of package",
          required: true,
        },
        {
          name: "packageVersion",
          type: "string",
          description: "Version of the package",
          required: false,
        },
      ],
    },
    {
      name: "promotePackage",
      description: "Promote a package version between views",
      parameters: [
        {
          name: "feedId",
          type: "string",
          description: "ID of the feed",
          required: true,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package",
          required: true,
        },
        {
          name: "packageVersion",
          type: "string",
          description: "Version of the package",
          required: true,
        },
        {
          name: "sourceView",
          type: "string",
          description: "Source view (e.g., 'prerelease')",
          required: true,
        },
        {
          name: "targetView",
          type: "string",
          description: "Target view (e.g., 'release')",
          required: true,
        },
      ],
    },
    {
      name: "deletePackageVersion",
      description: "Delete a version of a package",
      parameters: [
        {
          name: "feedId",
          type: "string",
          description: "ID of the feed",
          required: true,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package",
          required: true,
        },
        {
          name: "packageVersion",
          type: "string",
          description: "Version of the package to delete",
          required: true,
        },
        {
          name: "permanent",
          type: "boolean",
          description: "Permanently delete the package version",
          required: false,
        },
      ],
    },
    {
      name: "listContainerImages",
      description: "List container images in a repository",
      parameters: [
        {
          name: "includeDeleted",
          type: "boolean",
          description: "Include deleted images",
          required: false,
        },
        {
          name: "includeManifests",
          type: "boolean",
          description: "Include image manifests",
          required: false,
        },
        {
          name: "repositoryName",
          type: "string",
          description: "Name of the container repository",
          required: false,
        },
      ],
    },
    {
      name: "getContainerImageTags",
      description: "Get tags for a container image",
      parameters: [
        {
          name: "imageName",
          type: "string",
          description: "Name of the container image",
          required: true,
        },
        {
          name: "repositoryName",
          type: "string",
          description: "Name of the container repository",
          required: true,
        },
        {
          name: "top",
          type: "number",
          description: "Maximum number of tags to return",
          required: false,
        },
      ],
    },
    {
      name: "scanContainerImage",
      description:
        "Scan a container image for vulnerabilities and compliance issues",
      parameters: [
        {
          name: "imageTag",
          type: "string",
          description: "Tag of the container image to scan",
          required: true,
        },
        {
          name: "repositoryName",
          type: "string",
          description: "Name of the container repository",
          required: true,
        },
        {
          name: "scanType",
          type: "string",
          description: "Type of scan to perform",
          required: false,
        },
      ],
    },
    {
      name: "manageContainerPolicies",
      description: "Manage policies for container repositories",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform on the policy",
          required: true,
        },
        {
          name: "policySettings",
          type: "object",
          description: "Settings for the policy when setting",
          required: false,
        },
        {
          name: "policyType",
          type: "string",
          description: "Type of policy to manage",
          required: true,
        },
        {
          name: "repositoryName",
          type: "string",
          description: "Name of the container repository",
          required: true,
        },
      ],
    },
    {
      name: "manageUniversalPackages",
      description: "Manage universal packages",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the universal package",
          required: true,
        },
        {
          name: "packagePath",
          type: "string",
          description: "Path for package upload or download",
          required: false,
        },
        {
          name: "packageVersion",
          type: "string",
          description: "Version of the package",
          required: false,
        },
      ],
    },
    {
      name: "createPackageDownloadReport",
      description: "Create reports on package downloads",
      parameters: [
        {
          name: "feedId",
          type: "string",
          description: "ID of the feed",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Format of the report",
          required: false,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for the report (e.g., '30d')",
          required: false,
        },
      ],
    },
    {
      name: "checkPackageDependencies",
      description: "Check package dependencies and vulnerabilities",
      parameters: [
        {
          name: "checkVulnerabilities",
          type: "boolean",
          description: "Check for known vulnerabilities",
          required: false,
        },
        {
          name: "includeTransitive",
          type: "boolean",
          description: "Include transitive dependencies",
          required: false,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package to check",
          required: true,
        },
        {
          name: "packageVersion",
          type: "string",
          description: "Version of the package",
          required: false,
        },
      ],
    },
    {
      name: "getAICodeReview",
      description: "Get AI-based code review suggestions",
      parameters: [
        {
          name: "commitId",
          type: "string",
          description: "ID of the commit to review",
          required: false,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to review",
          required: false,
        },
        {
          name: "pullRequestId",
          type: "number",
          description: "ID of the pull request to review",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: false,
        },
      ],
    },
    {
      name: "suggestCodeOptimization",
      description: "Suggest code optimizations using AI",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to optimize",
          required: true,
        },
        {
          name: "lineEnd",
          type: "number",
          description: "Ending line number",
          required: false,
        },
        {
          name: "lineStart",
          type: "number",
          description: "Starting line number",
          required: false,
        },
        {
          name: "optimizationType",
          type: "string",
          description: "Type of optimization to focus on",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
      ],
    },
    {
      name: "identifyCodeSmells",
      description: "Identify potential code smells and anti-patterns",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to analyze",
          required: false,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to analyze",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
        {
          name: "severity",
          type: "string",
          description: "Severity level to filter by",
          required: false,
        },
      ],
    },
    {
      name: "getPredictiveBugAnalysis",
      description: "Predict potential bugs in code changes",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to analyze",
          required: false,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to analyze",
          required: false,
        },
        {
          name: "pullRequestId",
          type: "number",
          description: "ID of the pull request",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: true,
        },
      ],
    },
    {
      name: "getDeveloperProductivity",
      description: "Measure developer productivity metrics",
      parameters: [
        {
          name: "includeMetrics",
          type: "string array",
          description: "Specific metrics to include",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "ID of the team",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for analysis (e.g., '30d', '3m')",
          required: false,
        },
        {
          name: "userId",
          type: "string",
          description: "ID of the user",
          required: false,
        },
      ],
    },
    {
      name: "getPredictiveEffortEstimation",
      description: "AI-based effort estimation for work items",
      parameters: [
        {
          name: "areaPath",
          type: "string",
          description: "Area path to filter work items",
          required: false,
        },
        {
          name: "workItemIds",
          type: "number array",
          description: "IDs of work items to estimate",
          required: false,
        },
        {
          name: "workItemType",
          type: "string",
          description: "Type of work items to estimate",
          required: false,
        },
      ],
    },
    {
      name: "getCodeQualityTrends",
      description: "Track code quality trends over time",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to analyze",
          required: false,
        },
        {
          name: "metrics",
          type: "string array",
          description: "Specific metrics to include",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "ID of the repository",
          required: false,
        },
        {
          name: "timeRange",
          type: "string",
          description: "Time range for analysis (e.g., '90d', '6m')",
          required: false,
        },
      ],
    },
    {
      name: "suggestWorkItemRefinements",
      description: "Get AI suggestions for work item refinements",
      parameters: [
        {
          name: "areaPath",
          type: "string",
          description: "Area path to filter work items",
          required: false,
        },
        {
          name: "workItemId",
          type: "number",
          description: "ID of the work item to refine",
          required: false,
        },
        {
          name: "workItemType",
          type: "string",
          description: "Type of work item",
          required: false,
        },
      ],
    },
    {
      name: "suggestAutomationOpportunities",
      description: "Identify opportunities for automation",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: false,
        },
        {
          name: "scopeType",
          type: "string",
          description: "Type of scope to analyze",
          required: false,
        },
      ],
    },
    {
      name: "createIntelligentAlerts",
      description: "Set up intelligent alerts based on patterns",
      parameters: [
        {
          name: "actions",
          type: "object",
          description: "Actions to take when the alert triggers",
          required: false,
        },
        {
          name: "alertName",
          type: "string",
          description: "Name of the alert",
          required: true,
        },
        {
          name: "alertType",
          type: "string",
          description: "Type of alert to create",
          required: true,
        },
        {
          name: "conditions",
          type: "object",
          description: "Conditions for the alert",
          required: true,
        },
      ],
    },
    {
      name: "predictBuildFailures",
      description: "Predict potential build failures before they occur",
      parameters: [
        {
          name: "buildDefinitionId",
          type: "number",
          description: "ID of the build definition",
          required: true,
        },
        {
          name: "lookbackPeriod",
          type: "string",
          description: "Period to analyze for patterns (e.g., '30d')",
          required: false,
        },
      ],
    },
    {
      name: "optimizeTestSelection",
      description: "Intelligently select tests to run based on changes",
      parameters: [
        {
          name: "buildId",
          type: "number",
          description: "ID of the build",
          required: true,
        },
        {
          name: "changedFiles",
          type: "string array",
          description: "List of changed files",
          required: false,
        },
        {
          name: "maxTestCount",
          type: "number",
          description: "Maximum number of tests to select",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RyanCardin15/AzureDevOps-MCP",
  _varName: "azuredevopsmcpPlugin",
};

const figmamcpPlugin: Plugin = {
  id: "pqweyr4aq9",
  name: "figma-mcp",
  description:
    "Allow your AI coding agents to access Figma files & prototypes directly. You can DM me for any issues / improvements: https://x.com/jasonzhou1993\n\n1. Access all figma pages\n2. Access all figma components\n3. Access figma prototype flows",
  image: "https://github.com/JayZeeDesign.png",
  actions: [
    {
      name: "get_components",
      description:
        "Get components available in a Figma file\n\n        Args:\n            file_key (str): The file key found in the shared Figma URL\n\n        Returns:\n            list[dict]: List of components found in the Figma file\n        ",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "Parameter: file_key",
          required: true,
        },
      ],
    },
    {
      name: "get_node",
      description:
        "Get a specific node from a Figma file\n\n        Args:\n            file_key (str): The file key found in the shared Figma URL, e.g. if url is https://www.figma.com/proto/do4pJqHwNwH1nBrrscu6Ld/Untitled?page-id=0%3A1&node-id=0-3&viewport=361%2C361%2C0.08&t=9SVttILbgMlPWuL0-1&scaling=min-zoom&content-scaling=fixed&starting-point-node-id=0%3A3, then the file key is do4pJqHwNwH1nBrrscu6Ld\n            node_id (str): The ID of the node to retrieve, has to be in format x:x, e.g. in url it will be like 0-3, but it should be 0:3\n\n        Returns:\n            dict: The node data if found, empty dict if not found\n        ",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "Parameter: file_key",
          required: true,
        },
        {
          name: "node_id",
          type: "string",
          description: "Parameter: node_id",
          required: true,
        },
      ],
    },
    {
      name: "get_workflow",
      description:
        "Get workflows available in a Figma file\n\n        Args:\n            file_key (str): The file key found in the shared Figma URL, e.g. if url is https://www.figma.com/proto/do4pJqHwNwH1nBrrscu6Ld/Untitled?page-id=0%3A1&node-id=0-3&viewport=361%2C361%2C0.08&t=9SVttILbgMlPWuL0-1&scaling=min-zoom&content-scaling=fixed&starting-point-node-id=0%3A3, then the file key is do4pJqHwNwH1nBrrscu6Ld\n\n        Returns:\n            list[dict]: List of workflow connections found in the Figma file\n        ",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "Parameter: file_key",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JayZeeDesign/figma-mcp",
  _varName: "figmamcpPlugin",
};

const claudedebugsforyouPlugin: Plugin = {
  id: "iabshscnks",
  name: "claude-debugs-for-you",
  description:
    "Enable Claude (or any other LLM) to interactively debug your code (set breakpoints and evaluate expressions in stack frame).\n\nIt's language-agnostic, assuming debugger console support and valid launch.json for debugging in VSCode.",
  image: "https://github.com/jasonjmcghee.png",
  actions: [],
  githubUrl: "https://github.com/jasonjmcghee/claude-debugs-for-you",
  _varName: "claudedebugsforyouPlugin",
};

const dbmcptoolPlugin: Plugin = {
  id: "krqumx3rsi",
  name: "db-mcp-tool",
  description:
    "A powerful Model Context Protocol (MCP) tool for exploring and managing different types of databases including PostgreSQL, MySQL, and Firestore.",
  image: "https://github.com/wirdes.png",
  actions: [
    {
      name: "!pg",
      description: "Action for !pg",
      parameters: [
        {
          name: "connection",
          type: "object",
          description: "Parameter: connection",
          required: true,
        },
      ],
    },
    {
      name: "!mysql",
      description: "Action for !mysql",
      parameters: [
        {
          name: "connection",
          type: "object",
          description: "Parameter: connection",
          required: true,
        },
      ],
    },
    {
      name: "!firestore",
      description: "Action for !firestore",
      parameters: [
        {
          name: "connection",
          type: "object",
          description: "Parameter: connection",
          required: true,
        },
      ],
    },
    {
      name: "!tables",
      description: "Action for !tables",
      parameters: [],
    },
    {
      name: "!triggers",
      description: "Action for !triggers",
      parameters: [],
    },
    {
      name: "!functions",
      description: "Action for !functions",
      parameters: [],
    },
    {
      name: "!query",
      description: "Action for !query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "!export-db",
      description: "Action for !export-db",
      parameters: [
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "!export-data",
      description: "Action for !export-data",
      parameters: [
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wirdes/db-mcp-tool",
  _varName: "dbmcptoolPlugin",
};

const consolespyPlugin: Plugin = {
  id: "uvy0erohe0",
  name: "ConsoleSpy",
  description:
    "A tool that captures browser console logs and makes them available in Cursor IDE through the Model Context Protocol (MCP).",
  image: "https://github.com/mgsrevolver.png",
  actions: [],
  githubUrl: "https://github.com/mgsrevolver/consolespy",
  _varName: "consolespyPlugin",
};

const giteePlugin: Plugin = {
  id: "cck9xigm1d",
  name: "Gitee",
  description:
    "MCP Tool Server for Gitee, supporting the management of repository files/branches, Issues, and Pull Requests.",
  image: "https://github.com/normal-coder.png",
  actions: [
    {
      name: "create_repository",
      description: "创建 Gitee 仓库",
      parameters: [
        {
          name: "auto_init",
          type: "boolean",
          description: "Whether to automatically initialize the repository",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "gitignore_template",
          type: "string",
          description: "Git Ignore template",
          required: false,
        },
        {
          name: "has_issues",
          type: "boolean",
          description: "Whether to enable Issue functionality",
          required: false,
        },
        {
          name: "has_wiki",
          type: "boolean",
          description: "Whether to enable Wiki functionality",
          required: false,
        },
        {
          name: "homepage",
          type: "string",
          description: "Homepage URL",
          required: false,
        },
        {
          name: "license_template",
          type: "string",
          description: "License template",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Repository path",
          required: false,
        },
        {
          name: "private",
          type: "boolean",
          description: "Whether the repository is private",
          required: false,
        },
      ],
    },
    {
      name: "fork_repository",
      description: "Fork Gitee 仓库",
      parameters: [
        {
          name: "organization",
          type: "string",
          description:
            "Organization path, defaults to personal account if not provided",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description: "在 Gitee 仓库中创建一个新分支",
      parameters: [
        {
          name: "branch_name",
          type: "string",
          description: "Name for the new branch",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "refs",
          type: "string",
          description: "Source reference for the branch, default: master",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "list_branches",
      description: "列出 Gitee 仓库中的分支",
      parameters: [
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "integer",
          description: "Number of items per page, maximum 100",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
      ],
    },
    {
      name: "get_branch",
      description: "获取 Gitee 仓库中的特定分支信息",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "get_file_contents",
      description: "获取 Gitee 仓库中文件或目录的内容",
      parameters: [
        {
          name: "branch",
          type: "string",
          description:
            "Branch name, defaults to the repository's default branch",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "File path",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "create_or_update_file",
      description: "在 Gitee 仓库中创建或更新文件",
      parameters: [
        {
          name: "branch",
          type: "string",
          description:
            "Branch name, defaults to the repository's default branch",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "File content",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "File path",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "sha",
          type: "string",
          description: "File SHA, required when updating an existing file",
          required: false,
        },
      ],
    },
    {
      name: "push_files",
      description: "向 Gitee 仓库提交多个文件",
      parameters: [
        {
          name: "branch",
          type: "string",
          description:
            "Branch name, defaults to the repository's default branch",
          required: false,
        },
        {
          name: "files",
          type: "object array",
          description: "List of files to commit",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "在 Gitee 仓库中创建 Issue",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Users assigned to the issue",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Issue content",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone ID",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "security_hole",
          type: "boolean",
          description: "Whether the issue is private, default is false",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "list_issues",
      description: "列出 Gitee 仓库中的 Issues",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Filter issues assigned to a specific user",
          required: false,
        },
        {
          name: "creator",
          type: "string",
          description: "Filter issues created by a specific user",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "labels",
          type: "string",
          description: "Labels, multiple labels separated by commas",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone ID",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "integer",
          description: "Number of items per page, maximum 100",
          required: false,
        },
        {
          name: "program",
          type: "string",
          description: "Filter issues for a specific program",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Issue state",
          required: false,
        },
      ],
    },
    {
      name: "get_issue",
      description: "获取 Gitee 仓库中的特定 Issue",
      parameters: [
        {
          name: "issue_number",
          type: ["number", "string"],
          description: "Issue number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description: "更新 Gitee 仓库中的 Issue",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Users assigned to the issue",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Issue content",
          required: false,
        },
        {
          name: "issue_number",
          type: ["number", "string"],
          description: "Issue number",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone ID",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "Issue state",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: false,
        },
      ],
    },
    {
      name: "add_issue_comment",
      description: "向 Gitee 仓库中的 Issue 添加评论",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Comment content",
          required: true,
        },
        {
          name: "issue_number",
          type: ["number", "string"],
          description: "Issue number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request",
      description: "在 Gitee 仓库中创建 Pull Request",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Reviewers",
          required: false,
        },
        {
          name: "base",
          type: "string",
          description: "Target branch name",
          required: true,
        },
        {
          name: "body",
          type: "string",
          description: "Pull Request content",
          required: false,
        },
        {
          name: "head",
          type: "string",
          description: "Source branch name",
          required: true,
        },
        {
          name: "issue",
          type: "string",
          description: "Related issue, format: #xxx",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels",
          required: false,
        },
        {
          name: "milestone_number",
          type: "number",
          description: "Milestone number",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "prune_source_branch",
          type: "boolean",
          description: "Whether to delete the source branch after merging",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "testers",
          type: "string array",
          description: "Testers",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Pull Request title",
          required: true,
        },
      ],
    },
    {
      name: "list_pull_requests",
      description: "列出 Gitee 仓库中的 Pull Requests",
      parameters: [
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "labels",
          type: "string",
          description: "Labels, multiple labels separated by commas",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone ID",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "integer",
          description: "Number of items per page, maximum 100",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Pull Request state",
          required: false,
        },
      ],
    },
    {
      name: "get_pull_request",
      description: "获取 Gitee 仓库中的特定 Pull Request",
      parameters: [
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull Request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "update_pull_request",
      description: "更新 Gitee 仓库中的 Pull Request",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Reviewers",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Pull Request content",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels",
          required: false,
        },
        {
          name: "milestone_number",
          type: "number",
          description: "Milestone number",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull Request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "Pull Request state",
          required: false,
        },
        {
          name: "testers",
          type: "string array",
          description: "Testers",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Pull Request title",
          required: false,
        },
      ],
    },
    {
      name: "merge_pull_request",
      description: "合并 Gitee 仓库中的 Pull Request",
      parameters: [
        {
          name: "merge_method",
          type: "string",
          description: "Merge method",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description:
            "Repository owner path (enterprise, organization, or personal path)",
          required: true,
        },
        {
          name: "prune_source_branch",
          type: "boolean",
          description: "Whether to delete the source branch after merging",
          required: false,
        },
        {
          name: "pull_number",
          type: "number",
          description: "Pull Request number",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository path",
          required: true,
        },
      ],
    },
    {
      name: "get_user",
      description: "获取 Gitee 用户信息",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Username",
          required: true,
        },
      ],
    },
    {
      name: "get_current_user",
      description: "获取当前认证的 Gitee 用户信息",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/normal-coder/gitee-mcp-server",
  _varName: "giteePlugin",
};

const mcpxcodebuildPlugin: Plugin = {
  id: "5ibnbzxmql",
  name: "mcpxcodebuild",
  description:
    "🍎 Build iOS Xcode workspace/project and feed back errors to llm.",
  image: "https://github.com/ShenghaiWang.png",
  actions: [
    {
      name: "build",
      description: "Build the iOS Xcode workspace/project in the folder",
      parameters: [
        {
          name: "folder",
          type: "string",
          description:
            "The full path of the current folder that the iOS Xcode workspace/project sits",
          required: true,
        },
      ],
    },
    {
      name: "test",
      description: "Run test for the iOS Xcode workspace/project in the folder",
      parameters: [
        {
          name: "folder",
          type: "string",
          description:
            "The full path of the current folder that the iOS Xcode workspace/project sits",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ShenghaiWang/xcodebuild",
  _varName: "mcpxcodebuildPlugin",
};

const ticktickmcpserverPlugin: Plugin = {
  id: "x6aytcdmvc",
  name: "ticktick-mcp-server",
  description:
    "A MCP server for TickTick that enables interacting with your TickTick task management system directly through Claude and other MCP clients.",
  image: "https://github.com/jacepark12.png",
  actions: [],
  githubUrl: "https://github.com/jacepark12/ticktick-mcp",
  _varName: "ticktickmcpserverPlugin",
};

const mcplogogenPlugin: Plugin = {
  id: "5mn4p9tz2a",
  name: "MCP-LOGO-GEN",
  description:
    "MCP Tool Server for Logo Generation.\nThis server provides logo generation capabilities using FAL AI, with tools for image generation, background removal, and image scaling.",
  image: "https://github.com/sshtunnelvision.png",
  actions: [],
  githubUrl: "https://github.com/sshtunnelvision/MCP-LOGO-GEN",
  _varName: "mcplogogenPlugin",
};

const mixpanelPlugin: Plugin = {
  id: "3ymkqswmp4",
  name: "mixpanel",
  description:
    "Connect to your Mixpanel data. Query events, retention, and funnel data from Mixpanel analytics.",
  image: "https://github.com/dragonkhoi.png",
  actions: [
    {
      name: "get_today_top_events",
      description: "Get today's top events from Mixpanel",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of events to return",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "The type of events to fetch",
          required: false,
        },
      ],
    },
    {
      name: "get_top_events",
      description: "Get a list of the most common events over the last 31 days",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of events to return",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "The type of events to fetch",
          required: false,
        },
      ],
    },
    {
      name: "aggregate_event_counts",
      description:
        "Get unique, total, or average data for a set of events over N days, weeks, or months",
      parameters: [
        {
          name: "events",
          type: "string",
          description:
            'The event or events that you wish to get data for, encoded as a JSON array. Example format: "["play song", "log in", "add playlist"]"',
          required: true,
        },
        {
          name: "from_date",
          type: "string",
          description:
            "The date in yyyy-mm-dd format to begin querying from (inclusive)",
          required: false,
        },
        {
          name: "interval",
          type: "number",
          description:
            "The number of units to return data for. Specify either interval or from_date and to_date",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "The date in yyyy-mm-dd format to query to (inclusive)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "The type of data to fetch",
          required: false,
        },
        {
          name: "unit",
          type: "string",
          description: "The level of granularity of the data you get back",
          required: true,
        },
      ],
    },
    {
      name: "aggregated_event_property_values",
      description:
        "Get unique, total, or average data for a single event and property over days, weeks, or months",
      parameters: [
        {
          name: "event",
          type: "string",
          description:
            "The event that you wish to get data for (a single event name, not an array)",
          required: true,
        },
        {
          name: "from_date",
          type: "string",
          description:
            "The date in yyyy-mm-dd format to begin querying from (inclusive)",
          required: false,
        },
        {
          name: "interval",
          type: "number",
          description:
            "The number of units to return data for. Specify either interval or from_date and to_date",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "The maximum number of values to return (default: 255)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "The name of the property you would like to get data for",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "The date in yyyy-mm-dd format to query to (inclusive)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "The analysis type - general, unique, or average events",
          required: true,
        },
        {
          name: "unit",
          type: "string",
          description:
            "The level of granularity of the data (minute, hour, day, week, or month)",
          required: true,
        },
        {
          name: "values",
          type: "string",
          description:
            'The specific property values to get data for, encoded as a JSON array. Example: "["female", "unknown"]"',
          required: false,
        },
      ],
    },
    {
      name: "query_insights_report",
      description: "Get data from your Insights reports",
      parameters: [
        {
          name: "bookmark_id",
          type: "string",
          description: "The ID of your Insights report",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
    {
      name: "query_funnel_report",
      description:
        "Get data for a funnel based on a funnel_id. Funnel IDs should be retrieved using the list_saved_funnels tool.",
      parameters: [
        {
          name: "from_date",
          type: "string",
          description:
            "The date in yyyy-mm-dd format to begin querying from (inclusive)",
          required: true,
        },
        {
          name: "funnel_id",
          type: "string",
          description: "The Mixpanel funnel ID that you wish to get data for",
          required: true,
        },
        {
          name: "interval",
          type: "number",
          description: "The number of days you want each bucket to contain",
          required: false,
        },
        {
          name: "length",
          type: "number",
          description:
            "The number of units each user has to complete the funnel",
          required: false,
        },
        {
          name: "length_unit",
          type: "string",
          description: "The unit applied to the length parameter",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "The date in yyyy-mm-dd format to query to (inclusive)",
          required: true,
        },
        {
          name: "unit",
          type: "string",
          description: "Alternate way of specifying interval",
          required: false,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
    {
      name: "list_saved_funnels",
      description:
        "Get the names and IDs of your saved funnels. This tool is useful for getting a funnel_id for the query_funnel_report tool.",
      parameters: [
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
    {
      name: "list_saved_cohorts",
      description: "Get all cohorts in a given project",
      parameters: [
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
    {
      name: "query_retention_report",
      description: "Get data from your Retention reports",
      parameters: [
        {
          name: "born_event",
          type: "string",
          description:
            "The first event a user must do to be counted in a birth retention cohort",
          required: false,
        },
        {
          name: "born_where",
          type: "string",
          description: "An expression to filter born_events by",
          required: false,
        },
        {
          name: "from_date",
          type: "string",
          description:
            "The date in yyyy-mm-dd format to begin querying from (inclusive)",
          required: true,
        },
        {
          name: "interval",
          type: "number",
          description:
            "The number of units per individual bucketed interval. Default is 1",
          required: false,
        },
        {
          name: "interval_count",
          type: "number",
          description:
            "The number of individual buckets/intervals to return. Default is 1",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Return the top limit segmentation values. Only applies when 'on' is specified",
          required: false,
        },
        {
          name: "on",
          type: "string",
          description: "The property expression to segment the second event on",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "retention_type",
          type: "string",
          description:
            "Type of retention: 'birth' (first time) or 'compounded' (recurring). Defaults to 'birth'",
          required: false,
        },
        {
          name: "return_event",
          type: "string",
          description:
            "The event to generate returning counts for. If not specified, looks across all events",
          required: false,
        },
        {
          name: "return_where",
          type: "string",
          description: "An expression to filter return events by",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "The date in yyyy-mm-dd format to query to (inclusive)",
          required: true,
        },
        {
          name: "unit",
          type: "string",
          description:
            "The interval unit: 'day', 'week', or 'month'. Default is 'day'",
          required: false,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
    {
      name: "custom_jql",
      description:
        "Run a custom JQL (JSON Query Language) script against your Mixpanel data",
      parameters: [
        {
          name: "params",
          type: "string",
          description:
            "A JSON string containing parameters to pass to the script (will be available as the 'params' variable)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "script",
          type: "string",
          description:
            "The JQL script to run (JavaScript code that uses Mixpanel's JQL functions)",
          required: true,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
    {
      name: "query_segmentation_sum",
      description: "Sum a numeric expression for events over time",
      parameters: [
        {
          name: "event",
          type: "string",
          description:
            "The event that you wish to get data for (single event name, not an array)",
          required: true,
        },
        {
          name: "from_date",
          type: "string",
          description:
            "The date in yyyy-mm-dd format to begin querying from (inclusive)",
          required: true,
        },
        {
          name: "on",
          type: "string",
          description:
            "The expression to sum per unit time (should result in a numeric value)",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "The Mixpanel project ID",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "The date in yyyy-mm-dd format to query to (inclusive)",
          required: true,
        },
        {
          name: "unit",
          type: "string",
          description: "Time bucket size: 'hour' or 'day'. Default is 'day'",
          required: false,
        },
        {
          name: "where",
          type: "string",
          description: "An expression to filter events by",
          required: false,
        },
        {
          name: "workspace_id",
          type: "string",
          description: "The ID of the workspace if applicable",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dragonkhoi/mixpanel-mcp",
  _varName: "mixpanelPlugin",
};

const cLangMcpServerPlugin: Plugin = {
  id: "cl0idwbofr",
  name: "C# Lang MCP Server",
  description:
    "A VS Code extension provides a MCP server that exposes Roslyn language features. It enables tools like find usages, go to definition, quick info, etc.",
  image: "https://github.com/biegehydra.png",
  actions: [],
  githubUrl: "https://github.com/biegehydra/BifrostMCP",
  _varName: "cLangMcpServerPlugin",
};

const mcpserverstarrocksPlugin: Plugin = {
  id: "qjidoviad2",
  name: "mcp-server-starrocks",
  description:
    "This MCP server provides connection to Starrocks allows you to explore this query engine with minimum effort.",
  image: "https://github.com/hagsmand.png",
  actions: [],
  githubUrl: "https://github.com/hagsmand/mcp-server-starrocks",
  _varName: "mcpserverstarrocksPlugin",
};

const mcpserverdatadogPlugin: Plugin = {
  id: "bu8gtzkwfr",
  name: "mcp-server-datadog",
  description:
    "The MCP server provides an interface to the Datadog API, enabling seamless management of incidents, monitoring, logs, dashboards, metrics, traces, and hosts. Its extensible design allows easy integration of additional Datadog APIs for future expansions.",
  image: "https://github.com/winor30.png",
  actions: [
    {
      name: "list_incidents",
      description: "Get incidents from Datadog",
      parameters: [
        {
          name: "pageOffset",
          type: "number",
          description: "Parameter: pageOffset",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Parameter: pageSize",
          required: false,
        },
      ],
    },
    {
      name: "get_incident",
      description: "Get an incident from Datadog",
      parameters: [
        {
          name: "incidentId",
          type: "string",
          description: "Parameter: incidentId",
          required: true,
        },
      ],
    },
    {
      name: "get_metrics",
      description: "Get metrics data from Datadog",
      parameters: [
        {
          name: "from",
          type: "number",
          description: "Start time in epoch seconds",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description:
            'Datadog metrics query string. e.g. "avg:system.cpu.user{*}',
          required: true,
        },
        {
          name: "to",
          type: "number",
          description: "End time in epoch seconds",
          required: true,
        },
      ],
    },
    {
      name: "get_logs",
      description: "Search and retrieve logs from Datadog",
      parameters: [
        {
          name: "from",
          type: "number",
          description: "Start time in epoch seconds",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of logs to return. Default is 100.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Datadog logs query string",
          required: false,
        },
        {
          name: "to",
          type: "number",
          description: "End time in epoch seconds",
          required: true,
        },
      ],
    },
    {
      name: "get_monitors",
      description: "Get monitors status from Datadog",
      parameters: [
        {
          name: "groupStates",
          type: "string array",
          description: "Filter monitors by their states",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter monitors by name",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Filter monitors by tags",
          required: false,
        },
      ],
    },
    {
      name: "list_dashboards",
      description: "Get list of dashboards from Datadog",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Filter dashboards by name",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Filter dashboards by tags",
          required: false,
        },
      ],
    },
    {
      name: "list_traces",
      description: "Get APM traces from Datadog",
      parameters: [
        {
          name: "from",
          type: "number",
          description: "Start time in epoch seconds",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of traces to return",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Filter by operation name",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Datadog APM trace query string",
          required: true,
        },
        {
          name: "service",
          type: "string",
          description: "Filter by service name",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort order for traces",
          required: false,
        },
        {
          name: "to",
          type: "number",
          description: "End time in epoch seconds",
          required: true,
        },
      ],
    },
    {
      name: "mute_host",
      description: "Mute a host in Datadog",
      parameters: [
        {
          name: "end",
          type: "integer",
          description: "POSIX timestamp for when the mute should end",
          required: false,
        },
        {
          name: "hostname",
          type: "string",
          description: "The name of the host to mute",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Message to associate with the muting of this host",
          required: false,
        },
        {
          name: "override",
          type: "boolean",
          description:
            "If true and the host is already muted, replaces existing end time",
          required: false,
        },
      ],
    },
    {
      name: "unmute_host",
      description: "Unmute a host in Datadog",
      parameters: [
        {
          name: "hostname",
          type: "string",
          description: "The name of the host to unmute",
          required: true,
        },
      ],
    },
    {
      name: "list_hosts",
      description: "Get list of hosts from Datadog",
      parameters: [
        {
          name: "count",
          type: "integer",
          description: "Max number of hosts to return (max: 1000)",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter string for search results",
          required: false,
        },
        {
          name: "from",
          type: "integer",
          description: "Search hosts from this UNIX timestamp",
          required: false,
        },
        {
          name: "include_hosts_metadata",
          type: "boolean",
          description: "Include host metadata (version, platform, etc)",
          required: false,
        },
        {
          name: "include_muted_hosts_data",
          type: "boolean",
          description: "Include muted hosts status and expiry",
          required: false,
        },
        {
          name: "sort_dir",
          type: "string",
          description: "Sort direction (asc/desc)",
          required: false,
        },
        {
          name: "sort_field",
          type: "string",
          description: "Field to sort hosts by",
          required: false,
        },
        {
          name: "start",
          type: "integer",
          description: "Starting offset for pagination",
          required: false,
        },
      ],
    },
    {
      name: "get_active_hosts_count",
      description:
        "Get the total number of active hosts in Datadog (defaults to last 5 minutes)",
      parameters: [
        {
          name: "from",
          type: "integer",
          description:
            "Number of seconds from which you want to get total number of active hosts (defaults to 2h)",
          required: false,
        },
      ],
    },
    {
      name: "list_downtimes",
      description: "List scheduled downtimes from Datadog",
      parameters: [
        {
          name: "currentOnly",
          type: "boolean",
          description: "Parameter: currentOnly",
          required: false,
        },
        {
          name: "monitorId",
          type: "number",
          description: "Parameter: monitorId",
          required: false,
        },
      ],
    },
    {
      name: "schedule_downtime",
      description: "Schedule a downtime in Datadog",
      parameters: [
        {
          name: "end",
          type: "number",
          description: "Parameter: end",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: false,
        },
        {
          name: "monitorId",
          type: "number",
          description: "Parameter: monitorId",
          required: false,
        },
        {
          name: "monitorTags",
          type: "string array",
          description: "Parameter: monitorTags",
          required: false,
        },
        {
          name: "recurrence",
          type: "object",
          description: "Parameter: recurrence",
          required: false,
        },
        {
          name: "scope",
          type: "string",
          description: "Parameter: scope",
          required: true,
        },
        {
          name: "start",
          type: "number",
          description: "Parameter: start",
          required: false,
        },
        {
          name: "timezone",
          type: "string",
          description: "Parameter: timezone",
          required: false,
        },
      ],
    },
    {
      name: "cancel_downtime",
      description: "Cancel a scheduled downtime in Datadog",
      parameters: [
        {
          name: "downtimeId",
          type: "number",
          description: "Parameter: downtimeId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/winor30/mcp-server-datadog",
  _varName: "mcpserverdatadogPlugin",
};

const mcpllmPlugin: Plugin = {
  id: "i1gantlfrs",
  name: "mcp-llm",
  description: "An MCP server that provides LLMs access to other LLMs",
  image: "https://github.com/sammcj.png",
  actions: [
    {
      name: "generate_code",
      description: "Generate code based on a description",
      parameters: [
        {
          name: "additionalContext",
          type: "string",
          description: "Additional context or requirements for the code",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the code to generate",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description:
            "Programming language (e.g., JavaScript, Python, TypeScript)",
          required: false,
        },
      ],
    },
    {
      name: "generate_code_to_file",
      description:
        "Generate code and write it directly to a file at a specific line number",
      parameters: [
        {
          name: "additionalContext",
          type: "string",
          description: "Additional context or requirements for the code",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the code to generate",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the file where the code should be written",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description:
            "Programming language (e.g., JavaScript, Python, TypeScript)",
          required: false,
        },
        {
          name: "lineNumber",
          type: "number",
          description:
            "Line number where the code should be inserted (0-based)",
          required: true,
        },
        {
          name: "replaceLines",
          type: "number",
          description: "Number of lines to replace (0 for insertion only)",
          required: false,
        },
      ],
    },
    {
      name: "generate_documentation",
      description: "Generate documentation for code",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Code to document",
          required: true,
        },
        {
          name: "format",
          type: "string",
          description: "Documentation format (e.g., JSDoc, Markdown)",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Programming language of the code",
          required: false,
        },
      ],
    },
    {
      name: "ask_question",
      description: "Ask a question to the LLM",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context for the question",
          required: false,
        },
        {
          name: "question",
          type: "string",
          description: "Question to ask",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammcj/mcp-llm",
  _varName: "mcpllmPlugin",
};

const testPlugin: Plugin = {
  id: "wm7b7zafz1",
  name: "Test",
  description: "Test",
  image: "https://github.com/punkpeye.png",
  actions: [],
  githubUrl: "https://github.com/punkpeye/awesome-mcp-servers",
  _varName: "testPlugin",
};

const mermaidmcpserverPlugin: Plugin = {
  id: "lzjlbitkzr",
  name: "mermaid-mcp-server",
  description:
    "A Model Context Protocol (MCP) server that converts Mermaid diagrams to PNG images.",
  image: "https://github.com/peng-shawn.png",
  actions: [
    {
      name: "generate",
      description: "Generate PNG image from mermaid markdown",
      parameters: [
        {
          name: "backgroundColor",
          type: "string",
          description:
            "Background color for the diagram, e.g. 'white', 'transparent', '#F0F0F0' (optional)",
          required: false,
        },
        {
          name: "code",
          type: "string",
          description: "The mermaid markdown to generate an image from",
          required: true,
        },
        {
          name: "folder",
          type: "string",
          description: "Absolute path to save the image to (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the diagram (optional)",
          required: false,
        },
        {
          name: "theme",
          type: "string",
          description: "Theme for the diagram (optional)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/peng-shawn/mermaid-mcp-server",
  _varName: "mermaidmcpserverPlugin",
};

const convexMcpServerPlugin: Plugin = {
  id: "bfm97spkcc",
  name: "Convex MCP server",
  description:
    "Convex’s MCP server lets you introspect tables, call functions, and read/write data seamlessly. Agents can generate one-off queries safely—thanks to Convex’s sandboxed queries, ensuring data integrity. Perfect for AI automation, real-time apps, and dynamic data access.",
  image: "https://github.com/get-convex.png",
  actions: [],
  githubUrl: "https://github.com/get-convex/convex-backend",
  _varName: "convexMcpServerPlugin",
};

const scrapezyPlugin: Plugin = {
  id: "rnktqsouvy",
  name: "Scrapezy",
  description:
    "MCP Server enabling integration with Scrapezy to retrieve structured data from websites.",
  image: "https://github.com/Scrapezy.png",
  actions: [
    {
      name: "extract-structured-data",
      description: "Extract structured data from a website.",
      parameters: [
        {
          name: "prompt",
          type: "string",
          description: "Prompt to extract data from the website",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to extract data from",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Scrapezy/mcp",
  _varName: "scrapezyPlugin",
};

const wanakuMcpServerPlugin: Plugin = {
  id: "zgqmknvjfn",
  name: "Wanaku MCP Server",
  description:
    "The Wanaku MCP Router stands between autonomous AI agents and your enterprise systems. Wanaku leverages proven integration technology, like Apache Camel, to set up and manage hundreds or thousands of integrations.",
  image: "https://github.com/wanaku-ai.png",
  actions: [],
  githubUrl: "https://github.com/wanaku-ai/wanaku",
  _varName: "wanakuMcpServerPlugin",
};

const test1Plugin: Plugin = {
  id: "7o50ymbisa",
  name: "test1",
  description: "this is a test",
  image: "https://github.com/barlanyado.png",
  actions: [],
  githubUrl: "https://github.com/barlanyado/mcp-server-test",
  _varName: "test1Plugin",
};

const openledgermcpserverPlugin: Plugin = {
  id: "fyxyh3fpk8",
  name: "Open-Ledger-MCP-Server",
  description:
    "A Model Context Protocol (MCP) server implementation for the OpenLedger API. This server provides structured context to AI models according to the MCP specification.",
  image: "https://github.com/openledger.png",
  actions: [],
  githubUrl: "https://github.com/openledger/Open-Ledger-MCP-Server",
  _varName: "openledgermcpserverPlugin",
};

const railwaymcpPlugin: Plugin = {
  id: "lwn74iwigz",
  name: "railway-mcp",
  description:
    "Let Claude and Cursor manage your Railway infrastructure through natural language. Deploy, configure, and monitor - autonomously and safely.",
  image: "https://github.com/jason-tan-swe.png",
  actions: [
    {
      name: "database_list_types",
      description:
        "[QUERY] List all available database types that can be deployed using Railway's official templates\n\n⚡️ Best for:\n  ✓ Discovering supported database types\n  ✓ Planning database deployments\n  ✓ Checking template availability\n\n⚠️ Not for:\n  × Listing existing databases\n  × Getting database connection details\n\n→ Alternatives: service_create_from_image\n\n→ Next steps: database_deploy\n\n→ Related: database_deploy, service_create_from_image",
      parameters: [],
    },
    {
      name: "database_deploy_from_template",
      description:
        "[WORKFLOW] Deploy a pre-configured database using Railway's official templates and best practices\n\n⚡️ Best for:\n  ✓ Standard database deployments\n  ✓ Quick setup with security defaults\n  ✓ Common database types (PostgreSQL, MongoDB, Redis)\n\n⚠️ Not for:\n  × Custom database versions\n  × Complex configurations\n  × Unsupported database types\n\n→ Prerequisites: database_list_types\n\n→ Alternatives: service_create_from_image\n\n→ Next steps: variable_list, service_info\n\n→ Related: volume_create, service_update",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "Environment ID where the database will be deployed (usually obtained from project_info)",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description:
            "Optional custom name for the database service. Default: {type}-database",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project where the database will be deployed",
          required: true,
        },
        {
          name: "region",
          type: "string",
          description:
            "Region where the database should be deployed, try us-west1 before all other regions",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of database to deploy (e.g., postgresql, mongodb, redis). Use service_create_from_image for other types.",
          required: true,
        },
      ],
    },
    {
      name: "deployment_list",
      description:
        "[API] List recent deployments for a service in a specific environment\n\n⚡️ Best for:\n  ✓ Viewing deployment history\n  ✓ Monitoring service updates\n\n→ Prerequisites: service_list\n\n→ Next steps: deployment_logs, deployment_trigger\n\n→ Related: service_info, service_restart",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment to list deployments from (usually obtained from service_list)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Optional: Maximum number of deployments to return (default: 10)",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to list deployments for",
          required: true,
        },
      ],
    },
    {
      name: "deployment_trigger",
      description:
        "[API] Trigger a new deployment for a service\n\n⚡️ Best for:\n  ✓ Deploying code changes\n  ✓ Applying configuration updates\n  ✓ Rolling back to previous states\n\n⚠️ Not for:\n  × Restarting services (use service_restart)\n  × Updating service config (use service_update)\n  × Database changes\n\n→ Prerequisites: service_list\n\n→ Alternatives: service_restart\n\n→ Next steps: deployment_logs, deployment_status\n\n→ Related: variable_set, service_update",
      parameters: [
        {
          name: "commitSha",
          type: "string",
          description: "Specific commit SHA from the Git repository",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description: "ID of the environment",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service",
          required: true,
        },
      ],
    },
    {
      name: "deployment_logs",
      description:
        "[API] Get logs for a specific deployment\n\n⚡️ Best for:\n  ✓ Debugging deployment issues\n  ✓ Monitoring deployment progress\n  ✓ Checking build output\n\n⚠️ Not for:\n  × Service runtime logs\n  × Database logs\n\n→ Prerequisites: deployment_list\n\n→ Next steps: deployment_status\n\n→ Related: service_info, deployment_trigger",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "ID of the deployment to get logs for",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of log entries to fetch",
          required: false,
        },
      ],
    },
    {
      name: "deployment_status",
      description:
        "[API] Check the current status of a deployment\n\n⚡️ Best for:\n  ✓ Monitoring deployment progress\n  ✓ Verifying successful deployments\n  ✓ Checking for deployment failures\n\n⚠️ Not for:\n  × Service runtime logs\n  × Database logs\n\n→ Prerequisites: deployment_list, deployment_trigger\n\n→ Next steps: deployment_logs\n\n→ Related: service_info, service_restart, deployment_wait",
      parameters: [
        {
          name: "deploymentId",
          type: "string",
          description: "ID of the deployment to check status for",
          required: true,
        },
      ],
    },
    {
      name: "domain_list",
      description:
        "[API] List all domains (both service and custom) for a service\n\n⚡️ Best for:\n  ✓ Viewing service endpoints\n  ✓ Managing domain configurations\n  ✓ Auditing domain settings\n\n→ Prerequisites: service_list\n\n→ Next steps: domain_create, domain_update\n\n→ Related: service_info, tcp_proxy_list",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment that the service is in to list domains from (usually obtained from service_list)",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to list domains for",
          required: true,
        },
      ],
    },
    {
      name: "domain_create",
      description:
        "[API] Create a new domain for a service\n\n⚡️ Best for:\n  ✓ Setting up custom domains\n  ✓ Configuring service endpoints\n  ✓ Adding HTTPS endpoints\n\n⚠️ Not for:\n  × TCP proxy setup (use tcp_proxy_create)\n  × Internal service communication\n\n→ Prerequisites: service_list, domain_check\n\n→ Alternatives: tcp_proxy_create\n\n→ Next steps: domain_update\n\n→ Related: service_info, domain_list",
      parameters: [
        {
          name: "domain",
          type: "string",
          description:
            "Custom domain name (optional, as railway will generate one for you and is generally better to leave it up to railway to generate one. There's usually no need to specify this and there are no use cases for overriding it.)",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description: "ID of the environment",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service",
          required: true,
        },
        {
          name: "suffix",
          type: "string",
          description:
            "Suffix for the domain (optional, railway will generate one for you and is generally better to leave it up to railway to generate one.)",
          required: false,
        },
        {
          name: "targetPort",
          type: "number",
          description:
            "Target port for the domain (optional, as railway will use the default port for the service and detect it automatically.)",
          required: false,
        },
      ],
    },
    {
      name: "domain_check",
      description:
        "[API] Check if a domain is available for use\n\n⚡️ Best for:\n  ✓ Validating domain availability\n  ✓ Pre-deployment checks\n  ✓ Domain planning\n\n→ Next steps: domain_create\n\n→ Related: domain_list",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Domain name to check availability for",
          required: true,
        },
      ],
    },
    {
      name: "domain_update",
      description:
        "[API] Update a domain's configuration\n\n⚡️ Best for:\n  ✓ Changing target ports\n  ✓ Updating domain settings\n  ✓ Reconfiguring endpoints\n\n⚠️ Not for:\n  × Changing domain names (delete and recreate instead)\n  × TCP proxy configuration\n\n→ Prerequisites: domain_list\n\n→ Next steps: domain_list\n\n→ Related: service_update",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the domain to update",
          required: true,
        },
        {
          name: "targetPort",
          type: "number",
          description: "New port number to route traffic to",
          required: true,
        },
      ],
    },
    {
      name: "domain_delete",
      description:
        "[API] Delete a domain from a service\n\n⚡️ Best for:\n  ✓ Removing unused domains\n  ✓ Cleaning up configurations\n  ✓ Domain management\n\n⚠️ Not for:\n  × Temporary domain disabling\n  × Port updates (use domain_update)\n\n→ Prerequisites: domain_list\n\n→ Alternatives: domain_update\n\n→ Related: service_update",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the domain to delete",
          required: true,
        },
      ],
    },
    {
      name: "project_list",
      description:
        "[API] List all projects in your Railway account\n\n⚡️ Best for:\n  ✓ Getting an overview of all projects\n  ✓ Finding project IDs\n  ✓ Project discovery and management\n\n→ Next steps: project_info, service_list\n\n→ Related: project_create, project_delete",
      parameters: [],
    },
    {
      name: "project_info",
      description:
        "[API] Get detailed information about a specific Railway project\n\n⚡️ Best for:\n  ✓ Viewing project details and status\n  ✓ Checking environments and services\n  ✓ Project configuration review\n\n→ Prerequisites: project_list\n\n→ Next steps: service_list, variable_list\n\n→ Related: project_update, project_delete",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to get information about",
          required: true,
        },
      ],
    },
    {
      name: "project_create",
      description:
        "[API] Create a new Railway project\n\n⚡️ Best for:\n  ✓ Starting new applications\n  ✓ Setting up development environments\n  ✓ Creating project spaces\n\n⚠️ Not for:\n  × Duplicating existing projects\n\n→ Next steps: service_create_from_repo, service_create_from_image, database_deploy\n\n→ Related: project_delete, project_update",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name for the new project",
          required: true,
        },
        {
          name: "teamId",
          type: "string",
          description: "Optional team ID to create the project under",
          required: false,
        },
      ],
    },
    {
      name: "project_delete",
      description:
        "[API] Delete a Railway project and all its resources\n\n⚡️ Best for:\n  ✓ Removing unused projects\n  ✓ Cleaning up test projects\n\n⚠️ Not for:\n  × Temporary project deactivation\n  × Service-level cleanup (use service_delete)\n\n→ Prerequisites: project_list, project_info\n\n→ Alternatives: service_delete\n\n→ Related: project_create",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to delete",
          required: true,
        },
      ],
    },
    {
      name: "project_environments",
      description: "List all environments in a project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
      ],
    },
    {
      name: "service_list",
      description:
        "[API] List all services in a specific Railway project\n\n⚡️ Best for:\n  ✓ Getting an overview of a project's services\n  ✓ Finding service IDs\n  ✓ Checking service status\n\n→ Prerequisites: project_list\n\n→ Next steps: service_info, deployment_list\n\n→ Related: project_info, variable_list",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to list services from",
          required: true,
        },
      ],
    },
    {
      name: "service_info",
      description:
        "[API] Get detailed information about a specific service\n\n⚡️ Best for:\n  ✓ Viewing service configuration and status\n  ✓ Checking deployment details\n  ✓ Monitoring service health\n\n→ Prerequisites: service_list\n\n→ Next steps: deployment_list, variable_list\n\n→ Related: service_update, deployment_trigger",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment to check (usually obtained from service_list)",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to get information about",
          required: true,
        },
      ],
    },
    {
      name: "service_create_from_repo",
      description:
        "[API] Create a new service from a GitHub repository\n\n⚡️ Best for:\n  ✓ Deploying applications from source code\n  ✓ Services that need build processes\n  ✓ GitHub-hosted projects\n\n⚠️ Not for:\n  × Pre-built Docker images (use service_create_from_image)\n  × Database deployments (use database_deploy)\n  × Static file hosting\n\n→ Prerequisites: project_list\n\n→ Alternatives: service_create_from_image, database_deploy\n\n→ Next steps: variable_set, service_update\n\n→ Related: deployment_trigger, service_info",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Optional custom name for the service",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to create the service in",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "GitHub repository URL or name (e.g., 'owner/repo')",
          required: true,
        },
      ],
    },
    {
      name: "service_create_from_image",
      description:
        "[API] Create a new service from a Docker image\n\n⚡️ Best for:\n  ✓ Custom database deployments\n  ✓ Pre-built container deployments\n  ✓ Specific version requirements\n\n⚠️ Not for:\n  × Standard database deployments (use database_deploy)\n  × GitHub repository deployments (use service_create_from_repo)\n  × Services needing build process\n\n→ Prerequisites: project_list\n\n→ Alternatives: database_deploy, service_create_from_repo\n\n→ Next steps: variable_set, service_update, tcp_proxy_create\n\n→ Related: volume_create, deployment_trigger",
      parameters: [
        {
          name: "image",
          type: "string",
          description: "Docker image to use (e.g., 'postgres:13-alpine')",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Optional custom name for the service",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to create the service in",
          required: true,
        },
      ],
    },
    {
      name: "service_update",
      description:
        "[API] Update a service's configuration\n\n⚡️ Best for:\n  ✓ Changing service settings\n  ✓ Updating resource limits\n  ✓ Modifying deployment configuration\n\n⚠️ Not for:\n  × Updating environment variables (use variable_set)\n  × Restarting services (use service_restart)\n  × Triggering new deployments (use deployment_trigger)\n\n→ Prerequisites: service_list, service_info\n\n→ Next steps: deployment_trigger\n\n→ Related: service_restart, variable_set",
      parameters: [
        {
          name: "buildCommand",
          type: "string",
          description: "Optional: Command to build the service",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment to update (usually obtained from service_info)",
          required: true,
        },
        {
          name: "healthcheckPath",
          type: "string",
          description: "Optional: Path for health checks",
          required: false,
        },
        {
          name: "numReplicas",
          type: "number",
          description: "Optional: Number of service replicas to run",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "region",
          type: "string",
          description: "Optional: Region to deploy the service in",
          required: false,
        },
        {
          name: "rootDirectory",
          type: "string",
          description: "Optional: Root directory containing the service code",
          required: false,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to update",
          required: true,
        },
        {
          name: "sleepApplication",
          type: "boolean",
          description: "Optional: Whether to enable sleep mode",
          required: false,
        },
        {
          name: "startCommand",
          type: "string",
          description: "Optional: Command to start the service",
          required: false,
        },
      ],
    },
    {
      name: "service_delete",
      description:
        "[API] Delete a service from a project\n\n⚡️ Best for:\n  ✓ Removing unused services\n  ✓ Cleaning up test services\n  ✓ Project reorganization\n\n⚠️ Not for:\n  × Temporary service stoppage (use service_restart)\n  × Updating service configuration (use service_update)\n\n→ Prerequisites: service_list, service_info\n\n→ Alternatives: service_restart\n\n→ Related: project_delete",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to delete",
          required: true,
        },
      ],
    },
    {
      name: "service_restart",
      description:
        "[API] Restart a service in a specific environment\n\n⚡️ Best for:\n  ✓ Applying configuration changes\n  ✓ Clearing service state\n  ✓ Resolving runtime issues\n\n⚠️ Not for:\n  × Deploying new code (use deployment_trigger)\n  × Updating service config (use service_update)\n  × Long-term service stoppage (use service_delete)\n\n→ Prerequisites: service_list\n\n→ Alternatives: deployment_trigger\n\n→ Related: service_info, deployment_logs",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment where the service should be restarted (usually obtained from service_info)",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to restart",
          required: true,
        },
      ],
    },
    {
      name: "tcp_proxy_list",
      description:
        "[API] List all TCP proxies for a service in a specific environment\n\n⚡️ Best for:\n  ✓ Viewing TCP proxy configurations\n  ✓ Managing external access\n  ✓ Auditing service endpoints\n\n→ Prerequisites: service_list\n\n→ Next steps: tcp_proxy_create\n\n→ Related: domain_list, service_info",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description: "ID of the environment containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to list TCP proxies for",
          required: true,
        },
      ],
    },
    {
      name: "tcp_proxy_create",
      description:
        "[API] Create a new TCP proxy for a service\n\n⚡️ Best for:\n  ✓ Setting up database access\n  ✓ Configuring external connections\n  ✓ Exposing TCP services\n\n⚠️ Not for:\n  × HTTP/HTTPS endpoints (use domain_create)\n  × Internal service communication\n\n→ Prerequisites: service_list\n\n→ Alternatives: domain_create\n\n→ Next steps: tcp_proxy_list\n\n→ Related: service_info, service_update",
      parameters: [
        {
          name: "applicationPort",
          type: "number",
          description:
            "Port of application/service to proxy, usually based off of the service's Dockerfile or designated running port.",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment (usually obtained from service_info)",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service",
          required: true,
        },
      ],
    },
    {
      name: "tcp_proxy_delete",
      description:
        "[API] Delete a TCP proxy\n\n⚡️ Best for:\n  ✓ Removing unused proxies\n  ✓ Security management\n  ✓ Endpoint cleanup\n\n⚠️ Not for:\n  × Temporary proxy disabling\n  × Port updates\n\n→ Prerequisites: tcp_proxy_list\n\n→ Related: service_update",
      parameters: [
        {
          name: "proxyId",
          type: "string",
          description: "ID of the TCP proxy to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_service_variables",
      description:
        "[API] List all environment variables for a service\n\n⚡️ Best for:\n  ✓ Viewing service configuration\n  ✓ Auditing environment variables\n  ✓ Checking connection strings\n\n→ Prerequisites: service_list\n\n→ Next steps: variable_set, variable_delete\n\n→ Related: service_info, variable_bulk_set",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment to list variables from (usually obtained from service_list)",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description:
            "Optional: ID of the service to list variables for, if not provided, shared variables across all services will be listed",
          required: false,
        },
      ],
    },
    {
      name: "variable_set",
      description:
        "[API] Create or update an environment variable\n\n⚡️ Best for:\n  ✓ Setting configuration values\n  ✓ Updating connection strings\n  ✓ Managing service secrets\n\n⚠️ Not for:\n  × Bulk variable updates (use variable_bulk_set)\n  × Temporary configuration changes\n\n→ Prerequisites: service_list\n\n→ Alternatives: variable_bulk_set\n\n→ Next steps: deployment_trigger, service_restart\n\n→ Related: variable_list, variable_delete",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment for the variable (usually obtained from service_list)",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the environment variable",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description:
            "Optional: ID of the service for the variable, if omitted creates/updates a shared variable",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Value to set for the variable",
          required: true,
        },
      ],
    },
    {
      name: "variable_delete",
      description:
        "[API] Delete a variable for a service in a specific environment\n\n⚡️ Best for:\n  ✓ Removing unused configuration\n  ✓ Security cleanup\n  ✓ Configuration management\n\n⚠️ Not for:\n  × Temporary variable disabling\n  × Bulk variable removal\n\n→ Prerequisites: service_list\n\n→ Next steps: deployment_trigger, service_restart\n\n→ Related: variable_list, variable_set",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment to delete the variable from (usually obtained from service_list)",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the variable to delete",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description:
            "ID of the service (optional, if omitted deletes a shared variable)",
          required: false,
        },
      ],
    },
    {
      name: "variable_bulk_set",
      description:
        "[WORKFLOW] Create or update multiple environment variables at once\n\n⚡️ Best for:\n  ✓ Migrating configuration between services\n  ✓ Initial service setup\n  ✓ Bulk configuration updates\n\n⚠️ Not for:\n  × Single variable updates (use variable_set)\n  × Temporary configuration changes\n\n→ Prerequisites: service_list\n\n→ Alternatives: variable_set\n\n→ Next steps: deployment_trigger, service_restart\n\n→ Related: variable_list, service_update",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment for the variables (usually obtained from service_list)",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description:
            "Optional: ID of the service for the variables, if omitted updates shared variables)",
          required: false,
        },
        {
          name: "variables",
          type: "object",
          description: "Object mapping variable names to values",
          required: true,
        },
      ],
    },
    {
      name: "variable_copy",
      description:
        "[WORKFLOW] Copy variables from one environment to another\n\n⚡️ Best for:\n  ✓ Environment migration\n  ✓ Configuration sharing\n  ✓ Environment duplication\n\n⚠️ Not for:\n  × Single variable updates (use variable_set)\n  × Temporary configuration changes\n\n→ Prerequisites: service_list\n\n→ Alternatives: variable_set\n\n→ Next steps: deployment_trigger, service_restart\n\n→ Related: variable_list, service_update",
      parameters: [
        {
          name: "overwrite",
          type: "boolean",
          description:
            "Whether to overwrite existing variables in the target environment",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description:
            "ID of the service (optional, if omitted copies shared variables)",
          required: false,
        },
        {
          name: "sourceEnvironmentId",
          type: "string",
          description:
            "ID of the source environment (usually obtained from project_info)",
          required: true,
        },
        {
          name: "targetEnvironmentId",
          type: "string",
          description:
            "ID of the target environment (usually obtained from project_info)",
          required: true,
        },
      ],
    },
    {
      name: "configure_api_token",
      description:
        "[UTILITY] Configure the Railway API token for authentication (only needed if not set in environment variables)\n\n⚡️ Best for:\n  ✓ Initial setup\n  ✓ Token updates\n  ✓ Authentication configuration\n\n⚠️ Not for:\n  × Project configuration\n  × Service settings\n  × Environment variables\n\n→ Next steps: project_list, service_list\n\n→ Related: project_create",
      parameters: [
        {
          name: "token",
          type: "string",
          description:
            "Railway API token (create one at https://railway.app/account/tokens)",
          required: true,
        },
      ],
    },
    {
      name: "volume_list",
      description:
        "[API] List all volumes in a project\n\n⚡️ Best for:\n  ✓ Viewing persistent storage configurations\n  ✓ Managing data volumes\n  ✓ Auditing storage usage\n\n→ Prerequisites: project_list\n\n→ Next steps: volume_create\n\n→ Related: service_info, database_deploy",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to list volumes for",
          required: true,
        },
      ],
    },
    {
      name: "volume_create",
      description:
        "[API] Create a new persistent volume for a service\n\n⚡️ Best for:\n  ✓ Setting up database storage\n  ✓ Configuring persistent data\n  ✓ Adding file storage\n\n⚠️ Not for:\n  × Temporary storage needs\n  × Static file hosting\n  × Memory caching\n\n→ Prerequisites: service_list\n\n→ Next steps: volume_list\n\n→ Related: service_update, database_deploy",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "ID of the environment for the volume (usually obtained from service_info)",
          required: true,
        },
        {
          name: "mountPath",
          type: "string",
          description:
            "Path where the volume should be mounted in the container",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project containing the service",
          required: true,
        },
        {
          name: "serviceId",
          type: "string",
          description: "ID of the service to attach volume to",
          required: true,
        },
      ],
    },
    {
      name: "volume_update",
      description: "Update a volume's properties",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "New name for the volume",
          required: true,
        },
        {
          name: "volumeId",
          type: "string",
          description: "ID of the volume to update",
          required: true,
        },
      ],
    },
    {
      name: "volume_delete",
      description:
        "[API] Delete a volume from a service\n\n⚡️ Best for:\n  ✓ Removing unused storage\n  ✓ Storage cleanup\n  ✓ Resource management\n\n⚠️ Not for:\n  × Temporary data removal\n  × Data backup (use volume_backup first)\n\n→ Prerequisites: volume_list\n\n→ Related: service_update",
      parameters: [
        {
          name: "volumeId",
          type: "string",
          description: "ID of the volume to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jason-tan-swe/railway-mcp",
  _varName: "railwaymcpPlugin",
};

const emqxmcpserverPlugin: Plugin = {
  id: "m7zgbcr053",
  name: "emqx-mcp-server",
  description:
    "A Model Context Protocol (MCP) server implementation that provides EMQX MQTT broker interaction.",
  image: "https://github.com/Benniu.png",
  actions: [
    {
      name: "list_mqtt_clients",
      description: "List MQTT clients connected to your EMQX Cluster",
      parameters: [
        {
          name: "request",
          type: "string",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "get_mqtt_client",
      description:
        "Get detailed information about a specific MQTT client by client ID",
      parameters: [
        {
          name: "request",
          type: "string",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "kick_mqtt_client",
      description: "Disconnect a client from the MQTT broker by client ID",
      parameters: [
        {
          name: "request",
          type: "string",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "publish_mqtt_message",
      description:
        "Publish an MQTT Message to Your EMQX Cluster on EMQX Cloud or Self-Managed Deployment",
      parameters: [
        {
          name: "request",
          type: "string",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Benniu/emqx-mcp-server",
  _varName: "emqxmcpserverPlugin",
};

const mcpserverollamadeepresearcherPlugin: Plugin = {
  id: "r25ssxqoci",
  name: "mcp-server-ollama-deep-researcher",
  description:
    "This is a Model Context Protocol (MCP) server adaptation of LangChain Ollama Deep Researcher. It provides the deep research capabilities as MCP tools that can be used within the model context protocol ecosystem, allowing AI assistants to perform in-depth research on topics (locally) via Ollama",
  image: "https://github.com/Cam10001110101.png",
  actions: [],
  githubUrl:
    "https://github.com/Cam10001110101/mcp-server-ollama-deep-researcher",
  _varName: "mcpserverollamadeepresearcherPlugin",
};

const graphlitmcpserverPlugin: Plugin = {
  id: "fscrivteod",
  name: "graphlit-mcp-server",
  description:
    "The Model Context Protocol (MCP) Server enables integration between MCP clients and the Graphlit service.\n\nIngest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a Graphlit project - and then retrieve relevant contents from the MCP client.",
  image: "https://github.com/graphlit.png",
  actions: [
    {
      name: "retrieveSources",
      description:
        "Retrieve relevant content sources from Graphlit knowledge base. Do *not* use for retrieving content by content identifier - retrieve content resource instead, with URI 'contents://{id}'.\n    Accepts a search prompt, optional recency filter (defaults to all time), and optional content type and file type filters.\n    Also accepts optional feed and collection identifiers to filter content by.\n    Prompt should be optimized for vector search, via text embeddings. Rewrite prompt as appropriate for higher relevance to search results.\n    Returns the ranked content sources, including their content resource URI to retrieve the complete Markdown text.",
      parameters: [
        {
          name: "collections",
          type: "string array",
          description: "Collection identifiers to filter content by, optional.",
          required: false,
        },
        {
          name: "contentType",
          type: "string",
          description:
            "Content type filter, optional. One of: Email, Event, File, Issue, Message, Page, Post, Text.",
          required: false,
        },
        {
          name: "feeds",
          type: "string array",
          description: "Feed identifiers to filter content by, optional.",
          required: false,
        },
        {
          name: "fileType",
          type: "string",
          description:
            "File type filter, optional. One of: Animation, Audio, Code, Data, Document, Drawing, Email, Geometry, Image, Package, PointCloud, Shape, Video.",
          required: false,
        },
        {
          name: "inLast",
          type: "string",
          description:
            "Recency filter for content 'in last' timespan, optional. Should be ISO 8601 format, for example, 'PT1H' for last hour, 'P1D' for last day, 'P7D' for last week, 'P30D' for last month. Doesn't support weeks or months explicitly.",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Search prompt for content retrieval.",
          required: true,
        },
      ],
    },
    {
      name: "extractText",
      description:
        "Extracts JSON data from text using LLM.\n    Accepts text to be extracted, and JSON schema which describes the data which will be extracted. JSON schema needs be of type 'object' and include 'properties' and 'required' fields.\n    Optionally accepts text prompt which is provided to LLM to guide data extraction. Defaults to 'Extract data using the tools provided'.\n    Returns extracted JSON from text.",
      parameters: [
        {
          name: "prompt",
          type: "string",
          description:
            "Text prompt which is provided to LLM to guide data extraction, optional.",
          required: false,
        },
        {
          name: "schema",
          type: "string",
          description:
            "JSON schema which describes the data which will be extracted. JSON schema needs be of type 'object' and include 'properties' and 'required' fields.",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Text to be extracted with LLM.",
          required: true,
        },
      ],
    },
    {
      name: "createCollection",
      description:
        "Create a collection.\n    Accepts a collection name, and optional list of content identifiers to add to collection.\n    Returns the collection identifier",
      parameters: [
        {
          name: "contents",
          type: "string array",
          description: "Content identifiers to add to collection, optional.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Collection name.",
          required: true,
        },
      ],
    },
    {
      name: "addContentsToCollection",
      description:
        "Add contents to a collection.\n    Accepts a collection identifier and a list of content identifiers to add to collection.\n    Returns the collection identifier.",
      parameters: [
        {
          name: "contents",
          type: "string array",
          description: "Content identifiers to add to collection.",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Collection identifier.",
          required: true,
        },
      ],
    },
    {
      name: "removeContentsFromCollection",
      description:
        "Remove contents from collection.\n    Accepts a collection identifier and a list of content identifiers to remove from collection.\n    Returns the collection identifier.",
      parameters: [
        {
          name: "contents",
          type: "string array",
          description: "Content identifiers to remove from collection.",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Collection identifier.",
          required: true,
        },
      ],
    },
    {
      name: "deleteCollection",
      description:
        "Delete a collection. Does *not* delete the content in the collection.\n    Accepts a collection identifier.\n    Returns the collection identifier and collection state, i.e. Deleted.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Collection identifier.",
          required: true,
        },
      ],
    },
    {
      name: "deleteFeed",
      description:
        "Delete a feed and all of its ingested content.\n    Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles.\n    Content deletion will happen asynchronously.\n    Returns the feed identifier and feed state, i.e. Deleted.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Feed identifier.",
          required: true,
        },
      ],
    },
    {
      name: "deleteContent",
      description:
        "Delete content.\n    Accepts a content identifier.\n    Returns the content identifier and content state, i.e. Deleted.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Content identifier.",
          required: true,
        },
      ],
    },
    {
      name: "deleteContents",
      description:
        "Deletes contents from Graphlit knowledge base.\n        Accepts optional content type and file type filters to limit the contents which will be deleted.\n        Also accepts optional limit of how many contents to delete, defaults to 1000.\n        Returns the content identifiers and content state, i.e. Deleted.",
      parameters: [
        {
          name: "contentType",
          type: "string",
          description:
            "Content type filter, optional. One of: Email, Event, File, Issue, Message, Page, Post, Text.",
          required: false,
        },
        {
          name: "fileType",
          type: "string",
          description:
            "File type filter, optional. One of: Animation, Audio, Code, Data, Document, Drawing, Email, Geometry, Image, Package, PointCloud, Shape, Video.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "deleteFeeds",
      description:
        "Deletes feeds from Graphlit knowledge base.\n        Accepts optional feed type filter to limit the feeds which will be deleted.\n        Also accepts optional limit of how many feeds to delete, defaults to 100.\n        Returns the feed identifiers and feed state, i.e. Deleted.",
      parameters: [
        {
          name: "feedType",
          type: "string",
          description:
            "Feed type filter, optional. One of: Discord, Email, Intercom, Issue, MicrosoftTeams, Notion, Reddit, Rss, Search, Site, Slack, Web, YouTube, Zendesk.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "isContentDone",
      description:
        "Check if content has completed asynchronous ingestion.\n    Accepts a content identifier which was returned from one of the non-feed ingestion tools, like ingestUrl.\n    Returns whether the content is done or not.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Content identifier.",
          required: true,
        },
      ],
    },
    {
      name: "isFeedDone",
      description:
        "Check if an asynchronous feed has completed ingesting all the available content.\n    Accepts a feed identifier which was returned from one of the ingestion tools, like ingestGoogleDriveFiles.\n    Returns whether the feed is done or not.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Feed identifier.",
          required: true,
        },
      ],
    },
    {
      name: "listMicrosoftTeamsTeams",
      description:
        "Lists available Microsoft Teams teams.\n        Returns a list of Microsoft Teams teams, where the team identifier can be used with listMicrosoftTeamsChannels to enumerate Microsoft Teams channels.",
      parameters: [],
    },
    {
      name: "listMicrosoftTeamsChannels",
      description:
        "Lists available Microsoft Teams channels.\n        Returns a list of Microsoft Teams channels, where the channel identifier can be used with ingestMicrosoftTeamsMessages to ingest messages into Graphlit knowledge base.",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "Parameter: teamId",
          required: true,
        },
      ],
    },
    {
      name: "listSlackChannels",
      description:
        "Lists available Slack channels.\n        Returns a list of Slack channels, where the channel name can be used with ingestSlackMessages to ingest messages into Graphlit knowledge base.",
      parameters: [],
    },
    {
      name: "listSharePointLibraries",
      description:
        "Lists available SharePoint libraries.\n    Returns a list of SharePoint libraries, where the selected libraryId can be used with listSharePointFolders to enumerate SharePoint folders in a library.",
      parameters: [],
    },
    {
      name: "listSharePointFolders",
      description:
        "Lists available SharePoint folders.\n        Returns a list of SharePoint folders, which can be used with ingestSharePointFiles to ingest files into Graphlit knowledge base.",
      parameters: [
        {
          name: "libraryId",
          type: "string",
          description: "Parameter: libraryId",
          required: true,
        },
      ],
    },
    {
      name: "ingestSharePointFiles",
      description:
        "Ingests files from SharePoint library into Graphlit knowledge base.\n    Accepts a SharePoint libraryId and an optional folderId to ingest files from a specific SharePoint folder.\n    Libraries can be enumerated with listSharePointLibraries and library folders with listSharePointFolders.\n    Accepts an optional read limit for the number of files to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description: "Parameter: folderId",
          required: false,
        },
        {
          name: "libraryId",
          type: "string",
          description: "Parameter: libraryId",
          required: true,
        },
        {
          name: "readLimit",
          type: "number",
          description: "Number of files to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestOneDriveFiles",
      description:
        "Ingests files from OneDrive folder into Graphlit knowledge base.\n    Accepts an optional read limit for the number of files to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of files to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestGoogleDriveFiles",
      description:
        "Ingests files from Google Drive folder into Graphlit knowledge base.\n    Accepts an optional read limit for the number of files to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of files to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestDropboxFiles",
      description:
        "Ingests files from Dropbox folder into Graphlit knowledge base.\n    Accepts optional relative path to Dropbox folder (i.e. /Pictures), and an optional read limit for the number of files to ingest.\n    If no path provided, ingests files from root Dropbox folder.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: false,
        },
        {
          name: "readLimit",
          type: "number",
          description: "Number of files to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestBoxFiles",
      description:
        'Ingests files from Box folder into Graphlit knowledge base.\n    Accepts optional Box folder identifier, and an optional read limit for the number of files to ingest.\n    If no folder identifier provided, ingests files from root Box folder (i.e. "0").\n    Folder identifier can be inferred from Box URL. https://app.box.com/folder/123456 -> folder identifier is "123456".\n    Executes asynchronously and returns the feed identifier.',
      parameters: [
        {
          name: "folderId",
          type: "string",
          description: "Parameter: folderId",
          required: false,
        },
        {
          name: "readLimit",
          type: "number",
          description: "Number of files to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestGitHubFiles",
      description:
        "Ingests files from GitHub repository into Graphlit knowledge base.\n    Accepts GitHub repository owner and repository name and an optional read limit for the number of files to ingest.\n    For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of files to ingest, optional. Defaults to 100.",
          required: false,
        },
        {
          name: "repositoryName",
          type: "string",
          description: "GitHub repository name.",
          required: true,
        },
        {
          name: "repositoryOwner",
          type: "string",
          description: "GitHub repository owner.",
          required: true,
        },
      ],
    },
    {
      name: "ingestNotionPages",
      description:
        "Ingests pages from Notion database into Graphlit knowledge base.\n        Accepts an optional read limit for the number of messages to ingest.\n        Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of pages to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestUrl",
      description:
        "Ingests content from URL into Graphlit knowledge base.\n    Can scrape web pages, and can ingest individual Word documents, PDFs, audio recordings, videos, images, or any other unstructured data.\n    Executes asynchronously and returns the content identifier.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "ingestMicrosoftTeamsMessages",
      description:
        "Ingests messages from Microsoft Teams channel into Graphlit knowledge base.\n    Accepts Microsoft Teams team identifier and channel identifier, and an optional read limit for the number of messages to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "channelId",
          type: "string",
          description: "Parameter: channelId",
          required: true,
        },
        {
          name: "readLimit",
          type: "number",
          description:
            "Number of messages to ingest, optional. Defaults to 100.",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Parameter: teamId",
          required: true,
        },
      ],
    },
    {
      name: "ingestSlackMessages",
      description:
        "Ingests messages from Slack channel into Graphlit knowledge base.\n        Accepts Slack channel name and an optional read limit for the number of messages to ingest.\n        Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Parameter: channelName",
          required: true,
        },
        {
          name: "readLimit",
          type: "number",
          description:
            "Number of messages to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestDiscordMessages",
      description:
        "Ingests messages from Discord channel into Graphlit knowledge base.\n        Accepts Discord channel name and an optional read limit for the number of messages to ingest.\n        Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Parameter: channelName",
          required: true,
        },
        {
          name: "readLimit",
          type: "number",
          description:
            "Number of messages to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestRedditPosts",
      description:
        "Ingests posts from Reddit subreddit into Graphlit knowledge base.\n        Accepts a subreddit name and an optional read limit for the number of posts to ingest.\n        Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of posts to ingest, optional. Defaults to 100.",
          required: false,
        },
        {
          name: "subredditName",
          type: "string",
          description: "Parameter: subredditName",
          required: true,
        },
      ],
    },
    {
      name: "ingestGoogleEmail",
      description:
        "Ingests emails from Google Email account into Graphlit knowledge base.\n    Accepts an optional read limit for the number of emails to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of emails to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestMicrosoftEmail",
      description:
        "Ingests emails from Microsoft Email account into Graphlit knowledge base.\n    Accepts an optional read limit for the number of emails to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of emails to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestLinearIssues",
      description:
        "Ingests issues from Linear project into Graphlit knowledge base.\n    Accepts Linear project name and an optional read limit for the number of issues to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "projectName",
          type: "string",
          description: "Parameter: projectName",
          required: true,
        },
        {
          name: "readLimit",
          type: "number",
          description: "Number of issues to ingest, optional. Defaults to 100.",
          required: false,
        },
      ],
    },
    {
      name: "ingestGitHubIssues",
      description:
        "Ingests issues from GitHub repository into Graphlit knowledge base.\n    Accepts GitHub repository owner and repository name and an optional read limit for the number of issues to ingest.\n    For example, for GitHub repository (https://github.com/openai/tiktoken), 'openai' is the repository owner, and 'tiktoken' is the repository name.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of issues to ingest, optional. Defaults to 100.",
          required: false,
        },
        {
          name: "repositoryName",
          type: "string",
          description: "GitHub repository name.",
          required: true,
        },
        {
          name: "repositoryOwner",
          type: "string",
          description: "GitHub repository owner.",
          required: true,
        },
      ],
    },
    {
      name: "ingestJiraIssues",
      description:
        "Ingests issues from Atlassian Jira repository into Graphlit knowledge base.\n    Accepts Atlassian Jira server URL and project name, and an optional read limit for the number of issues to ingest.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "projectName",
          type: "string",
          description: "Parameter: projectName",
          required: true,
        },
        {
          name: "readLimit",
          type: "number",
          description: "Number of issues to ingest, optional. Defaults to 100.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "webCrawl",
      description:
        "Crawls web pages from web site into Graphlit knowledge base.\n    Accepts a URL and an optional read limit for the number of pages to crawl.\n    Uses sitemap.xml to discover pages to be crawled from website.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description:
            "Number of web pages to ingest, optional. Defaults to 100.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "webMap",
      description:
        "Enumerates the web pages at or beneath the provided URL using web sitemap. \n    Does *not* ingest web pages into Graphlit knowledge base.\n    Accepts web page URL as string.\n    Returns list of mapped URIs from web site.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "webSearch",
      description:
        "Performs web search based on search query. Format the search query as what would be entered into a Google search.\n    Prefer calling this tool over using 'curl' directly for any web search.\n    Does *not* ingest pages into Graphlit knowledge base.\n    Accepts search query as string, and optional search service type.\n    Can search for web pages, podcasts, videos, images, news, or shopping.\n    Search service types: Tavily, Exa. Defaults to Tavily.\n    Returns URL, title and relevant Markdown text from resulting web pages.",
      parameters: [
        {
          name: "search",
          type: "string",
          description: "Parameter: search",
          required: true,
        },
        {
          name: "searchService",
          type: "string",
          description: "Parameter: searchService",
          required: false,
        },
      ],
    },
    {
      name: "ingestRSS",
      description:
        "Ingests posts from RSS feed into Graphlit knowledge base.\n    For podcast RSS feeds, audio will be downloaded, transcribed and ingested into Graphlit knowledge base.\n    Accepts RSS URL and an optional read limit for the number of posts to read.\n    Executes asynchronously and returns the feed identifier.",
      parameters: [
        {
          name: "readLimit",
          type: "number",
          description: "Number of issues to posts, optional. Defaults to 25.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "ingestText",
      description:
        "Ingests text as content into Graphlit knowledge base.\n    Accepts a name for the content object, the text itself, and an optional text type (Plain, Markdown, Html). Defaults to Markdown text type.\n    Can use for storing long-term textual memories or the output from LLM or other tools as content resources, which can be later searched or retrieved.\n    Executes *synchronously* and returns the content identifier.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
        {
          name: "textType",
          type: "string",
          description: "Parameter: textType",
          required: false,
        },
      ],
    },
    {
      name: "ingestFile",
      description:
        "Ingests local file into Graphlit knowledge base.\n    Accepts the path to the file in the local filesystem.\n    Executes asynchronously and returns the content identifier.",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Parameter: filePath",
          required: true,
        },
      ],
    },
    {
      name: "screenshotPage",
      description:
        "Screenshots web page from URL.\n    Executes asynchronously and returns the content identifier.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "describeImage",
      description:
        "Prompts vision LLM and returns completion. \n    Does *not* ingest image into Graphlit knowledge base.\n    Accepts image URL as string.\n    Returns Markdown text from LLM completion.",
      parameters: [
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "describeContent",
      description:
        "Prompts vision LLM and returns description of image content. \n    Accepts content identifier as string, and optional prompt for image description.\n    Returns Markdown text from LLM completion.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/graphlit/graphlit-mcp-server",
  _varName: "graphlitmcpserverPlugin",
};

const outlookCalendarMcpPlugin: Plugin = {
  id: "08enllwrbp",
  name: "Outlook Calendar MCP",
  description:
    "The Outlook Calendar MCP enables Claude to directly manage Microsoft Outlook calendars on Windows systems, offering a privacy-focused solution that keeps all data local. Users can view events, create meetings, find free time slots, and manage multiple calendars without their data leaving their machi",
  image: "https://github.com/merajmehrabi.png",
  actions: [
    {
      name: "list_events",
      description: "List calendar events within a specified date range",
      parameters: [
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description: "End date in MM/DD/YYYY format (optional)",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date in MM/DD/YYYY format",
          required: true,
        },
      ],
    },
    {
      name: "create_event",
      description: "Create a new calendar event or meeting",
      parameters: [
        {
          name: "attendees",
          type: "string",
          description:
            "Semicolon-separated list of attendee email addresses (optional)",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Event description/body (optional)",
          required: false,
        },
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description:
            "End date in MM/DD/YYYY format (optional, defaults to start date)",
          required: false,
        },
        {
          name: "endTime",
          type: "string",
          description:
            "End time in HH:MM AM/PM format (optional, defaults to 30 minutes after start time)",
          required: false,
        },
        {
          name: "isMeeting",
          type: "boolean",
          description:
            "Whether this is a meeting with attendees (optional, defaults to false)",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "Event location (optional)",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date in MM/DD/YYYY format",
          required: true,
        },
        {
          name: "startTime",
          type: "string",
          description: "Start time in HH:MM AM/PM format",
          required: true,
        },
        {
          name: "subject",
          type: "string",
          description: "Event subject/title",
          required: true,
        },
      ],
    },
    {
      name: "find_free_slots",
      description: "Find available time slots in the calendar",
      parameters: [
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "duration",
          type: "number",
          description: "Duration in minutes (optional, defaults to 30)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description:
            "End date in MM/DD/YYYY format (optional, defaults to 7 days from start date)",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date in MM/DD/YYYY format",
          required: true,
        },
        {
          name: "workDayEnd",
          type: "number",
          description: "Work day end hour (0-23) (optional, defaults to 17)",
          required: false,
        },
        {
          name: "workDayStart",
          type: "number",
          description: "Work day start hour (0-23) (optional, defaults to 9)",
          required: false,
        },
      ],
    },
    {
      name: "get_attendee_status",
      description: "Check the response status of meeting attendees",
      parameters: [
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "eventId",
          type: "string",
          description: "Event ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_event",
      description: "Delete a calendar event by its ID",
      parameters: [
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "eventId",
          type: "string",
          description: "Event ID to delete",
          required: true,
        },
      ],
    },
    {
      name: "update_event",
      description: "Update an existing calendar event",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "New event description/body (optional)",
          required: false,
        },
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description: "New end date in MM/DD/YYYY format (optional)",
          required: false,
        },
        {
          name: "endTime",
          type: "string",
          description: "New end time in HH:MM AM/PM format (optional)",
          required: false,
        },
        {
          name: "eventId",
          type: "string",
          description: "Event ID to update",
          required: true,
        },
        {
          name: "location",
          type: "string",
          description: "New event location (optional)",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "New start date in MM/DD/YYYY format (optional)",
          required: false,
        },
        {
          name: "startTime",
          type: "string",
          description: "New start time in HH:MM AM/PM format (optional)",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "New event subject/title (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_calendars",
      description: "List available calendars",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/merajmehrabi/Outlook_Calendar_MCP",
  _varName: "outlookCalendarMcpPlugin",
};

const duckduckgoMcpServer1Plugin: Plugin = {
  id: "phcus2gcpn",
  name: "DuckDuckGo MCP Server",
  description:
    "A Model Context Protocol (MCP) server that provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing.",
  image: "https://github.com/nickclyde.png",
  actions: [
    {
      name: "search",
      description:
        "\nSearch DuckDuckGo and return formatted results.\n\nArgs:\n    query: The search query string\n    max_results: Maximum number of results to return (default: 10)\n    ctx: MCP context for logging\n",
      parameters: [
        {
          name: "max_results",
          type: "integer",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "fetch_content",
      description:
        "\nFetch and parse content from a webpage URL.\n\nArgs:\n    url: The webpage URL to fetch content from\n    ctx: MCP context for logging\n",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nickclyde/duckduckgo-mcp-server",
  _varName: "duckduckgoMcpServer1Plugin",
};

const mcppinterestPlugin: Plugin = {
  id: "9czyga0hyf",
  name: "mcp-pinterest",
  description:
    "A Pinterest Model Context Protocol (MCP) server for image search and information retrieval",
  image: "https://github.com/terryso.png",
  actions: [],
  githubUrl: "https://github.com/terryso/mcp-pinterest",
  _varName: "mcppinterestPlugin",
};

const omniparserautoguimcpPlugin: Plugin = {
  id: "774hewzylm",
  name: "omniparser-autogui-mcp",
  description: "Automatic operation of on-screen GUI.",
  image: "https://github.com/NON906.png",
  actions: [],
  githubUrl: "https://github.com/NON906/omniparser-autogui-mcp",
  _varName: "omniparserautoguimcpPlugin",
};

const mcpsummarizerPlugin: Plugin = {
  id: "wbqyofepik",
  name: "mcp-summarizer",
  description:
    "MCP Server for AI Summarization, Support for multiple content types:\n\n* Plain text\n* Web pages\n* PDF documents\n* EPUB books\n* HTML content",
  image: "https://github.com/0xshellming.png",
  actions: [
    {
      name: "summarize",
      description: "Action for summarize",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "maxLength",
          type: "number",
          description: "Parameter: maxLength",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/0xshellming/mcp-summarizer",
  _varName: "mcpsummarizerPlugin",
};

const focus_mcp_sqlPlugin: Plugin = {
  id: "xnaaueijnh",
  name: "focus_mcp_sql",
  description:
    "A NL2SQL plugin based on FocusSearch keyword parsing, offering greater accuracy, higher speed, and more reliability!",
  image: "https://github.com/FocusSearch.png",
  actions: [],
  githubUrl: "https://github.com/FocusSearch/focus_mcp_sql",
  _varName: "focus_mcp_sqlPlugin",
};

const focus_mcp_dataPlugin: Plugin = {
  id: "z91tsdqkew",
  name: "focus_mcp_data",
  description:
    "The intelligent data query plugin under DataFocus that supports multi-round conversations provides plug-and-play ChatBI capabilities.",
  image: "https://github.com/FocusSearch.png",
  actions: [],
  githubUrl: "https://github.com/FocusSearch/focus_mcp_data",
  _varName: "focus_mcp_dataPlugin",
};

const ouraMcpServerPlugin: Plugin = {
  id: "am9tdfrzm3",
  name: "Oura MCP Server",
  description:
    "Enables querying sleep, readiness, and resilience data from the Oura API via the Model Context Protocol (MCP), allowing natural language interaction and seamless integration with tools like Claude.",
  image: "https://github.com/tomekkorbak.png",
  actions: [
    {
      name: "get_sleep_data",
      description:
        "\n    Get sleep data for a specific date range.\n\n    Args:\n        start_date: Start date in ISO format (YYYY-MM-DD)\n        end_date: End date in ISO format (YYYY-MM-DD)\n\n    Returns:\n        Dictionary containing sleep data\n    ",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Parameter: end_date",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description: "Parameter: start_date",
          required: true,
        },
      ],
    },
    {
      name: "get_readiness_data",
      description:
        "\n    Get readiness data for a specific date range.\n\n    Args:\n        start_date: Start date in ISO format (YYYY-MM-DD)\n        end_date: End date in ISO format (YYYY-MM-DD)\n\n    Returns:\n        Dictionary containing readiness data\n    ",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Parameter: end_date",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description: "Parameter: start_date",
          required: true,
        },
      ],
    },
    {
      name: "get_resilience_data",
      description:
        "\n    Get resilience data for a specific date range.\n\n    Args:\n        start_date: Start date in ISO format (YYYY-MM-DD)\n        end_date: End date in ISO format (YYYY-MM-DD)\n\n    Returns:\n        Dictionary containing resilience data\n    ",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Parameter: end_date",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description: "Parameter: start_date",
          required: true,
        },
      ],
    },
    {
      name: "get_today_sleep_data",
      description:
        "\n    Get sleep data for today.\n\n    Returns:\n        Dictionary containing sleep data for today\n    ",
      parameters: [],
    },
    {
      name: "get_today_readiness_data",
      description:
        "\n    Get readiness data for today.\n\n    Returns:\n        Dictionary containing readiness data for today\n    ",
      parameters: [],
    },
    {
      name: "get_today_resilience_data",
      description:
        "\n    Get resilience data for today.\n\n    Returns:\n        Dictionary containing resilience data for today\n    ",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/tomekkorbak/oura-mcp-server",
  _varName: "ouraMcpServerPlugin",
};

const mcpAtlassianPlugin: Plugin = {
  id: "w8drdld8a6",
  name: "MCP Atlassian",
  description:
    "An MCP server that enables AI agents to interact with Atlassian products (Confluence and Jira) for content management, issue tracking, and project management through a standardized interface.",
  image: "https://github.com/samwang0723.png",
  actions: [],
  githubUrl: "https://github.com/samwang0723/mcp-atlassian",
  _varName: "mcpAtlassianPlugin",
};

const mcpRedminePlugin: Plugin = {
  id: "y08jjdmkyr",
  name: "MCP Redmine",
  description:
    "Connects Claude Desktop to Redmine for seamless project and issue management, including searching, creating, updating, and tracking tasks using Redmine's API.",
  image: "https://github.com/runekaagaard.png",
  actions: [
    {
      name: "redmine_request",
      description:
        "\nMake a request to the Redmine API\n\nArgs:\n    path: API endpoint path (e.g. '/issues.json')\n    method: HTTP method to use (default: 'get')\n    data: Dictionary for request body (for POST/PUT)\n    params: Dictionary for query parameters\n\nReturns:\n    str: YAML string containing response status code, body and error message\n",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Parameter: data",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "Parameter: method",
          required: false,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "redmine_paths_list",
      description:
        "Return a list of available API paths from OpenAPI spec\n\nRetrieves all endpoint paths defined in the Redmine OpenAPI specification. Remember that you can use the\nredmine_paths_info tool to get the full specfication for a path.\n\nReturns:\n    str: YAML string containing a list of path templates (e.g. '/issues.json')\n",
      parameters: [],
    },
    {
      name: "redmine_paths_info",
      description:
        "Get full path information for given path templates\n\nArgs:\n    path_templates: List of path templates (e.g. ['/issues.json', '/projects.json'])\n    \nReturns:\n    str: YAML string containing API specifications for the requested paths\n",
      parameters: [
        {
          name: "path_templates",
          type: "array",
          description: "Parameter: path_templates",
          required: true,
        },
      ],
    },
    {
      name: "redmine_upload",
      description:
        "\nUpload a file to Redmine and get a token for attachment\n\nArgs:\n    file_path: Fully qualified path to the file to upload\n    description: Optional description for the file\n    \nReturns:\n    str: YAML string containing response status code, body and error message\n         The body contains the attachment token\n",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: true,
        },
      ],
    },
    {
      name: "redmine_download",
      description:
        "\nDownload an attachment from Redmine and save it to a local file\n\nArgs:\n    attachment_id: The ID of the attachment to download\n    save_path: Fully qualified path where the file should be saved to\n    filename: Optional filename to use for the attachment. If not provided, \n             will be determined from attachment data or URL\n    \nReturns:\n    str: YAML string containing download status, file path, and any error messages\n",
      parameters: [
        {
          name: "attachment_id",
          type: "integer",
          description: "Parameter: attachment_id",
          required: true,
        },
        {
          name: "filename",
          type: "string",
          description: "Parameter: filename",
          required: false,
        },
        {
          name: "save_path",
          type: "string",
          description: "Parameter: save_path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/runekaagaard/mcp-redmine",
  _varName: "mcpRedminePlugin",
};

const mcpYoutubeServerPlugin: Plugin = {
  id: "cw5xmesqmt",
  name: "MCP YouTube Server",
  description:
    "A server for downloading, processing, and managing YouTube content with features like video quality selection, format conversion, and metadata extraction.",
  image: "https://github.com/DimitriGeelen.png",
  actions: [],
  githubUrl: "https://github.com/DimitriGeelen/mcp-youtube",
  _varName: "mcpYoutubeServerPlugin",
};

const retailSupplyChainAnalysisMcpPlugin: Plugin = {
  id: "7eaayourkx",
  name: "Retail Supply Chain Analysis MCP",
  description:
    "Enables users to upload retail data, analyze trends, optimize inventory, and forecast sales using AI-powered insights, acting as a senior supply chain expert.",
  image: "https://github.com/jaydrage.png",
  actions: [],
  githubUrl: "https://github.com/jaydrage/MCP_VMI",
  _varName: "retailSupplyChainAnalysisMcpPlugin",
};

const geminiDocsMcpServerPlugin: Plugin = {
  id: "6qobflcypm",
  name: "Gemini Docs MCP Server",
  description:
    "Provides curated documentation access via the Gemini API, enabling users to query and interact with technical docs effectively by overcoming context and search limitations.",
  image: "https://github.com/M-Gonzalo.png",
  actions: [],
  githubUrl: "https://github.com/M-Gonzalo/cosa-sai",
  _varName: "geminiDocsMcpServerPlugin",
};

const matlabMcpServerPlugin: Plugin = {
  id: "t3mmsdxvmd",
  name: "MATLAB MCP Server",
  description:
    "Integrates MATLAB with AI to execute code, generate scripts from natural language, and access MATLAB documentation seamlessly.",
  image: "https://github.com/WilliamCloudQi.png",
  actions: [
    {
      name: "execute_matlab_code",
      description: "Execute MATLAB code and return the results",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "MATLAB code to execute",
          required: true,
        },
        {
          name: "saveScript",
          type: "boolean",
          description: "Whether to save the MATLAB script for future reference",
          required: false,
        },
        {
          name: "scriptPath",
          type: "string",
          description: "Custom path to save the MATLAB script (optional)",
          required: false,
        },
      ],
    },
    {
      name: "generate_matlab_code",
      description: "Generate MATLAB code from a natural language description",
      parameters: [
        {
          name: "description",
          type: "string",
          description:
            "Natural language description of what the code should do",
          required: true,
        },
        {
          name: "saveScript",
          type: "boolean",
          description: "Whether to save the generated MATLAB script",
          required: false,
        },
        {
          name: "scriptPath",
          type: "string",
          description: "Custom path to save the MATLAB script (optional)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/WilliamCloudQi/matlab-mcp-server",
  _varName: "matlabMcpServerPlugin",
};

const mysqlMcpServer1Plugin: Plugin = {
  id: "kucglstegf",
  name: "MySQL MCP Server",
  description:
    "Enables interaction with a MySQL database via JSON commands, supporting read-only queries, test execution of write queries, and table information retrieval through Docker.",
  image: "https://github.com/xiangma9712.png",
  actions: [
    {
      name: "query",
      description: "読み取り専用のSQLクエリを実行します。",
      parameters: [
        {
          name: "sql",
          type: "string",
          description: "Parameter: sql",
          required: true,
        },
      ],
    },
    {
      name: "test_execute",
      description: "SQLが実行可能か確認し、最後にロールバックします。",
      parameters: [
        {
          name: "sql",
          type: "string",
          description: "Parameter: sql",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "データベース内のテーブル一覧を取得します。",
      parameters: [],
    },
    {
      name: "describe_table",
      description: "テーブルのカラム情報を取得します。",
      parameters: [
        {
          name: "tableName",
          type: "string",
          description: "Parameter: tableName",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/xiangma9712/mysql-mcp-server",
  _varName: "mysqlMcpServer1Plugin",
};

const ragrabbitmcpPlugin: Plugin = {
  id: "pk7nocs5pz",
  name: "@ragrabbit/mcp",
  description:
    "Access any documentation indexed by RagRabbit Open Source AI site search",
  image: "https://github.com/madarco.png",
  actions: [],
  githubUrl: "https://github.com/madarco/ragrabbit",
  _varName: "ragrabbitmcpPlugin",
};

const fileFinderMcpServerPlugin: Plugin = {
  id: "yltkvxvsux",
  name: "File Finder MCP Server",
  description:
    "Enables searching for files by name fragments via JSON-RPC or an HTTP REST API, with options for direct use or integration with other tools like VS Code.",
  image: "https://github.com/sergey-fintech.png",
  actions: [
    {
      name: "search_files",
      description:
        "Search for files containing a specified fragment in their names",
      parameters: [
        {
          name: "fragment",
          type: "string",
          description: "Text fragment to search for in file names",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sergey-fintech/MCP",
  _varName: "fileFinderMcpServerPlugin",
};

const linearMcpServer3Plugin: Plugin = {
  id: "zf0v0ehivn",
  name: "Linear MCP Server",
  description:
    "Enables interaction with Linear's API for managing issues, teams, and projects programmatically through the Model Context Protocol.",
  image: "https://github.com/tiovikram.png",
  actions: [
    {
      name: "create_issue",
      description: "Create a new issue in Linear",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Assignee user ID (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description (markdown supported)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Label IDs to apply (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Priority (0-4, optional)",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "list_issues",
      description: "List issues with optional filters",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Filter by assignee ID (optional)",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of issues to return (default: 50)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by status (optional)",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Filter by team ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing issue",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "New assignee ID (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description (optional)",
          required: false,
        },
        {
          name: "issueId",
          type: "string",
          description: "Issue ID",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description: "New priority (0-4, optional)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New status (optional)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title (optional)",
          required: false,
        },
      ],
    },
    {
      name: "list_teams",
      description: "List all teams in the workspace",
      parameters: [],
    },
    {
      name: "list_projects",
      description: "List all projects",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Number of projects to return (default: 50)",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Filter by team ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "search_issues",
      description: "Search for issues using a text query",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Number of results to return (default: 50)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query text",
          required: true,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Get detailed information about a specific issue",
      parameters: [
        {
          name: "issueId",
          type: "string",
          description: "Issue ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tiovikram/linear-mcp",
  _varName: "linearMcpServer3Plugin",
};

const frontendReviewMcpPlugin: Plugin = {
  id: "szzhau4fdr",
  name: "Frontend Review MCP",
  description:
    "An MCP server that visually reviews UI edit requests by comparing screenshots before and after edits, ensuring changes satisfy user requests.",
  image: "https://github.com/zueai.png",
  actions: [
    {
      name: "reviewEdit",
      description:
        "Perform a visual review of a UI edit request. The 'before screenshot' is a screenshot of the page before the edit, and the 'after screenshot' is the screenshot of the page after the edit. You will recieve either a yes or no response, indicating whether the edit visually satisfies the edit request. If no, it will provide a detailed explanation of why the edit does not satisfy the request so you can continue to work on it.",
      parameters: [
        {
          name: "afterScreenshotPath",
          type: "string",
          description: "Absolute path to the 'after' screenshot file (png)",
          required: true,
        },
        {
          name: "beforeScreenshotPath",
          type: "string",
          description: "Absolute path to the 'before' screenshot file (png)",
          required: true,
        },
        {
          name: "editRequest",
          type: "string",
          description:
            "A detailed description of the UI edit request made by the user. Do not describe the changes you made, but just summarize what the user asked you to change on the page.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zueai/frontend-review-mcp",
  _varName: "frontendReviewMcpPlugin",
};

const mcp3dPrinterServerPlugin: Plugin = {
  id: "7f6v2enbgk",
  name: "MCP 3D Printer Server",
  description:
    "Enables interaction with 3D printer management systems through an MCP server, supporting STL file manipulation, slicing, and control of printers like OctoPrint, Klipper, Duet, and more.",
  image: "https://github.com/DMontgomery40.png",
  actions: [
    {
      name: "scale_stl",
      description: "Scale an STL model uniformly or along specific axes",
      parameters: [
        {
          name: "scale_factor",
          type: "number",
          description: "Uniform scaling factor to apply",
          required: false,
        },
        {
          name: "scale_x",
          type: "number",
          description:
            "X-axis scaling factor (overrides scale_factor for X axis)",
          required: false,
        },
        {
          name: "scale_y",
          type: "number",
          description:
            "Y-axis scaling factor (overrides scale_factor for Y axis)",
          required: false,
        },
        {
          name: "scale_z",
          type: "number",
          description:
            "Z-axis scaling factor (overrides scale_factor for Z axis)",
          required: false,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file",
          required: true,
        },
      ],
    },
    {
      name: "rotate_stl",
      description: "Rotate an STL model around specific axes",
      parameters: [
        {
          name: "rotate_x",
          type: "number",
          description: "Rotation around X-axis in degrees",
          required: false,
        },
        {
          name: "rotate_y",
          type: "number",
          description: "Rotation around Y-axis in degrees",
          required: false,
        },
        {
          name: "rotate_z",
          type: "number",
          description: "Rotation around Z-axis in degrees",
          required: false,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file",
          required: true,
        },
      ],
    },
    {
      name: "translate_stl",
      description: "Move an STL model along specific axes",
      parameters: [
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file",
          required: true,
        },
        {
          name: "translate_x",
          type: "number",
          description: "Translation along X-axis in millimeters",
          required: false,
        },
        {
          name: "translate_y",
          type: "number",
          description: "Translation along Y-axis in millimeters",
          required: false,
        },
        {
          name: "translate_z",
          type: "number",
          description: "Translation along Z-axis in millimeters",
          required: false,
        },
      ],
    },
    {
      name: "modify_stl_section",
      description:
        "Apply a specific transformation to a selected section of an STL file",
      parameters: [
        {
          name: "custom_max_x",
          type: "number",
          description: "Maximum X for custom section bounds",
          required: false,
        },
        {
          name: "custom_max_y",
          type: "number",
          description: "Maximum Y for custom section bounds",
          required: false,
        },
        {
          name: "custom_max_z",
          type: "number",
          description: "Maximum Z for custom section bounds",
          required: false,
        },
        {
          name: "custom_min_x",
          type: "number",
          description: "Minimum X for custom section bounds",
          required: false,
        },
        {
          name: "custom_min_y",
          type: "number",
          description: "Minimum Y for custom section bounds",
          required: false,
        },
        {
          name: "custom_min_z",
          type: "number",
          description: "Minimum Z for custom section bounds",
          required: false,
        },
        {
          name: "section",
          type: "string",
          description:
            "Section to modify: 'top', 'bottom', 'center', or custom bounds",
          required: true,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file",
          required: true,
        },
        {
          name: "transformation_type",
          type: "string",
          description: "Type of transformation to apply",
          required: true,
        },
        {
          name: "value_x",
          type: "number",
          description: "Transformation value for X axis",
          required: false,
        },
        {
          name: "value_y",
          type: "number",
          description: "Transformation value for Y axis",
          required: false,
        },
        {
          name: "value_z",
          type: "number",
          description: "Transformation value for Z axis",
          required: false,
        },
      ],
    },
    {
      name: "generate_stl_visualization",
      description:
        "Generate an SVG visualization of an STL file from multiple angles",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Height of each view in pixels (default: 300)",
          required: false,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file",
          required: true,
        },
        {
          name: "width",
          type: "number",
          description: "Width of each view in pixels (default: 300)",
          required: false,
        },
      ],
    },
    {
      name: "get_printer_status",
      description: "Get the current status of the 3D printer",
      parameters: [
        {
          name: "api_key",
          type: "string",
          description: "API key for authentication (default: value from env)",
          required: false,
        },
        {
          name: "bambu_serial",
          type: "string",
          description:
            "Serial number for Bambu Lab printers (default: value from env)",
          required: false,
        },
        {
          name: "bambu_token",
          type: "string",
          description:
            "Access token for Bambu Lab printers (default: value from env)",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description:
            "Hostname or IP address of the printer (default: value from env)",
          required: false,
        },
        {
          name: "port",
          type: "string",
          description: "Port of the printer API (default: value from env)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of printer management system (octoprint, klipper, duet, repetier, bambu, prusa, creality) (default: value from env)",
          required: false,
        },
      ],
    },
    {
      name: "extend_stl_base",
      description: "Extend the base of an STL file by a specified amount",
      parameters: [
        {
          name: "extension_inches",
          type: "number",
          description: "Amount to extend the base in inches",
          required: true,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file to modify",
          required: true,
        },
      ],
    },
    {
      name: "slice_stl",
      description: "Slice an STL file to generate G-code",
      parameters: [
        {
          name: "slicer_path",
          type: "string",
          description:
            "Path to the slicer executable (default: value from env)",
          required: false,
        },
        {
          name: "slicer_profile",
          type: "string",
          description: "Profile to use for slicing (default: value from env)",
          required: false,
        },
        {
          name: "slicer_type",
          type: "string",
          description:
            "Type of slicer to use (prusaslicer, cura, slic3r) (default: value from env)",
          required: false,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file to slice",
          required: true,
        },
      ],
    },
    {
      name: "confirm_temperatures",
      description: "Confirm temperature settings in a G-code file",
      parameters: [
        {
          name: "bed_temp",
          type: "number",
          description: "Expected bed temperature",
          required: false,
        },
        {
          name: "extruder_temp",
          type: "number",
          description: "Expected extruder temperature",
          required: false,
        },
        {
          name: "gcode_path",
          type: "string",
          description: "Path to the G-code file",
          required: true,
        },
      ],
    },
    {
      name: "process_and_print_stl",
      description:
        "Process an STL file (extend base), slice it, confirm temperatures, and start printing",
      parameters: [
        {
          name: "api_key",
          type: "string",
          description: "API key for authentication (default: value from env)",
          required: false,
        },
        {
          name: "bed_temp",
          type: "number",
          description: "Expected bed temperature",
          required: false,
        },
        {
          name: "extension_inches",
          type: "number",
          description: "Amount to extend the base in inches",
          required: true,
        },
        {
          name: "extruder_temp",
          type: "number",
          description: "Expected extruder temperature",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description:
            "Hostname or IP address of the printer (default: value from env)",
          required: false,
        },
        {
          name: "port",
          type: "string",
          description: "Port of the printer API (default: value from env)",
          required: false,
        },
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file to process",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of printer management system (default: value from env)",
          required: false,
        },
      ],
    },
    {
      name: "get_stl_info",
      description: "Get detailed information about an STL file",
      parameters: [
        {
          name: "stl_path",
          type: "string",
          description: "Path to the STL file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DMontgomery40/mcp-3D-printer-server",
  _varName: "mcp3dPrinterServerPlugin",
};

const mcpSumoLogicServerPlugin: Plugin = {
  id: "6vnt6vueaf",
  name: "MCP Sumo Logic Server",
  description:
    "Integrates with Sumo Logic's API to enable log search with configurable queries and time ranges, supporting error handling and easy deployment via Docker.",
  image: "https://github.com/samwang0723.png",
  actions: [],
  githubUrl: "https://github.com/samwang0723/mcp-sumologic",
  _varName: "mcpSumoLogicServerPlugin",
};

const mcp2lambdaPlugin: Plugin = {
  id: "tb3g3nssfa",
  name: "MCP2Lambda",
  description:
    "Enables AI models to interact with AWS Lambda functions seamlessly as tools using the Model Control Protocol (MCP), supporting real-time data access, private networks, and custom computational tasks.",
  image: "https://github.com/danilop.png",
  actions: [
    {
      name: "list_lambda_functions",
      description:
        "Tool that lists all AWS Lambda functions that you can call as tools.\n    Use this list to understand what these functions are and what they do.\n    This functions can help you in many different ways.",
      parameters: [],
    },
    {
      name: "invoke_lambda_function",
      description:
        "Tool that invokes an AWS Lambda function with a JSON payload.\n    Before using this tool, list the functions available to you.",
      parameters: [
        {
          name: "function_name",
          type: "string",
          description: "Parameter: function_name",
          required: true,
        },
        {
          name: "parameters",
          type: "object",
          description: "Parameter: parameters",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/danilop/MCP2Lambda",
  _varName: "mcp2lambdaPlugin",
};

const hefengWeatherMcpServerPlugin: Plugin = {
  id: "uviwixc4o8",
  name: "HeFeng Weather MCP Server",
  description:
    "Provides weather forecast data for locations in China using the HeFeng Weather API, with real-time, hourly, or daily forecasts and location-based queries.",
  image: "https://github.com/shanggqm.png",
  actions: [
    {
      name: "get-weather",
      description: "获取中国国内的天气预报",
      parameters: [
        {
          name: "days",
          type: "string",
          description:
            "预报天数，now为实时天气，24h为24小时预报，72h为72小时预报，168h为168小时预报，3d为3天预报，以此类推",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "逗号分隔的经纬度信息 (e.g., 116.40,39.90)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/shanggqm/hefeng-mcp-weather",
  _varName: "hefengWeatherMcpServerPlugin",
};

const httpsgithubcomstreen9reactmcpPlugin: Plugin = {
  id: "xsjsdumc7x",
  name: "https://github.com/Streen9/react-mcp",
  description:
    "react-mcp integrates with Claude Desktop, enabling the creation and modification of React apps based on user prompts",
  image: "https://github.com/Streen9.png",
  actions: [
    {
      name: "create-react-app",
      description: "Create a new React application",
      parameters: [
        {
          name: "directory",
          type: "string",
          description:
            "Base directory to create the app in (defaults to home directory)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the React app",
          required: true,
        },
        {
          name: "template",
          type: "string",
          description: "Template to use (e.g., typescript, cra-template-pwa)",
          required: false,
        },
      ],
    },
    {
      name: "run-react-app",
      description: "Run a React application in development mode",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the React project folder",
          required: true,
        },
      ],
    },
    {
      name: "run-command",
      description: "Run a terminal command",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "directory",
          type: "string",
          description:
            "Directory to run the command in (defaults to current directory)",
          required: false,
        },
      ],
    },
    {
      name: "get-process-output",
      description: "Get the output from a running or completed process",
      parameters: [
        {
          name: "processId",
          type: "string",
          description: "ID of the process to get output from",
          required: true,
        },
      ],
    },
    {
      name: "stop-process",
      description: "Stop a running process",
      parameters: [
        {
          name: "processId",
          type: "string",
          description: "ID of the process to stop",
          required: true,
        },
      ],
    },
    {
      name: "list-processes",
      description: "List all running processes",
      parameters: [],
    },
    {
      name: "edit-file",
      description: "Create or edit a file",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to edit",
          required: true,
        },
      ],
    },
    {
      name: "read-file",
      description: "Read the contents of a file",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to read",
          required: true,
        },
      ],
    },
    {
      name: "install-package",
      description: "Install a npm package in a project",
      parameters: [
        {
          name: "dev",
          type: "boolean",
          description: "Whether to install as a dev dependency",
          required: false,
        },
        {
          name: "directory",
          type: "string",
          description:
            "Directory of the project (defaults to current directory)",
          required: false,
        },
        {
          name: "packageName",
          type: "string",
          description: "Name of the package to install (can include version)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Streen9/react-mcp",
  _varName: "httpsgithubcomstreen9reactmcpPlugin",
};

const dropboxMcpServerPlugin: Plugin = {
  id: "c1cftspvj3",
  name: "Dropbox MCP Server",
  description:
    "Enables interaction with Dropbox through the Model Context Protocol, providing tools for file management, uploads, downloads, deletion, and token updates with secure runtime authentication.",
  image: "https://github.com/amgadabdelhafez.png",
  actions: [],
  githubUrl: "https://github.com/amgadabdelhafez/dbx-mcp-server",
  _varName: "dropboxMcpServerPlugin",
};

const workosMcpServerPlugin: Plugin = {
  id: "26batvw9yn",
  name: "WorkOS MCP Server",
  description:
    "A lightweight MCP server allowing agents to interact with the WorkOS API for streamlined WorkOS operations through natural language commands.",
  image: "https://github.com/zueai.png",
  actions: [],
  githubUrl: "https://github.com/zueai/workos-mcp",
  _varName: "workosMcpServerPlugin",
};

const roomMcpPlugin: Plugin = {
  id: "p6xyqb1e9e",
  name: "Room MCP",
  description:
    "A command-line tool that enables the use of MCP with the Room protocol, allowing agents to create and interact in peer-to-peer virtual rooms for goal-oriented collaboration.",
  image: "https://github.com/agree-able.png",
  actions: [
    {
      name: "create-room-as-host",
      description:
        "create a room, and be the host. \nThe user should provide clear direction for the objective of the room. \nPlease take the user directive and set the first message that will be sent as the host. \nafter calling this, please immediatley call the wait-for-room-response tool,\nAn invite code will be returned, and must be clearly given to the user so they can copy it.",
      parameters: [
        {
          name: "hostFirstMessage",
          type: "string",
          description:
            "The first message to send when the peer connects to the room",
          required: true,
        },
      ],
    },
    {
      name: "join-with-invite",
      description: "join a room with an invite code",
      parameters: [
        {
          name: "invite",
          type: "string",
          description: "Parameter: invite",
          required: true,
        },
      ],
    },
    {
      name: "wait-for-room-response",
      description:
        "wait for a message to arrive in the room, of be notified if the other party left",
      parameters: [
        {
          name: "roomId",
          type: "string",
          description: "Parameter: roomId",
          required: true,
        },
      ],
    },
    {
      name: "send-message",
      description:
        "send a message to a room. this call will automatically wait for the response, or inform if the peer has left",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: true,
        },
        {
          name: "roomId",
          type: "string",
          description: "Parameter: roomId",
          required: true,
        },
      ],
    },
    {
      name: "exit-room",
      description: "exit a room and clean up resources",
      parameters: [
        {
          name: "roomId",
          type: "string",
          description: "Parameter: roomId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/agree-able/room-mcp",
  _varName: "roomMcpPlugin",
};

const appwriteMcpServer1Plugin: Plugin = {
  id: "4c8hai9wl5",
  name: "Appwrite MCP Server",
  description:
    "Enables integration with Appwrite's API for managing databases, users, teams, storage, and other features, facilitating project administration through the Model Context Protocol.",
  image: "https://github.com/appwrite.png",
  actions: [
    {
      name: "databases_create_document",
      description: "Create document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "data",
          type: "string",
          description: "Parameter 'data'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_create_email_attribute",
      description: "Create email attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get_document",
      description: "Get document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_get_index",
      description: "Get index",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_list",
      description: "List databases",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_attributes",
      description: "List attributes",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_collections",
      description: "List collections",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "users_create_scrypt_modified_user",
      description: "Create user with Scrypt modified password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "password_salt",
          type: "string",
          description: "Parameter 'password_salt'",
          required: true,
        },
        {
          name: "password_salt_separator",
          type: "string",
          description: "Parameter 'password_salt_separator'",
          required: true,
        },
        {
          name: "password_signer_key",
          type: "string",
          description: "Parameter 'password_signer_key'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_name",
      description: "Update name",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_password",
      description: "Update password",
      parameters: [
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_phone",
      description: "Update phone",
      parameters: [
        {
          name: "number",
          type: "string",
          description: "Parameter 'number'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_phone_verification",
      description: "Update phone verification",
      parameters: [
        {
          name: "phone_verification",
          type: "string",
          description: "Parameter 'phone_verification'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_prefs",
      description: "Update user preferences",
      parameters: [
        {
          name: "prefs",
          type: "string",
          description: "Parameter 'prefs'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_status",
      description: "Update user status",
      parameters: [
        {
          name: "status",
          type: "string",
          description: "Parameter 'status'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_target",
      description: "Update user target",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter 'identifier'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "provider_id",
          type: "string",
          description: "Parameter 'provider_id'",
          required: false,
        },
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create",
      description: "Create database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_boolean_attribute",
      description: "Create boolean attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_collection",
      description: "Create collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_security",
          type: "string",
          description: "Parameter 'document_security'",
          required: false,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_create_datetime_attribute",
      description: "Create datetime attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_list_documents",
      description: "List documents",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_list_indexes",
      description: "List indexes",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update",
      description: "Update database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_boolean_attribute",
      description: "Update boolean attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_collection",
      description: "Update collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_security",
          type: "string",
          description: "Parameter 'document_security'",
          required: false,
        },
        {
          name: "enabled",
          type: "string",
          description: "Parameter 'enabled'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_datetime_attribute",
      description: "Update dateTime attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "users_create",
      description: "Create user",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: false,
        },
        {
          name: "phone",
          type: "string",
          description: "Parameter 'phone'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_argon2_user",
      description: "Create user with Argon2 password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_bcrypt_user",
      description: "Create user with bcrypt password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_jwt",
      description: "Create user JWT",
      parameters: [
        {
          name: "duration",
          type: "string",
          description: "Parameter 'duration'",
          required: false,
        },
        {
          name: "session_id",
          type: "string",
          description: "Parameter 'session_id'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_md5_user",
      description: "Create user with MD5 password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_mfa_recovery_codes",
      description: "Create MFA recovery codes",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_ph_pass_user",
      description: "Create user with PHPass password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_scrypt_user",
      description: "Create user with Scrypt password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "password_cpu",
          type: "string",
          description: "Parameter 'password_cpu'",
          required: true,
        },
        {
          name: "password_length",
          type: "string",
          description: "Parameter 'password_length'",
          required: true,
        },
        {
          name: "password_memory",
          type: "string",
          description: "Parameter 'password_memory'",
          required: true,
        },
        {
          name: "password_parallel",
          type: "string",
          description: "Parameter 'password_parallel'",
          required: true,
        },
        {
          name: "password_salt",
          type: "string",
          description: "Parameter 'password_salt'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_session",
      description: "Create session",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_sha_user",
      description: "Create user with SHA password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter 'password'",
          required: true,
        },
        {
          name: "password_version",
          type: "string",
          description: "Parameter 'password_version'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_target",
      description: "Create user target",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "Parameter 'identifier'",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter 'name'",
          required: false,
        },
        {
          name: "provider_id",
          type: "string",
          description: "Parameter 'provider_id'",
          required: false,
        },
        {
          name: "provider_type",
          type: "string",
          description: "Parameter 'provider_type'",
          required: true,
        },
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_create_token",
      description: "Create token",
      parameters: [
        {
          name: "expire",
          type: "string",
          description: "Parameter 'expire'",
          required: false,
        },
        {
          name: "length",
          type: "string",
          description: "Parameter 'length'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete",
      description: "Delete user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_identity",
      description: "Delete identity",
      parameters: [
        {
          name: "identity_id",
          type: "string",
          description: "Parameter 'identity_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_mfa_authenticator",
      description: "Delete authenticator",
      parameters: [
        {
          name: "type",
          type: "string",
          description: "Parameter 'type'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_session",
      description: "Delete user session",
      parameters: [
        {
          name: "session_id",
          type: "string",
          description: "Parameter 'session_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_sessions",
      description: "Delete user sessions",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_delete_target",
      description: "Delete user target",
      parameters: [
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get",
      description: "Get user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get_mfa_recovery_codes",
      description: "Get MFA recovery codes",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get_prefs",
      description: "Get user preferences",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_get_target",
      description: "Get user target",
      parameters: [
        {
          name: "target_id",
          type: "string",
          description: "Parameter 'target_id'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list",
      description: "List users",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "users_list_identities",
      description: "List identities",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Parameter 'search'",
          required: false,
        },
      ],
    },
    {
      name: "users_list_logs",
      description: "List user logs",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_memberships",
      description: "List user memberships",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_mfa_factors",
      description: "List factors",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_sessions",
      description: "List user sessions",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_list_targets",
      description: "List user targets",
      parameters: [
        {
          name: "queries",
          type: "string",
          description: "Parameter 'queries'",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_email",
      description: "Update email",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter 'email'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_email_verification",
      description: "Update email verification",
      parameters: [
        {
          name: "email_verification",
          type: "string",
          description: "Parameter 'email_verification'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_labels",
      description: "Update user labels",
      parameters: [
        {
          name: "labels",
          type: "string",
          description: "Parameter 'labels'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_mfa",
      description: "Update MFA",
      parameters: [
        {
          name: "mfa",
          type: "string",
          description: "Parameter 'mfa'",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "users_update_mfa_recovery_codes",
      description: "Regenerate MFA recovery codes",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter 'user_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_enum_attribute",
      description: "Create enum attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "elements",
          type: "string",
          description: "Parameter 'elements'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_float_attribute",
      description: "Create float attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: false,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_index",
      description: "Create index",
      parameters: [
        {
          name: "attributes",
          type: "string",
          description: "Parameter 'attributes'",
          required: true,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "orders",
          type: "string",
          description: "Parameter 'orders'",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter 'type'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_integer_attribute",
      description: "Create integer attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: false,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_ip_attribute",
      description: "Create IP address attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_relationship_attribute",
      description: "Create relationship attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: false,
        },
        {
          name: "on_delete",
          type: "string",
          description: "Parameter 'on_delete'",
          required: false,
        },
        {
          name: "related_collection_id",
          type: "string",
          description: "Parameter 'related_collection_id'",
          required: true,
        },
        {
          name: "two_way",
          type: "string",
          description: "Parameter 'two_way'",
          required: false,
        },
        {
          name: "two_way_key",
          type: "string",
          description: "Parameter 'two_way_key'",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter 'type'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_string_attribute",
      description: "Create string attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "encrypt",
          type: "string",
          description: "Parameter 'encrypt'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
        {
          name: "size",
          type: "string",
          description: "Parameter 'size'",
          required: true,
        },
      ],
    },
    {
      name: "databases_create_url_attribute",
      description: "Create URL attribute",
      parameters: [
        {
          name: "array",
          type: "string",
          description: "Parameter 'array'",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete",
      description: "Delete database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_attribute",
      description: "Delete attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_collection",
      description: "Delete collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_document",
      description: "Delete document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_delete_index",
      description: "Delete index",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get",
      description: "Get database",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get_attribute",
      description: "Get attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
      ],
    },
    {
      name: "databases_get_collection",
      description: "Get collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_document",
      description: "Update document",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "data",
          type: "string",
          description: "Parameter 'data'",
          required: false,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "document_id",
          type: "string",
          description: "Parameter 'document_id'",
          required: true,
        },
        {
          name: "permissions",
          type: "string",
          description: "Parameter 'permissions'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_email_attribute",
      description: "Update email attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_enum_attribute",
      description: "Update enum attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "elements",
          type: "string",
          description: "Parameter 'elements'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_float_attribute",
      description: "Update float attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: true,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_integer_attribute",
      description: "Update integer attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "max",
          type: "string",
          description: "Parameter 'max'",
          required: true,
        },
        {
          name: "min",
          type: "string",
          description: "Parameter 'min'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_ip_attribute",
      description: "Update IP address attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
    {
      name: "databases_update_relationship_attribute",
      description: "Update relationship attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "on_delete",
          type: "string",
          description: "Parameter 'on_delete'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_string_attribute",
      description: "Update string attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
        {
          name: "size",
          type: "string",
          description: "Parameter 'size'",
          required: false,
        },
      ],
    },
    {
      name: "databases_update_url_attribute",
      description: "Update URL attribute",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Parameter 'collection_id'",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "Parameter 'database_id'",
          required: true,
        },
        {
          name: "default",
          type: "string",
          description: "Parameter 'default'",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter 'key'",
          required: true,
        },
        {
          name: "new_key",
          type: "string",
          description: "Parameter 'new_key'",
          required: false,
        },
        {
          name: "required",
          type: "string",
          description: "Parameter 'required'",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/appwrite/mcp",
  _varName: "appwriteMcpServer1Plugin",
};

const siriShortcutsMcpServerPlugin: Plugin = {
  id: "ijrlb9sj4k",
  name: "Siri Shortcuts MCP Server",
  description:
    "Enables interaction with macOS Siri Shortcuts via the Model Context Protocol, allowing users to list, open, and run shortcuts dynamically with optional inputs.",
  image: "https://github.com/dvcrn.png",
  actions: [
    {
      name: "list_shortcuts",
      description: "List all available Siri shortcuts",
      parameters: [],
    },
    {
      name: "open_shortcut",
      description: "Open a shortcut in the Shortcuts app",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the shortcut to open",
          required: true,
        },
      ],
    },
    {
      name: "run_shortcut",
      description: "Run a shortcut with optional input and output parameters",
      parameters: [
        {
          name: "input",
          type: "string",
          description:
            "The input to pass to the shortcut. Can be text, or a filepath",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The name or identifier of the shortcut to run",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dvcrn/mcp-server-siri-shortcuts",
  _varName: "siriShortcutsMcpServerPlugin",
};

const awsathenamcpPlugin: Plugin = {
  id: "0i7dhkex6t",
  name: "aws-athena-mcp",
  description:
    "Run SQL queries with AWS Athena to access data available from AWS Glue catalog.",
  image: "https://github.com/lishenxydlgzs.png",
  actions: [
    {
      name: "run_query",
      description:
        "Execute a SQL query using AWS Athena. Returns full results if query completes before timeout, otherwise returns queryExecutionId.",
      parameters: [
        {
          name: "database",
          type: "string",
          description: "The Athena database to query",
          required: true,
        },
        {
          name: "maxRows",
          type: "number",
          description: "Maximum number of rows to return (default: 1000)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "SQL query to execute",
          required: true,
        },
        {
          name: "timeoutMs",
          type: "number",
          description: "Timeout in milliseconds (default: 60000)",
          required: false,
        },
      ],
    },
    {
      name: "get_result",
      description:
        "Get results for a completed query. Returns error if query is still running.",
      parameters: [
        {
          name: "maxRows",
          type: "number",
          description: "Maximum number of rows to return (default: 1000)",
          required: false,
        },
        {
          name: "queryExecutionId",
          type: "string",
          description: "The query execution ID",
          required: true,
        },
      ],
    },
    {
      name: "get_status",
      description: "Get the current status of a query execution",
      parameters: [
        {
          name: "queryExecutionId",
          type: "string",
          description: "The query execution ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lishenxydlgzs/aws-athena-mcp",
  _varName: "awsathenamcpPlugin",
};

const meilisearchMcpServerPlugin: Plugin = {
  id: "mpo9y8xfor",
  name: "Meilisearch MCP Server",
  description:
    "Enables AI assistants to interact with Meilisearch via the Model Context Protocol, allowing comprehensive index, document, and search management through a standardized interface.",
  image: "https://github.com/devlimelabs.png",
  actions: [
    {
      name: "list-indexes",
      description: "List all indexes in the Meilisearch instance",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of indexes to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of indexes to skip",
          required: false,
        },
      ],
    },
    {
      name: "get-index",
      description: "Get information about a specific Meilisearch index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "create-index",
      description: "Create a new Meilisearch index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier for the new index",
          required: true,
        },
        {
          name: "primaryKey",
          type: "string",
          description: "Primary key for the index",
          required: false,
        },
      ],
    },
    {
      name: "update-index",
      description:
        "Update a Meilisearch index (currently only supports updating the primary key)",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "primaryKey",
          type: "string",
          description: "New primary key for the index",
          required: true,
        },
      ],
    },
    {
      name: "delete-index",
      description: "Delete a Meilisearch index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index to delete",
          required: true,
        },
      ],
    },
    {
      name: "swap-indexes",
      description: "Swap two or more indexes in Meilisearch",
      parameters: [
        {
          name: "indexes",
          type: "string",
          description:
            'JSON array of index pairs to swap, e.g. [["movies", "movies_new"]]',
          required: true,
        },
      ],
    },
    {
      name: "get-documents",
      description: "Get documents from a Meilisearch index",
      parameters: [
        {
          name: "fields",
          type: "string array",
          description: "Fields to return in the documents",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter query to apply",
          required: false,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of documents to return (default: 20)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of documents to skip (default: 0)",
          required: false,
        },
      ],
    },
    {
      name: "get-document",
      description: "Get a document by its ID from a Meilisearch index",
      parameters: [
        {
          name: "documentId",
          type: "string",
          description: "ID of the document to retrieve",
          required: true,
        },
        {
          name: "fields",
          type: "string array",
          description: "Fields to return in the document",
          required: false,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "add-documents",
      description: "Add documents to a Meilisearch index",
      parameters: [
        {
          name: "documents",
          type: "string",
          description: "JSON array of documents to add",
          required: true,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "primaryKey",
          type: "string",
          description: "Primary key for the documents",
          required: false,
        },
      ],
    },
    {
      name: "update-documents",
      description: "Update documents in a Meilisearch index",
      parameters: [
        {
          name: "documents",
          type: "string",
          description: "JSON array of documents to update",
          required: true,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "primaryKey",
          type: "string",
          description: "Primary key for the documents",
          required: false,
        },
      ],
    },
    {
      name: "delete-document",
      description: "Delete a document by its ID from a Meilisearch index",
      parameters: [
        {
          name: "documentId",
          type: "string",
          description: "ID of the document to delete",
          required: true,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "delete-documents",
      description:
        "Delete multiple documents by their IDs from a Meilisearch index",
      parameters: [
        {
          name: "documentIds",
          type: "string",
          description: "JSON array of document IDs to delete",
          required: true,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "delete-all-documents",
      description: "Delete all documents in a Meilisearch index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description: "Search for documents in a Meilisearch index",
      parameters: [
        {
          name: "attributesToCrop",
          type: "string array",
          description: "Attributes to crop",
          required: false,
        },
        {
          name: "attributesToHighlight",
          type: "string array",
          description: "Attributes to highlight",
          required: false,
        },
        {
          name: "attributesToRetrieve",
          type: "string array",
          description: "Attributes to include in results",
          required: false,
        },
        {
          name: "cropLength",
          type: "number",
          description: "Length at which to crop cropped attributes",
          required: false,
        },
        {
          name: "facets",
          type: "string array",
          description: "Facets to return",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter query to apply",
          required: false,
        },
        {
          name: "highlightPostTag",
          type: "string",
          description: "Tag to insert after highlighted text",
          required: false,
        },
        {
          name: "highlightPreTag",
          type: "string",
          description: "Tag to insert before highlighted text",
          required: false,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return (default: 20)",
          required: false,
        },
        {
          name: "matchingStrategy",
          type: "string",
          description: "Matching strategy: 'all' or 'last'",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of results to skip (default: 0)",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "showMatchesPosition",
          type: "boolean",
          description: "Whether to include match positions in results",
          required: false,
        },
        {
          name: "sort",
          type: "string array",
          description: 'Attributes to sort by, e.g. ["price:asc"]',
          required: false,
        },
      ],
    },
    {
      name: "multi-search",
      description: "Perform multiple searches in one request",
      parameters: [
        {
          name: "searches",
          type: "string",
          description:
            "JSON array of search queries, each with indexUid and q fields",
          required: true,
        },
      ],
    },
    {
      name: "facet-search",
      description: "Search for facet values matching specific criteria",
      parameters: [
        {
          name: "facetName",
          type: "string",
          description: "Name of the facet to search",
          required: true,
        },
        {
          name: "facetQuery",
          type: "string",
          description: "Query to match against facet values",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter to apply to the base search",
          required: false,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-settings",
      description: "Get all settings for a Meilisearch index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "update-settings",
      description: "Update settings for a Meilisearch index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "settings",
          type: "string",
          description: "JSON object containing settings to update",
          required: true,
        },
      ],
    },
    {
      name: "reset-settings",
      description:
        "Reset all settings for a Meilisearch index to their default values",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-searchable-attributes",
      description: "Get the searchable attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-displayed-attributes",
      description: "Get the displayed attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-filterable-attributes",
      description: "Get the filterable attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-sortable-attributes",
      description: "Get the sortable attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-ranking-rules",
      description: "Get the ranking rules setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-stop-words",
      description: "Get the stop words setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-synonyms",
      description: "Get the synonyms setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-distinct-attribute",
      description: "Get the distinct attribute setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-typo-tolerance",
      description: "Get the typo tolerance setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-faceting",
      description: "Get the faceting setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-pagination",
      description: "Get the pagination setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "update-searchable-attributes",
      description: "Update the searchable attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-displayed-attributes",
      description: "Update the displayed attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-filterable-attributes",
      description: "Update the filterable attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-sortable-attributes",
      description: "Update the sortable attributes setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-ranking-rules",
      description: "Update the ranking rules setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-stop-words",
      description: "Update the stop words setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-synonyms",
      description: "Update the synonyms setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-distinct-attribute",
      description: "Update the distinct attribute setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-typo-tolerance",
      description: "Update the typo tolerance setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-faceting",
      description: "Update the faceting setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "update-pagination",
      description: "Update the pagination setting",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "JSON value for the setting",
          required: true,
        },
      ],
    },
    {
      name: "reset-searchable-attributes",
      description:
        "Reset the searchable attributes setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-displayed-attributes",
      description:
        "Reset the displayed attributes setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-filterable-attributes",
      description:
        "Reset the filterable attributes setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-sortable-attributes",
      description: "Reset the sortable attributes setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-ranking-rules",
      description: "Reset the ranking rules setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-stop-words",
      description: "Reset the stop words setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-synonyms",
      description: "Reset the synonyms setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-distinct-attribute",
      description: "Reset the distinct attribute setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-typo-tolerance",
      description: "Reset the typo tolerance setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-faceting",
      description: "Reset the faceting setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-pagination",
      description: "Reset the pagination setting to its default value",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "enable-vector-search",
      description:
        "Enable the vector search experimental feature in Meilisearch",
      parameters: [],
    },
    {
      name: "get-experimental-features",
      description: "Get the status of experimental features in Meilisearch",
      parameters: [],
    },
    {
      name: "update-embedders",
      description: "Configure embedders for vector search",
      parameters: [
        {
          name: "embedders",
          type: "string",
          description: "JSON object containing embedder configurations",
          required: true,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "get-embedders",
      description: "Get the embedders configuration for an index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "reset-embedders",
      description: "Reset the embedders configuration for an index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
      ],
    },
    {
      name: "vector-search",
      description: "Perform a vector search in a Meilisearch index",
      parameters: [
        {
          name: "attributes",
          type: "string array",
          description: "Attributes to include in the vector search",
          required: false,
        },
        {
          name: "embedder",
          type: "string",
          description:
            "Name of the embedder to use (if omitted, a 'vector' must be provided)",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description:
            "Filter to apply (e.g., 'genre = horror AND year > 2020')",
          required: false,
        },
        {
          name: "hybrid",
          type: "boolean",
          description:
            "Whether to perform a hybrid search (combining vector and text search)",
          required: false,
        },
        {
          name: "hybridRatio",
          type: "number",
          description:
            "Ratio of vector vs text search in hybrid search (0-1, default: 0.5)",
          required: false,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Unique identifier of the index",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return (default: 20)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of results to skip (default: 0)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Text query to search for (if using 'embedder' instead of 'vector')",
          required: false,
        },
        {
          name: "vector",
          type: "string",
          description: "JSON array representing the vector to search for",
          required: true,
        },
      ],
    },
    {
      name: "health",
      description: "Check if the Meilisearch server is healthy",
      parameters: [],
    },
    {
      name: "version",
      description: "Get the version information of the Meilisearch server",
      parameters: [],
    },
    {
      name: "info",
      description: "Get the system information of the Meilisearch server",
      parameters: [],
    },
    {
      name: "stats",
      description: "Get statistics about all indexes or a specific index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description:
            "Unique identifier of the index (optional, if not provided stats for all indexes will be returned)",
          required: false,
        },
      ],
    },
    {
      name: "get-tasks",
      description: "Get information about tasks with optional filtering",
      parameters: [
        {
          name: "from",
          type: "number",
          description: "Task uid from which to start fetching",
          required: false,
        },
        {
          name: "indexUids",
          type: "string array",
          description: "UIDs of the indexes on which tasks were performed",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tasks to return",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Status of tasks to return",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of tasks to return",
          required: false,
        },
      ],
    },
    {
      name: "delete-tasks",
      description: "Delete tasks based on provided filters",
      parameters: [
        {
          name: "beforeFinishedAt",
          type: "string",
          description:
            "Delete tasks that finished processing before this date (ISO 8601 format)",
          required: false,
        },
        {
          name: "beforeStartedAt",
          type: "string",
          description:
            "Delete tasks that started processing before this date (ISO 8601 format)",
          required: false,
        },
        {
          name: "beforeUid",
          type: "number",
          description: "Delete tasks whose uid is before this value",
          required: false,
        },
        {
          name: "canceledBy",
          type: "number array",
          description: "UIDs of the tasks that canceled tasks to delete",
          required: false,
        },
        {
          name: "indexUids",
          type: "string array",
          description:
            "UIDs of the indexes on which tasks to delete were performed",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description: "Statuses of tasks to delete",
          required: false,
        },
        {
          name: "types",
          type: "string array",
          description: "Types of tasks to delete",
          required: false,
        },
        {
          name: "uids",
          type: "number array",
          description: "UIDs of the tasks to delete",
          required: false,
        },
      ],
    },
    {
      name: "list-tasks",
      description: "List tasks with optional filtering",
      parameters: [
        {
          name: "from",
          type: "number",
          description: "Task uid from which to start fetching",
          required: false,
        },
        {
          name: "indexUids",
          type: "string array",
          description: "UIDs of the indexes on which tasks were performed",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tasks to return",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description: "Statuses of tasks to return",
          required: false,
        },
        {
          name: "types",
          type: "string array",
          description: "Types of tasks to return",
          required: false,
        },
        {
          name: "uids",
          type: "number array",
          description: "UIDs of specific tasks to return",
          required: false,
        },
      ],
    },
    {
      name: "get-task",
      description: "Get information about a specific task",
      parameters: [
        {
          name: "taskUid",
          type: "number",
          description: "Unique identifier of the task",
          required: true,
        },
      ],
    },
    {
      name: "cancel-tasks",
      description: "Cancel tasks based on provided filters",
      parameters: [
        {
          name: "indexUids",
          type: "string array",
          description:
            "UIDs of the indexes on which tasks to cancel were performed",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description: "Statuses of tasks to cancel",
          required: false,
        },
        {
          name: "types",
          type: "string array",
          description: "Types of tasks to cancel",
          required: false,
        },
        {
          name: "uids",
          type: "number array",
          description: "UIDs of the tasks to cancel",
          required: false,
        },
      ],
    },
    {
      name: "wait-for-task",
      description: "Wait for a specific task to complete",
      parameters: [
        {
          name: "intervalMs",
          type: "number",
          description: "Polling interval in milliseconds (default: 500)",
          required: false,
        },
        {
          name: "taskUid",
          type: "number",
          description: "Unique identifier of the task to wait for",
          required: true,
        },
        {
          name: "timeoutMs",
          type: "number",
          description: "Maximum time to wait in milliseconds (default: 5000)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/devlimelabs/meilisearch-ts-mcp",
  _varName: "meilisearchMcpServerPlugin",
};

const mcp2lambda1Plugin: Plugin = {
  id: "4hokv207sz",
  name: "MCP2Lambda",
  description:
    "Enables AI models to interact with AWS Lambda functions via the MCP protocol, allowing access to private resources, real-time data, and custom computation in a secure environment.",
  image: "https://github.com/danilop.png",
  actions: [
    {
      name: "list_lambda_functions",
      description:
        "Tool that lists all AWS Lambda functions that you can call as tools.\n    Use this list to understand what these functions are and what they do.\n    This functions can help you in many different ways.",
      parameters: [],
    },
    {
      name: "invoke_lambda_function",
      description:
        "Tool that invokes an AWS Lambda function with a JSON payload.\n    Before using this tool, list the functions available to you.",
      parameters: [
        {
          name: "function_name",
          type: "string",
          description: "Parameter: function_name",
          required: true,
        },
        {
          name: "parameters",
          type: "object",
          description: "Parameter: parameters",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/danilop/MCP2Lambda",
  _varName: "mcp2lambda1Plugin",
};

const emailSendingMcpPlugin: Plugin = {
  id: "55pe0fq14l",
  name: "Email Sending MCP",
  description:
    "A simple MCP server that enables users to send emails using Resend's API, integrating with tools like Cursor and Claude Desktop for seamless email composition and delivery.",
  image: "https://github.com/resend.png",
  actions: [
    {
      name: "send-email",
      description: "Send an email using Resend",
      parameters: [
        {
          name: "html",
          type: "string",
          description:
            "HTML email content. When provided, the plain text argument MUST be provided as well.",
          required: false,
        },
        {
          name: "scheduledAt",
          type: "string",
          description:
            "Optional parameter to schedule the email. This uses natural language. Examples would be 'tomorrow at 10am' or 'in 2 hours' or 'next day at 9am PST' or 'Friday at 3pm ET'.",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject line",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Plain text email content",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient email address",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/resend/mcp-send-email",
  _varName: "emailSendingMcpPlugin",
};

const jiracontextmcpPlugin: Plugin = {
  id: "a8ob8depqc",
  name: "Jira-Context-MCP",
  description:
    "MCP server to provide Jira Tickets information to AI coding agents like Cursor",
  image: "https://github.com/rahulthedevil.png",
  actions: [],
  githubUrl: "https://github.com/rahulthedevil/Jira-Context-MCP",
  _varName: "jiracontextmcpPlugin",
};

const apifoxMcpServer1Plugin: Plugin = {
  id: "gn6i27789x",
  name: "Apifox MCP Server",
  description:
    "This server acts as a Message Communication Protocol (MCP) service for integrating Apifox and Cursor, enabling OpenAPI interface implementation through AI-driven interaction.",
  image: "https://github.com/Tzott.png",
  actions: [],
  githubUrl: "https://github.com/Tzott/apifox-mcp-demo",
  _varName: "apifoxMcpServer1Plugin",
};

const mcpGoogleWorkspaceServerPlugin: Plugin = {
  id: "epw61ucj89",
  name: "MCP Google Workspace Server",
  description:
    "Enables interaction with Gmail and Google Calendar using the MCP protocol, supporting multiple Google accounts, email management, and calendar operations through natural language.",
  image: "https://github.com/j3k0.png",
  actions: [],
  githubUrl: "https://github.com/j3k0/mcp-google-workspace",
  _varName: "mcpGoogleWorkspaceServerPlugin",
};

const storySdkMcpServerPlugin: Plugin = {
  id: "amg3ohg7vs",
  name: "Story SDK MCP Server",
  description:
    "Provides tools for managing IP assets and licenses, interacting with the Story Python SDK, and handling operations like minting tokens, registering IP, and uploading metadata to IPFS.",
  image: "https://github.com/piplabs.png",
  actions: [],
  githubUrl: "https://github.com/piplabs/story-mcp-hub",
  _varName: "storySdkMcpServerPlugin",
};

const mitmproxymcpMcpServerPlugin: Plugin = {
  id: "gbqpifn5jt",
  name: "mitmproxy-mcp MCP Server",
  description:
    "A server for managing and summarizing notes using a custom URI scheme, with tools to add notes and create styled summaries.",
  image: "https://github.com/lucasoeth.png",
  actions: [
    {
      name: "list_flows",
      description:
        "Retrieves detailed HTTP request/response data including headers, content (or structure preview for large JSON), and metadata from specified flows",
      parameters: [
        {
          name: "session_id",
          type: "string",
          description: "The ID of the session to list flows from",
          required: true,
        },
      ],
    },
    {
      name: "get_flow_details",
      description:
        "Lists HTTP requests/responses from a mitmproxy capture session, showing method, URL, and status codes",
      parameters: [
        {
          name: "flow_indexes",
          type: "integer array",
          description: "The indexes of the flows",
          required: true,
        },
        {
          name: "include_content",
          type: "boolean",
          description:
            "Whether to include full content in the response (default: true)",
          required: false,
        },
        {
          name: "session_id",
          type: "string",
          description: "The ID of the session",
          required: true,
        },
      ],
    },
    {
      name: "extract_json_fields",
      description:
        "Extract specific fields from JSON content in a flow using JSONPath expressions",
      parameters: [
        {
          name: "content_type",
          type: "string",
          description: "Whether to extract from request or response content",
          required: true,
        },
        {
          name: "flow_index",
          type: "integer",
          description: "The index of the flow",
          required: true,
        },
        {
          name: "json_paths",
          type: "string array",
          description:
            "JSONPath expressions to extract (e.g. ['$.data.users', '$.metadata.timestamp'])",
          required: true,
        },
        {
          name: "session_id",
          type: "string",
          description: "The ID of the session",
          required: true,
        },
      ],
    },
    {
      name: "analyze_protection",
      description:
        "Analyze flow for bot protection mechanisms and extract challenge details",
      parameters: [
        {
          name: "extract_scripts",
          type: "boolean",
          description:
            "Whether to extract and analyze JavaScript from the response (default: true)",
          required: false,
        },
        {
          name: "flow_index",
          type: "integer",
          description: "The index of the flow to analyze",
          required: true,
        },
        {
          name: "session_id",
          type: "string",
          description: "The ID of the session",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lucasoeth/mitmproxy-mcp",
  _varName: "mitmproxymcpMcpServerPlugin",
};

const crypto_mcpPlugin: Plugin = {
  id: "e9xj0jkg5y",
  name: "Crypto_MCP",
  description:
    "A Model Context Protocol server for AES encryption and decryption, supporting various modes, padding, and input/output formats for secure data handling.",
  image: "https://github.com/1595901624.png",
  actions: [
    {
      name: "aes_encrypt",
      description: "encrypt text with aes",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "text to encrypt and decrypt",
          required: true,
        },
        {
          name: "iv",
          type: "string",
          description: "iv, default is your-iv-01234567",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "encrypt key, default is your-key-0123456",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "mode, default is ECB",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "output format, default is base64",
          required: false,
        },
        {
          name: "padding",
          type: "string",
          description: "padding mode, default is Pkcs7",
          required: false,
        },
      ],
    },
    {
      name: "aes_decrypt",
      description: "decrypt text with aes",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "text to encrypt and decrypt",
          required: true,
        },
        {
          name: "inputFormat",
          type: "string",
          description: "input format, default is base64",
          required: false,
        },
        {
          name: "iv",
          type: "string",
          description: "iv, default is your-iv-01234567",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "decrypt key, default is your-key-0123456",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "mode, default is ECB",
          required: false,
        },
        {
          name: "padding",
          type: "string",
          description: "padding mode, default is Pkcs7",
          required: false,
        },
      ],
    },
    {
      name: "md5",
      description: "Calculate MD5 hash of a string",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "The input string to hash",
          required: true,
        },
      ],
    },
    {
      name: "sha1",
      description: "Calculate SHA-1 hash of a string",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "The input string to hash",
          required: true,
        },
      ],
    },
    {
      name: "sha256",
      description: "Calculate SHA-256 hash of a string",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "The input string to hash",
          required: true,
        },
      ],
    },
    {
      name: "sha384",
      description: "Calculate SHA-384 hash of a string",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "The input string to hash",
          required: true,
        },
      ],
    },
    {
      name: "sha512",
      description: "Calculate SHA-512 hash of a string",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "The input string to hash",
          required: true,
        },
      ],
    },
    {
      name: "sha224",
      description: "Calculate SHA-224 hash of a string",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "The input string to hash",
          required: true,
        },
      ],
    },
    {
      name: "des_encrypt",
      description: "encrypt text with des",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "text to encrypt",
          required: true,
        },
        {
          name: "iv",
          type: "string",
          description: "initialization vector, default is your-iv-",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "encryption key, default is your-key",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "mode, default is ECB",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "output format, default is base64",
          required: false,
        },
        {
          name: "padding",
          type: "string",
          description: "padding mode, default is Pkcs7",
          required: false,
        },
      ],
    },
    {
      name: "des_decrypt",
      description: "decrypt text with des",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "text to decrypt",
          required: true,
        },
        {
          name: "inputFormat",
          type: "string",
          description: "input format, default is base64",
          required: false,
        },
        {
          name: "iv",
          type: "string",
          description: "initialization vector, default is your-iv-",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "decryption key, default is your-key",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "mode, default is ECB",
          required: false,
        },
        {
          name: "padding",
          type: "string",
          description: "padding mode, default is Pkcs7",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/1595901624/crypto-mcp",
  _varName: "crypto_mcpPlugin",
};

const figmaMcpServer1Plugin: Plugin = {
  id: "4xg15vn8hw",
  name: "Figma MCP Server",
  description:
    "Facilitates the analysis of Figma file structures by extracting node hierarchies, accessible via REST API or MCP protocol.",
  image: "https://github.com/moonray.png",
  actions: [
    {
      name: "analyze_figma_file",
      description:
        "Analyze a Figma file structure to understand its nodes and hierarchy",
      parameters: [
        {
          name: "depth",
          type: "number",
          description: "Optional depth parameter to limit the node tree depth",
          required: false,
        },
        {
          name: "figmaUrl",
          type: "string",
          description: "The URL of the Figma file to analyze",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/moonray/mcp-figma",
  _varName: "figmaMcpServer1Plugin",
};

const ntropyMcpServerPlugin: Plugin = {
  id: "r1aebg5cvb",
  name: "Ntropy MCP Server",
  description:
    "Enables enrichment of banking data through the Ntropy API, including creating account holders and enriching transaction details.",
  image: "https://github.com/smithery-ai.png",
  actions: [],
  githubUrl: "https://github.com/smithery-ai/ntropy-mcp",
  _varName: "ntropyMcpServerPlugin",
};

const cloudflareApiMcpServerPlugin: Plugin = {
  id: "ctrlio9sqi",
  name: "Cloudflare API MCP Server",
  description:
    "Enables agents to interact with the Cloudflare REST API, allowing operations like managing DNS records and other Cloudflare resources through an MCP interface.",
  image: "https://github.com/zueai.png",
  actions: [],
  githubUrl: "https://github.com/zueai/cloudflare-api-mcp",
  _varName: "cloudflareApiMcpServerPlugin",
};

const firebaseMcpServerPlugin: Plugin = {
  id: "dlr8h5ouc9",
  name: "Firebase MCP Server",
  description:
    "A server providing a unified interface to interact with Firebase services, including Authentication, Firestore, and Storage.",
  image: "https://github.com/gemini-dk.png",
  actions: [
    {
      name: "firestore_add_document",
      description: "Add a document to a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Document data",
          required: true,
        },
      ],
    },
    {
      name: "firestore_list_collections",
      description:
        "List collections in Firestore. If documentPath is provided, returns subcollections under that document; otherwise returns root collections.",
      parameters: [
        {
          name: "documentPath",
          type: "string",
          description: "Optional parent document path",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of collections to return",
          required: false,
        },
        {
          name: "pageToken",
          type: "string",
          description: "Token for pagination to get the next page of results",
          required: false,
        },
      ],
    },
    {
      name: "firestore_list_documents",
      description:
        "List documents from a Firestore collection with optional filtering",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "filters",
          type: "object array",
          description: "Array of filter conditions",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of documents to return",
          required: false,
        },
        {
          name: "pageToken",
          type: "string",
          description: "Token for pagination to get the next page of results",
          required: false,
        },
      ],
    },
    {
      name: "firestore_get_document",
      description: "Get a document from a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "firestore_update_document",
      description: "Update a document in a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Updated document data",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "firestore_delete_document",
      description: "Delete a document from a Firestore collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Document ID",
          required: true,
        },
      ],
    },
    {
      name: "auth_get_user",
      description: "Get a user by ID or email from Firebase Authentication",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "User ID or email address",
          required: true,
        },
      ],
    },
    {
      name: "storage_list_files",
      description: "List files in a given path in Firebase Storage",
      parameters: [
        {
          name: "directoryPath",
          type: "string",
          description:
            "The optional path to list files from. If not provided, the root is used.",
          required: false,
        },
      ],
    },
    {
      name: "storage_get_file_info",
      description: "Get file information including metadata and download URL",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "The path of the file to get information for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/gemini-dk/mcp-server-firebase",
  _varName: "firebaseMcpServerPlugin",
};

const mcpEmailServerPlugin: Plugin = {
  id: "s9p1636sin",
  name: "MCP Email Server",
  description:
    "Provides IMAP and SMTP capabilities, enabling developers to manage email services with seamless integration and automated workflows.",
  image: "https://github.com/ai-zerolab.png",
  actions: [],
  githubUrl: "https://github.com/ai-zerolab/mcp-email-server",
  _varName: "mcpEmailServerPlugin",
};

const mcpServerTemplateForCursorIde2Plugin: Plugin = {
  id: "um231rvyla",
  name: "MCP Server Template for Cursor IDE",
  description:
    "A template for creating and connecting custom tools to Cursor IDE using Model Context Protocol with support for cheerful server responses.",
  image: "https://github.com/andreasHornqvist.png",
  actions: [
    {
      name: "mcp_fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "mood",
      description: "Ask the server about its mood - it's always happy!",
      parameters: [
        {
          name: "question",
          type: "string",
          description:
            "Ask this MCP server about its mood! You can phrase your question in any way you like - 'How are you?', 'What's your mood?', or even 'Are you having a good day?'. The server will always respond with a cheerful message and a heart ❤️",
          required: true,
        },
      ],
    },
    {
      name: "generate_image",
      description: "Generate an image using DALL-E 3",
      parameters: [
        {
          name: "n",
          type: "integer",
          description: "Number of images to generate",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "The description of the image you want to generate",
          required: true,
        },
        {
          name: "quality",
          type: "string",
          description: "Image quality (standard or hd)",
          required: false,
        },
        {
          name: "size",
          type: "string",
          description: "Image size (1024x1024, 1024x1792, or 1792x1024)",
          required: false,
        },
      ],
    },
    {
      name: "figma_design",
      description: "Get Figma design data including structure and images",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The full Figma design URL",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/andreasHornqvist/MCP",
  _varName: "mcpServerTemplateForCursorIde2Plugin",
};

const vercelMcpServerPlugin: Plugin = {
  id: "a2zu61kut4",
  name: "Vercel MCP Server",
  description:
    "A powerful Model Context Protocol (MCP) server enabling seamless Vercel project management, including deployments, domains, environment variables, and team configurations through Cursor's Composer or Codeium's Cascade.",
  image: "https://github.com/Quegenx.png",
  actions: [],
  githubUrl: "https://github.com/Quegenx/vercel-mcp-server",
  _varName: "vercelMcpServerPlugin",
};

const mcpdataextractorPlugin: Plugin = {
  id: "40c3iyazm5",
  name: "mcp-data-extractor",
  description:
    "A Model Context Protocol server that extracts embedded data (such as i18n translations or key/value configurations) from TypeScript/JavaScript source code into structured JSON configuration files.",
  image: "https://github.com/sammcj.png",
  actions: [
    {
      name: "extract_data",
      description:
        "Extract data content (e.g. i18n translations) from source code to a JSON file. IMPORTANT: When encountering files with data such as i18n content embedded in code, use this tool directly instead of reading the file content first. This tool will programmatically extract all translations into a structured JSON file, preserving nested objects, arrays, template variables, and formatting. This helps keep translations as configuration and prevents filling up the AI context window with translation content. By default, the source file will be replaced with \"MIGRATED TO <target absolute path>\" and a warning message after successful extraction, making it easy to track where the data was moved to. This behaviour can be disabled by setting the DISABLE_SOURCE_REPLACEMENT environment variable to 'true'. The warning message can be customized by setting the WARNING_MESSAGE environment variable.",
      parameters: [
        {
          name: "sourcePath",
          type: "string",
          description: "Path to the source file containing data inside code",
          required: true,
        },
        {
          name: "targetPath",
          type: "string",
          description: "Path where the resulting JSON file should be written",
          required: true,
        },
      ],
    },
    {
      name: "extract_svg",
      description:
        "Extract SVG components from React/TypeScript/JavaScript files into individual .svg files. This tool will preserve the SVG structure and attributes while removing React-specific code. By default, the source file will be replaced with \"MIGRATED TO <target absolute path>\" and a warning message after successful extraction, making it easy to track where the SVGs were moved to. This behaviour can be disabled by setting the DISABLE_SOURCE_REPLACEMENT environment variable to 'true'. The warning message can be customized by setting the WARNING_MESSAGE environment variable.",
      parameters: [
        {
          name: "sourcePath",
          type: "string",
          description: "Path to the source file containing SVG components",
          required: true,
        },
        {
          name: "targetDir",
          type: "string",
          description: "Directory where the SVG files should be written",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammcj/mcp-data-extractor",
  _varName: "mcpdataextractorPlugin",
};

const airflowmcpserverPlugin: Plugin = {
  id: "6gjq9w80xr",
  name: "airflow-mcp-server",
  description: "https://github.com/abhishekbhakat/airflow-mcp-server",
  image: "https://github.com/abhishekbhakat.png",
  actions: [
    {
      name: "get_connections",
      description: "get_connections",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "post_connection",
      description: "post_connection",
      parameters: [
        {
          name: "conn_type",
          type: "string",
          description: "Parameter: conn_type",
          required: false,
        },
        {
          name: "connection_id",
          type: "string",
          description: "Parameter: connection_id",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "extra",
          type: "string",
          description: "Parameter: extra",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description: "Parameter: host",
          required: false,
        },
        {
          name: "login",
          type: "string",
          description: "Parameter: login",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "port",
          type: "string",
          description: "Parameter: port",
          required: false,
        },
        {
          name: "schema",
          type: "string",
          description: "Parameter: schema",
          required: false,
        },
      ],
    },
    {
      name: "get_connection",
      description: "get_connection",
      parameters: [
        {
          name: "connection_id",
          type: "string",
          description: "Parameter: connection_id",
          required: false,
        },
      ],
    },
    {
      name: "patch_connection",
      description: "patch_connection",
      parameters: [
        {
          name: "conn_type",
          type: "string",
          description: "Parameter: conn_type",
          required: false,
        },
        {
          name: "connection_id",
          type: "string",
          description: "Parameter: connection_id",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "extra",
          type: "string",
          description: "Parameter: extra",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description: "Parameter: host",
          required: false,
        },
        {
          name: "login",
          type: "string",
          description: "Parameter: login",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "port",
          type: "string",
          description: "Parameter: port",
          required: false,
        },
        {
          name: "schema",
          type: "string",
          description: "Parameter: schema",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
      ],
    },
    {
      name: "delete_connection",
      description: "delete_connection",
      parameters: [
        {
          name: "connection_id",
          type: "string",
          description: "Parameter: connection_id",
          required: false,
        },
      ],
    },
    {
      name: "test_connection",
      description: "test_connection",
      parameters: [
        {
          name: "conn_type",
          type: "string",
          description: "Parameter: conn_type",
          required: false,
        },
        {
          name: "connection_id",
          type: "string",
          description: "Parameter: connection_id",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "extra",
          type: "string",
          description: "Parameter: extra",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description: "Parameter: host",
          required: false,
        },
        {
          name: "login",
          type: "string",
          description: "Parameter: login",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "port",
          type: "string",
          description: "Parameter: port",
          required: false,
        },
        {
          name: "schema",
          type: "string",
          description: "Parameter: schema",
          required: false,
        },
      ],
    },
    {
      name: "get_dags",
      description: "get_dags",
      parameters: [
        {
          name: "dag_id_pattern",
          type: "string",
          description: "Parameter: dag_id_pattern",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "only_active",
          type: "string",
          description: "Parameter: only_active",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "paused",
          type: "string",
          description: "Parameter: paused",
          required: false,
        },
        {
          name: "tags",
          type: "string",
          description: "Parameter: tags",
          required: false,
        },
      ],
    },
    {
      name: "patch_dags",
      description: "patch_dags",
      parameters: [
        {
          name: "dag_display_name",
          type: "string",
          description: "Parameter: dag_display_name",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_id_pattern",
          type: "string",
          description: "Parameter: dag_id_pattern",
          required: false,
        },
        {
          name: "default_view",
          type: "string",
          description: "Parameter: default_view",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "file_token",
          type: "string",
          description: "Parameter: file_token",
          required: false,
        },
        {
          name: "fileloc",
          type: "string",
          description: "Parameter: fileloc",
          required: false,
        },
        {
          name: "has_import_errors",
          type: "string",
          description: "Parameter: has_import_errors",
          required: false,
        },
        {
          name: "has_task_concurrency_limits",
          type: "string",
          description: "Parameter: has_task_concurrency_limits",
          required: false,
        },
        {
          name: "is_active",
          type: "string",
          description: "Parameter: is_active",
          required: false,
        },
        {
          name: "is_paused",
          type: "string",
          description: "Parameter: is_paused",
          required: false,
        },
        {
          name: "is_subdag",
          type: "string",
          description: "Parameter: is_subdag",
          required: false,
        },
        {
          name: "last_expired",
          type: "string",
          description: "Parameter: last_expired",
          required: false,
        },
        {
          name: "last_parsed_time",
          type: "string",
          description: "Parameter: last_parsed_time",
          required: false,
        },
        {
          name: "last_pickled",
          type: "string",
          description: "Parameter: last_pickled",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "max_active_runs",
          type: "string",
          description: "Parameter: max_active_runs",
          required: false,
        },
        {
          name: "max_active_tasks",
          type: "string",
          description: "Parameter: max_active_tasks",
          required: false,
        },
        {
          name: "max_consecutive_failed_dag_runs",
          type: "string",
          description: "Parameter: max_consecutive_failed_dag_runs",
          required: false,
        },
        {
          name: "next_dagrun",
          type: "string",
          description: "Parameter: next_dagrun",
          required: false,
        },
        {
          name: "next_dagrun_create_after",
          type: "string",
          description: "Parameter: next_dagrun_create_after",
          required: false,
        },
        {
          name: "next_dagrun_data_interval_end",
          type: "string",
          description: "Parameter: next_dagrun_data_interval_end",
          required: false,
        },
        {
          name: "next_dagrun_data_interval_start",
          type: "string",
          description: "Parameter: next_dagrun_data_interval_start",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "only_active",
          type: "string",
          description: "Parameter: only_active",
          required: false,
        },
        {
          name: "owners",
          type: "string",
          description: "Parameter: owners",
          required: false,
        },
        {
          name: "pickle_id",
          type: "string",
          description: "Parameter: pickle_id",
          required: false,
        },
        {
          name: "root_dag_id",
          type: "string",
          description: "Parameter: root_dag_id",
          required: false,
        },
        {
          name: "schedule_interval",
          type: "string",
          description: "Parameter: schedule_interval",
          required: false,
        },
        {
          name: "scheduler_lock",
          type: "string",
          description: "Parameter: scheduler_lock",
          required: false,
        },
        {
          name: "tags",
          type: "string",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "timetable_description",
          type: "string",
          description: "Parameter: timetable_description",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
      ],
    },
    {
      name: "get_dag",
      description: "get_dag",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
      ],
    },
    {
      name: "patch_dag",
      description: "patch_dag",
      parameters: [
        {
          name: "dag_display_name",
          type: "string",
          description: "Parameter: dag_display_name",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "default_view",
          type: "string",
          description: "Parameter: default_view",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "file_token",
          type: "string",
          description: "Parameter: file_token",
          required: false,
        },
        {
          name: "fileloc",
          type: "string",
          description: "Parameter: fileloc",
          required: false,
        },
        {
          name: "has_import_errors",
          type: "string",
          description: "Parameter: has_import_errors",
          required: false,
        },
        {
          name: "has_task_concurrency_limits",
          type: "string",
          description: "Parameter: has_task_concurrency_limits",
          required: false,
        },
        {
          name: "is_active",
          type: "string",
          description: "Parameter: is_active",
          required: false,
        },
        {
          name: "is_paused",
          type: "string",
          description: "Parameter: is_paused",
          required: false,
        },
        {
          name: "is_subdag",
          type: "string",
          description: "Parameter: is_subdag",
          required: false,
        },
        {
          name: "last_expired",
          type: "string",
          description: "Parameter: last_expired",
          required: false,
        },
        {
          name: "last_parsed_time",
          type: "string",
          description: "Parameter: last_parsed_time",
          required: false,
        },
        {
          name: "last_pickled",
          type: "string",
          description: "Parameter: last_pickled",
          required: false,
        },
        {
          name: "max_active_runs",
          type: "string",
          description: "Parameter: max_active_runs",
          required: false,
        },
        {
          name: "max_active_tasks",
          type: "string",
          description: "Parameter: max_active_tasks",
          required: false,
        },
        {
          name: "max_consecutive_failed_dag_runs",
          type: "string",
          description: "Parameter: max_consecutive_failed_dag_runs",
          required: false,
        },
        {
          name: "next_dagrun",
          type: "string",
          description: "Parameter: next_dagrun",
          required: false,
        },
        {
          name: "next_dagrun_create_after",
          type: "string",
          description: "Parameter: next_dagrun_create_after",
          required: false,
        },
        {
          name: "next_dagrun_data_interval_end",
          type: "string",
          description: "Parameter: next_dagrun_data_interval_end",
          required: false,
        },
        {
          name: "next_dagrun_data_interval_start",
          type: "string",
          description: "Parameter: next_dagrun_data_interval_start",
          required: false,
        },
        {
          name: "owners",
          type: "string",
          description: "Parameter: owners",
          required: false,
        },
        {
          name: "pickle_id",
          type: "string",
          description: "Parameter: pickle_id",
          required: false,
        },
        {
          name: "root_dag_id",
          type: "string",
          description: "Parameter: root_dag_id",
          required: false,
        },
        {
          name: "schedule_interval",
          type: "string",
          description: "Parameter: schedule_interval",
          required: false,
        },
        {
          name: "scheduler_lock",
          type: "string",
          description: "Parameter: scheduler_lock",
          required: false,
        },
        {
          name: "tags",
          type: "string",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "timetable_description",
          type: "string",
          description: "Parameter: timetable_description",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
      ],
    },
    {
      name: "delete_dag",
      description: "delete_dag",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
      ],
    },
    {
      name: "post_clear_task_instances",
      description: "post_clear_task_instances",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "dry_run",
          type: "string",
          description: "Parameter: dry_run",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "Parameter: end_date",
          required: false,
        },
        {
          name: "include_downstream",
          type: "string",
          description: "Parameter: include_downstream",
          required: false,
        },
        {
          name: "include_future",
          type: "string",
          description: "Parameter: include_future",
          required: false,
        },
        {
          name: "include_parentdag",
          type: "string",
          description: "Parameter: include_parentdag",
          required: false,
        },
        {
          name: "include_past",
          type: "string",
          description: "Parameter: include_past",
          required: false,
        },
        {
          name: "include_subdags",
          type: "string",
          description: "Parameter: include_subdags",
          required: false,
        },
        {
          name: "include_upstream",
          type: "string",
          description: "Parameter: include_upstream",
          required: false,
        },
        {
          name: "only_failed",
          type: "string",
          description: "Parameter: only_failed",
          required: false,
        },
        {
          name: "only_running",
          type: "string",
          description: "Parameter: only_running",
          required: false,
        },
        {
          name: "reset_dag_runs",
          type: "string",
          description: "Parameter: reset_dag_runs",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Parameter: start_date",
          required: false,
        },
        {
          name: "task_ids",
          type: "string",
          description: "Parameter: task_ids",
          required: false,
        },
      ],
    },
    {
      name: "set_task_instance_note",
      description: "set_task_instance_note",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "note",
          type: "string",
          description: "Parameter: note",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "set_mapped_task_instance_note",
      description: "set_mapped_task_instance_note",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "note",
          type: "string",
          description: "Parameter: note",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_task_instance_dependencies",
      description: "get_task_instance_dependencies",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_mapped_task_instance_dependencies",
      description: "get_mapped_task_instance_dependencies",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "post_set_task_instances_state",
      description: "post_set_task_instances_state",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "dry_run",
          type: "string",
          description: "Parameter: dry_run",
          required: false,
        },
        {
          name: "execution_date",
          type: "string",
          description: "Parameter: execution_date",
          required: false,
        },
        {
          name: "include_downstream",
          type: "string",
          description: "Parameter: include_downstream",
          required: false,
        },
        {
          name: "include_future",
          type: "string",
          description: "Parameter: include_future",
          required: false,
        },
        {
          name: "include_past",
          type: "string",
          description: "Parameter: include_past",
          required: false,
        },
        {
          name: "include_upstream",
          type: "string",
          description: "Parameter: include_upstream",
          required: false,
        },
        {
          name: "new_state",
          type: "string",
          description: "Parameter: new_state",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_runs",
      description: "get_dag_runs",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Parameter: end_date_gte",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description: "Parameter: end_date_lte",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Parameter: execution_date_gte",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description: "Parameter: execution_date_lte",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Parameter: start_date_gte",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Parameter: start_date_lte",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
        {
          name: "updated_at_gte",
          type: "string",
          description: "Parameter: updated_at_gte",
          required: false,
        },
        {
          name: "updated_at_lte",
          type: "string",
          description: "Parameter: updated_at_lte",
          required: false,
        },
      ],
    },
    {
      name: "post_dag_run",
      description: "post_dag_run",
      parameters: [
        {
          name: "conf",
          type: "string",
          description: "Parameter: conf",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "data_interval_end",
          type: "string",
          description: "Parameter: data_interval_end",
          required: false,
        },
        {
          name: "data_interval_start",
          type: "string",
          description: "Parameter: data_interval_start",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "Parameter: end_date",
          required: false,
        },
        {
          name: "execution_date",
          type: "string",
          description: "Parameter: execution_date",
          required: false,
        },
        {
          name: "external_trigger",
          type: "string",
          description: "Parameter: external_trigger",
          required: false,
        },
        {
          name: "last_scheduling_decision",
          type: "string",
          description: "Parameter: last_scheduling_decision",
          required: false,
        },
        {
          name: "logical_date",
          type: "string",
          description: "Parameter: logical_date",
          required: false,
        },
        {
          name: "note",
          type: "string",
          description: "Parameter: note",
          required: false,
        },
        {
          name: "run_type",
          type: "string",
          description: "Parameter: run_type",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Parameter: start_date",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_runs_batch",
      description: "get_dag_runs_batch",
      parameters: [
        {
          name: "dag_ids",
          type: "string",
          description: "Parameter: dag_ids",
          required: false,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Parameter: end_date_gte",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description: "Parameter: end_date_lte",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Parameter: execution_date_gte",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description: "Parameter: execution_date_lte",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "page_limit",
          type: "string",
          description: "Parameter: page_limit",
          required: false,
        },
        {
          name: "page_offset",
          type: "string",
          description: "Parameter: page_offset",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Parameter: start_date_gte",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Parameter: start_date_lte",
          required: false,
        },
        {
          name: "states",
          type: "string",
          description: "Parameter: states",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_run",
      description: "get_dag_run",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
      ],
    },
    {
      name: "delete_dag_run",
      description: "delete_dag_run",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
      ],
    },
    {
      name: "update_dag_run_state",
      description: "update_dag_run_state",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
      ],
    },
    {
      name: "clear_dag_run",
      description: "clear_dag_run",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "dry_run",
          type: "string",
          description: "Parameter: dry_run",
          required: false,
        },
      ],
    },
    {
      name: "get_upstream_dataset_events",
      description: "get_upstream_dataset_events",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
      ],
    },
    {
      name: "set_dag_run_note",
      description: "set_dag_run_note",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "note",
          type: "string",
          description: "Parameter: note",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_dataset_queued_event",
      description: "get_dag_dataset_queued_event",
      parameters: [
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: false,
        },
      ],
    },
    {
      name: "delete_dag_dataset_queued_event",
      description: "delete_dag_dataset_queued_event",
      parameters: [
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_dataset_queued_events",
      description: "get_dag_dataset_queued_events",
      parameters: [
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
      ],
    },
    {
      name: "delete_dag_dataset_queued_events",
      description: "delete_dag_dataset_queued_events",
      parameters: [
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
      ],
    },
    {
      name: "reparse_dag_file",
      description: "reparse_dag_file",
      parameters: [
        {
          name: "file_token",
          type: "string",
          description: "Parameter: file_token",
          required: false,
        },
      ],
    },
    {
      name: "get_dataset_queued_events",
      description: "get_dataset_queued_events",
      parameters: [
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: false,
        },
      ],
    },
    {
      name: "delete_dataset_queued_events",
      description: "delete_dataset_queued_events",
      parameters: [
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: false,
        },
      ],
    },
    {
      name: "get_event_logs",
      description: "get_event_logs",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Parameter: after",
          required: false,
        },
        {
          name: "before",
          type: "string",
          description: "Parameter: before",
          required: false,
        },
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "event",
          type: "string",
          description: "Parameter: event",
          required: false,
        },
        {
          name: "excluded_events",
          type: "string",
          description: "Parameter: excluded_events",
          required: false,
        },
        {
          name: "included_events",
          type: "string",
          description: "Parameter: included_events",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: false,
        },
        {
          name: "run_id",
          type: "string",
          description: "Parameter: run_id",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "try_number",
          type: "string",
          description: "Parameter: try_number",
          required: false,
        },
      ],
    },
    {
      name: "get_event_log",
      description: "get_event_log",
      parameters: [
        {
          name: "event_log_id",
          type: "string",
          description: "Parameter: event_log_id",
          required: false,
        },
      ],
    },
    {
      name: "get_import_errors",
      description: "get_import_errors",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "get_import_error",
      description: "get_import_error",
      parameters: [
        {
          name: "import_error_id",
          type: "string",
          description: "Parameter: import_error_id",
          required: false,
        },
      ],
    },
    {
      name: "get_pools",
      description: "get_pools",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "post_pool",
      description: "post_pool",
      parameters: [
        {
          name: "deferred_slots",
          type: "string",
          description: "Parameter: deferred_slots",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "include_deferred",
          type: "string",
          description: "Parameter: include_deferred",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "occupied_slots",
          type: "string",
          description: "Parameter: occupied_slots",
          required: false,
        },
        {
          name: "open_slots",
          type: "string",
          description: "Parameter: open_slots",
          required: false,
        },
        {
          name: "queued_slots",
          type: "string",
          description: "Parameter: queued_slots",
          required: false,
        },
        {
          name: "running_slots",
          type: "string",
          description: "Parameter: running_slots",
          required: false,
        },
        {
          name: "scheduled_slots",
          type: "string",
          description: "Parameter: scheduled_slots",
          required: false,
        },
        {
          name: "slots",
          type: "string",
          description: "Parameter: slots",
          required: false,
        },
      ],
    },
    {
      name: "get_pool",
      description: "get_pool",
      parameters: [
        {
          name: "pool_name",
          type: "string",
          description: "Parameter: pool_name",
          required: false,
        },
      ],
    },
    {
      name: "patch_pool",
      description: "patch_pool",
      parameters: [
        {
          name: "deferred_slots",
          type: "string",
          description: "Parameter: deferred_slots",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "include_deferred",
          type: "string",
          description: "Parameter: include_deferred",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "occupied_slots",
          type: "string",
          description: "Parameter: occupied_slots",
          required: false,
        },
        {
          name: "open_slots",
          type: "string",
          description: "Parameter: open_slots",
          required: false,
        },
        {
          name: "pool_name",
          type: "string",
          description: "Parameter: pool_name",
          required: false,
        },
        {
          name: "queued_slots",
          type: "string",
          description: "Parameter: queued_slots",
          required: false,
        },
        {
          name: "running_slots",
          type: "string",
          description: "Parameter: running_slots",
          required: false,
        },
        {
          name: "scheduled_slots",
          type: "string",
          description: "Parameter: scheduled_slots",
          required: false,
        },
        {
          name: "slots",
          type: "string",
          description: "Parameter: slots",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
      ],
    },
    {
      name: "delete_pool",
      description: "delete_pool",
      parameters: [
        {
          name: "pool_name",
          type: "string",
          description: "Parameter: pool_name",
          required: false,
        },
      ],
    },
    {
      name: "get_providers",
      description: "get_providers",
      parameters: [],
    },
    {
      name: "get_task_instances",
      description: "get_task_instances",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "duration_gte",
          type: "string",
          description: "Parameter: duration_gte",
          required: false,
        },
        {
          name: "duration_lte",
          type: "string",
          description: "Parameter: duration_lte",
          required: false,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Parameter: end_date_gte",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description: "Parameter: end_date_lte",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Parameter: execution_date_gte",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description: "Parameter: execution_date_lte",
          required: false,
        },
        {
          name: "executor",
          type: "string",
          description: "Parameter: executor",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "pool",
          type: "string",
          description: "Parameter: pool",
          required: false,
        },
        {
          name: "queue",
          type: "string",
          description: "Parameter: queue",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Parameter: start_date_gte",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Parameter: start_date_lte",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
        {
          name: "updated_at_gte",
          type: "string",
          description: "Parameter: updated_at_gte",
          required: false,
        },
        {
          name: "updated_at_lte",
          type: "string",
          description: "Parameter: updated_at_lte",
          required: false,
        },
      ],
    },
    {
      name: "get_task_instance",
      description: "get_task_instance",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "patch_task_instance",
      description: "patch_task_instance",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "dry_run",
          type: "string",
          description: "Parameter: dry_run",
          required: false,
        },
        {
          name: "new_state",
          type: "string",
          description: "Parameter: new_state",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_mapped_task_instance",
      description: "get_mapped_task_instance",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "patch_mapped_task_instance",
      description: "patch_mapped_task_instance",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "dry_run",
          type: "string",
          description: "Parameter: dry_run",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "new_state",
          type: "string",
          description: "Parameter: new_state",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_mapped_task_instances",
      description: "get_mapped_task_instances",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "duration_gte",
          type: "string",
          description: "Parameter: duration_gte",
          required: false,
        },
        {
          name: "duration_lte",
          type: "string",
          description: "Parameter: duration_lte",
          required: false,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Parameter: end_date_gte",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description: "Parameter: end_date_lte",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Parameter: execution_date_gte",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description: "Parameter: execution_date_lte",
          required: false,
        },
        {
          name: "executor",
          type: "string",
          description: "Parameter: executor",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "pool",
          type: "string",
          description: "Parameter: pool",
          required: false,
        },
        {
          name: "queue",
          type: "string",
          description: "Parameter: queue",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Parameter: start_date_gte",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Parameter: start_date_lte",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "updated_at_gte",
          type: "string",
          description: "Parameter: updated_at_gte",
          required: false,
        },
        {
          name: "updated_at_lte",
          type: "string",
          description: "Parameter: updated_at_lte",
          required: false,
        },
      ],
    },
    {
      name: "get_task_instances_batch",
      description: "get_task_instances_batch",
      parameters: [
        {
          name: "dag_ids",
          type: "string",
          description: "Parameter: dag_ids",
          required: false,
        },
        {
          name: "dag_run_ids",
          type: "string",
          description: "Parameter: dag_run_ids",
          required: false,
        },
        {
          name: "duration_gte",
          type: "string",
          description: "Parameter: duration_gte",
          required: false,
        },
        {
          name: "duration_lte",
          type: "string",
          description: "Parameter: duration_lte",
          required: false,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Parameter: end_date_gte",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description: "Parameter: end_date_lte",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Parameter: execution_date_gte",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description: "Parameter: execution_date_lte",
          required: false,
        },
        {
          name: "executor",
          type: "string",
          description: "Parameter: executor",
          required: false,
        },
        {
          name: "page_limit",
          type: "string",
          description: "Parameter: page_limit",
          required: false,
        },
        {
          name: "page_offset",
          type: "string",
          description: "Parameter: page_offset",
          required: false,
        },
        {
          name: "pool",
          type: "string",
          description: "Parameter: pool",
          required: false,
        },
        {
          name: "queue",
          type: "string",
          description: "Parameter: queue",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Parameter: start_date_gte",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Parameter: start_date_lte",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
        {
          name: "task_ids",
          type: "string",
          description: "Parameter: task_ids",
          required: false,
        },
      ],
    },
    {
      name: "get_task_instance_try_details",
      description: "get_task_instance_try_details",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "task_try_number",
          type: "string",
          description: "Parameter: task_try_number",
          required: false,
        },
      ],
    },
    {
      name: "get_task_instance_tries",
      description: "get_task_instance_tries",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_mapped_task_instance_tries",
      description: "get_mapped_task_instance_tries",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_mapped_task_instance_try_details",
      description: "get_mapped_task_instance_try_details",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "task_try_number",
          type: "string",
          description: "Parameter: task_try_number",
          required: false,
        },
      ],
    },
    {
      name: "get_variables",
      description: "get_variables",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "post_variables",
      description: "post_variables",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter: key",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Parameter: value",
          required: false,
        },
      ],
    },
    {
      name: "get_variable",
      description: "get_variable",
      parameters: [
        {
          name: "variable_key",
          type: "string",
          description: "Parameter: variable_key",
          required: false,
        },
      ],
    },
    {
      name: "patch_variable",
      description: "patch_variable",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter: key",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Parameter: value",
          required: false,
        },
        {
          name: "variable_key",
          type: "string",
          description: "Parameter: variable_key",
          required: false,
        },
      ],
    },
    {
      name: "delete_variable",
      description: "delete_variable",
      parameters: [
        {
          name: "variable_key",
          type: "string",
          description: "Parameter: variable_key",
          required: false,
        },
      ],
    },
    {
      name: "get_xcom_entries",
      description: "get_xcom_entries",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "xcom_key",
          type: "string",
          description: "Parameter: xcom_key",
          required: false,
        },
      ],
    },
    {
      name: "get_xcom_entry",
      description: "get_xcom_entry",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "deserialize",
          type: "string",
          description: "Parameter: deserialize",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "stringify",
          type: "string",
          description: "Parameter: stringify",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "xcom_key",
          type: "string",
          description: "Parameter: xcom_key",
          required: false,
        },
      ],
    },
    {
      name: "get_extra_links",
      description: "get_extra_links",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_log",
      description: "get_log",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "Parameter: dag_run_id",
          required: false,
        },
        {
          name: "full_content",
          type: "string",
          description: "Parameter: full_content",
          required: false,
        },
        {
          name: "map_index",
          type: "string",
          description: "Parameter: map_index",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
        {
          name: "task_try_number",
          type: "string",
          description: "Parameter: task_try_number",
          required: false,
        },
        {
          name: "token",
          type: "string",
          description: "Parameter: token",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_details",
      description: "get_dag_details",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
      ],
    },
    {
      name: "get_tasks",
      description: "get_tasks",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "get_task",
      description: "get_task",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "Parameter: task_id",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_stats",
      description: "get_dag_stats",
      parameters: [
        {
          name: "dag_ids",
          type: "string",
          description: "Parameter: dag_ids",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_source",
      description: "get_dag_source",
      parameters: [
        {
          name: "file_token",
          type: "string",
          description: "Parameter: file_token",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_warnings",
      description: "get_dag_warnings",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "Parameter: dag_id",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "warning_type",
          type: "string",
          description: "Parameter: warning_type",
          required: false,
        },
      ],
    },
    {
      name: "get_datasets",
      description: "get_datasets",
      parameters: [
        {
          name: "dag_ids",
          type: "string",
          description: "Parameter: dag_ids",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "uri_pattern",
          type: "string",
          description: "Parameter: uri_pattern",
          required: false,
        },
      ],
    },
    {
      name: "get_dataset",
      description: "get_dataset",
      parameters: [
        {
          name: "uri",
          type: "string",
          description: "Parameter: uri",
          required: false,
        },
      ],
    },
    {
      name: "get_dataset_events",
      description: "get_dataset_events",
      parameters: [
        {
          name: "dataset_id",
          type: "string",
          description: "Parameter: dataset_id",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
        {
          name: "source_dag_id",
          type: "string",
          description: "Parameter: source_dag_id",
          required: false,
        },
        {
          name: "source_map_index",
          type: "string",
          description: "Parameter: source_map_index",
          required: false,
        },
        {
          name: "source_run_id",
          type: "string",
          description: "Parameter: source_run_id",
          required: false,
        },
        {
          name: "source_task_id",
          type: "string",
          description: "Parameter: source_task_id",
          required: false,
        },
      ],
    },
    {
      name: "create_dataset_event",
      description: "create_dataset_event",
      parameters: [
        {
          name: "dataset_uri",
          type: "string",
          description: "Parameter: dataset_uri",
          required: false,
        },
        {
          name: "extra",
          type: "string",
          description: "Parameter: extra",
          required: false,
        },
      ],
    },
    {
      name: "get_config",
      description: "get_config",
      parameters: [
        {
          name: "section",
          type: "string",
          description: "Parameter: section",
          required: false,
        },
      ],
    },
    {
      name: "get_value",
      description: "get_value",
      parameters: [
        {
          name: "option",
          type: "string",
          description: "Parameter: option",
          required: false,
        },
        {
          name: "section",
          type: "string",
          description: "Parameter: section",
          required: false,
        },
      ],
    },
    {
      name: "get_health",
      description: "get_health",
      parameters: [],
    },
    {
      name: "get_version",
      description: "get_version",
      parameters: [],
    },
    {
      name: "get_plugins",
      description: "get_plugins",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
    {
      name: "get_roles",
      description: "get_roles",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "post_role",
      description: "post_role",
      parameters: [
        {
          name: "actions",
          type: "string",
          description: "Parameter: actions",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
      ],
    },
    {
      name: "get_role",
      description: "get_role",
      parameters: [
        {
          name: "role_name",
          type: "string",
          description: "Parameter: role_name",
          required: false,
        },
      ],
    },
    {
      name: "patch_role",
      description: "patch_role",
      parameters: [
        {
          name: "actions",
          type: "string",
          description: "Parameter: actions",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "role_name",
          type: "string",
          description: "Parameter: role_name",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
      ],
    },
    {
      name: "delete_role",
      description: "delete_role",
      parameters: [
        {
          name: "role_name",
          type: "string",
          description: "Parameter: role_name",
          required: false,
        },
      ],
    },
    {
      name: "get_permissions",
      description: "get_permissions",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
    {
      name: "get_users",
      description: "get_users",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description: "Parameter: order_by",
          required: false,
        },
      ],
    },
    {
      name: "post_user",
      description: "post_user",
      parameters: [
        {
          name: "active",
          type: "string",
          description: "Parameter: active",
          required: false,
        },
        {
          name: "changed_on",
          type: "string",
          description: "Parameter: changed_on",
          required: false,
        },
        {
          name: "created_on",
          type: "string",
          description: "Parameter: created_on",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: false,
        },
        {
          name: "failed_login_count",
          type: "string",
          description: "Parameter: failed_login_count",
          required: false,
        },
        {
          name: "first_name",
          type: "string",
          description: "Parameter: first_name",
          required: false,
        },
        {
          name: "last_login",
          type: "string",
          description: "Parameter: last_login",
          required: false,
        },
        {
          name: "last_name",
          type: "string",
          description: "Parameter: last_name",
          required: false,
        },
        {
          name: "login_count",
          type: "string",
          description: "Parameter: login_count",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "roles",
          type: "string",
          description: "Parameter: roles",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: false,
        },
      ],
    },
    {
      name: "get_user",
      description: "get_user",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: false,
        },
      ],
    },
    {
      name: "patch_user",
      description: "patch_user",
      parameters: [
        {
          name: "active",
          type: "string",
          description: "Parameter: active",
          required: false,
        },
        {
          name: "changed_on",
          type: "string",
          description: "Parameter: changed_on",
          required: false,
        },
        {
          name: "created_on",
          type: "string",
          description: "Parameter: created_on",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: false,
        },
        {
          name: "failed_login_count",
          type: "string",
          description: "Parameter: failed_login_count",
          required: false,
        },
        {
          name: "first_name",
          type: "string",
          description: "Parameter: first_name",
          required: false,
        },
        {
          name: "last_login",
          type: "string",
          description: "Parameter: last_login",
          required: false,
        },
        {
          name: "last_name",
          type: "string",
          description: "Parameter: last_name",
          required: false,
        },
        {
          name: "login_count",
          type: "string",
          description: "Parameter: login_count",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "roles",
          type: "string",
          description: "Parameter: roles",
          required: false,
        },
        {
          name: "update_mask",
          type: "string",
          description: "Parameter: update_mask",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: false,
        },
      ],
    },
    {
      name: "delete_user",
      description: "delete_user",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/abhishekbhakat/airflow-mcp-server",
  _varName: "airflowmcpserverPlugin",
};

const ntropymcpMcpServerPlugin: Plugin = {
  id: "m67bltwfhr",
  name: "ntropy-mcp MCP Server",
  description:
    "Enables enriching banking data with the Ntropy API, providing tools to create account holders and enrich transactions efficiently.",
  image: "https://github.com/ntropy-network.png",
  actions: [],
  githubUrl: "https://github.com/ntropy-network/ntropy-mcp",
  _varName: "ntropymcpMcpServerPlugin",
};

const mcpTavilyPlugin: Plugin = {
  id: "i3lgo43sd7",
  name: "MCP Tavily",
  description:
    "A Model Context Protocol server enabling advanced search and content extraction using the Tavily API, with rich customization and integration options.",
  image: "https://github.com/kshern.png",
  actions: [
    {
      name: "search",
      description:
        "Perform a basic web search. Returns search results including title, content and URL.",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Search configuration options, all fields are optional",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Enter your search query or question",
          required: true,
        },
      ],
    },
    {
      name: "searchContext",
      description:
        "Perform a context-aware web search. Optimized for retrieving contextually relevant results.",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Search configuration options, all fields are optional",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Enter your search query or question",
          required: true,
        },
      ],
    },
    {
      name: "searchQNA",
      description:
        "Perform a question-answering search. Best suited for direct questions that need specific answers.",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Search configuration options, all fields are optional",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Enter your search query or question",
          required: true,
        },
      ],
    },
    {
      name: "extract",
      description:
        "Extract and process content from a list of URLs. Can handle up to 20 URLs at once.",
      parameters: [
        {
          name: "options",
          type: "object",
          description:
            "Content extraction configuration options, all fields are optional",
          required: false,
        },
        {
          name: "urls",
          type: "string array",
          description:
            "List of URLs to extract content from (max 20). e.g.: ['https://example.com', 'https://test.com']",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kshern/mcp-tavily",
  _varName: "mcpTavilyPlugin",
};

const terraformRegistryMcpServerPlugin: Plugin = {
  id: "zznclqgard",
  name: "Terraform Registry MCP Server",
  description:
    "Connects AI models to the Terraform Registry via MCP, enabling provider lookups, resource usage examples, and module recommendations for streamlined Terraform workflows.",
  image: "https://github.com/thrashr888.png",
  actions: [
    {
      name: "providerLookup",
      description:
        "Lookup a Terraform provider by name and optionally version.",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Provider namespace (e.g. 'hashicorp')",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description: "Provider name (e.g. 'aws')",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Provider version (e.g. '4.0.0')",
          required: false,
        },
      ],
    },
    {
      name: "resourceUsage",
      description:
        "Get an example usage of a Terraform resource and related resources.",
      parameters: [
        {
          name: "name",
          type: "string",
          description:
            "Alternative resource name field (fallback if resource not specified)",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description: "Provider name (e.g. 'aws')",
          required: false,
        },
        {
          name: "resource",
          type: "string",
          description: "Resource name (e.g. 'aws_instance')",
          required: false,
        },
      ],
    },
    {
      name: "moduleRecommendations",
      description:
        "Search for and recommend Terraform modules for a given query.",
      parameters: [
        {
          name: "keyword",
          type: "string",
          description:
            "Alternative search keyword (fallback if query not specified)",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description: "Filter modules by provider (e.g. 'aws')",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (e.g. 'vpc')",
          required: false,
        },
      ],
    },
    {
      name: "dataSourceLookup",
      description:
        "List all available data sources for a provider and their basic details.",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Provider namespace (e.g. 'hashicorp')",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description: "Provider name (e.g. 'aws')",
          required: true,
        },
      ],
    },
    {
      name: "resourceArgumentDetails",
      description:
        "Fetches details about a specific resource type's arguments, including name, type, description, and requirements.",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Provider namespace (e.g. 'hashicorp')",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description: "Provider name (e.g. 'aws')",
          required: true,
        },
        {
          name: "resource",
          type: "string",
          description: "Resource name (e.g. 'aws_instance')",
          required: true,
        },
      ],
    },
    {
      name: "moduleDetails",
      description:
        "Retrieves detailed metadata for a Terraform module including versions, inputs, outputs, and dependencies.",
      parameters: [
        {
          name: "module",
          type: "string",
          description: "Module name (e.g. 'vpc')",
          required: true,
        },
        {
          name: "namespace",
          type: "string",
          description: "Module namespace (e.g. 'terraform-aws-modules')",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description: "Provider name (e.g. 'aws')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/thrashr888/terraform-mcp-server",
  _varName: "terraformRegistryMcpServerPlugin",
};

const quickchartmcpserverPlugin: Plugin = {
  id: "y17zluizso",
  name: "Quickchart-MCP-Server",
  description:
    "An MCP server for generating customizable data visualizations using QuickChart.io, supporting multiple chart types and Chart.js configuration.",
  image: "https://github.com/GongRzhe.png",
  actions: [
    {
      name: "generate_chart",
      description: "Generate a chart using QuickChart",
      parameters: [
        {
          name: "datasets",
          type: "object array",
          description: "Parameter: datasets",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels for data points",
          required: false,
        },
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description:
            "Chart type (bar, line, pie, doughnut, radar, polarArea, scatter, bubble, radialGauge, speedometer)",
          required: true,
        },
      ],
    },
    {
      name: "download_chart",
      description: "Download a chart image to a local file",
      parameters: [
        {
          name: "config",
          type: "object",
          description: "Chart configuration object",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path where the chart image should be saved",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/GongRzhe/Quickchart-MCP-Server",
  _varName: "quickchartmcpserverPlugin",
};

const harvestNaturalLanguageTimeEntryMcpServerPlugin: Plugin = {
  id: "u2bir05hxy",
  name: "Harvest Natural Language Time Entry MCP Server",
  description:
    "Enables natural language time tracking and reporting for Harvest, including automatic leave requests, project/task matching, and date parsing.",
  image: "https://github.com/adrian-dotco.png",
  actions: [
    {
      name: "log_time",
      description: "Log time entry using natural language",
      parameters: [
        {
          name: "text",
          type: "string",
          description:
            'Natural language time entry (e.g. "2 hours on Project X doing development work yesterday")',
          required: true,
        },
      ],
    },
    {
      name: "list_projects",
      description: "List available Harvest projects",
      parameters: [],
    },
    {
      name: "list_tasks",
      description: "List available tasks for a project",
      parameters: [
        {
          name: "project_id",
          type: "number",
          description: "Project ID",
          required: true,
        },
      ],
    },
    {
      name: "list_entries",
      description: "List recent time entries",
      parameters: [
        {
          name: "from",
          type: "string",
          description: "Start date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "End date (YYYY-MM-DD)",
          required: false,
        },
      ],
    },
    {
      name: "get_time_report",
      description: "Get time reports using natural language",
      parameters: [
        {
          name: "text",
          type: "string",
          description:
            'Natural language query (e.g., "Show time report for last month", "Get time summary for Project X")',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adrian-dotco/harvest-mcp-server",
  _varName: "harvestNaturalLanguageTimeEntryMcpServerPlugin",
};

const redmineMcpServerForClinePlugin: Plugin = {
  id: "ve2y2qagen",
  name: "Redmine MCP Server for Cline",
  description:
    "Enables interaction with Redmine projects and issues via the Cline VS Code extension, supporting project management and issue creation through the Model Context Protocol.",
  image: "https://github.com/ilask.png",
  actions: [
    {
      name: "create_issue",
      description: "Create a new Redmine issue",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID",
          required: true,
        },
        {
          name: "subject",
          type: "string",
          description: "Issue subject",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ilask/Redmine-MCP",
  _varName: "redmineMcpServerForClinePlugin",
};

const qrcode_mcpPlugin: Plugin = {
  id: "mw5jkna1n3",
  name: "QRCode_MCP",
  description:
    "An MCP server that generates customizable QR codes with options for size, colors, error correction, and margin settings.",
  image: "https://github.com/1595901624.png",
  actions: [],
  githubUrl: "https://github.com/1595901624/qrcode-mcp",
  _varName: "qrcode_mcpPlugin",
};

const modelContextProviderMcpServerPlugin: Plugin = {
  id: "cvm6c6e84w",
  name: "Model Context Provider (MCP) Server",
  description:
    "Facilitates enhanced interaction with large language models (LLMs) by providing intelligent context management, tool integration, and multi-provider AI model coordination for efficient AI-driven workflows.",
  image: "https://github.com/Mark850409.png",
  actions: [],
  githubUrl: "https://github.com/Mark850409/20250223_mcp-client",
  _varName: "modelContextProviderMcpServerPlugin",
};

const snykMcpServerPlugin: Plugin = {
  id: "6swx5p9wnb",
  name: "Snyk MCP Server",
  description:
    "A standalone server enabling Snyk security scanning through the Model Context Protocol, with support for repository and project analysis, token verification, and CLI integration.",
  image: "https://github.com/sammcj.png",
  actions: [],
  githubUrl: "https://github.com/sammcj/mcp-snyk",
  _varName: "snykMcpServerPlugin",
};

const cloudflareApiMcpServer1Plugin: Plugin = {
  id: "52hb6non79",
  name: "Cloudflare API MCP Server",
  description:
    "A lightweight MCP server for managing DNS records, purging cache, and interacting with the Cloudflare API through natural language commands.",
  image: "https://github.com/zueai.png",
  actions: [],
  githubUrl: "https://github.com/zueai/cloudflare-api-mcp",
  _varName: "cloudflareApiMcpServer1Plugin",
};

const appleNotesMcpServerPlugin: Plugin = {
  id: "ayr26szokg",
  name: "Apple Notes MCP Server",
  description:
    "Enables interaction with Apple Notes via natural language, supporting note creation, search, and retrieval with iCloud integration for seamless note management.",
  image: "https://github.com/Siddhant-K-code.png",
  actions: [
    {
      name: "create-note",
      description: "Action for create-note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "search-notes",
      description: "Action for search-notes",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get-note-content",
      description: "Action for get-note-content",
      parameters: [
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Siddhant-K-code/mcp-apple-notes",
  _varName: "appleNotesMcpServerPlugin",
};

const dartMcpServer1Plugin: Plugin = {
  id: "2pdqgspm4q",
  name: "Dart MCP Server",
  description:
    "A Dart-based MCP server implementation that enables AI-assisted task management, document handling, and workspace organization through standardized tools and seamless Dart integration.",
  image: "https://github.com/jmanhype.png",
  actions: [
    {
      name: "create_folder",
      description: "Create a new folder in a space",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the folder",
          required: false,
        },
        {
          name: "kind",
          type: "string",
          description: "Kind of folder",
          required: false,
        },
        {
          name: "space_duid",
          type: "string",
          description: "Space DUID to create the folder in",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the folder",
          required: true,
        },
      ],
    },
    {
      name: "get_dartboards",
      description: "Get available dartboards",
      parameters: [
        {
          name: "space_duid",
          type: "string",
          description: "Space DUID to get dartboards from",
          required: true,
        },
      ],
    },
    {
      name: "get_folders",
      description: "Get available folders",
      parameters: [
        {
          name: "space_duid",
          type: "string",
          description: "Space DUID to get folders from",
          required: true,
        },
      ],
    },
    {
      name: "get_default_status",
      description: "Get the default status DUIDs",
      parameters: [],
    },
    {
      name: "get_default_space",
      description: "Get the default space DUID",
      parameters: [],
    },
    {
      name: "create_task",
      description: "Create a new Dart task",
      parameters: [
        {
          name: "assignee_duids",
          type: "string array",
          description: "List of assignee DUIDs",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the task",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "Priority of the task",
          required: false,
        },
        {
          name: "size",
          type: "number",
          description: "Size/complexity of the task (1-5)",
          required: false,
        },
        {
          name: "subscriber_duids",
          type: "string array",
          description: "List of subscriber DUIDs",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags for the task",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the task",
          required: true,
        },
      ],
    },
    {
      name: "update_task",
      description: "Update an existing task",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New description for the task",
          required: false,
        },
        {
          name: "duid",
          type: "string",
          description: "DUID of the task to update",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "New priority for the task",
          required: false,
        },
        {
          name: "status_duid",
          type: "string",
          description: "New status DUID",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title for the task",
          required: false,
        },
      ],
    },
    {
      name: "create_doc",
      description: "Create a new document or report",
      parameters: [
        {
          name: "editor_duids",
          type: "string array",
          description: "List of editor DUIDs",
          required: false,
        },
        {
          name: "folder_duid",
          type: "string",
          description: "Folder DUID to create the document in",
          required: true,
        },
        {
          name: "report_kind",
          type: "string",
          description: "Kind of report (if creating a report)",
          required: false,
        },
        {
          name: "subscriber_duids",
          type: "string array",
          description: "List of subscriber DUIDs",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Content of the document",
          required: false,
        },
        {
          name: "text_markdown",
          type: "string",
          description: "Markdown content of the document",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the document",
          required: true,
        },
      ],
    },
    {
      name: "create_space",
      description: "Create a new space",
      parameters: [
        {
          name: "abrev",
          type: "string",
          description: "Short abbreviation for the space",
          required: false,
        },
        {
          name: "accessible_by_team",
          type: "boolean",
          description: "Whether the space is accessible by the whole team",
          required: false,
        },
        {
          name: "accessible_by_user_duids",
          type: "string array",
          description: "List of user DUIDs who can access the space",
          required: false,
        },
        {
          name: "color_hex",
          type: "string",
          description: "Color in hex format (e.g. #FF0000)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the space",
          required: false,
        },
        {
          name: "icon_kind",
          type: "string",
          description: "Kind of icon to use",
          required: false,
        },
        {
          name: "icon_name_or_emoji",
          type: "string",
          description: "Icon name or emoji character",
          required: false,
        },
        {
          name: "sprint_mode",
          type: "string",
          description: "Sprint mode for the space",
          required: false,
        },
        {
          name: "sprint_name_fmt",
          type: "string",
          description: "Sprint name format",
          required: false,
        },
        {
          name: "sprint_replicate_on_rollover",
          type: "boolean",
          description: "Whether to replicate sprints on rollover",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the space",
          required: true,
        },
      ],
    },
    {
      name: "delete_space",
      description: "Delete a space and all its contents",
      parameters: [
        {
          name: "space_duid",
          type: "string",
          description: "DUID of the space to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jmanhype/dart-mcp-server",
  _varName: "dartMcpServer1Plugin",
};

const modelContextProtocolMcpServerForHomeAssistantPlugin: Plugin = {
  id: "focklepq35",
  name: "Model Context Protocol (MCP) Server for Home Assistant",
  description:
    "Enables seamless integration between Home Assistant and Language Learning Models (LLMs), allowing natural language interaction for smart home control and automation management.",
  image: "https://github.com/drejom.png",
  actions: [],
  githubUrl: "https://github.com/drejom/homeassistant-mcp",
  _varName: "modelContextProtocolMcpServerForHomeAssistantPlugin",
};

const neonMcpServerPlugin: Plugin = {
  id: "lfpn1zc535",
  name: "Neon MCP Server",
  description:
    "A lightweight MCP server that interacts with the Neon REST API, deployable on Cloudflare Workers for streamlined database management and integration.",
  image: "https://github.com/zueai.png",
  actions: [],
  githubUrl: "https://github.com/zueai/neon-mcp",
  _varName: "neonMcpServerPlugin",
};

const mcpopenapiPlugin: Plugin = {
  id: "ggsylex73e",
  name: "MCP-OpenAPI",
  description:
    "An MCP server that exposes HTTP methods defined in an OpenAPI specification as tools, enabling interaction with APIs via the Model Context Protocol.",
  image: "https://github.com/rmasters.png",
  actions: [],
  githubUrl: "https://github.com/rmasters/mcp-openapi",
  _varName: "mcpopenapiPlugin",
};

const cryptoPriceMarketAnalysisMcpServerPlugin: Plugin = {
  id: "jpqoejojnc",
  name: "Crypto Price & Market Analysis MCP Server",
  description:
    "A Model Context Protocol (MCP) server that provides comprehensive cryptocurrency analysis using the CoinCap API. This server offers real-time price data, market analysis, and historical trends through an easy-to-use interface.",
  image: "https://github.com/truss44.png",
  actions: [
    {
      name: "get-crypto-price",
      description: "Get current price and 24h stats for a cryptocurrency",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Cryptocurrency symbol (e.g., BTC, ETH)",
          required: true,
        },
      ],
    },
    {
      name: "get-market-analysis",
      description:
        "Get detailed market analysis including top exchanges and volume distribution",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Cryptocurrency symbol (e.g., BTC, ETH)",
          required: true,
        },
      ],
    },
    {
      name: "get-historical-analysis",
      description: "Get historical price analysis with customizable timeframe",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days to analyze (1-30)",
          required: false,
        },
        {
          name: "interval",
          type: "string",
          description: "Time interval (m5, m15, m30, h1, h2, h6, h12, d1)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Cryptocurrency symbol (e.g., BTC, ETH)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/truss44/mcp-crypto-price",
  _varName: "cryptoPriceMarketAnalysisMcpServerPlugin",
};

const sendgridMcpServerPlugin: Plugin = {
  id: "82glmn141z",
  name: "SendGrid MCP Server",
  description:
    "Provides an interface to manage email marketing, contact lists, dynamic templates, and email analytics via SendGrid's API.",
  image: "https://github.com/Garoth.png",
  actions: [
    {
      name: "delete_contacts",
      description: "Delete contacts from your SendGrid account",
      parameters: [
        {
          name: "emails",
          type: "string array",
          description: "Array of email addresses to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_contacts",
      description: "List all contacts in your SendGrid account",
      parameters: [],
    },
    {
      name: "send_email",
      description: "Send an email using SendGrid",
      parameters: [
        {
          name: "dynamic_template_data",
          type: "object",
          description: "Dynamic data for template variables (optional)",
          required: false,
        },
        {
          name: "from",
          type: "string",
          description: "Sender email address (must be verified with SendGrid)",
          required: true,
        },
        {
          name: "html",
          type: "string",
          description: "HTML content of the email (optional)",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject line",
          required: true,
        },
        {
          name: "template_id",
          type: "string",
          description: "SendGrid template ID (optional)",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Plain text content of the email",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient email address",
          required: true,
        },
      ],
    },
    {
      name: "add_contact",
      description: "Add a contact to your SendGrid marketing contacts",
      parameters: [
        {
          name: "custom_fields",
          type: "object",
          description: "Custom field values (optional)",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "Contact email address",
          required: true,
        },
        {
          name: "first_name",
          type: "string",
          description: "Contact first name (optional)",
          required: false,
        },
        {
          name: "last_name",
          type: "string",
          description: "Contact last name (optional)",
          required: false,
        },
      ],
    },
    {
      name: "create_contact_list",
      description: "Create a new contact list in SendGrid",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the contact list",
          required: true,
        },
      ],
    },
    {
      name: "add_contacts_to_list",
      description: "Add contacts to an existing SendGrid list",
      parameters: [
        {
          name: "emails",
          type: "string array",
          description: "Array of email addresses to add to the list",
          required: true,
        },
        {
          name: "list_id",
          type: "string",
          description: "ID of the contact list",
          required: true,
        },
      ],
    },
    {
      name: "create_template",
      description: "Create a new email template in SendGrid",
      parameters: [
        {
          name: "html_content",
          type: "string",
          description: "HTML content of the template",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the template",
          required: true,
        },
        {
          name: "plain_content",
          type: "string",
          description: "Plain text content of the template",
          required: true,
        },
        {
          name: "subject",
          type: "string",
          description: "Default subject line for the template",
          required: true,
        },
      ],
    },
    {
      name: "get_template",
      description: "Retrieve a SendGrid template by ID",
      parameters: [
        {
          name: "template_id",
          type: "string",
          description: "ID of the template to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "delete_template",
      description: "Delete a dynamic template from SendGrid",
      parameters: [
        {
          name: "template_id",
          type: "string",
          description: "ID of the template to delete",
          required: true,
        },
      ],
    },
    {
      name: "validate_email",
      description: "Validate an email address using SendGrid",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Email address to validate",
          required: true,
        },
      ],
    },
    {
      name: "get_stats",
      description: "Get SendGrid email statistics",
      parameters: [
        {
          name: "aggregated_by",
          type: "string",
          description: "How to aggregate the statistics (optional)",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description: "End date in YYYY-MM-DD format (optional)",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Start date in YYYY-MM-DD format",
          required: true,
        },
      ],
    },
    {
      name: "list_templates",
      description: "List all email templates in your SendGrid account",
      parameters: [],
    },
    {
      name: "delete_list",
      description: "Delete a contact list from SendGrid",
      parameters: [
        {
          name: "list_id",
          type: "string",
          description: "ID of the contact list to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_contact_lists",
      description: "List all contact lists in your SendGrid account",
      parameters: [],
    },
    {
      name: "get_contacts_by_list",
      description: "Get all contacts in a SendGrid list",
      parameters: [
        {
          name: "list_id",
          type: "string",
          description: "ID of the contact list",
          required: true,
        },
      ],
    },
    {
      name: "list_verified_senders",
      description:
        "List all verified sender identities in your SendGrid account",
      parameters: [],
    },
    {
      name: "list_suppression_groups",
      description: "List all unsubscribe groups in your SendGrid account",
      parameters: [],
    },
    {
      name: "send_to_list",
      description:
        "Send an email to a contact list using SendGrid Single Sends",
      parameters: [
        {
          name: "custom_unsubscribe_url",
          type: "string",
          description:
            "Custom URL for unsubscribes (required if suppression_group_id not provided)",
          required: false,
        },
        {
          name: "html_content",
          type: "string",
          description: "HTML content of the email",
          required: true,
        },
        {
          name: "list_ids",
          type: "string array",
          description: "Array of list IDs to send to",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the single send",
          required: true,
        },
        {
          name: "plain_content",
          type: "string",
          description: "Plain text content of the email",
          required: true,
        },
        {
          name: "sender_id",
          type: "number",
          description: "ID of the verified sender",
          required: true,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject line",
          required: true,
        },
        {
          name: "suppression_group_id",
          type: "number",
          description:
            "ID of the suppression group for unsubscribes (required if custom_unsubscribe_url not provided)",
          required: false,
        },
      ],
    },
    {
      name: "get_single_send",
      description: "Get details of a specific single send",
      parameters: [
        {
          name: "single_send_id",
          type: "string",
          description: "ID of the single send to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "list_single_sends",
      description: "List all single sends in your SendGrid account",
      parameters: [],
    },
    {
      name: "remove_contacts_from_list",
      description: "Remove contacts from a SendGrid list without deleting them",
      parameters: [
        {
          name: "emails",
          type: "string array",
          description: "Array of email addresses to remove from the list",
          required: true,
        },
        {
          name: "list_id",
          type: "string",
          description: "ID of the contact list",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Garoth/sendgrid-mcp",
  _varName: "sendgridMcpServerPlugin",
};

const azureMcpServerPlugin: Plugin = {
  id: "8lqipo67ap",
  name: "Azure MCP Server",
  description:
    "Enables natural language interaction with Azure services through Claude Desktop, supporting resource management, subscription handling, and tenant selection with secure authentication.",
  image: "https://github.com/Streen9.png",
  actions: [
    {
      name: "run-azure-code",
      description: "Run Azure code",
      parameters: [
        {
          name: "code",
          type: "string",
          description:
            "Your job is to answer questions about Azure environment by writing Javascript code using Azure SDK. The code must adhere to a few rules:\n- Use the provided client instances: 'resourceClient' for ResourceManagementClient and 'subscriptionClient' for SubscriptionClient\n- DO NOT create new client instances or import Azure SDK packages\n- Use async/await and promises\n- Think step-by-step before writing the code\n- Avoid hardcoded values like Resource IDs\n- Handle errors gracefully\n- Handle pagination correctly using for-await-of loops\n- Data returned must be JSON containing only the minimal amount of data needed\n- Code MUST \"return\" a value: string, number, boolean or JSON object",
          required: true,
        },
        {
          name: "reasoning",
          type: "string",
          description: "The reasoning behind the code",
          required: true,
        },
        {
          name: "subscriptionId",
          type: "string",
          description: "Azure Subscription ID",
          required: false,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Azure Tenant ID",
          required: false,
        },
      ],
    },
    {
      name: "list-tenants",
      description: "List all available Azure tenants",
      parameters: [],
    },
    {
      name: "select-tenant",
      description: "Select Azure tenant and subscription",
      parameters: [
        {
          name: "subscriptionId",
          type: "string",
          description: "Azure Subscription ID to select",
          required: true,
        },
        {
          name: "tenantId",
          type: "string",
          description: "Azure Tenant ID to select",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Streen9/azure-mcp",
  _varName: "azureMcpServerPlugin",
};

const pygithubMcpServerPlugin: Plugin = {
  id: "orj9keaji9",
  name: "PyGithub MCP Server",
  description:
    "Enables AI assistants to interact with GitHub through the PyGithub library, providing tools for managing issues, repositories, pull requests, and other GitHub operations with intelligent parameter handling and error management.",
  image: "https://github.com/AstroMined.png",
  actions: [
    {
      name: "create_issue",
      description:
        "Create a new issue in a GitHub repository.\n    \n    Args:\n        params_dict: Parameters for creating an issue including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - title: Issue title\n            - body: Issue description (optional)\n            - assignees: List of usernames to assign\n            - labels: List of labels to add\n            - milestone: Milestone number (optional)\n    \n    Returns:\n        Created issue details from GitHub API\n    ",
      parameters: [
        {
          name: "params_dict",
          type: "object",
          description: "Parameter: params_dict",
          required: true,
        },
      ],
    },
    {
      name: "list_issues",
      description:
        "List issues from a GitHub repository.\n    \n    Args:\n        params: Parameters for listing issues including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - state: Issue state (open, closed, all)\n            - labels: Filter by labels\n            - sort: Sort field (created, updated, comments)\n            - direction: Sort direction (asc, desc)\n            - since: Filter by date\n            - page: Page number for pagination\n            - per_page: Number of results per page (max 100)\n    \n    Returns:\n        List of issues from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "get_issue",
      description:
        "Get details about a specific issue.\n    \n    Args:\n        params: Parameters for getting an issue including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number to retrieve\n    \n    Returns:\n        Issue details from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description:
        "Update an existing issue.\n    \n    Args:\n        params: Parameters for updating an issue including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number to update\n            - title: New title (optional)\n            - body: New description (optional)\n            - state: New state (optional)\n            - labels: New labels (optional)\n            - assignees: New assignees (optional)\n            - milestone: New milestone number (optional)\n    \n    Returns:\n        Updated issue details from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "add_issue_comment",
      description:
        "Add a comment to an issue.\n    \n    Args:\n        params: Parameters for adding a comment including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number to comment on\n            - body: Comment text\n    \n    Returns:\n        Created comment details from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "list_issue_comments",
      description:
        "List comments on an issue.\n    \n    Args:\n        params: Parameters for listing comments including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number\n            - since: Filter by date (optional)\n            - page: Page number (optional)\n            - per_page: Results per page (optional)\n    \n    Returns:\n        List of comments from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "update_issue_comment",
      description:
        "Update an issue comment.\n    \n    Args:\n        params: Parameters for updating a comment including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number containing the comment\n            - comment_id: Comment ID to update\n            - body: New comment text\n    \n    Returns:\n        Updated comment details from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "delete_issue_comment",
      description:
        "Delete an issue comment.\n    \n    Args:\n        params: Parameters for deleting a comment including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number containing the comment\n            - comment_id: Comment ID to delete\n    \n    Returns:\n        Empty response on success\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "add_issue_labels",
      description:
        "Add labels to an issue.\n    \n    Args:\n        params: Parameters for adding labels including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number\n            - labels: Labels to add\n    \n    Returns:\n        Updated list of labels from GitHub API\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "remove_issue_label",
      description:
        "Remove a label from an issue.\n    \n    Args:\n        params: Parameters for removing a label including:\n            - owner: Repository owner (user or organization)\n            - repo: Repository name\n            - issue_number: Issue number\n            - label: Label to remove\n    \n    Returns:\n        Empty response on success or error if label doesn't exist\n    ",
      parameters: [
        {
          name: "params",
          type: "string",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "get_repository",
      description:
        "Get details about a GitHub repository.\n\n    Args:\n        params: Dictionary with repository parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n\n    Returns:\n        MCP response with repository details\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "create_repository",
      description:
        "Create a new GitHub repository.\n\n    Args:\n        params: Dictionary with repository creation parameters\n            - name: Repository name\n            - description: Repository description (optional)\n            - private: Whether the repository should be private (optional)\n            - auto_init: Initialize repository with README (optional)\n\n    Returns:\n        MCP response with created repository details\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "fork_repository",
      description:
        "Fork an existing GitHub repository.\n\n    Args:\n        params: Dictionary with fork parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n            - organization: Organization to fork to (optional)\n\n    Returns:\n        MCP response with forked repository details\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "search_repositories",
      description:
        "Search for GitHub repositories.\n\n    Args:\n        params: Dictionary with search parameters\n            - query: Search query\n            - page: Page number for pagination (optional)\n            - per_page: Results per page (optional)\n\n    Returns:\n        MCP response with matching repositories\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "get_file_contents",
      description:
        "Get contents of a file in a GitHub repository.\n\n    Args:\n        params: Dictionary with file parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n            - path: Path to file/directory\n            - branch: Branch to get contents from (optional)\n\n    Returns:\n        MCP response with file content data\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "create_or_update_file",
      description:
        "Create or update a file in a GitHub repository.\n\n    Args:\n        params: Dictionary with file parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n            - path: Path where to create/update the file\n            - content: Content of the file\n            - message: Commit message\n            - branch: Branch to create/update the file in\n            - sha: SHA of file being replaced (for updates, optional)\n\n    Returns:\n        MCP response with file creation/update result\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "push_files",
      description:
        "Push multiple files to a GitHub repository in a single commit.\n\n    Args:\n        params: Dictionary with file parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n            - branch: Branch to push to\n            - files: List of files to push, each with path and content\n            - message: Commit message\n\n    Returns:\n        MCP response with file push result\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description:
        "Create a new branch in a GitHub repository.\n\n    Args:\n        params: Dictionary with branch parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n            - branch: Name for new branch\n            - from_branch: Source branch (optional, defaults to repo default)\n\n    Returns:\n        MCP response with branch creation result\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "list_commits",
      description:
        "List commits in a GitHub repository.\n\n    Args:\n        params: Dictionary with commit parameters\n            - owner: Repository owner (username or organization)\n            - repo: Repository name\n            - page: Page number (optional)\n            - per_page: Results per page (optional)\n            - sha: Branch name or commit SHA (optional)\n\n    Returns:\n        MCP response with list of commits\n    ",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AstroMined/pygithub-mcp-server",
  _varName: "pygithubMcpServerPlugin",
};

const modelControlProtocolServerMcpPlugin: Plugin = {
  id: "0y0kenfcg5",
  name: "Model Control Protocol Server (MCP)",
  description:
    "Enables the creation and deployment of API-based MCP tools for Cursor Agent using Cloudflare Workers, streamlining development and integration of custom functionalities.",
  image: "https://github.com/zueai.png",
  actions: [],
  githubUrl: "https://github.com/zueai/create-mcp",
  _varName: "modelControlProtocolServerMcpPlugin",
};

const mcpotcPlugin: Plugin = {
  id: "zxc05h0ws2",
  name: "mcp-otc",
  description: "Fork from Etherscan dedicated for chain-id 175",
  image: "https://github.com/otc-ai.png",
  actions: [
    {
      name: "check-balance",
      description: "Check the ETH balance of an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-transactions",
      description: "Get recent transactions for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transactions to return (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get-token-transfers",
      description: "Get ERC20 token transfers for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transfers to return (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get-contract-abi",
      description: "Get the ABI for a smart contract",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Contract address (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-gas-prices",
      description: "Get current gas prices in Gwei",
      parameters: [],
    },
    {
      name: "get-ens-name",
      description: "Get the ENS name for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/otc-ai/mcp-otc",
  _varName: "mcpotcPlugin",
};

const superSecretMcpServerPlugin: Plugin = {
  id: "cp1c76mxnb",
  name: "Super Secret MCP Server",
  description:
    "A Node.js-based MCP server implementing JSON-RPC 2.0, allowing users to generate random US State and signature soup combinations through a fun and simple tool.",
  image: "https://github.com/gbti-network.png",
  actions: [
    {
      name: "getSecretPassphrase",
      description: "Whats the password?",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/gbti-network/mcp-basic-test",
  _varName: "superSecretMcpServerPlugin",
};

const singlestoreMcpServerPlugin: Plugin = {
  id: "6t5uvbrpor",
  name: "SingleStore MCP Server",
  description:
    "A server for interacting with SingleStore databases, enabling table querying, schema descriptions, and ER diagram generation with secure SSL support and TypeScript safety.",
  image: "https://github.com/madhukarkumar.png",
  actions: [
    {
      name: "generate_er_diagram",
      description: "Generate a Mermaid ER diagram of the database schema",
      parameters: [],
    },
    {
      name: "list_tables",
      description: "List all tables in the database",
      parameters: [],
    },
    {
      name: "query_table",
      description: "Execute a query on a table",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "describe_table",
      description: "Get detailed information about a table",
      parameters: [
        {
          name: "table",
          type: "string",
          description: "Name of the table to describe",
          required: true,
        },
      ],
    },
    {
      name: "run_read_query",
      description: "Execute a read-only (SELECT) query on the database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SQL SELECT query to execute",
          required: true,
        },
      ],
    },
    {
      name: "create_table",
      description:
        "Create a new table in the database with specified columns and constraints",
      parameters: [
        {
          name: "columns",
          type: "object array",
          description: "List of columns to create",
          required: true,
        },
        {
          name: "table_name",
          type: "string",
          description: "Name of the table to create",
          required: true,
        },
        {
          name: "table_options",
          type: "object",
          description: "Parameter: table_options",
          required: false,
        },
      ],
    },
    {
      name: "generate_synthetic_data",
      description: "Generate and insert synthetic data into an existing table",
      parameters: [
        {
          name: "batch_size",
          type: "number",
          description: "Number of rows to insert in each batch",
          required: false,
        },
        {
          name: "column_generators",
          type: "object",
          description: "Custom generators for specific columns (optional)",
          required: false,
        },
        {
          name: "count",
          type: "number",
          description: "Number of rows to generate and insert",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Name of the table to insert data into",
          required: true,
        },
      ],
    },
    {
      name: "optimize_sql",
      description:
        "Analyze a SQL query using PROFILE and provide optimization recommendations",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SQL query to analyze and optimize",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/madhukarkumar/singlestore-mcp-server",
  _varName: "singlestoreMcpServerPlugin",
};

const taptoolsApiMcpPlugin: Plugin = {
  id: "ltabcci6zs",
  name: "TapTools API MCP",
  description:
    "A Python-based MCP server that integrates the TapTools API, enabling AI models to fetch Cardano blockchain data, including tokens, NFTs, market stats, and wallet info, through standardized tools.",
  image: "https://github.com/brianbell-x.png",
  actions: [],
  githubUrl: "https://github.com/brianbell-x/tadpoletools-mcp",
  _varName: "taptoolsApiMcpPlugin",
};

const jenkinsMcpPlugin: Plugin = {
  id: "7j3zk84u5p",
  name: "Jenkins MCP",
  description:
    "Enables managing Jenkins operations like listing jobs, triggering builds, and checking build statuses through a configurable MCP server.",
  image: "https://github.com/kjozsa.png",
  actions: [
    {
      name: "list_jobs",
      description: "List all Jenkins jobs",
      parameters: [],
    },
    {
      name: "trigger_build",
      description:
        'Trigger a Jenkins build\n\n    Args:\n        job_name: Name of the job to build\n        parameters: Optional build parameters as a dictionary (e.g. {"param1": "value1"})\n\n    Returns:\n        Dictionary containing build information including the build number\n    ',
      parameters: [
        {
          name: "job_name",
          type: "string",
          description: "Parameter: job_name",
          required: true,
        },
        {
          name: "parameters",
          type: "string",
          description: "Parameter: parameters",
          required: false,
        },
      ],
    },
    {
      name: "get_build_status",
      description:
        "Get build status\n\n    Args:\n        job_name: Name of the job\n        build_number: Build number to check, defaults to latest\n\n    Returns:\n        Build information dictionary\n    ",
      parameters: [
        {
          name: "build_number",
          type: "string",
          description: "Parameter: build_number",
          required: false,
        },
        {
          name: "job_name",
          type: "string",
          description: "Parameter: job_name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kjozsa/jenkins-mcp",
  _varName: "jenkinsMcpPlugin",
};

const awesomeMcpFastapiPlugin: Plugin = {
  id: "2ysi73d5t3",
  name: "Awesome MCP FastAPI",
  description:
    "A production-ready MCP server built with FastAPI, providing an enhanced tool registry for creating, managing, and documenting AI tools for Large Language Models (LLMs).",
  image: "https://github.com/MR-GREEN1337.png",
  actions: [],
  githubUrl: "https://github.com/MR-GREEN1337/awesome-mcp-fastapi",
  _varName: "awesomeMcpFastapiPlugin",
};

const netlifyMcpServerPlugin: Plugin = {
  id: "rmzusviqom",
  name: "Netlify MCP Server",
  description: "This is an MCP server that can be used with Netlify",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [
    {
      name: "deploy-site",
      description: "Deploy a site to Netlify",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Deploy message",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the site directory",
          required: true,
        },
        {
          name: "prod",
          type: "boolean",
          description: "Deploy to production",
          required: false,
        },
      ],
    },
    {
      name: "list-sites",
      description: "List all Netlify sites",
      parameters: [],
    },
    {
      name: "set-env-vars",
      description: "Set environment variables for a site",
      parameters: [
        {
          name: "envVars",
          type: "object",
          description: "Environment variables to set",
          required: true,
        },
        {
          name: "siteId",
          type: "string",
          description: "Site ID or name",
          required: true,
        },
      ],
    },
    {
      name: "get-deploy-status",
      description: "Get deployment status for a site",
      parameters: [
        {
          name: "deployId",
          type: "string",
          description: "Deployment ID",
          required: false,
        },
        {
          name: "siteId",
          type: "string",
          description: "Site ID or name",
          required: true,
        },
      ],
    },
    {
      name: "add-dns-record",
      description: "Add a DNS record to a site",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Domain name",
          required: true,
        },
        {
          name: "siteId",
          type: "string",
          description: "Site ID or name",
          required: true,
        },
        {
          name: "ttl",
          type: "number",
          description: "Time to live in seconds",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "DNS record type",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "DNS record value",
          required: true,
        },
      ],
    },
    {
      name: "deploy-function",
      description: "Deploy a serverless function",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Function name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the function file",
          required: true,
        },
        {
          name: "runtime",
          type: "string",
          description: "Function runtime (e.g., nodejs, go)",
          required: false,
        },
      ],
    },
    {
      name: "manage-form",
      description: "Manage form submissions",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "formId",
          type: "string",
          description: "Form ID",
          required: true,
        },
        {
          name: "siteId",
          type: "string",
          description: "Site ID or name",
          required: true,
        },
      ],
    },
    {
      name: "manage-plugin",
      description: "Manage site plugins",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "config",
          type: "object",
          description: "Plugin configuration",
          required: false,
        },
        {
          name: "pluginId",
          type: "string",
          description: "Plugin ID",
          required: true,
        },
        {
          name: "siteId",
          type: "string",
          description: "Site ID or name",
          required: true,
        },
      ],
    },
    {
      name: "manage-hook",
      description: "Manage webhook notifications",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "event",
          type: "string",
          description: "Event type",
          required: true,
        },
        {
          name: "siteId",
          type: "string",
          description: "Site ID or name",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Webhook URL",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DynamicEndpoints/Netlify-MCP-Server",
  _varName: "netlifyMcpServerPlugin",
};

const paypalMcpPlugin: Plugin = {
  id: "6op9uaqyev",
  name: "PayPal MCP",
  description: "This is an MCP server to manage PayPal",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [
    {
      name: "create_payment_token",
      description: "Create a payment token",
      parameters: [
        {
          name: "customer",
          type: "object",
          description: "Parameter: customer",
          required: true,
        },
        {
          name: "payment_source",
          type: "object",
          description: "Parameter: payment_source",
          required: true,
        },
      ],
    },
    {
      name: "create_payment",
      description: "Create a payment",
      parameters: [
        {
          name: "intent",
          type: "string",
          description: "Parameter: intent",
          required: true,
        },
        {
          name: "payer",
          type: "object",
          description: "Parameter: payer",
          required: true,
        },
        {
          name: "transactions",
          type: "object array",
          description: "Parameter: transactions",
          required: true,
        },
      ],
    },
    {
      name: "create_payout",
      description: "Create a batch payout",
      parameters: [
        {
          name: "items",
          type: "object array",
          description: "Parameter: items",
          required: true,
        },
        {
          name: "sender_batch_header",
          type: "object",
          description: "Parameter: sender_batch_header",
          required: true,
        },
      ],
    },
    {
      name: "create_referenced_payout",
      description: "Create a referenced payout",
      parameters: [
        {
          name: "referenced_payouts",
          type: "object array",
          description: "Parameter: referenced_payouts",
          required: true,
        },
      ],
    },
    {
      name: "create_order",
      description: "Create a new order in PayPal",
      parameters: [
        {
          name: "intent",
          type: "string",
          description: "Parameter: intent",
          required: true,
        },
        {
          name: "purchase_units",
          type: "object array",
          description: "Parameter: purchase_units",
          required: true,
        },
      ],
    },
    {
      name: "create_partner_referral",
      description: "Create a partner referral",
      parameters: [
        {
          name: "business_entity",
          type: "object",
          description: "Parameter: business_entity",
          required: true,
        },
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: true,
        },
        {
          name: "individual_owners",
          type: "object array",
          description: "Parameter: individual_owners",
          required: true,
        },
      ],
    },
    {
      name: "create_web_profile",
      description: "Create a web experience profile",
      parameters: [
        {
          name: "flow_config",
          type: "object",
          description: "Parameter: flow_config",
          required: false,
        },
        {
          name: "input_fields",
          type: "object",
          description: "Parameter: input_fields",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "presentation",
          type: "object",
          description: "Parameter: presentation",
          required: false,
        },
      ],
    },
    {
      name: "create_product",
      description: "Create a new product in PayPal",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Parameter: category",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: true,
        },
        {
          name: "home_url",
          type: "string",
          description: "Parameter: home_url",
          required: false,
        },
        {
          name: "image_url",
          type: "string",
          description: "Parameter: image_url",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
    {
      name: "list_products",
      description: "List all products",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Parameter: page_size",
          required: false,
        },
      ],
    },
    {
      name: "get_dispute",
      description: "Get details of a dispute",
      parameters: [
        {
          name: "dispute_id",
          type: "string",
          description: "Parameter: dispute_id",
          required: true,
        },
      ],
    },
    {
      name: "get_userinfo",
      description: "Get user info from identity token",
      parameters: [
        {
          name: "access_token",
          type: "string",
          description: "Parameter: access_token",
          required: true,
        },
      ],
    },
    {
      name: "create_invoice",
      description: "Create a new invoice",
      parameters: [
        {
          name: "currency_code",
          type: "string",
          description: "Parameter: currency_code",
          required: true,
        },
        {
          name: "invoice_number",
          type: "string",
          description: "Parameter: invoice_number",
          required: true,
        },
        {
          name: "items",
          type: "object array",
          description: "Parameter: items",
          required: true,
        },
        {
          name: "recipient_email",
          type: "string",
          description: "Parameter: recipient_email",
          required: true,
        },
        {
          name: "reference",
          type: "string",
          description: "Parameter: reference",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DynamicEndpoints/Paypal-MCP",
  _varName: "paypalMcpPlugin",
};

const stripePlugin: Plugin = {
  id: "1m8tlvbsuh",
  name: "stripe",
  description:
    "The Stripe Model Context Protocol server allows you to integrate with Stripe APIs through function calling. This protocol supports various tools to interact with different Stripe services.",
  image: "https://github.com/stripe.png",
  actions: [],
  githubUrl: "https://github.com/stripe/agent-toolkit",
  _varName: "stripePlugin",
};

const myserverMcpServerPlugin: Plugin = {
  id: "7gd9rmrfxg",
  name: "my-server MCP Server",
  description:
    "A TypeScript-based MCP server that enables users to manage text notes and generate summaries, showcasing key MCP concepts like resource representation and LLM integration.",
  image: "https://github.com/vivalalova.png",
  actions: [],
  githubUrl: "https://github.com/vivalalova/mcp_practice",
  _varName: "myserverMcpServerPlugin",
};

const wolframalphaLlmMcpServerPlugin: Plugin = {
  id: "vl1rk0ntm6",
  name: "WolframAlpha LLM MCP Server",
  description:
    "Enables querying WolframAlpha's LLM API for natural language questions, providing structured and simplified answers optimized for LLM consumption.",
  image: "https://github.com/Garoth.png",
  actions: [
    {
      name: "ask_llm",
      description:
        "Ask WolframAlpha a query and get LLM-optimized structured response with multiple formats",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The query to ask WolframAlpha",
          required: true,
        },
      ],
    },
    {
      name: "get_simple_answer",
      description:
        "Get a simplified, LLM-friendly answer focusing on the most relevant information",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The query to ask WolframAlpha",
          required: true,
        },
      ],
    },
    {
      name: "validate_key",
      description: "Validate the WolframAlpha LLM API key",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/Garoth/wolframalpha-llm-mcp",
  _varName: "wolframalphaLlmMcpServerPlugin",
};

const serpersearchscrapemcpserverPlugin: Plugin = {
  id: "5zk327i0pj",
  name: "serper-search-scrape-mcp-server",
  description:
    "This Serper MCP Server supports search and webpage scraping, and all the most recent parameters introduced by the Serper API, like location.",
  image: "https://github.com/marcopesani.png",
  actions: [
    {
      name: "google_search",
      description:
        "Tool to perform web searches via Serper API and retrieve rich results. It is able to retrieve organic search results, people also ask, related searches, and knowledge graph.",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Date after in YYYY-MM-DD format (e.g., '2023-01-01')",
          required: false,
        },
        {
          name: "autocorrect",
          type: "boolean",
          description: "Whether to autocorrect spelling in query",
          required: false,
        },
        {
          name: "before",
          type: "string",
          description: "Date before in YYYY-MM-DD format (e.g., '2024-01-01')",
          required: false,
        },
        {
          name: "cache",
          type: "string",
          description:
            "View Google's cached version of a specific URL (e.g., 'example.com/page')",
          required: false,
        },
        {
          name: "exact",
          type: "string",
          description:
            "Exact phrase match (e.g., 'machine learning', 'quantum computing')",
          required: false,
        },
        {
          name: "exclude",
          type: "string",
          description:
            "Terms to exclude from search results as comma-separated string (e.g., 'spam,ads', 'beginner,basic')",
          required: false,
        },
        {
          name: "filetype",
          type: "string",
          description:
            "Limit to specific file types (e.g., 'pdf', 'doc', 'xls')",
          required: false,
        },
        {
          name: "gl",
          type: "string",
          description:
            "Optional region code for search results in ISO 3166-1 alpha-2 format (e.g., 'us', 'gb', 'de')",
          required: true,
        },
        {
          name: "hl",
          type: "string",
          description:
            "Optional language code for search results in ISO 639-1 format (e.g., 'en', 'es', 'fr')",
          required: true,
        },
        {
          name: "intitle",
          type: "string",
          description:
            "Search for pages with word in title (e.g., 'review', 'how to')",
          required: false,
        },
        {
          name: "inurl",
          type: "string",
          description:
            "Search for pages with word in URL (e.g., 'download', 'tutorial')",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description:
            "Optional location for search results (e.g., 'SoHo, New York, United States', 'California, United States')",
          required: false,
        },
        {
          name: "num",
          type: "number",
          description: "Number of results to return (default: 10)",
          required: false,
        },
        {
          name: "or",
          type: "string",
          description:
            "Alternative terms as comma-separated string (e.g., 'tutorial,guide,course', 'documentation,manual')",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number of results to return (default: 1)",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description:
            "Search query string (e.g., 'artificial intelligence', 'climate change solutions')",
          required: true,
        },
        {
          name: "related",
          type: "string",
          description:
            "Find similar websites (e.g., 'github.com', 'stackoverflow.com')",
          required: false,
        },
        {
          name: "site",
          type: "string",
          description:
            "Limit results to specific domain (e.g., 'github.com', 'wikipedia.org')",
          required: false,
        },
        {
          name: "tbs",
          type: "string",
          description:
            "Time-based search filter ('qdr:h' for past hour, 'qdr:d' for past day, 'qdr:w' for past week, 'qdr:m' for past month, 'qdr:y' for past year)",
          required: false,
        },
      ],
    },
    {
      name: "scrape",
      description:
        "Tool to scrape a webpage and retrieve the text and, optionally, the markdown content. It will retrieve also the JSON-LD metadata and the head metadata.",
      parameters: [
        {
          name: "includeMarkdown",
          type: "boolean",
          description: "Whether to include markdown content.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL of the webpage to scrape.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/marcopesani/mcp-server-serper",
  _varName: "serpersearchscrapemcpserverPlugin",
};

const metamcpMcpServerPlugin: Plugin = {
  id: "0po36lc7i6",
  name: "MetaMCP MCP Server",
  description:
    "A proxy server that unifies multiple MCP servers, enabling seamless tool, prompt, and resource management via the MetaMCP App.",
  image: "https://github.com/metatool-ai.png",
  actions: [],
  githubUrl: "https://github.com/metatool-ai/mcp-server-metamcp",
  _varName: "metamcpMcpServerPlugin",
};

const contentfulDeliveryMcpServerPlugin: Plugin = {
  id: "v84ui258n5",
  name: "Contentful Delivery MCP Server",
  description:
    "A TypeScript-based MCP server that interacts with Contentful's Delivery API, enabling users to create, query, and summarize text notes through natural language.",
  image: "https://github.com/mshaaban0.png",
  actions: [],
  githubUrl: "https://github.com/mshaaban0/contentful-delivery-mcp",
  _varName: "contentfulDeliveryMcpServerPlugin",
};

const mcpServerForDifyAiPlugin: Plugin = {
  id: "2pf2jdt2kb",
  name: "MCP Server for Dify AI",
  description:
    "Enables LLMs to interact with Dify AI's chat completion API, including conversation context support and a restaurant recommendation tool.",
  image: "https://github.com/yuru-sha.png",
  actions: [],
  githubUrl: "https://github.com/yuru-sha/mcp-server-dify",
  _varName: "mcpServerForDifyAiPlugin",
};

const mcpSecurityAuditServerPlugin: Plugin = {
  id: "jjnmdxzmeu",
  name: "MCP Security Audit Server",
  description:
    "Audits npm package dependencies for security vulnerabilities, providing detailed reports and fix recommendations with MCP integration.",
  image: "https://github.com/qianniuspace.png",
  actions: [
    {
      name: "audit_nodejs_dependencies",
      description: "Audit specific dependencies for vulnerabilities",
      parameters: [
        {
          name: "dependencies",
          type: "object",
          description: "Dependencies object from package.json",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qianniuspace/mcp-security-audit",
  _varName: "mcpSecurityAuditServerPlugin",
};

const mcpServerForMysql1Plugin: Plugin = {
  id: "q5scpgyegd",
  name: "MCP Server for MySQL",
  description:
    "Enables LLMs to safely inspect MySQL database schemas and execute read-only queries through Docker or NPM integration.",
  image: "https://github.com/yuru-sha.png",
  actions: [],
  githubUrl: "https://github.com/yuru-sha/mcp-server-mysql",
  _varName: "mcpServerForMysql1Plugin",
};

const mcpMysqlServer1Plugin: Plugin = {
  id: "9giyvsy2ap",
  name: "MCP MySQL Server",
  description:
    "Enables LLMs to interact with MySQL databases by inspecting schemas and executing safe, read-only queries within transactions.",
  image: "https://github.com/yuru-sha.png",
  actions: [],
  githubUrl: "https://github.com/yuru-sha/mcp-server-mysql",
  _varName: "mcpMysqlServer1Plugin",
};

const sqlServerExpressMcpServerPlugin: Plugin = {
  id: "jgo4khf1fc",
  name: "SQL Server Express MCP Server",
  description:
    "Facilitates interaction with Microsoft SQL Server Express, supporting database operations such as querying, table management, and schema inspection via natural language MCP commands.",
  image: "https://github.com/hanweg.png",
  actions: [],
  githubUrl: "https://github.com/hanweg/mcp-sqlexpress",
  _varName: "sqlServerExpressMcpServerPlugin",
};

const openaiMcpServer1Plugin: Plugin = {
  id: "fzgyk9mw5e",
  name: "OpenAI MCP Server",
  description:
    "Enables integration with OpenAI models through the MCP protocol, supporting concise and detailed responses for use with Claude Desktop.",
  image: "https://github.com/thadius83.png",
  actions: [
    {
      name: "ask-openai",
      description: "Ask my assistant models a direct question",
      parameters: [
        {
          name: "model",
          type: "string",
          description: "Parameter: model",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Ask assistant",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/thadius83/mcp-server-openai",
  _varName: "openaiMcpServer1Plugin",
};

const mcpFluxStudioPlugin: Plugin = {
  id: "aztg02jhr7",
  name: "MCP Flux Studio",
  description:
    "A server that integrates Flux's advanced image generation and manipulation features into AI coding assistants, enabling seamless text-to-image and image control workflows in IDEs like Cursor and Windsurf.",
  image: "https://github.com/jmanhype.png",
  actions: [
    {
      name: "generate",
      description: "Generate an image from a text prompt",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "Aspect ratio of the output image",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Image height (ignored if aspect-ratio is set)",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "Model to use for generation",
          required: false,
        },
        {
          name: "output",
          type: "string",
          description: "Output filename",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text prompt for image generation",
          required: true,
        },
        {
          name: "width",
          type: "number",
          description: "Image width (ignored if aspect-ratio is set)",
          required: false,
        },
      ],
    },
    {
      name: "img2img",
      description: "Generate an image using another image as reference",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Output image height",
          required: false,
        },
        {
          name: "image",
          type: "string",
          description: "Input image path",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "Model to use for generation",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the generation",
          required: true,
        },
        {
          name: "output",
          type: "string",
          description: "Output filename",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text prompt for generation",
          required: true,
        },
        {
          name: "strength",
          type: "number",
          description: "Generation strength",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Output image width",
          required: false,
        },
      ],
    },
    {
      name: "inpaint",
      description: "Inpaint an image using a mask",
      parameters: [
        {
          name: "image",
          type: "string",
          description: "Input image path",
          required: true,
        },
        {
          name: "mask_shape",
          type: "string",
          description: "Shape of the mask",
          required: false,
        },
        {
          name: "output",
          type: "string",
          description: "Output filename",
          required: false,
        },
        {
          name: "position",
          type: "string",
          description: "Position of the mask",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text prompt for inpainting",
          required: true,
        },
      ],
    },
    {
      name: "control",
      description: "Generate an image using structural control",
      parameters: [
        {
          name: "guidance",
          type: "number",
          description: "Guidance scale",
          required: false,
        },
        {
          name: "image",
          type: "string",
          description: "Input control image path",
          required: true,
        },
        {
          name: "output",
          type: "string",
          description: "Output filename",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text prompt for generation",
          required: true,
        },
        {
          name: "steps",
          type: "number",
          description: "Number of inference steps",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of control to use",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jmanhype/mcp-flux-studio",
  _varName: "mcpFluxStudioPlugin",
};

const mcpOpenfecServerPlugin: Plugin = {
  id: "2ujrcuobzz",
  name: "MCP OpenFEC Server",
  description:
    "Enables interaction with Federal Election Commission data via the OpenFEC API, providing access to campaign finance information such as candidates, committees, contributions, and expenditures through the Model Context Protocol.",
  image: "https://github.com/psalzman.png",
  actions: [
    {
      name: "get_candidate",
      description: "Get detailed information about a candidate",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "FEC candidate ID",
          required: true,
        },
        {
          name: "election_year",
          type: "number",
          description: "Optional: Filter by election year",
          required: false,
        },
      ],
    },
    {
      name: "get_candidate_financials",
      description: "Get financial data for a candidate",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "FEC candidate ID",
          required: true,
        },
        {
          name: "election_year",
          type: "number",
          description: "Election year to get data for",
          required: true,
        },
      ],
    },
    {
      name: "search_candidates",
      description: "Search for candidates by name or other criteria",
      parameters: [
        {
          name: "election_year",
          type: "number",
          description: "Optional: Filter by election year",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Candidate name search string",
          required: true,
        },
        {
          name: "office",
          type: "string",
          description: "Optional: H for House, S for Senate, P for President",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Optional: Two-letter state code",
          required: false,
        },
      ],
    },
    {
      name: "get_committee",
      description: "Get detailed information about a committee",
      parameters: [
        {
          name: "committee_id",
          type: "string",
          description: "FEC committee ID",
          required: true,
        },
      ],
    },
    {
      name: "get_candidate_contributions",
      description: "Get individual contributions for a candidate",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "FEC candidate ID",
          required: true,
        },
        {
          name: "election_year",
          type: "number",
          description: "Election year",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description:
            "Optional: Sort by contribution_receipt_amount (desc for highest first)",
          required: false,
        },
      ],
    },
    {
      name: "get_filings",
      description: "Retrieve official FEC filings with filters",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "Optional: FEC candidate ID",
          required: false,
        },
        {
          name: "committee_id",
          type: "string",
          description: "Optional: FEC committee ID",
          required: false,
        },
        {
          name: "form_type",
          type: "string array",
          description:
            'Optional: Form types to filter by (e.g., ["F3", "F3P"])',
          required: false,
        },
        {
          name: "max_receipt_date",
          type: "string",
          description: "Optional: Maximum receipt date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "min_receipt_date",
          type: "string",
          description: "Optional: Minimum receipt date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Optional: Sort by receipt date",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Optional: Two-letter state code",
          required: false,
        },
      ],
    },
    {
      name: "get_independent_expenditures",
      description:
        "Get independent expenditures supporting or opposing candidates",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "Optional: FEC candidate ID",
          required: false,
        },
        {
          name: "committee_id",
          type: "string",
          description: "Optional: FEC committee ID",
          required: false,
        },
        {
          name: "max_amount",
          type: "number",
          description: "Optional: Maximum expenditure amount",
          required: false,
        },
        {
          name: "max_date",
          type: "string",
          description: "Optional: Maximum expenditure date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "min_amount",
          type: "number",
          description: "Optional: Minimum expenditure amount",
          required: false,
        },
        {
          name: "min_date",
          type: "string",
          description: "Optional: Minimum expenditure date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Optional: Sort by expenditure amount",
          required: false,
        },
        {
          name: "support_oppose_indicator",
          type: "string",
          description: "Optional: S for supporting or O for opposing",
          required: false,
        },
      ],
    },
    {
      name: "get_electioneering",
      description: "Get electioneering communications",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "Optional: FEC candidate ID",
          required: false,
        },
        {
          name: "committee_id",
          type: "string",
          description: "Optional: FEC committee ID",
          required: false,
        },
        {
          name: "max_amount",
          type: "number",
          description: "Optional: Maximum disbursement amount",
          required: false,
        },
        {
          name: "max_date",
          type: "string",
          description: "Optional: Maximum disbursement date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "min_amount",
          type: "number",
          description: "Optional: Minimum disbursement amount",
          required: false,
        },
        {
          name: "min_date",
          type: "string",
          description: "Optional: Minimum disbursement date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Optional: Sort by disbursement amount",
          required: false,
        },
      ],
    },
    {
      name: "get_party_coordinated_expenditures",
      description: "Get party coordinated expenditures",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "Optional: FEC candidate ID",
          required: false,
        },
        {
          name: "committee_id",
          type: "string",
          description: "Optional: FEC committee ID",
          required: false,
        },
        {
          name: "max_amount",
          type: "number",
          description: "Optional: Maximum expenditure amount",
          required: false,
        },
        {
          name: "max_date",
          type: "string",
          description: "Optional: Maximum expenditure date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "min_amount",
          type: "number",
          description: "Optional: Minimum expenditure amount",
          required: false,
        },
        {
          name: "min_date",
          type: "string",
          description: "Optional: Minimum expenditure date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Optional: Sort by expenditure amount",
          required: false,
        },
      ],
    },
    {
      name: "get_communication_costs",
      description: "Get corporate/union communication costs",
      parameters: [
        {
          name: "candidate_id",
          type: "string",
          description: "Optional: FEC candidate ID",
          required: false,
        },
        {
          name: "committee_id",
          type: "string",
          description: "Optional: FEC committee ID",
          required: false,
        },
        {
          name: "max_amount",
          type: "number",
          description: "Optional: Maximum cost amount",
          required: false,
        },
        {
          name: "max_date",
          type: "string",
          description: "Optional: Maximum communication date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "min_amount",
          type: "number",
          description: "Optional: Minimum cost amount",
          required: false,
        },
        {
          name: "min_date",
          type: "string",
          description: "Optional: Minimum communication date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Optional: Sort by cost amount",
          required: false,
        },
      ],
    },
    {
      name: "get_audit_cases",
      description: "Get FEC audit cases and findings",
      parameters: [
        {
          name: "audit_id",
          type: "string",
          description: "Optional: Specific audit case ID",
          required: false,
        },
        {
          name: "audit_year",
          type: "number",
          description: "Optional: Year of audit",
          required: false,
        },
        {
          name: "committee_id",
          type: "string",
          description: "Optional: FEC committee ID",
          required: false,
        },
        {
          name: "finding_types",
          type: "string array",
          description: "Optional: Types of findings to filter by",
          required: false,
        },
      ],
    },
    {
      name: "get_bulk_downloads",
      description: "Get links to bulk data downloads",
      parameters: [
        {
          name: "data_type",
          type: "string",
          description: "Type of bulk data to download",
          required: true,
        },
        {
          name: "election_year",
          type: "number",
          description: "Optional: Election year for the data",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/psalzman/mcp-openfec",
  _varName: "mcpOpenfecServerPlugin",
};

const biggoMcpServerPlugin: Plugin = {
  id: "iejifldvsv",
  name: "BigGo MCP Server",
  description:
    "A Model Context Protocol server enabling product searches across e-commerce platforms, price history tracking, and product specification-based searches using natural language prompts.",
  image: "https://github.com/Funmula-Corp.png",
  actions: [
    {
      name: "product_search",
      description: "Product Search",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "price_history_graph",
      description: "Link That Visualizes Product Price History",
      parameters: [
        {
          name: "history_id",
          type: "string",
          description:
            "\n              Product History ID\n              Here are a few steps to obtain this argument.\n              1. Use 'product_search' tool to retrive a list of products\n              2. Find the most relevant product.\n              3. The product should have a field called 'history_id', use it as the value for this argument\n              ",
          required: true,
        },
      ],
    },
    {
      name: "price_history_with_history_id",
      description: "Product Price History With History ID",
      parameters: [
        {
          name: "days",
          type: "string",
          description: "History range",
          required: true,
        },
        {
          name: "history_id",
          type: "string",
          description:
            "\n              Product History ID\n              Here are a few steps to obtain this argument.\n              1. Use 'product_search' tool to retrive a list of products\n              2. Find the most relevant product.\n              3. The product should have a field called 'history_id', use it as the value for this argument\n              ",
          required: true,
        },
      ],
    },
    {
      name: "price_history_with_url",
      description: "Product Price History With URL",
      parameters: [
        {
          name: "days",
          type: "string",
          description: "History range",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Product URL",
          required: true,
        },
      ],
    },
    {
      name: "spec_indexes",
      description:
        "Elasticsearch Indexes for Product Specification.\n\n    It is REQUIRED to use this tool first before running any specification search.\n    ",
      parameters: [],
    },
    {
      name: "spec_mapping",
      description:
        "Elasticsearch Mapping For Product Specification.\n\n    Use this tool after you have the index, and need to know the mapping in order to query the index.\n    Available indexes can be obtained by using the 'spec_indexes' tool.\n    ",
      parameters: [
        {
          name: "index",
          type: "string",
          description:
            "\n                          Elasticsearch index\n\n                          Steps to obtain this argument.\n                          1. Use 'spec_indexes' tool to get the list of indexes\n                          2. Choose the most relevant index\n                          ",
          required: true,
        },
      ],
    },
    {
      name: "spec_search",
      description:
        "Product Specification Search. \n\n    Index mapping must be aquired before using this tool.\n    Use 'spec_mapping' tool to get the mapping of the index.\n    ",
      parameters: [
        {
          name: "elasticsearch_query",
          type: "string",
          description:
            "\n              Elasticsearch query ( Elasticsearch version: 8 )\n\n              Bellow are rules that MUST be followed when using this tool.\n              All rules must be followed strictly.\n                \n              1. The 'spec_mapping' tool must be used to get the mapping of the index, before using this tool\n              2. Size must be less than or equal to 10\n              3. Result must be sorted when needed\n              4. Must not contain documents with 'status' field as 'deleted'\n\n              When to sort:\n              - The user wants the most efficient refrigerator: sort by power consumption\n              - The user wants the smallest referegirator: sort by height\n\n              When not to sort:\n              - The user wants phones with 16GB of ram: no need to sort, just find the exact number\n\n              Spec fields are all located under the 'spec' key, remaber to add 'spec' when querying.\n              Example fields paths:\n              - specs.physical_specs.weight\n              - specs.technical_specs.water_resistance.depth\n              - specs.sensors.gyroscope\n              ",
          required: true,
        },
        {
          name: "index",
          type: "string",
          description:
            "\n                          Elasticsearch index\n\n                          Steps to obtain this argument.\n                          1. Use 'spec_indexes' tool to get the list of indexes\n                          2. Choose the most relevant index\n                          ",
          required: true,
        },
      ],
    },
    {
      name: "get_current_region",
      description: "\n    Get the current region setting.\n    ",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/Funmula-Corp/BigGo-MCP-Server",
  _varName: "biggoMcpServerPlugin",
};

const mcpServerForOpenmetadataPlugin: Plugin = {
  id: "lvgl5cmxa6",
  name: "MCP Server for OpenMetadata",
  description:
    "Enables integration with OpenMetadata by wrapping its REST API for standardized interaction through the Model Context Protocol.",
  image: "https://github.com/yangkyeongmo.png",
  actions: [
    {
      name: "list_tables",
      description: "List tables from OpenMetadata",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of tables to return",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Number of tables to skip",
          required: false,
        },
      ],
    },
    {
      name: "get_table",
      description: "Get details of a specific table by ID",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Fields to include in the response",
          required: false,
        },
        {
          name: "table_id",
          type: "string",
          description: "ID of the table to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get_table_by_name",
      description: "Get details of a specific table by fully qualified name",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Fields to include in the response",
          required: false,
        },
        {
          name: "fqn",
          type: "string",
          description: "Fully qualified name of the table",
          required: true,
        },
      ],
    },
    {
      name: "create_table",
      description: "Create a new table",
      parameters: [
        {
          name: "table_data",
          type: "object",
          description: "Table data including name, description, columns, etc.",
          required: true,
        },
      ],
    },
    {
      name: "update_table",
      description: "Update an existing table",
      parameters: [
        {
          name: "table_data",
          type: "object",
          description: "Updated table data",
          required: true,
        },
        {
          name: "table_id",
          type: "string",
          description: "ID of the table to update",
          required: true,
        },
      ],
    },
    {
      name: "delete_table",
      description: "Delete a table",
      parameters: [
        {
          name: "hard_delete",
          type: "boolean",
          description: "Whether to perform a hard delete",
          required: false,
        },
        {
          name: "recursive",
          type: "boolean",
          description: "Whether to recursively delete children",
          required: false,
        },
        {
          name: "table_id",
          type: "string",
          description: "ID of the table to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/yangkyeongmo/mcp-server-openmetadata",
  _varName: "mcpServerForOpenmetadataPlugin",
};

const appleMcpServerPlugin: Plugin = {
  id: "gq2qg6kxtu",
  name: "Apple MCP Server",
  description:
    "Enables interaction with Apple apps like Messages, Notes, and Contacts through the MCP protocol to send messages, search, and open app content using natural language.",
  image: "https://github.com/Dhravya.png",
  actions: [
    {
      name: "contacts",
      description: "Search and retrieve contacts from Apple Contacts app",
      parameters: [
        {
          name: "name",
          type: "string",
          description:
            "Name to search for (optional - if not provided, returns all contacts). Can be partial name to search.",
          required: false,
        },
      ],
    },
    {
      name: "notes",
      description: "Search and retrieve notes from Apple Notes app",
      parameters: [
        {
          name: "searchText",
          type: "string",
          description:
            "Text to search for in notes (optional - if not provided, returns all notes)",
          required: false,
        },
      ],
    },
    {
      name: "messages",
      description:
        "Interact with Apple Messages app - send, read, schedule messages and check unread messages",
      parameters: [
        {
          name: "limit",
          type: "number",
          description:
            "Number of messages to read (optional, for read and unread operations)",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description:
            "Message to send (required for send and schedule operations)",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description:
            "Operation to perform: 'send', 'read', 'schedule', or 'unread'",
          required: true,
        },
        {
          name: "phoneNumber",
          type: "string",
          description:
            "Phone number to send message to (required for send, read, and schedule operations)",
          required: false,
        },
        {
          name: "scheduledTime",
          type: "string",
          description:
            "ISO string of when to send the message (required for schedule operation)",
          required: false,
        },
      ],
    },
    {
      name: "mail",
      description:
        "Interact with Apple Mail app - read unread emails, search emails, and send emails",
      parameters: [
        {
          name: "account",
          type: "string",
          description:
            "Email account to use (optional - if not provided, searches across all accounts)",
          required: false,
        },
        {
          name: "bcc",
          type: "string",
          description: "BCC email address (optional for send operation)",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Email body content (required for send operation)",
          required: false,
        },
        {
          name: "cc",
          type: "string",
          description: "CC email address (optional for send operation)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Number of emails to retrieve (optional, for unread and search operations)",
          required: false,
        },
        {
          name: "mailbox",
          type: "string",
          description:
            "Mailbox to use (optional - if not provided, uses inbox or searches across all mailboxes)",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description:
            "Operation to perform: 'unread', 'search', 'send', 'mailboxes', or 'accounts'",
          required: true,
        },
        {
          name: "searchTerm",
          type: "string",
          description:
            "Text to search for in emails (required for search operation)",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject (required for send operation)",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient email address (required for send operation)",
          required: false,
        },
      ],
    },
    {
      name: "reminders",
      description: "Search, create, and open reminders in Apple Reminders app",
      parameters: [
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date for the reminder in ISO format (optional for create operation)",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to get reminders from (required for listById operation)",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the reminder in (optional for create operation)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Name of the reminder to create (required for create operation)",
          required: false,
        },
        {
          name: "notes",
          type: "string",
          description:
            "Additional notes for the reminder (optional for create operation)",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description:
            "Operation to perform: 'list', 'search', 'open', 'create', or 'listById'",
          required: true,
        },
        {
          name: "props",
          type: "string array",
          description:
            "Properties to include in the reminders (optional for listById operation)",
          required: false,
        },
        {
          name: "searchText",
          type: "string",
          description:
            "Text to search for in reminders (required for search and open operations)",
          required: false,
        },
      ],
    },
    {
      name: "webSearch",
      description:
        "Search the web using DuckDuckGo and retrieve content from search results",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query to look up",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Dhravya/apple-mcp",
  _varName: "appleMcpServerPlugin",
};

const mcpSapGuiServerPlugin: Plugin = {
  id: "jrsv7188i3",
  name: "MCP SAP GUI Server",
  description:
    "Automates interactions with SAP GUI using the Model Context Protocol, allowing precise control of SAP transactions through tools like clicking, typing, scrolling, and transaction management.",
  image: "https://github.com/mario-andreschak.png",
  actions: [],
  githubUrl: "https://github.com/mario-andreschak/mcp-sap-gui",
  _varName: "mcpSapGuiServerPlugin",
};

const fluxdevMcpServerPlugin: Plugin = {
  id: "6i9o09upfr",
  name: "flux-dev MCP Server",
  description:
    "Implements a Model Context Protocol (MCP) server powered by Flux API from Cephalon Cloud, enabling users to utilize advanced AI capabilities through standardized communication.",
  image: "https://github.com/nicekate.png",
  actions: [],
  githubUrl: "https://github.com/nicekate/flux-dev-mcp",
  _varName: "fluxdevMcpServerPlugin",
};

const forevervmPlugin: Plugin = {
  id: "g7t0ush7f2",
  name: "ForeverVM",
  description:
    "The sessionless code interpreter.\n\nSecurely run AI-generated code in stateful sandboxes that run forever.",
  image: "https://github.com/jamsocket.png",
  actions: [],
  githubUrl: "https://github.com/jamsocket/forevervm",
  _varName: "forevervmPlugin",
};

const florence2McpServerPlugin: Plugin = {
  id: "mziprujksn",
  name: "Florence-2 MCP Server",
  description: "An MCP server for processing images using Florence-2.",
  image: "https://github.com/jkawamoto.png",
  actions: [
    {
      name: "ocr",
      description: "Process an image file or URL using OCR to extract text.",
      parameters: [
        {
          name: "src",
          type: "string",
          description:
            "A file path or URL to the image file that needs to be processed.",
          required: true,
        },
      ],
    },
    {
      name: "caption",
      description:
        "Processes an image file and generates captions for the image.",
      parameters: [
        {
          name: "src",
          type: "string",
          description:
            "A file path or URL to the image file that needs to be processed.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jkawamoto/mcp-florence2",
  _varName: "florence2McpServerPlugin",
};

const lodestarMcpServerPlugin: Plugin = {
  id: "x880y2havg",
  name: "Lodestar MCP Server",
  description:
    "This is an MCP server that facilitates building tools for interacting with various APIs and workflows, supporting Python-based development with potential for customizable prompts and user configurations.",
  image: "https://github.com/kanlanc.png",
  actions: [],
  githubUrl: "https://github.com/kanlanc/lodestar-mcp",
  _varName: "lodestarMcpServerPlugin",
};

const proxmoxMcpServerPlugin: Plugin = {
  id: "uom6plhgf1",
  name: "Proxmox MCP Server",
  description:
    "A Python-based server enabling interaction with Proxmox hypervisors. It supports secure authentication and provides tools for managing nodes, VMs, clusters, and storage.",
  image: "https://github.com/canvrno.png",
  actions: [],
  githubUrl: "https://github.com/canvrno/ProxmoxMCP",
  _varName: "proxmoxMcpServerPlugin",
};

const mcptimeplusPlugin: Plugin = {
  id: "9aleefsq9s",
  name: "mcp-timeplus",
  description:
    "Integration with Timeplus, a database for streaming data, such as Apache Kafka/Pulsar",
  image: "https://github.com/jovezhong.png",
  actions: [
    {
      name: "list_databases",
      description: "Action for list_databases",
      parameters: [],
    },
    {
      name: "list_tables",
      description: "Action for list_tables",
      parameters: [
        {
          name: "database",
          type: "string",
          description: "Parameter: database",
          required: false,
        },
        {
          name: "like",
          type: "string",
          description: "Parameter: like",
          required: false,
        },
      ],
    },
    {
      name: "run_sql",
      description: "Action for run_sql",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "list_kafka_topics",
      description: "Action for list_kafka_topics",
      parameters: [],
    },
    {
      name: "explore_kafka_topic",
      description: "Action for explore_kafka_topic",
      parameters: [
        {
          name: "message_count",
          type: "integer",
          description: "Parameter: message_count",
          required: false,
        },
        {
          name: "topic",
          type: "string",
          description: "Parameter: topic",
          required: true,
        },
      ],
    },
    {
      name: "create_kafka_stream",
      description: "Action for create_kafka_stream",
      parameters: [
        {
          name: "topic",
          type: "string",
          description: "Parameter: topic",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jovezhong/mcp-timeplus",
  _varName: "mcptimeplusPlugin",
};

const webflowMcpServerPlugin: Plugin = {
  id: "un9r0vtmku",
  name: "Webflow MCP Server",
  description:
    "Enables Claude to interact with Webflow's APIs for managing sites, retrieving information, and executing tasks using natural language.",
  image: "https://github.com/kapilduraphe.png",
  actions: [
    {
      name: "get_site",
      description:
        "Retrieve detailed information about a specific Webflow site by ID, including workspace, creation date, display name, and publishing details",
      parameters: [
        {
          name: "siteId",
          type: "string",
          description: "The unique identifier of the Webflow site",
          required: true,
        },
      ],
    },
    {
      name: "get_sites",
      description:
        "Retrieve a list of all Webflow sites accessible to the authenticated user",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/kapilduraphe/webflow-mcp-server",
  _varName: "webflowMcpServerPlugin",
};

const githubMcpServer2Plugin: Plugin = {
  id: "j37nzp7f8j",
  name: "GitHub MCP Server",
  description:
    "Enables interaction with GitHub issues via the Model Context Protocol, allowing users to list and create issues with secure authentication.",
  image: "https://github.com/timbuchinger.png",
  actions: [],
  githubUrl: "https://github.com/timbuchinger/mcp-github",
  _varName: "githubMcpServer2Plugin",
};

const mcpServerForCursorPlugin: Plugin = {
  id: "i8mr884fr8",
  name: "MCP Server for Cursor",
  description:
    "A Model Context Protocol server that integrates with Cursor IDE, providing real-time communication, modern web dashboards, and extensible tools via SSE and WebSocket connections.",
  image: "https://github.com/AntDX316.png",
  actions: [],
  githubUrl: "https://github.com/AntDX316/MCP-Server",
  _varName: "mcpServerForCursorPlugin",
};

const squareMcpServerPlugin: Plugin = {
  id: "xumoqtcs57",
  name: "Square MCP Server",
  description:
    "A server that enables interaction with Square's API via Goose, supporting queries for locations, customers, and more with context preservation and MCP-compliant responses.",
  image: "https://github.com/block.png",
  actions: [
    {
      name: "payments",
      description:
        "Manage payment operations using Square API\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Payments:\n                - list_payments\n                - create_payment\n                - get_payment\n                - update_payment\n                - cancel_payment\n            Refunds:\n                - refund_payment\n                - list_refunds\n                - get_refund\n            Disputes:\n                - list_disputes\n                - retrieve_dispute\n                - accept_dispute\n                - create_dispute_evidence\n            Gift Cards:\n                - create_gift_card\n                - link_customer_to_gift_card\n                - retrieve_gift_card\n                - list_gift_cards\n            Bank Accounts:\n                - list_bank_accounts\n                - get_bank_account\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "terminal",
      description:
        "Manage Square Terminal operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Checkout:\n                - create_terminal_checkout\n                - search_terminal_checkouts\n                - get_terminal_checkout\n                - cancel_terminal_checkout\n            Devices:\n                - create_terminal_device\n                - get_terminal_device\n                - search_terminal_devices\n            Refunds:\n                - create_terminal_refund\n                - search_terminal_refunds\n                - get_terminal_refund\n                - cancel_terminal_refund\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "orders",
      description:
        "Manage orders and checkout operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Orders:\n                - create_order\n                - batch_retrieve_orders\n                - calculate_order\n                - clone_order\n                - search_orders\n                - pay_order\n                - update_order\n            Checkout:\n                - create_checkout\n                - create_payment_link\n            Custom Attributes:\n                - upsert_order_custom_attribute\n                - list_order_custom_attribute_definitions\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "catalog",
      description:
        "Manage catalog operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            - create_catalog_object\n            - batch_delete_catalog_objects\n            - batch_retrieve_catalog_objects\n            - batch_upsert_catalog_objects\n            - create_catalog_image\n            - delete_catalog_object\n            - retrieve_catalog_object\n            - search_catalog_objects\n            - update_catalog_object\n            - update_item_modifier_lists\n            - update_item_taxes\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "inventory",
      description:
        "Manage inventory operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            - batch_change_inventory\n            - batch_retrieve_inventory_changes\n            - batch_retrieve_inventory_counts\n            - retrieve_inventory_adjustment\n            - retrieve_inventory_changes\n            - retrieve_inventory_count\n            - retrieve_inventory_physical_count\n            - retrieve_inventory_transfer\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "subscriptions",
      description:
        "Manage subscription operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            - create_subscription\n            - search_subscriptions\n            - retrieve_subscription\n            - update_subscription\n            - cancel_subscription\n            - list_subscription_events\n            - pause_subscription\n            - resume_subscription\n            - swap_plan\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "invoices",
      description:
        "Manage invoice operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            - create_invoice\n            - search_invoices\n            - get_invoice\n            - update_invoice\n            - cancel_invoice\n            - publish_invoice\n            - delete_invoice\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "team",
      description:
        "Manage team operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Team Members:\n                - create_team_member\n                - bulk_create_team_members\n                - update_team_member\n                - retrieve_team_member\n                - search_team_members\n            Wages:\n                - retrieve_wage_setting\n                - update_wage_setting\n            Labor:\n                - create_break_type\n                - create_shift\n                - search_shifts\n                - update_shift\n                - create_workweek_config\n            Cash Drawers:\n                - list_cash_drawer_shifts\n                - retrieve_cash_drawer_shift\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "customers",
      description:
        "Manage customer operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Customers:\n                - list_customers\n                - create_customer\n                - delete_customer\n                - retrieve_customer\n                - update_customer\n                - search_customers\n            Groups:\n                - create_customer_group\n                - delete_customer_group\n                - list_customer_groups\n                - retrieve_customer_group\n                - update_customer_group\n            Segments:\n                - list_customer_segments\n                - retrieve_customer_segment\n            Custom Attributes:\n                - create_customer_custom_attribute_definition\n                - delete_customer_custom_attribute_definition\n                - list_customer_custom_attribute_definitions\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "loyalty",
      description:
        "Manage loyalty operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Programs:\n                - create_loyalty_program\n                - retrieve_loyalty_program\n            Accounts:\n                - create_loyalty_account\n                - search_loyalty_accounts\n                - retrieve_loyalty_account\n                - accumulate_loyalty_points\n                - adjust_loyalty_points\n                - search_loyalty_events\n            Promotions:\n                - create_loyalty_promotion\n                - cancel_loyalty_promotion\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "bookings",
      description:
        "Manage booking operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Bookings:\n                - create_booking\n                - search_bookings\n                - retrieve_booking\n                - update_booking\n                - cancel_booking\n            Team Member Bookings:\n                - bulk_retrieve_team_member_bookings\n                - retrieve_team_member_booking_profile\n            Location Profiles:\n                - list_location_booking_profiles\n                - retrieve_location_booking_profile\n            Custom Attributes:\n                - create_booking_custom_attribute_definition\n                - update_booking_custom_attribute_definition\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "business",
      description:
        "Manage business operations\n\n    Args:\n        operation: The operation to perform. Valid operations:\n            Merchants:\n                - list_merchants\n                - retrieve_merchant\n            Locations:\n                - list_locations\n                - create_location\n                - retrieve_location\n                - update_location\n            Vendors:\n                - bulk_create_vendors\n                - bulk_retrieve_vendors\n                - create_vendor\n                - search_vendors\n                - update_vendor\n            Sites:\n                - list_sites\n        params: Dictionary of parameters for the specific operation\n    ",
      parameters: [
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/block/square-mcp",
  _varName: "squareMcpServerPlugin",
};

const everartForgeMcpServerPlugin: Plugin = {
  id: "ct0da3d4nk",
  name: "EverArt Forge MCP Server",
  description:
    "An advanced MCP server for Cline that leverages EverArt's AI models to generate vector and raster images, supporting flexible storage, multiple formats, and robust image generation capabilities.",
  image: "https://github.com/nickbaumann98.png",
  actions: [
    {
      name: "generate_image",
      description:
        "Generate images using EverArt Models, optimized for web development. Supports web project paths, responsive formats, and inline preview. Available models:\n- 5000:FLUX1.1: Standard quality\n- 9000:FLUX1.1-ultra: Ultra high quality\n- 6000:SD3.5: Stable Diffusion 3.5\n- 7000:Recraft-Real: Photorealistic style\n- 8000:Recraft-Vector: Vector art style (SVG format)",
      parameters: [
        {
          name: "asset_path",
          type: "string",
          description:
            "Optional subdirectory within the web project's asset structure for storing generated images.",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description:
            "Output format (svg, png, jpg, webp). Note: Vector format (svg) is only available with Recraft-Vector (8000) model.",
          required: false,
        },
        {
          name: "image_count",
          type: "number",
          description: "Number of images to generate",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description:
            "Model ID (5000:FLUX1.1, 9000:FLUX1.1-ultra, 6000:SD3.5, 7000:Recraft-Real, 8000:Recraft-Vector)",
          required: false,
        },
        {
          name: "output_path",
          type: "string",
          description:
            "Optional: Custom output path for the generated image. If not provided, image will be saved in the default storage directory.",
          required: false,
        },
        {
          name: "project_type",
          type: "string",
          description:
            "Web project type to determine appropriate asset directory structure (e.g., 'react', 'vue', 'html', 'next').",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text description of desired image",
          required: true,
        },
        {
          name: "web_project_path",
          type: "string",
          description:
            "Path to web project root folder for storing images in appropriate asset directories.",
          required: false,
        },
      ],
    },
    {
      name: "list_images",
      description: "List all stored images",
      parameters: [],
    },
    {
      name: "view_image",
      description: "Open a stored image in the default image viewer",
      parameters: [
        {
          name: "filename",
          type: "string",
          description: "Name of the image file to view",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nickbaumann98/everart-forge-mcp",
  _varName: "everartForgeMcpServerPlugin",
};

const mcpAgentTypescriptPortPlugin: Plugin = {
  id: "lamjyav2ov",
  name: "MCP Agent TypeScript Port",
  description:
    "A TypeScript implementation of the MCP Agent framework, providing tools for building context-aware agents with advanced workflow management, logging, and execution capabilities.",
  image: "https://github.com/waldzellai.png",
  actions: [],
  githubUrl: "https://github.com/waldzellai/mcp-agent-ts",
  _varName: "mcpAgentTypescriptPortPlugin",
};

const serperSearchMcpServerPlugin: Plugin = {
  id: "dgyr9ut8o5",
  name: "Serper Search MCP Server",
  description:
    "Enables integration of Google search functionality into MCP-enabled applications using the Serper API, providing rich search results, configurable parameters, and efficient response handling.",
  image: "https://github.com/NightTrek.png",
  actions: [
    {
      name: "serper-google-search",
      description:
        "Perform a Google search using the SERPER API. Returns rich search results including knowledge graph, organic results, related questions, and more.",
      parameters: [
        {
          name: "autocorrect",
          type: "boolean",
          description: "Enable query autocorrection",
          required: false,
        },
        {
          name: "gl",
          type: "string",
          description: 'Country code (e.g., "us", "uk")',
          required: false,
        },
        {
          name: "hl",
          type: "string",
          description: 'Language code (e.g., "en", "es")',
          required: false,
        },
        {
          name: "numResults",
          type: "number",
          description: "Number of results to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/NightTrek/Serper-search-mcp",
  _varName: "serperSearchMcpServerPlugin",
};

const curriMcpServerPlugin: Plugin = {
  id: "5wqla3zz3c",
  name: "Curri MCP Server",
  description:
    "Enables interaction with Curri's API by managing text notes, offering tools for note creation, and generating summaries using structured prompts.",
  image: "https://github.com/teamcurri.png",
  actions: [],
  githubUrl: "https://github.com/teamcurri/mcp-linear",
  _varName: "curriMcpServerPlugin",
};

const n8nMcpServerPlugin: Plugin = {
  id: "l1rov8ni7r",
  name: "n8n MCP Server",
  description:
    "An MCP server enabling secure interaction with n8n workflows, executions, and settings via the Model Context Protocol, designed for integration with Large Language Models (LLMs).",
  image: "https://github.com/illuminaresolutions.png",
  actions: [
    {
      name: "init-n8n",
      description:
        "Initialize connection to n8n instance. Use this tool whenever an n8n URL and API key are shared to establish the connection. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "Parameter: apiKey",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "list-workflows",
      description:
        "List all workflows from n8n. Use after init-n8n to see available workflows. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
      ],
    },
    {
      name: "get-workflow",
      description:
        "Retrieve a workflow by ID. Use after list-workflows to get detailed information about a specific workflow. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "create-workflow",
      description:
        "Create a new workflow in n8n. Use to set up a new workflow with optional nodes and connections. IMPORTANT: 1) Arguments must be provided as compact, single-line JSON without whitespace or newlines. 2) Must provide full workflow structure including nodes and connections arrays, even if empty. The 'active' property should not be included as it is read-only.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "connections",
          type: "object",
          description: "Parameter: connections",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "nodes",
          type: "array",
          description: "Parameter: nodes",
          required: false,
        },
      ],
    },
    {
      name: "update-workflow",
      description:
        "Update an existing workflow in n8n. Use after get-workflow to modify a workflow's properties, nodes, or connections. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "workflow",
          type: "object",
          description: "Parameter: workflow",
          required: true,
        },
      ],
    },
    {
      name: "delete-workflow",
      description:
        "Delete a workflow by ID. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "activate-workflow",
      description:
        "Activate a workflow by ID. This will enable the workflow to run. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "deactivate-workflow",
      description:
        "Deactivate a workflow by ID. This will prevent the workflow from running. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "list-projects",
      description:
        "List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
      ],
    },
    {
      name: "create-project",
      description:
        "Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "delete-project",
      description:
        "Delete a project by ID. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "update-project",
      description:
        "Update a project's name. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: true,
        },
      ],
    },
    {
      name: "list-users",
      description:
        "Retrieve all users from your instance. Only available for the instance owner.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
      ],
    },
    {
      name: "create-users",
      description: "Create one or more users in your instance.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "users",
          type: "object array",
          description: "Parameter: users",
          required: true,
        },
      ],
    },
    {
      name: "get-user",
      description: "Get user by ID or email address.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "idOrEmail",
          type: "string",
          description: "Parameter: idOrEmail",
          required: true,
        },
      ],
    },
    {
      name: "delete-user",
      description: "Delete a user from your instance.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "idOrEmail",
          type: "string",
          description: "Parameter: idOrEmail",
          required: true,
        },
      ],
    },
    {
      name: "list-variables",
      description:
        "List all variables from n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after init-n8n to see available variables. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
      ],
    },
    {
      name: "create-variable",
      description:
        "Create a new variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Variables can be used across workflows to store and share data. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Parameter: key",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Parameter: value",
          required: true,
        },
      ],
    },
    {
      name: "delete-variable",
      description:
        "Delete a variable by ID. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after list-variables to get the ID of the variable to delete. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "create-credential",
      description:
        "Create a credential that can be used by nodes of the specified type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). Use get-credential-schema first to see what fields are required for the credential type you want to create.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Parameter: data",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
    {
      name: "delete-credential",
      description:
        "Delete a credential by ID. You must be the owner of the credentials.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "get-credential-schema",
      description:
        "Show credential data schema for a specific credential type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). This will show you what fields are required for creating credentials of this type.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "credentialTypeName",
          type: "string",
          description: "Parameter: credentialTypeName",
          required: true,
        },
      ],
    },
    {
      name: "list-executions",
      description:
        "Retrieve all executions from your instance with optional filtering.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "includeData",
          type: "boolean",
          description: "Parameter: includeData",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "workflowId",
          type: "string",
          description: "Parameter: workflowId",
          required: false,
        },
      ],
    },
    {
      name: "get-execution",
      description: "Retrieve a specific execution by ID.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "includeData",
          type: "boolean",
          description: "Parameter: includeData",
          required: false,
        },
      ],
    },
    {
      name: "delete-execution",
      description: "Delete a specific execution by ID.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "create-tag",
      description: "Create a new tag in your instance.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "list-tags",
      description: "Retrieve all tags from your instance.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "get-tag",
      description: "Retrieve a specific tag by ID.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "update-tag",
      description: "Update a tag's name.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "delete-tag",
      description: "Delete a tag by ID.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "get-workflow-tags",
      description: "Get tags associated with a workflow.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "workflowId",
          type: "string",
          description: "Parameter: workflowId",
          required: true,
        },
      ],
    },
    {
      name: "update-workflow-tags",
      description: "Update tags associated with a workflow.",
      parameters: [
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "tagIds",
          type: "object array",
          description: "Parameter: tagIds",
          required: true,
        },
        {
          name: "workflowId",
          type: "string",
          description: "Parameter: workflowId",
          required: true,
        },
      ],
    },
    {
      name: "generate-audit",
      description: "Generate a security audit for your n8n instance.",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description: "Parameter: categories",
          required: false,
        },
        {
          name: "clientId",
          type: "string",
          description: "Parameter: clientId",
          required: true,
        },
        {
          name: "daysAbandonedWorkflow",
          type: "number",
          description: "Parameter: daysAbandonedWorkflow",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/illuminaresolutions/n8n-mcp-server",
  _varName: "n8nMcpServerPlugin",
};

const mcpwcgwPlugin: Plugin = {
  id: "owi938czgc",
  name: "mcp-wcgw",
  description:
    "Shell and file edit capabilities tightly coupled to provide a powerful coding experience.\n\nYou can work with different modes: architect and code-writer for separate plan and implementation phase.\n\nYou can get it to invoke any cli command, e.g., compiling, type checking, linting, github cli, python",
  image: "https://github.com/rusiaaman.png",
  actions: [],
  githubUrl: "https://github.com/rusiaaman/wcgw",
  _varName: "mcpwcgwPlugin",
};

const softwarePlanningToolPlugin: Plugin = {
  id: "a35c7qc7ie",
  name: "Software Planning Tool",
  description:
    "Facilitates interactive software development planning by managing tasks, tracking progress, and creating detailed implementation plans through the Model Context Protocol.",
  image: "https://github.com/NightTrek.png",
  actions: [
    {
      name: "start_planning",
      description: "Start a new planning session with a goal",
      parameters: [
        {
          name: "goal",
          type: "string",
          description: "The software development goal to plan",
          required: true,
        },
      ],
    },
    {
      name: "save_plan",
      description: "Save the current implementation plan",
      parameters: [
        {
          name: "plan",
          type: "string",
          description: "The implementation plan text to save",
          required: true,
        },
      ],
    },
    {
      name: "add_todo",
      description: "Add a new todo item to the current plan",
      parameters: [
        {
          name: "codeExample",
          type: "string",
          description: "Optional code example",
          required: false,
        },
        {
          name: "complexity",
          type: "number",
          description: "Complexity score (0-10)",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed description of the todo item",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the todo item",
          required: true,
        },
      ],
    },
    {
      name: "remove_todo",
      description: "Remove a todo item from the current plan",
      parameters: [
        {
          name: "todoId",
          type: "string",
          description: "ID of the todo item to remove",
          required: true,
        },
      ],
    },
    {
      name: "get_todos",
      description: "Get all todos in the current plan",
      parameters: [],
    },
    {
      name: "update_todo_status",
      description: "Update the completion status of a todo item",
      parameters: [
        {
          name: "isComplete",
          type: "boolean",
          description: "New completion status",
          required: true,
        },
        {
          name: "todoId",
          type: "string",
          description: "ID of the todo item",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/NightTrek/Software-planning-mcp",
  _varName: "softwarePlanningToolPlugin",
};

const mcpclickupPlugin: Plugin = {
  id: "xmkjx41v71",
  name: "mcp-clickup",
  description: "MCP Server for the ClickUp API,",
  image: "https://github.com/mikah13.png",
  actions: [
    {
      name: "clickup_authenticate",
      description:
        "Authenticate with ClickUp API using an API token and workspace ID",
      parameters: [
        {
          name: "type",
          type: "object",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
    {
      name: "clickup_get_task_by_custom_id",
      description: "Get a task by its custom ID",
      parameters: [
        {
          name: "type",
          type: "object",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
    {
      name: "clickup_get_tasks",
      description: "Get multiple tasks by their IDs",
      parameters: [
        {
          name: "type",
          type: "object",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
    {
      name: "clickup_get_task",
      description: "Get a task by its ID",
      parameters: [
        {
          name: "type",
          type: "object",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mikah13/mcp-clickup",
  _varName: "mcpclickupPlugin",
};

const pokemonapiserverPlugin: Plugin = {
  id: "5y1qp5a2dw",
  name: "pokemon-api-server",
  description: "Fetch Pokémon data from PokéAPI",
  image: "https://github.com/Harnishnava.png",
  actions: [],
  githubUrl: "https://github.com/Harnishnava/pokemon-ai",
  _varName: "pokemonapiserverPlugin",
};

const mcpYnabServerPlugin: Plugin = {
  id: "y3utoybhi7",
  name: "MCP YNAB Server",
  description:
    "An MCP server that allows users to interact with YNAB data, enabling access to account balances, transactions, and the creation of new transactions through the Model Context Protocol.",
  image: "https://github.com/klauern.png",
  actions: [
    {
      name: "create_transaction",
      description: "Create a new transaction in YNAB.",
      parameters: [
        {
          name: "account_id",
          type: "string",
          description: "Parameter: account_id",
          required: true,
        },
        {
          name: "amount",
          type: "number",
          description: "Amount in dollars",
          required: true,
        },
        {
          name: "category_name",
          type: "string",
          description: "Parameter: category_name",
          required: false,
        },
        {
          name: "memo",
          type: "string",
          description: "Parameter: memo",
          required: false,
        },
        {
          name: "payee_name",
          type: "string",
          description: "Parameter: payee_name",
          required: true,
        },
      ],
    },
    {
      name: "get_account_balance",
      description: "Get the current balance of a YNAB account (in dollars).",
      parameters: [
        {
          name: "account_id",
          type: "string",
          description: "Parameter: account_id",
          required: true,
        },
      ],
    },
    {
      name: "get_budgets",
      description: "List all YNAB budgets in Markdown format.",
      parameters: [],
    },
    {
      name: "get_accounts",
      description:
        "List all YNAB accounts in a specific budget in Markdown format.",
      parameters: [
        {
          name: "budget_id",
          type: "string",
          description: "Parameter: budget_id",
          required: true,
        },
      ],
    },
    {
      name: "get_transactions",
      description:
        "Get recent transactions for a specific account in a specific budget.",
      parameters: [
        {
          name: "account_id",
          type: "string",
          description: "Parameter: account_id",
          required: true,
        },
        {
          name: "budget_id",
          type: "string",
          description: "Parameter: budget_id",
          required: true,
        },
      ],
    },
    {
      name: "get_transactions_needing_attention",
      description:
        "List transactions that need attention based on specified filter type in a YNAB budget.",
      parameters: [
        {
          name: "budget_id",
          type: "string",
          description: "Parameter: budget_id",
          required: true,
        },
        {
          name: "days_back",
          type: "string",
          description: "Number of days to look back (default 30, None for all)",
          required: false,
        },
        {
          name: "filter_type",
          type: "string",
          description:
            "Type of transactions to show. One of: 'uncategorized', 'unapproved', 'both'",
          required: false,
        },
      ],
    },
    {
      name: "_find_transaction_by_id",
      description: "Find a transaction by its ID and ID type.",
      parameters: [
        {
          name: "id_type",
          type: "string",
          description: "Parameter: id_type",
          required: true,
        },
        {
          name: "transaction_id",
          type: "string",
          description: "Parameter: transaction_id",
          required: true,
        },
        {
          name: "transactions",
          type: "array",
          description: "Parameter: transactions",
          required: true,
        },
      ],
    },
    {
      name: "get_categories",
      description:
        "List all transaction categories for a given YNAB budget in Markdown format.",
      parameters: [
        {
          name: "budget_id",
          type: "string",
          description: "Parameter: budget_id",
          required: true,
        },
      ],
    },
    {
      name: "set_preferred_budget_id",
      description: "Set the preferred YNAB budget ID.",
      parameters: [
        {
          name: "budget_id",
          type: "string",
          description: "Parameter: budget_id",
          required: true,
        },
      ],
    },
    {
      name: "cache_categories",
      description: "Cache all categories for a given YNAB budget ID.",
      parameters: [
        {
          name: "budget_id",
          type: "string",
          description: "Parameter: budget_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/klauern/mcp-ynab",
  _varName: "mcpYnabServerPlugin",
};

const mcpServerForOpensearchPlugin: Plugin = {
  id: "n8ldec4vzj",
  name: "MCP Server for OpenSearch",
  description:
    "Provides a semantic memory layer that integrates LLMs with OpenSearch, enabling storage and retrieval of memories within the OpenSearch engine.",
  image: "https://github.com/ibrooksSDX.png",
  actions: [],
  githubUrl: "https://github.com/ibrooksSDX/mcp-server-opensearch",
  _varName: "mcpServerForOpensearchPlugin",
};

const steamPlugin: Plugin = {
  id: "2l71qjgiit",
  name: "steam",
  description:
    "Provide information about the games you played and how long you played them for to an LLM",
  image: "https://github.com/dsp.png",
  actions: [],
  githubUrl: "https://github.com/dsp/mcp-server-steam",
  _varName: "steamPlugin",
};

const buienradarMcpServerPlugin: Plugin = {
  id: "gjbnco22u9",
  name: "Buienradar MCP Server",
  description:
    "Fetches precipitation forecasts for any location using Buienradar and integrates with Claude for Desktop to provide accurate two-hour weather predictions.",
  image: "https://github.com/wpnbos.png",
  actions: [
    {
      name: "get_precipitation_for",
      description:
        "Fetches precipitation data for the next 2 hours from Buienradar.",
      parameters: [
        {
          name: "lat",
          type: "number",
          description: "Parameter: lat",
          required: true,
        },
        {
          name: "lon",
          type: "number",
          description: "Parameter: lon",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wpnbos/buienradar-mcp-server",
  _varName: "buienradarMcpServerPlugin",
};

const kubernetesmcpserverPlugin: Plugin = {
  id: "7teahc9mqv",
  name: "kubernetes-mcp-server",
  description:
    "A powerful and flexible Kubernetes MCP server implementation with support for OpenShift.",
  image: "https://github.com/manusa.png",
  actions: [],
  githubUrl: "https://github.com/manusa/kubernetes-mcp-server",
  _varName: "kubernetesmcpserverPlugin",
};

const perplexityAiMcpServerPlugin: Plugin = {
  id: "ifz3vnhq7j",
  name: "Perplexity AI MCP Server",
  description:
    "Provides a standardized way to integrate Perplexity AI's features like chat, search, and documentation access into MCP-based systems.",
  image: "https://github.com/rileyedwards77.png",
  actions: [
    {
      name: "chat_perplexity",
      description:
        "Maintains ongoing conversations with Perplexity AI. Creates new chats or continues existing ones with full history context.",
      parameters: [
        {
          name: "chat_id",
          type: "string",
          description:
            "Optional: ID of an existing chat to continue. If not provided, a new chat will be created.",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "The message to send to Perplexity AI",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description:
        "Perform a general search query to get comprehensive information on any topic",
      parameters: [
        {
          name: "detail_level",
          type: "string",
          description:
            "Optional: Desired level of detail (brief, normal, detailed)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query or question",
          required: true,
        },
      ],
    },
    {
      name: "get_documentation",
      description:
        "Get documentation and usage examples for a specific technology, library, or API",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context or specific aspects to focus on",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "The technology, library, or API to get documentation for",
          required: true,
        },
      ],
    },
    {
      name: "find_apis",
      description:
        "Find and evaluate APIs that could be integrated into a project",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context about the project or specific needs",
          required: false,
        },
        {
          name: "requirement",
          type: "string",
          description:
            "The functionality or requirement you're looking to fulfill",
          required: true,
        },
      ],
    },
    {
      name: "check_deprecated_code",
      description:
        "Check if code or dependencies might be using deprecated features",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "The code snippet or dependency to check",
          required: true,
        },
        {
          name: "technology",
          type: "string",
          description:
            "The technology or framework context (e.g., 'React', 'Node.js')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/rileyedwards77/perplexity-mcp-server",
  _varName: "perplexityAiMcpServerPlugin",
};

const memoryBankMcpServer1Plugin: Plugin = {
  id: "ir18x1tixp",
  name: "Memory Bank MCP Server",
  description:
    "Provides a centralized MCP-based system for managing and accessing multi-project memory banks remotely, with features like project isolation, file structure validation, and type-safe operations.",
  image: "https://github.com/alioshr.png",
  actions: [
    {
      name: "memory_bank_read",
      description: "Read a memory bank file for a specific project",
      parameters: [
        {
          name: "fileName",
          type: "string",
          description: "Parameter: fileName",
          required: true,
        },
        {
          name: "projectName",
          type: "string",
          description: "Parameter: projectName",
          required: true,
        },
      ],
    },
    {
      name: "memory_bank_write",
      description: "Create a new memory bank file for a specific project",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "fileName",
          type: "string",
          description: "Parameter: fileName",
          required: true,
        },
        {
          name: "projectName",
          type: "string",
          description: "Parameter: projectName",
          required: true,
        },
      ],
    },
    {
      name: "memory_bank_update",
      description: "Update an existing memory bank file for a specific project",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "fileName",
          type: "string",
          description: "Parameter: fileName",
          required: true,
        },
        {
          name: "projectName",
          type: "string",
          description: "Parameter: projectName",
          required: true,
        },
      ],
    },
    {
      name: "list_projects",
      description: "List all projects in the memory bank",
      parameters: [],
    },
    {
      name: "list_project_files",
      description: "List all files within a specific project",
      parameters: [
        {
          name: "projectName",
          type: "string",
          description: "Parameter: projectName",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/alioshr/memory-bank-mcp",
  _varName: "memoryBankMcpServer1Plugin",
};

const notionMcpServer6Plugin: Plugin = {
  id: "d8je77xgmj",
  name: "Notion MCP Server",
  description:
    "Enables interaction with Notion through the Notion API by exposing it as tools for LLMs, allowing operations like reading, creating, updating, and deleting Notion pages seamlessly via natural language.",
  image: "https://github.com/orbit-logistics.png",
  actions: [],
  githubUrl: "https://github.com/orbit-logistics/notion-mcp-server",
  _varName: "notionMcpServer6Plugin",
};

const nreplMcpServerPlugin: Plugin = {
  id: "st66euqse7",
  name: "nREPL MCP Server",
  description:
    "Enables interaction with a running Clojure nREPL instance for evaluating Clojure code, inspecting namespaces, and retrieving connection statuses, compatible with MCP clients like Claude Desktop and CLine in VSCode.",
  image: "https://github.com/JohanCodinha.png",
  actions: [
    {
      name: "connect",
      description:
        'Connect to an nREPL server.\nExample: (connect {:host "localhost" :port 1234})',
      parameters: [
        {
          name: "host",
          type: "string",
          description: "nREPL server host",
          required: true,
        },
        {
          name: "port",
          type: "number",
          description: "nREPL server port",
          required: true,
        },
      ],
    },
    {
      name: "eval_form",
      description:
        'Evaluate Clojure code in a specific namespace or the current one. Examples:\n- Get current namespace: (eval_form {:code "(str *ns*)"})\n- Change namespace: (eval_form {:code "(+ 1 2)" :ns "my.namespace"})\n- Load a file: (eval_form {:code "(load-file \\"src/my_file.clj\\")"})\n- Define and call functions: (eval_form {:code "(defn add [a b] (+ a b))" :ns "math"} then\n  (eval_form {:code "(add 1 2)" :ns "math"})',
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Clojure code to evaluate",
          required: true,
        },
        {
          name: "ns",
          type: "string",
          description:
            "Optional namespace to evaluate in. Changes persist for subsequent evaluations.",
          required: false,
        },
      ],
    },
    {
      name: "get_ns_vars",
      description:
        'Get all public vars (functions, values) in a namespace with their metadata and current values. Example:\n- List main namespace vars: (get_ns_vars {:ns "main"})\nReturns a map where keys are var names and values contain:\n- :meta - Metadata including :doc string, :line number, :file path\n- :value - Current value of the var',
      parameters: [
        {
          name: "ns",
          type: "string",
          description: "Namespace to inspect",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JohanCodinha/nrepl-mcp-server",
  _varName: "nreplMcpServerPlugin",
};

const resendMcpServerPlugin: Plugin = {
  id: "2t6tnwcxa1",
  name: "Resend MCP Server",
  description:
    "Allows sending emails through the Resend service using a standardized Model Context Protocol (MCP) interface, with TypeScript support.",
  image: "https://github.com/pontusab.png",
  actions: [],
  githubUrl: "https://github.com/pontusab/resend-mcp",
  _varName: "resendMcpServerPlugin",
};

const wasmMcpServerPlugin: Plugin = {
  id: "gcyoxttza3",
  name: "WASM MCP Server",
  description:
    "This server enables running a Model Context Protocol in a web browser with functionalities including arithmetic operations and session-based key-value storage.",
  image: "https://github.com/beekmarks.png",
  actions: [],
  githubUrl: "https://github.com/beekmarks/mcp-wasm",
  _varName: "wasmMcpServerPlugin",
};

const timeServerPlugin: Plugin = {
  id: "lo6ocr3732",
  name: "Time Server",
  description:
    "An MCP server providing timezone conversions and time-related operations via RESTful API endpoints, featuring comprehensive error handling and timezone database integration.",
  image: "https://github.com/clssck.png",
  actions: [],
  githubUrl: "https://github.com/clssck/mcp-time-server",
  _varName: "timeServerPlugin",
};

const codeKnowledgeMcpServerPlugin: Plugin = {
  id: "prkz57y7a2",
  name: "Code Knowledge MCP Server",
  description:
    "Provides a project memory bank and RAG context provider for enhanced code understanding and management through vector embeddings, integrated with RooCode and Cline.",
  image: "https://github.com/davidvc.png",
  actions: [],
  githubUrl: "https://github.com/davidvc/code-knowledge-mcptool",
  _varName: "codeKnowledgeMcpServerPlugin",
};

const coolifyMcpServerPlugin: Plugin = {
  id: "ohmvqj2396",
  name: "Coolify MCP Server",
  description:
    "Enables interaction with Coolify applications and resources through the Coolify API via a standardized interface, supporting application management operations such as listing, starting, stopping, restarting, and deploying.",
  image: "https://github.com/StuMason.png",
  actions: [
    {
      name: "list-resources",
      description:
        "Retrieve a comprehensive list of all resources managed by Coolify. This includes applications, services, databases, and deployments.",
      parameters: [],
    },
    {
      name: "list-applications",
      description:
        "Fetch a list of all applications currently managed by Coolify. This provides an overview of all deployed applications.",
      parameters: [],
    },
    {
      name: "get-application",
      description:
        "Retrieve detailed information about a specific application using its UUID. This includes the application's status, configuration, and deployment details.",
      parameters: [
        {
          name: "uuid",
          type: "string",
          description: "Resource UUID",
          required: true,
        },
      ],
    },
    {
      name: "start-application",
      description:
        "Start a specific application using its UUID. This initiates the application and makes it available for use.",
      parameters: [
        {
          name: "uuid",
          type: "string",
          description: "Resource UUID",
          required: true,
        },
      ],
    },
    {
      name: "stop-application",
      description:
        "Stop a specific application using its UUID. This halts the application and makes it unavailable.",
      parameters: [
        {
          name: "uuid",
          type: "string",
          description: "Resource UUID",
          required: true,
        },
      ],
    },
    {
      name: "restart-application",
      description:
        "Restart a specific application using its UUID. This stops and then starts the application, applying any configuration changes.",
      parameters: [
        {
          name: "uuid",
          type: "string",
          description: "Resource UUID",
          required: true,
        },
      ],
    },
    {
      name: "list-services",
      description:
        "Retrieve a list of all services managed by Coolify. This includes external services and microservices.",
      parameters: [],
    },
    {
      name: "list-databases",
      description:
        "Fetch a list of all databases managed by Coolify. This provides an overview of all database instances.",
      parameters: [],
    },
    {
      name: "list-deployments",
      description:
        "Retrieve a list of all running deployments in Coolify. This includes details about the deployment status and history.",
      parameters: [],
    },
    {
      name: "deploy",
      description:
        "Deploy an application or service using a tag or UUID. This allows you to deploy new versions or updates to your applications.",
      parameters: [
        {
          name: "force",
          type: "boolean",
          description: "Force rebuild (without cache)",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "Tag name(s). Comma separated list is accepted",
          required: false,
        },
        {
          name: "uuid",
          type: "string",
          description: "Resource UUID(s). Comma separated list is accepted",
          required: false,
        },
      ],
    },
    {
      name: "update-application",
      description:
        "Update the settings of a specific application, such as health check configurations. This allows you to modify the application's behavior and monitoring settings.",
      parameters: [
        {
          name: "settings",
          type: "object",
          description: "Parameter: settings",
          required: true,
        },
        {
          name: "uuid",
          type: "string",
          description: "Resource UUID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/StuMason/coolify-mcp-server",
  _varName: "coolifyMcpServerPlugin",
};

const agentcarePlugin: Plugin = {
  id: "0qtwzwbodb",
  name: "AgentCare",
  description:
    "An MCP server that provides healthcare tools for interacting with FHIR data and medical resources on EMRs like Cerner and Epic",
  image: "https://github.com/Kartha-AI.png",
  actions: [],
  githubUrl: "https://github.com/Kartha-AI/agentcare-mcp",
  _varName: "agentcarePlugin",
};

const excelmcpserverPlugin: Plugin = {
  id: "bnuy0j3jrt",
  name: "excel-mcp-server",
  description:
    "Provides Excel file manipulation capabilities. This server enables workbook creation, data manipulation, formatting, and advanced Excel features.",
  image: "https://github.com/haris-musa.png",
  actions: [],
  githubUrl: "https://github.com/haris-musa/excel-mcp-server",
  _varName: "excelmcpserverPlugin",
};

const mcpLocalWebSearchServerPlugin: Plugin = {
  id: "1p6tlkpffe",
  name: "MCP Local Web Search Server",
  description:
    "Enables performing local web searches and extracting structured content from web pages using the Model Context Protocol, featuring customizable result limits and domain filtering.",
  image: "https://github.com/FradSer.png",
  actions: [],
  githubUrl: "https://github.com/FradSer/mcp-server-local-web-search",
  _varName: "mcpLocalWebSearchServerPlugin",
};

const deepResearchMcpServerPlugin: Plugin = {
  id: "xordvhdr7s",
  name: "Deep Research MCP Server",
  description:
    "Enables iterative deep research by integrating AI agents with search engines, web scraping, and large language models for efficient data gathering and comprehensive reporting.",
  image: "https://github.com/Ozamatash.png",
  actions: [],
  githubUrl: "https://github.com/Ozamatash/deep-research-mcp",
  _varName: "deepResearchMcpServerPlugin",
};

const supabaseMcpServer2Plugin: Plugin = {
  id: "cyeeqagb81",
  name: "Supabase MCP Server",
  description:
    "This server enables interaction with Supabase PostgreSQL databases through the MCP protocol, allowing seamless integration with Cursor and Windsurf IDEs for secure and validated database management.",
  image: "https://github.com/alexander-zuev.png",
  actions: [
    {
      name: "get_schemas",
      description:
        "List all database schemas with their sizes and table counts.",
      parameters: [],
    },
    {
      name: "get_tables",
      description:
        "List all tables, foreign tables, and views in a schema with their sizes, row counts, and metadata.\n\nProvides detailed information about all database objects in the specified schema:\n- Table/view names\n- Object types (table, view, foreign table)\n- Row counts\n- Size on disk\n- Column counts\n- Index information\n- Last vacuum/analyze times\n\nParameters:\n- schema_name: Name of the schema to inspect (e.g., 'public', 'auth', etc.)\n\nSAFETY: This is a low-risk read operation that can be executed in SAFE mode.\n",
      parameters: [
        {
          name: "schema_name",
          type: "string",
          description: "Parameter: schema_name",
          required: true,
        },
      ],
    },
    {
      name: "get_table_schema",
      description:
        "Get detailed table structure including columns, keys, and relationships.\n\nReturns comprehensive information about a specific table's structure:\n- Column definitions (names, types, constraints)\n- Primary key information\n- Foreign key relationships\n- Indexes\n- Constraints\n- Triggers\n\nParameters:\n- schema_name: Name of the schema (e.g., 'public', 'auth')\n- table: Name of the table to inspect\n\nSAFETY: This is a low-risk read operation that can be executed in SAFE mode.\n",
      parameters: [
        {
          name: "schema_name",
          type: "string",
          description: "Parameter: schema_name",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "execute_postgresql",
      description:
        "Execute PostgreSQL statements against your Supabase database.\n\nIMPORTANT: All SQL statements must end with a semicolon (;).\n\nOPERATION TYPES AND REQUIREMENTS:\n1. READ Operations (SELECT, EXPLAIN, etc.):\n   - Can be executed directly without special requirements\n   - Example: SELECT * FROM public.users LIMIT 10;\n\n2. WRITE Operations (INSERT, UPDATE, DELETE):\n   - Require UNSAFE mode (use live_dangerously('database', True) first)\n   - Example:\n     INSERT INTO public.users (email) VALUES ('user@example.com');\n\n3. SCHEMA Operations (CREATE, ALTER, DROP):\n   - Require UNSAFE mode (use live_dangerously('database', True) first)\n   - Destructive operations (DROP, TRUNCATE) require additional confirmation\n   - Example:\n     CREATE TABLE public.test_table (id SERIAL PRIMARY KEY, name TEXT);\n\nMIGRATION HANDLING:\nAll queries that modify the database will be automatically version controlled by the server. You can provide optional migration name, if you want to name the migration.\n - Respect the following format: verb_noun_detail. Be descriptive and concise.\n - Examples:\n   - create_users_table\n   - add_email_to_profiles\n   - enable_rls_on_users\n - If you don't provide a migration name, the server will generate one based on the SQL statement\n - The system will sanitize your provided name to ensure compatibility with database systems\n - Migration names are prefixed with a timestamp in the format YYYYMMDDHHMMSS\n\nSAFETY SYSTEM:\nOperations are categorized by risk level:\n- LOW RISK: Read operations (SELECT, EXPLAIN) - allowed in SAFE mode\n- MEDIUM RISK: Write operations (INSERT, UPDATE, DELETE) - require UNSAFE mode\n- HIGH RISK: Schema operations (CREATE, ALTER) - require UNSAFE mode\n- EXTREME RISK: Destructive operations (DROP, TRUNCATE) - require UNSAFE mode and confirmation\n\nTRANSACTION HANDLING:\n- DO NOT use transaction control statements (BEGIN, COMMIT, ROLLBACK)\n- The database client automatically wraps queries in transactions\n- The SQL validator will reject queries containing transaction control statements\n- This ensures atomicity and provides rollback capability for data modifications\n\nMULTIPLE STATEMENTS:\n- You can send multiple SQL statements in a single query\n- Each statement will be executed in order within the same transaction\n- Example:\n  CREATE TABLE public.test_table (id SERIAL PRIMARY KEY, name TEXT);\n  INSERT INTO public.test_table (name) VALUES ('test');\n\nCONFIRMATION FLOW FOR HIGH-RISK OPERATIONS:\n- High-risk operations (DROP TABLE, TRUNCATE, etc.) will be rejected with a confirmation ID\n- The error message will explain what happened and provide a confirmation ID\n- Review the risks with the user before proceeding\n- Use the confirm_destructive_operation tool with the provided ID to execute the operation\n\nIMPORTANT GUIDELINES:\n- The database client starts in SAFE mode by default for safety\n- Only enable UNSAFE mode when you need to modify data or schema\n- Never mix READ and WRITE operations in the same transaction\n- For destructive operations, be prepared to confirm with the confirm_destructive_operation tool\n\nWHEN TO USE OTHER TOOLS INSTEAD:\n- For Auth operations (users, authentication, etc.): Use call_auth_admin_method instead of direct SQL\n  The Auth Admin SDK provides safer, validated methods for user management\n- For project configuration, functions, storage, etc.: Use send_management_api_request\n  The Management API handles Supabase platform features that aren't directly in the database\n\nNote: This tool operates on the PostgreSQL database only. API operations use separate safety controls.\n",
      parameters: [
        {
          name: "migration_name",
          type: "string",
          description: "Parameter: migration_name",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "retrieve_migrations",
      description:
        'Retrieve a list of all migrations a user has from Supabase.\n\nReturns a list of migrations with the following information:\n- Version (timestamp)\n- Name\n- SQL statements (if requested)\n- Statement count\n- Version type (named or numbered)\n\nParameters:\n- limit: Maximum number of migrations to return (default: 50, max: 100)\n- offset: Number of migrations to skip for pagination (default: 0)\n- name_pattern: Optional pattern to filter migrations by name. Uses SQL ILIKE pattern matching (case-insensitive).\n  The pattern is automatically wrapped with \'%\' wildcards, so "users" will match "create_users_table",\n  "add_email_to_users", etc. To search for an exact match, use the complete name.\n- include_full_queries: Whether to include the full SQL statements in the result (default: false)\n\nSAFETY: This is a low-risk read operation that can be executed in SAFE mode.\n',
      parameters: [
        {
          name: "include_full_queries",
          type: "boolean",
          description: "Parameter: include_full_queries",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "name_pattern",
          type: "string",
          description: "Parameter: name_pattern",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
    {
      name: "send_management_api_request",
      description:
        'Execute a Supabase Management API request.\n\nThis tool allows you to make direct calls to the Supabase Management API, which provides\nprogrammatic access to manage your Supabase project settings, resources, and configurations.\n\nREQUEST FORMATTING:\n- Use paths exactly as defined in the API specification\n- The {ref} parameter will be automatically injected from settings\n- Format request bodies according to the API specification\n\nPARAMETERS:\n- method: HTTP method (GET, POST, PUT, PATCH, DELETE)\n- path: API path (e.g. /v1/projects/{ref}/functions)\n- path_params: Path parameters as dict (e.g. {"function_slug": "my-function"}) - use empty dict {} if not needed\n- request_params: Query parameters as dict (e.g. {"key": "value"}) - use empty dict {} if not needed\n- request_body: Request body as dict (e.g. {"name": "test"}) - use empty dict {} if not needed\n\nPATH PARAMETERS HANDLING:\n- The {ref} placeholder (project reference) is automatically injected - you don\'t need to provide it\n- All other path placeholders must be provided in the path_params dictionary\n- Common placeholders include:\n  * {function_slug}: For Edge Functions operations\n  * {id}: For operations on specific resources (API keys, auth providers, etc.)\n  * {slug}: For organization operations\n  * {branch_id}: For database branch operations\n  * {provider_id}: For SSO provider operations\n  * {tpa_id}: For third-party auth operations\n\nEXAMPLES:\n1. GET request with path and query parameters:\n   method: "GET"\n   path: "/v1/projects/{ref}/functions/{function_slug}"\n   path_params: {"function_slug": "my-function"}\n   request_params: {"version": "1"}\n   request_body: {}\n\n2. POST request with body:\n   method: "POST"\n   path: "/v1/projects/{ref}/functions"\n   path_params: {}\n   request_params: {}\n   request_body: {"name": "test-function", "slug": "test-function"}\n\nSAFETY SYSTEM:\nAPI operations are categorized by risk level:\n- LOW RISK: Read operations (GET) - allowed in SAFE mode\n- MEDIUM/HIGH RISK: Write operations (POST, PUT, PATCH, DELETE) - require UNSAFE mode\n- EXTREME RISK: Destructive operations - require UNSAFE mode and confirmation\n- BLOCKED: Some operations are completely blocked for safety reasons\n\nSAFETY CONSIDERATIONS:\n- By default, the API client starts in SAFE mode, allowing only read operations\n- To perform write operations, first use live_dangerously(service="api", enable=True)\n- High-risk operations will be rejected with a confirmation ID\n- Use confirm_destructive_operation with the provided ID after reviewing risks\n- Some operations may be completely blocked for safety reasons\n\nFor a complete list of available API endpoints and their parameters, use the get_management_api_spec tool.\nFor details on safety rules, use the get_management_api_safety_rules tool.\n',
      parameters: [
        {
          name: "method",
          type: "string",
          description: "Parameter: method",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
        {
          name: "path_params",
          type: "object",
          description: "Parameter: path_params",
          required: true,
        },
        {
          name: "request_body",
          type: "object",
          description: "Parameter: request_body",
          required: true,
        },
        {
          name: "request_params",
          type: "object",
          description: "Parameter: request_params",
          required: true,
        },
      ],
    },
    {
      name: "get_management_api_spec",
      description:
        'Get the complete Supabase Management API specification.\n\nReturns the full OpenAPI specification for the Supabase Management API, including:\n- All available endpoints and operations\n- Required and optional parameters for each operation\n- Request and response schemas\n- Authentication requirements\n- Safety information for each operation\n\nThis tool can be used in four different ways:\n1. Without parameters: Returns all domains (default)\n2. With path and method: Returns the full specification for a specific API endpoint\n3. With domain only: Returns all paths and methods within that domain\n4. With all_paths=True: Returns all paths and methods\n\nParameters:\n- params: Dictionary containing optional parameters:\n    - path: Optional API path (e.g., "/v1/projects/{ref}/functions")\n    - method: Optional HTTP method (e.g., "GET", "POST")\n    - domain: Optional domain/tag name (e.g., "Auth", "Storage")\n    - all_paths: Optional boolean, if True returns all paths and methods\n\nAvailable domains:\n- Analytics: Analytics-related endpoints\n- Auth: Authentication and authorization endpoints\n- Database: Database management endpoints\n- Domains: Custom domain configuration endpoints\n- Edge Functions: Serverless function management endpoints\n- Environments: Environment configuration endpoints\n- OAuth: OAuth integration endpoints\n- Organizations: Organization management endpoints\n- Projects: Project management endpoints\n- Rest: RESTful API endpoints\n- Secrets: Secret management endpoints\n- Storage: Storage management endpoints\n\nThis specification is useful for understanding:\n- What operations are available through the Management API\n- How to properly format requests for each endpoint\n- Which operations require unsafe mode\n- What data structures to expect in responses\n\nSAFETY: This is a low-risk read operation that can be executed in SAFE mode.\n',
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: false,
        },
      ],
    },
    {
      name: "get_auth_admin_methods_spec",
      description:
        "Get Python SDK methods specification for Auth Admin.\n\nReturns a comprehensive dictionary of all Auth Admin methods available in the Supabase Python SDK, including:\n- Method names and descriptions\n- Required and optional parameters for each method\n- Parameter types and constraints\n- Return value information\n\nThis tool is useful for exploring the capabilities of the Auth Admin SDK and understanding\nhow to properly format parameters for the call_auth_admin_method tool.\n\nNo parameters required.\n",
      parameters: [],
    },
    {
      name: "call_auth_admin_method",
      description:
        'Call an Auth Admin method from Supabase Python SDK.\n\nThis tool provides a safe, validated interface to the Supabase Auth Admin SDK, allowing you to:\n- Manage users (create, update, delete)\n- List and search users\n- Generate authentication links\n- Manage multi-factor authentication\n- And more\n\nIMPORTANT NOTES:\n- Request bodies must adhere to the Python SDK specification\n- Some methods may have nested parameter structures\n- The tool validates all parameters against Pydantic models\n- Extra fields not defined in the models will be rejected\n\nAVAILABLE METHODS:\n- get_user_by_id: Retrieve a user by their ID\n- list_users: List all users with pagination\n- create_user: Create a new user\n- delete_user: Delete a user by their ID\n- invite_user_by_email: Send an invite link to a user\'s email\n- generate_link: Generate an email link for various authentication purposes\n- update_user_by_id: Update user attributes by ID\n- delete_factor: Delete a factor on a user\n\nEXAMPLES:\n1. Get user by ID:\n   method: "get_user_by_id"\n   params: {"uid": "user-uuid-here"}\n\n2. Create user:\n   method: "create_user"\n   params: {\n     "email": "user@example.com",\n     "password": "secure-password"\n   }\n\n3. Update user by ID:\n   method: "update_user_by_id"\n   params: {\n     "uid": "user-uuid-here",\n     "attributes": {\n       "email": "new@email.com"\n     }\n   }\n\nFor complete documentation of all methods and their parameters, use the get_auth_admin_methods_spec tool.\n',
      parameters: [
        {
          name: "method",
          type: "string",
          description: "Parameter: method",
          required: true,
        },
        {
          name: "params",
          type: "object",
          description: "Parameter: params",
          required: true,
        },
      ],
    },
    {
      name: "live_dangerously",
      description:
        'Toggle unsafe mode for either Management API or Database operations.\n\nWHAT THIS TOOL DOES:\nThis tool switches between safe (default) and unsafe operation modes for either the Management API or Database operations.\n\nSAFETY MODES EXPLAINED:\n1. Database Safety Modes:\n   - SAFE mode (default): Only low-risk operations like SELECT queries are allowed\n   - UNSAFE mode: Higher-risk operations including INSERT, UPDATE, DELETE, and schema changes are permitted\n\n2. API Safety Modes:\n   - SAFE mode (default): Only low-risk operations that don\'t modify state are allowed\n   - UNSAFE mode: Higher-risk state-changing operations are permitted (except those explicitly blocked for safety)\n\nOPERATION RISK LEVELS:\nThe system categorizes operations by risk level:\n- LOW: Safe read operations with minimal impact\n- MEDIUM: Write operations that modify data but don\'t change structure\n- HIGH: Operations that modify database structure or important system settings\n- EXTREME: Destructive operations that could cause data loss or service disruption\n\nWHEN TO USE THIS TOOL:\n- Use this tool BEFORE attempting write operations or schema changes\n- Enable unsafe mode only when you need to perform data modifications\n- Always return to safe mode after completing write operations\n\nUSAGE GUIDELINES:\n- Start in safe mode by default for exploration and analysis\n- Switch to unsafe mode only when you need to make changes\n- Be specific about which service you\'re enabling unsafe mode for\n- Consider the risks before enabling unsafe mode, especially for database operations\n- For database operations requiring schema changes, you\'ll need to enable unsafe mode first\n\nParameters:\n- service: Which service to toggle ("api" or "database")\n- enable_unsafe_mode: True to enable unsafe mode, False for safe mode (default: False)\n\nExamples:\n1. Enable database unsafe mode:\n   live_dangerously(service="database", enable_unsafe_mode=True)\n\n2. Return to safe mode after operations:\n   live_dangerously(service="database", enable_unsafe_mode=False)\n\n3. Enable API unsafe mode:\n   live_dangerously(service="api", enable_unsafe_mode=True)\n\nNote: This tool affects ALL subsequent operations for the specified service until changed again.\n',
      parameters: [
        {
          name: "enable_unsafe_mode",
          type: "boolean",
          description: "Parameter: enable_unsafe_mode",
          required: false,
        },
        {
          name: "service",
          type: "string",
          description: "Parameter: service",
          required: true,
        },
      ],
    },
    {
      name: "confirm_destructive_operation",
      description:
        'Execute a destructive database or API operation after confirmation. Use this only after reviewing the risks with the user.\n\nHOW IT WORKS:\n- This tool executes a previously rejected high-risk operation using its confirmation ID\n- The operation will be exactly the same as the one that generated the ID\n- No need to retype the query or api request params - the system remembers it\n\nSTEPS:\n1. Explain the risks to the user and get their approval\n2. Use this tool with the confirmation ID from the error message\n3. The original query will be executed as-is\n\nPARAMETERS:\n- operation_type: Type of operation ("api" or "database")\n- confirmation_id: The ID provided in the error message (required)\n- user_confirmation: Set to true to confirm execution (default: false)\n\nNOTE: Confirmation IDs expire after 5 minutes for security\n',
      parameters: [
        {
          name: "confirmation_id",
          type: "string",
          description: "Parameter: confirmation_id",
          required: true,
        },
        {
          name: "operation_type",
          type: "string",
          description: "Parameter: operation_type",
          required: true,
        },
        {
          name: "user_confirmation",
          type: "boolean",
          description: "Parameter: user_confirmation",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/alexander-zuev/supabase-mcp-server",
  _varName: "supabaseMcpServer2Plugin",
};

const langfusePromptManagementMcpServerPlugin: Plugin = {
  id: "prtt9126vv",
  name: "Langfuse Prompt Management MCP Server",
  description:
    "Facilitates access and management of Langfuse prompts through the Model Context Protocol, enabling prompt discovery, retrieval, and integration within clients like Claude Desktop and Cursor.",
  image: "https://github.com/langfuse.png",
  actions: [],
  githubUrl: "https://github.com/langfuse/mcp-server-langfuse",
  _varName: "langfusePromptManagementMcpServerPlugin",
};

const seqMcpServerPlugin: Plugin = {
  id: "yljb00fc2g",
  name: "Seq MCP Server",
  description:
    "The Seq MCP Server enables interaction with Seq's API endpoints for logging and monitoring, providing tools for managing signals, events, and alerts with extensive filtering and configuration options.",
  image: "https://github.com/ahmad2x4.png",
  actions: [
    {
      name: "get-signals",
      description: "Action for get-signals",
      parameters: [
        {
          name: "ownerId",
          type: "string",
          description: "Owner ID to filter signals by",
          required: false,
        },
        {
          name: "partial",
          type: "boolean",
          description: "Whether to include partial signal matches",
          required: false,
        },
        {
          name: "shared",
          type: "boolean",
          description:
            "Whether to include only shared signals (true) or private signals (false)",
          required: false,
        },
      ],
    },
    {
      name: "get-events",
      description:
        "Retrieve and analyze a list of event filtered by parameters. Use this tool when you need to:\n  - Investigate events that are being logged in the SEQ server\n  - Details of each event is a structured log and can provide usefull information\n  - Events could be information, error, debug, or critical\n  - Analyze error patterns and frequencies  \n  ",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of events to return (max 100)",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter expression for events",
          required: false,
        },
        {
          name: "fromDateUtc",
          type: "string",
          description: "Start date/time in UTC",
          required: false,
        },
        {
          name: "range",
          type: "string",
          description: "Time range (e.g., 1m, 15m, 1h, 1d, 7d)",
          required: false,
        },
        {
          name: "signal",
          type: "string",
          description: "Comma-separated list of signal IDs",
          required: false,
        },
        {
          name: "toDateUtc",
          type: "string",
          description: "End date/time in UTC",
          required: false,
        },
      ],
    },
    {
      name: "get-alertstate",
      description: "Action for get-alertstate",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/ahmad2x4/mcp-server-seq",
  _varName: "seqMcpServerPlugin",
};

const linearMcpServer4Plugin: Plugin = {
  id: "81kv116sq1",
  name: "Linear MCP Server",
  description:
    "Facilitates project management with the Linear API via the Model Context Protocol, allowing users to manage initiatives, projects, issues, and their relationships through features like creation, viewing, updating, and prioritization.",
  image: "https://github.com/samcfinan.png",
  actions: [],
  githubUrl: "https://github.com/samcfinan/linear-mcp-server",
  _varName: "linearMcpServer4Plugin",
};

const shellmcpPlugin: Plugin = {
  id: "jyubrnnudg",
  name: "Shell-MCP",
  description:
    "A secure MCP server for executing whitelisted shell commands with resource and timeout controls, designed for integration with Claude and other MCP-compatible LLMs.",
  image: "https://github.com/kevinwatt.png",
  actions: [
    {
      name: "shell_ls",
      description: "List directory contents",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_cat",
      description: "Concatenate and display file contents",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_pwd",
      description: "Show current working directory",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_df",
      description: "Show disk usage",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_echo",
      description: "Display text",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_ps",
      description: "Show process status",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_free",
      description: "Show memory usage",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_uptime",
      description: "Show system uptime",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_date",
      description: "Show system date and time",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_grep",
      description: "Search text patterns in files",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_w",
      description: "Show who is logged on and what they are doing",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_whois",
      description: "Query WHOIS domain registration information",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_find",
      description: "Search for files in a directory hierarchy",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_netstat",
      description: "Network connection information",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_lspci",
      description: "List PCI devices",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_lsusb",
      description: "List USB devices",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_dig",
      description: "DNS lookup utility",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_nslookup",
      description: "Query DNS records",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_ip",
      description:
        "Show / manipulate routing, network devices, interfaces and tunnels",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
    {
      name: "shell_whereis",
      description:
        "Locate the binary, source, and manual page files for a command",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kevinwatt/shell-mcp",
  _varName: "shellmcpPlugin",
};

const lunchmoneymcpPlugin: Plugin = {
  id: "3t8spwi9q7",
  name: "lunchmoney-mcp",
  description:
    "An MCP server that lets AI assistants interact with your Lunchmoney data, enabling natural language queries about transactions, budgets, and spending patterns.",
  image: "https://github.com/leafeye.png",
  actions: [
    {
      name: "get-budget-summary",
      description: "Get budget summary for a specific time period",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "End date (YYYY-MM-DD, should be end of month)",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description: "Start date (YYYY-MM-DD, should be start of month)",
          required: true,
        },
      ],
    },
    {
      name: "get-recent-transactions",
      description: "Get recent transactions",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days to look back",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of transactions to return",
          required: false,
        },
      ],
    },
    {
      name: "search-transactions",
      description: "Search transactions by keyword",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days to look back",
          required: false,
        },
        {
          name: "keyword",
          type: "string",
          description: "Search term to look for",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of transactions to return",
          required: false,
        },
      ],
    },
    {
      name: "get-category-spending",
      description: "Get spending in a category",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category name",
          required: true,
        },
        {
          name: "days",
          type: "number",
          description: "Number of days to look back",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/leafeye/lunchmoney-mcp-server",
  _varName: "lunchmoneymcpPlugin",
};

const zonosTtsMcpServerPlugin: Plugin = {
  id: "clybepate4",
  name: "Zonos TTS MCP Server",
  description:
    "Facilitates direct speech generation using Claude for multiple languages and emotions, integrating with a Zonos TTS setup via the Model Context Protocol.",
  image: "https://github.com/PhialsBasement.png",
  actions: [
    {
      name: "speak_response",
      description: "Action for speak_response",
      parameters: [
        {
          name: "emotion",
          type: "string",
          description: "Parameter: emotion",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PhialsBasement/Zonos-TTS-MCP",
  _varName: "zonosTtsMcpServerPlugin",
};

const calendarToolsMcpServerPlugin: Plugin = {
  id: "wd0wk0l731",
  name: "Calendar Tools MCP Server",
  description:
    "Enables comprehensive calendar management with capabilities to create, list, update, and delete events through a Model Context Protocol server integrated with Google Calendar.",
  image: "https://github.com/cablate.png",
  actions: [],
  githubUrl: "https://github.com/cablate/mcp-google-calendar",
  _varName: "calendarToolsMcpServerPlugin",
};

const modalMcpToolboxPlugin: Plugin = {
  id: "ai78w0p5mc",
  name: "Modal MCP Toolbox",
  description:
    "Facilitates running Python code in a sandbox and generating images using the FLUX model via an MCP server compatible with clients like Goose and the Claude Desktop App.",
  image: "https://github.com/philipp-eisen.png",
  actions: [
    {
      name: "run_python_code_in_sandbox",
      description:
        '\n    Runs python code in a safe environment and returns the output.\n\n    Usage:\n       run_python_code_in_sandbox("print(\'Hello, world!\')")\n       run_python_code_in_sandbox("import requests\nprint(requests.get(\'https://icanhazip.com\').text)", requirements=["requests"])\n    ',
      parameters: [
        {
          name: "code",
          type: "string",
          description: "The python code to run.",
          required: true,
        },
        {
          name: "mount_directory",
          type: "string",
          description:
            "Allows you to make a local directory available at `/mounted-dir` for the code in `code`. Needs to be an absolute path. Writes to this directory will NOT be reflected in the local directory.",
          required: false,
        },
        {
          name: "pull_files",
          type: "string",
          description:
            "List of tuples (absolut_path_sandbox_file, absolute_path_local_file). When provided downloads the file(s) from the sandbox to the local file(s).",
          required: false,
        },
        {
          name: "python_version",
          type: "string",
          description:
            "The python version to use. If not provided defaults to 3.13",
          required: false,
        },
        {
          name: "requirements",
          type: "string",
          description: "The requirements to install.",
          required: false,
        },
      ],
    },
    {
      name: "generate_flux_image",
      description: "Let's you generate an image using the Flux model.",
      parameters: [
        {
          name: "prompt",
          type: "string",
          description: "The prompt to generate an image for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/philipp-eisen/modal-mcp-toolbox",
  _varName: "modalMcpToolboxPlugin",
};

const mcpMediaProcessingServerPlugin: Plugin = {
  id: "b1zqwbyrzm",
  name: "MCP Media Processing Server",
  description:
    "A Node.js server that provides advanced video and image processing capabilities through the Model Context Protocol, enabling operations like conversion, compression, editing, and effects application.",
  image: "https://github.com/maoxiaoke.png",
  actions: [
    {
      name: "execute-ffmpeg",
      description: "Execute any FFmpeg command with custom options",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input video file",
          required: true,
        },
        {
          name: "options",
          type: "string array",
          description:
            "Array of FFmpeg command options (e.g. ['-c:v', 'libx264', '-crf', '23'])",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
      ],
    },
    {
      name: "convert-video",
      description: "Convert video to different format",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input video file",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "Desired output format (e.g., mp4, mkv, avi)",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
      ],
    },
    {
      name: "compress-video",
      description: "Compress video file",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input video file",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
        {
          name: "quality",
          type: "number",
          description:
            "Compression quality (1-51, lower is better quality but larger file)",
          required: false,
        },
      ],
    },
    {
      name: "trim-video",
      description: "Trim video to specified duration",
      parameters: [
        {
          name: "duration",
          type: "string",
          description: "Duration in format HH:MM:SS",
          required: true,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input video file",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
        {
          name: "startTime",
          type: "string",
          description: "Start time in format HH:MM:SS",
          required: true,
        },
      ],
    },
    {
      name: "compress-image",
      description: "Compress PNG image using ImageMagick",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input PNG image",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
        {
          name: "quality",
          type: "number",
          description: "Compression quality (1-100)",
          required: false,
        },
      ],
    },
    {
      name: "convert-image",
      description: "Convert image to different format",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input image file",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputFormat",
          type: "string",
          description: "Desired output format (e.g., jpg, png, webp, gif)",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
      ],
    },
    {
      name: "resize-image",
      description: "Resize image to specified dimensions",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Target height in pixels",
          required: false,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input image file",
          required: true,
        },
        {
          name: "maintainAspectRatio",
          type: "boolean",
          description: "Whether to maintain aspect ratio when resizing",
          required: false,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Target width in pixels",
          required: false,
        },
      ],
    },
    {
      name: "rotate-image",
      description: "Rotate image by specified degrees",
      parameters: [
        {
          name: "degrees",
          type: "number",
          description: "Rotation angle in degrees",
          required: true,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input image file",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
      ],
    },
    {
      name: "add-watermark",
      description: "Add watermark to image",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input image file",
          required: true,
        },
        {
          name: "opacity",
          type: "number",
          description: "Watermark opacity (0-100)",
          required: false,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
        {
          name: "position",
          type: "string",
          description: "Position of watermark",
          required: false,
        },
        {
          name: "watermarkPath",
          type: "string",
          description: "Absolute path to watermark image file",
          required: true,
        },
      ],
    },
    {
      name: "apply-effect",
      description: "Apply visual effect to image",
      parameters: [
        {
          name: "effect",
          type: "string",
          description: "Effect to apply",
          required: true,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Absolute path to input image file",
          required: true,
        },
        {
          name: "intensity",
          type: "number",
          description:
            "Effect intensity (0-100, not applicable for some effects)",
          required: false,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            "Output filename (only used if outputPath is not provided)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Optional absolute path for output file. If not provided, file will be saved in Downloads folder",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/maoxiaoke/mcp-media-processor",
  _varName: "mcpMediaProcessingServerPlugin",
};

const simpleDocumentProcessingMcpServerPlugin: Plugin = {
  id: "pb9df6lnel",
  name: "Simple Document Processing MCP Server",
  description:
    "Provides comprehensive document processing, including reading, converting, and manipulating various document formats with advanced text and HTML processing capabilities.",
  image: "https://github.com/cablate.png",
  actions: [
    {
      name: "document_reader",
      description:
        "Read content from non-image document-files at specified paths, supporting various file formats: .pdf, .docx, .txt, .html, .csv",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the file to be read",
          required: true,
        },
      ],
    },
    {
      name: "pdf_merger",
      description: "Merge multiple PDF files into one",
      parameters: [
        {
          name: "inputPaths",
          type: "string array",
          description: "Paths to the input PDF files",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where merged PDFs should be saved",
          required: true,
        },
      ],
    },
    {
      name: "pdf_splitter",
      description: "Split a PDF file into multiple files",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input PDF file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where split PDFs should be saved",
          required: true,
        },
        {
          name: "pageRanges",
          type: "object array",
          description: "Array of page ranges to split",
          required: true,
        },
      ],
    },
    {
      name: "docx_to_pdf",
      description: "Convert DOCX files to PDF format",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input DOCX file",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path where the output PDF file should be saved",
          required: true,
        },
      ],
    },
    {
      name: "docx_to_html",
      description: "Convert DOCX to HTML while preserving formatting",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input DOCX file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where HTML should be saved",
          required: true,
        },
      ],
    },
    {
      name: "html_cleaner",
      description: "Clean HTML by removing unnecessary tags and attributes",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input HTML file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where cleaned HTML should be saved",
          required: true,
        },
      ],
    },
    {
      name: "html_to_text",
      description: "Convert HTML to plain text while preserving structure",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input HTML file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where text file should be saved",
          required: true,
        },
      ],
    },
    {
      name: "html_to_markdown",
      description: "Convert HTML to Markdown format",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input HTML file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where Markdown file should be saved",
          required: true,
        },
      ],
    },
    {
      name: "html_extract_resources",
      description: "Extract all resources (images, videos, links) from HTML",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input HTML file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where resources should be saved",
          required: true,
        },
      ],
    },
    {
      name: "html_formatter",
      description: "Format and beautify HTML code",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input HTML file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where formatted HTML should be saved",
          required: true,
        },
      ],
    },
    {
      name: "text_diff",
      description: "Compare two text files and show differences",
      parameters: [
        {
          name: "file1Path",
          type: "string",
          description: "Path to the first text file",
          required: true,
        },
        {
          name: "file2Path",
          type: "string",
          description: "Path to the second text file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where diff result should be saved",
          required: true,
        },
      ],
    },
    {
      name: "text_splitter",
      description: "Split text file by specified delimiter or line count",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input text file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where split files should be saved",
          required: true,
        },
        {
          name: "splitBy",
          type: "string",
          description: "Split method: by line count or delimiter",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Line count (number) or delimiter string",
          required: true,
        },
      ],
    },
    {
      name: "text_formatter",
      description: "Format text with proper indentation and line spacing",
      parameters: [
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input text file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where formatted file should be saved",
          required: true,
        },
      ],
    },
    {
      name: "text_encoding_converter",
      description: "Convert text between different encodings",
      parameters: [
        {
          name: "fromEncoding",
          type: "string",
          description: "Source encoding (e.g., 'big5', 'gbk', 'utf8')",
          required: true,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input text file",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory where converted file should be saved",
          required: true,
        },
        {
          name: "toEncoding",
          type: "string",
          description: "Target encoding (e.g., 'utf8', 'big5', 'gbk')",
          required: true,
        },
      ],
    },
    {
      name: "excel_read",
      description:
        "Read Excel file and convert to JSON format while preserving structure",
      parameters: [
        {
          name: "includeHeaders",
          type: "boolean",
          description: "Whether to include headers in the output",
          required: false,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input Excel file",
          required: true,
        },
      ],
    },
    {
      name: "format_convert",
      description:
        "Convert between different document formats (Markdown, HTML, XML, JSON)",
      parameters: [
        {
          name: "fromFormat",
          type: "string",
          description: "Source format",
          required: true,
        },
        {
          name: "input",
          type: "string",
          description: "Input content to convert",
          required: true,
        },
        {
          name: "toFormat",
          type: "string",
          description: "Target format",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cablate/mcp-doc-forge",
  _varName: "simpleDocumentProcessingMcpServerPlugin",
};

const knmiWeatherMcpPlugin: Plugin = {
  id: "xanerdcjsm",
  name: "KNMI Weather MCP",
  description:
    "A FastMCP server that provides real-time weather data from KNMI weather stations, allowing users to access temperature, humidity, wind speed, and other weather metrics for any location in the Netherlands through natural language queries.",
  image: "https://github.com/wolkwork.png",
  actions: [
    {
      name: "get_location_weather",
      description: "Get current weather data for a location",
      parameters: [
        {
          name: "location",
          type: "string",
          description: "Parameter: location",
          required: true,
        },
      ],
    },
    {
      name: "search_location",
      description:
        "\n    Search for locations in the Netherlands\n\n    Args:\n        query: Search term for location\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_nearest_station",
      description:
        "\n    Find the nearest KNMI weather station to given coordinates\n\n    Args:\n        latitude: Latitude in degrees\n        longitude: Longitude in degrees\n    ",
      parameters: [
        {
          name: "latitude",
          type: "number",
          description: "Parameter: latitude",
          required: true,
        },
        {
          name: "longitude",
          type: "number",
          description: "Parameter: longitude",
          required: true,
        },
      ],
    },
    {
      name: "what_is_the_weather_like_in",
      description:
        "\n    Get and interpret weather data for a location in the Netherlands\n\n    Args:\n        location: City or place name in the Netherlands\n    Returns:\n        A natural language interpretation of the current weather conditions\n    ",
      parameters: [
        {
          name: "location",
          type: "string",
          description: "Parameter: location",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wolkwork/knmi-mcp",
  _varName: "knmiWeatherMcpPlugin",
};

const mcpServerForThings3Plugin: Plugin = {
  id: "m1dfghn3ca",
  name: "MCP Server for Things3",
  description:
    "Enables integration with Things3, allowing the creation and management of tasks and projects via the MCP protocol, including synchronization with Agenda projects.",
  image: "https://github.com/drjforrest.png",
  actions: [],
  githubUrl: "https://github.com/drjforrest/mcp-things3",
  _varName: "mcpServerForThings3Plugin",
};

const comfyMcpServerPlugin: Plugin = {
  id: "h3eoexienb",
  name: "Comfy MCP Server",
  description:
    "The Comfy MCP Server uses the FastMCP framework to generate images from prompts by interacting with a remote Comfy server, allowing automated image creation based on workflow configurations.",
  image: "https://github.com/lalanikarim.png",
  actions: [],
  githubUrl: "https://github.com/lalanikarim/comfy-mcp-server",
  _varName: "comfyMcpServerPlugin",
};

const kospikosdaqPlugin: Plugin = {
  id: "i1judi5h55",
  name: "kospi-kosdaq",
  description:
    "An MCP server that provides KOSPI/KOSDAQ stock data using FastMCP.",
  image: "https://github.com/dragon1086.png",
  actions: [
    {
      name: "load_all_tickers",
      description:
        'Loads all ticker symbols and names for KOSPI and KOSDAQ into memory.\n\n    Returns:\n        Dict[str, str]: A dictionary mapping tickers to stock names.\n        Example: {"005930": "삼성전자", "035720": "카카오", ...}\n    ',
      parameters: [],
    },
    {
      name: "get_stock_ohlcv",
      description:
        'Retrieves OHLCV (Open/High/Low/Close/Volume) data for a specific stock.\n\n    Args:\n        fromdate (str): Start date for retrieval (YYYYMMDD)\n        todate   (str): End date for retrieval (YYYYMMDD)\n        ticker   (str): Stock ticker symbol\n        adjusted (bool, optional): Whether to use adjusted prices (True: adjusted, False: unadjusted). Defaults to True.\n\n    Returns:\n        DataFrame:\n            >> get_stock_ohlcv("20210118", "20210126", "005930")\n                            Open     High     Low    Close   Volume\n            Date\n            2021-01-26  89500  94800  89500  93800  46415214\n            2021-01-25  87300  89400  86800  88700  25577517\n            2021-01-22  89000  89700  86800  86800  30861661\n            2021-01-21  87500  88600  86500  88100  25318011\n            2021-01-20  89000  89000  86500  87200  25211127\n            2021-01-19  84500  88000  83600  87000  39895044\n            2021-01-18  86600  87300  84100  85000  43227951\n    ',
      parameters: [
        {
          name: "adjusted",
          type: "boolean",
          description: "Parameter: adjusted",
          required: false,
        },
        {
          name: "fromdate",
          type: "string",
          description: "Parameter: fromdate",
          required: true,
        },
        {
          name: "ticker",
          type: "string",
          description: "Parameter: ticker",
          required: true,
        },
        {
          name: "todate",
          type: "string",
          description: "Parameter: todate",
          required: true,
        },
      ],
    },
    {
      name: "get_stock_market_cap",
      description:
        'Retrieves market capitalization data for a specific stock.\n\n    Args:\n        fromdate (str): Start date for retrieval (YYYYMMDD)\n        todate   (str): End date for retrieval (YYYYMMDD)\n        ticker   (str): Stock ticker symbol\n\n    Returns:\n        DataFrame:\n            >> get_stock_market_cap("20150720", "20150724", "005930")\n                              Market Cap  Volume      Trading Value  Listed Shares\n            Date\n            2015-07-24  181030885173000  196584  241383636000  147299337\n            2015-07-23  181767381858000  208965  259446564000  147299337\n            2015-07-22  184566069261000  268323  333813094000  147299337\n            2015-07-21  186039062631000  194055  244129106000  147299337\n            2015-07-20  187806654675000  128928  165366199000  147299337\n    ',
      parameters: [
        {
          name: "fromdate",
          type: "string",
          description: "Parameter: fromdate",
          required: true,
        },
        {
          name: "ticker",
          type: "string",
          description: "Parameter: ticker",
          required: true,
        },
        {
          name: "todate",
          type: "string",
          description: "Parameter: todate",
          required: true,
        },
      ],
    },
    {
      name: "get_stock_fundamental",
      description:
        'Retrieves fundamental data (PER/PBR/Dividend Yield) for a specific stock.\n\n    Args:\n        fromdate (str): Start date for retrieval (YYYYMMDD)\n        todate   (str): End date for retrieval (YYYYMMDD)\n        ticker   (str): Stock ticker symbol\n\n    Returns:\n        DataFrame:\n            >> get_stock_fundamental("20210104", "20210108", "005930")\n                              BPS        PER       PBR   EPS       DIV   DPS\n                Date\n                2021-01-08  37528  28.046875  2.369141  3166  1.589844  1416\n                2021-01-07  37528  26.187500  2.210938  3166  1.709961  1416\n                2021-01-06  37528  25.953125  2.189453  3166  1.719727  1416\n                2021-01-05  37528  26.500000  2.240234  3166  1.690430  1416\n                2021-01-04  37528  26.218750  2.210938  3166  1.709961  1416\n    ',
      parameters: [
        {
          name: "fromdate",
          type: "string",
          description: "Parameter: fromdate",
          required: true,
        },
        {
          name: "ticker",
          type: "string",
          description: "Parameter: ticker",
          required: true,
        },
        {
          name: "todate",
          type: "string",
          description: "Parameter: todate",
          required: true,
        },
      ],
    },
    {
      name: "get_stock_trading_volume",
      description:
        "Retrieves trading volume by investor type for a specific stock.\n\n    Args:\n        fromdate (str): Start date for retrieval (YYYYMMDD)\n        todate   (str): End date for retrieval (YYYYMMDD)\n        ticker   (str): Stock ticker symbol\n\n    Returns:\n        DataFrame with columns:\n        - Volume (Sell/Buy/Net Buy)\n        - Trading Value (Sell/Buy/Net Buy)\n        Broken down by investor types (Financial Investment, Insurance, Trust, etc.)\n    ",
      parameters: [
        {
          name: "fromdate",
          type: "string",
          description: "Parameter: fromdate",
          required: true,
        },
        {
          name: "ticker",
          type: "string",
          description: "Parameter: ticker",
          required: true,
        },
        {
          name: "todate",
          type: "string",
          description: "Parameter: todate",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dragon1086/kospi-kosdaq-stock-server",
  _varName: "kospikosdaqPlugin",
};

const postgresqlMcpServerPlugin: Plugin = {
  id: "cf6qqvkquu",
  name: "PostgreSQL MCP Server",
  description:
    "Provides read-only access to PostgreSQL databases, enabling users to inspect database schemas and execute read-only queries through a Model Context Protocol server.",
  image: "https://github.com/vinsidious.png",
  actions: [],
  githubUrl: "https://github.com/vinsidious/mcp-pg-schema",
  _varName: "postgresqlMcpServerPlugin",
};

const mcpServerPlaygroundPlugin: Plugin = {
  id: "fylny5odo3",
  name: "MCP Server Playground",
  description:
    "A TypeScript-based MCP server designed for experimentation and integration with Calude Desktop and Cursor IDE, offering a modular playground for extending server capabilities.",
  image: "https://github.com/psaboia.png",
  actions: [
    {
      name: "calculate_sum",
      description: "Add two numbers together",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Parameter: a",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Parameter: b",
          required: true,
        },
      ],
    },
    {
      name: "httpbin_json",
      description: "Returns data about slide show ",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "Parameter: a",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/psaboia/mcp-server-playground",
  _varName: "mcpServerPlaygroundPlugin",
};

const chatgptMcpServerPlugin: Plugin = {
  id: "eorcr8wut5",
  name: "ChatGPT MCP Server",
  description:
    "A Model Context Protocol server that enables Docker container management through natural language interactions using a custom GPT interface.",
  image: "https://github.com/Toowiredd.png",
  actions: [
    {
      name: "containers_list",
      description: "List all Docker containers",
      parameters: [
        {
          name: "all",
          type: "boolean",
          description: "Show all containers (including stopped ones)",
          required: false,
        },
      ],
    },
    {
      name: "container_create",
      description: "Create and start a new Docker container",
      parameters: [
        {
          name: "env",
          type: "string array",
          description: 'Environment variables (e.g. ["KEY=value"])',
          required: false,
        },
        {
          name: "image",
          type: "string",
          description: "Docker image name",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Container name",
          required: false,
        },
        {
          name: "ports",
          type: "string array",
          description: 'Port mappings (e.g. ["80:80"])',
          required: false,
        },
      ],
    },
    {
      name: "container_stop",
      description: "Stop a running container",
      parameters: [
        {
          name: "container",
          type: "string",
          description: "Container ID or name",
          required: true,
        },
      ],
    },
    {
      name: "container_start",
      description: "Start a stopped container",
      parameters: [
        {
          name: "container",
          type: "string",
          description: "Container ID or name",
          required: true,
        },
      ],
    },
    {
      name: "container_remove",
      description: "Remove a container",
      parameters: [
        {
          name: "container",
          type: "string",
          description: "Container ID or name",
          required: true,
        },
        {
          name: "force",
          type: "boolean",
          description: "Force remove running container",
          required: false,
        },
      ],
    },
    {
      name: "container_logs",
      description: "Get container logs",
      parameters: [
        {
          name: "container",
          type: "string",
          description: "Container ID or name",
          required: true,
        },
        {
          name: "tail",
          type: "number",
          description: "Number of lines to show from the end",
          required: false,
        },
      ],
    },
    {
      name: "container_exec",
      description: "Execute a command in a running container",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "container",
          type: "string",
          description: "Container ID or name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Toowiredd/chatgpt-mcp-server",
  _varName: "chatgptMcpServerPlugin",
};

const fetchMcpServerPlugin: Plugin = {
  id: "cii0qwcawb",
  name: "Fetch MCP Server",
  description:
    "Enables retrieval and processing of web page content for LLMs by converting HTML to markdown, with support for content truncation and pagination.",
  image: "https://github.com/ExactDoug.png",
  actions: [
    {
      name: "fetch",
      description:
        "Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.",
      parameters: [
        {
          name: "max_length",
          type: "integer",
          description: "Maximum number of characters to return.",
          required: false,
        },
        {
          name: "raw",
          type: "boolean",
          description:
            "Get the actual HTML content if the requested page, without simplification.",
          required: false,
        },
        {
          name: "start_index",
          type: "integer",
          description:
            "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ExactDoug/mcp-fetch",
  _varName: "fetchMcpServerPlugin",
};

const knowledgeGraphMemoryServer1Plugin: Plugin = {
  id: "eoinvr1bz0",
  name: "Knowledge Graph Memory Server",
  description:
    "Enhances user interaction through a persistent memory system that remembers information across chats and learns from past errors by utilizing a local knowledge graph and lesson management.",
  image: "https://github.com/T1nker-1220.png",
  actions: [
    {
      name: "create_entities",
      description: "Create multiple new entities in the knowledge graph",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add new observations to existing entities in the knowledge graph",
      parameters: [
        {
          name: "observations",
          type: "object array",
          description: "Parameter: observations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entities",
      description:
        "Delete multiple entities and their associated relations from the knowledge graph",
      parameters: [
        {
          name: "entityNames",
          type: "string array",
          description: "An array of entity names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_observations",
      description:
        "Delete specific observations from entities in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Parameter: deletions",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete multiple relations from the knowledge graph",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "An array of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Read the entire knowledge graph",
      parameters: [],
    },
    {
      name: "search_nodes",
      description: "Search for nodes in the knowledge graph based on a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The search query to match against entity names, types, and observation content",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description: "Open specific nodes in the knowledge graph by their names",
      parameters: [
        {
          name: "names",
          type: "string array",
          description: "An array of entity names to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create_lesson",
      description: "Create a new lesson from an error and its solution",
      parameters: [
        {
          name: "lesson",
          type: "object",
          description: "Parameter: lesson",
          required: true,
        },
      ],
    },
    {
      name: "find_similar_errors",
      description:
        "Find similar errors and their solutions in the knowledge graph",
      parameters: [
        {
          name: "errorPattern",
          type: "object",
          description: "Parameter: errorPattern",
          required: true,
        },
      ],
    },
    {
      name: "update_lesson_success",
      description:
        "Update the success rate of a lesson after applying its solution",
      parameters: [
        {
          name: "lessonName",
          type: "string",
          description: "Name of the lesson to update",
          required: true,
        },
        {
          name: "success",
          type: "boolean",
          description: "Whether the solution was successful",
          required: true,
        },
      ],
    },
    {
      name: "get_lesson_recommendations",
      description: "Get relevant lessons based on the current context",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "The current context to find relevant lessons for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/T1nker-1220/memories-with-lessons-mcp-server",
  _varName: "knowledgeGraphMemoryServer1Plugin",
};

const deepseekThinkerMcpServerPlugin: Plugin = {
  id: "d7spzsfuwz",
  name: "Deepseek Thinker MCP Server",
  description:
    "Provides reasoning content to MCP-enabled AI clients by interfacing with Deepseek's API or a local Ollama server, enabling focused reasoning and thought process visualization.",
  image: "https://github.com/ruixingshi.png",
  actions: [
    {
      name: "get-deepseek-thinker",
      description: "think with deepseek",
      parameters: [
        {
          name: "originPrompt",
          type: "string",
          description: "user's original prompt",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ruixingshi/deepseek-thinker-mcp",
  _varName: "deepseekThinkerMcpServerPlugin",
};

const todoistMcpServer1Plugin: Plugin = {
  id: "xzuab11d38",
  name: "Todoist MCP Server",
  description:
    "Integrates Claude with Todoist for natural language task management, supporting project and section organization, task creation, updating, completion, and deletion using everyday language.",
  image: "https://github.com/Chrusic.png",
  actions: [
    {
      name: "todoist_create_task",
      description:
        "Create one or more tasks in Todoist with full parameter support",
      parameters: [
        {
          name: "assignee_id",
          type: "string",
          description: "User ID to assign the task to (optional)",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description:
            "The content/title of the task (for single task creation)",
          required: false,
        },
        {
          name: "deadline_date",
          type: "string",
          description: "Deadline date in YYYY-MM-DD format (optional)",
          required: false,
        },
        {
          name: "deadline_lang",
          type: "string",
          description: "2-letter language code for deadline parsing (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed description of the task (optional)",
          required: false,
        },
        {
          name: "due_date",
          type: "string",
          description: "Due date in YYYY-MM-DD format (optional)",
          required: false,
        },
        {
          name: "due_datetime",
          type: "string",
          description: "Due date and time in RFC3339 format (optional)",
          required: false,
        },
        {
          name: "due_lang",
          type: "string",
          description: "2-letter language code for due date parsing (optional)",
          required: false,
        },
        {
          name: "due_string",
          type: "string",
          description:
            "Natural language due date like 'tomorrow', 'next Monday' (optional)",
          required: false,
        },
        {
          name: "duration",
          type: "number",
          description: "The duration amount of the task (optional)",
          required: false,
        },
        {
          name: "duration_unit",
          type: "string",
          description: "The duration unit ('minute' or 'day') (optional)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of label names to apply to the task (optional)",
          required: false,
        },
        {
          name: "order",
          type: "number",
          description: "Position in the project or parent task (optional)",
          required: false,
        },
        {
          name: "parent_id",
          type: "string",
          description: "ID of the parent task for subtasks (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Task priority from 1 (normal) to 4 (urgent) (optional)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "ID of the project to add the task to (optional)",
          required: false,
        },
        {
          name: "section_id",
          type: "string",
          description: "ID of the section to add the task to (optional)",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Array of tasks to create (for batch operations)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_get_tasks",
      description:
        "Get a list of tasks from Todoist with various filters - handles both single and batch retrieval",
      parameters: [
        {
          name: "filter",
          type: "string",
          description:
            "Natural language filter like 'today', 'tomorrow', 'next week', 'priority 1', 'overdue' (optional)",
          required: false,
        },
        {
          name: "ids",
          type: "string array",
          description: "Array of specific task IDs to retrieve (optional)",
          required: false,
        },
        {
          name: "label",
          type: "string",
          description: "Filter tasks by label name (optional)",
          required: false,
        },
        {
          name: "lang",
          type: "string",
          description:
            "IETF language tag defining what language filter is written in (optional)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of tasks to return (optional, client-side filtering)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Filter by priority level (1-4) (optional)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Filter tasks by project ID (optional)",
          required: false,
        },
        {
          name: "section_id",
          type: "string",
          description: "Filter tasks by section ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_update_task",
      description:
        "Update one or more tasks in Todoist with full parameter support",
      parameters: [
        {
          name: "assignee_id",
          type: "string",
          description: "New user ID to assign the task to (optional)",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "New content/title for the task (optional)",
          required: false,
        },
        {
          name: "deadline_date",
          type: "string",
          description: "New deadline date in YYYY-MM-DD format (optional)",
          required: false,
        },
        {
          name: "deadline_lang",
          type: "string",
          description: "2-letter language code for deadline parsing (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description for the task (optional)",
          required: false,
        },
        {
          name: "due_date",
          type: "string",
          description: "New due date in YYYY-MM-DD format (optional)",
          required: false,
        },
        {
          name: "due_datetime",
          type: "string",
          description: "New due date and time in RFC3339 format (optional)",
          required: false,
        },
        {
          name: "due_lang",
          type: "string",
          description: "2-letter language code for due date parsing (optional)",
          required: false,
        },
        {
          name: "due_string",
          type: "string",
          description: "New due date in natural language (optional)",
          required: false,
        },
        {
          name: "duration",
          type: "number",
          description: "New duration amount of the task (optional)",
          required: false,
        },
        {
          name: "duration_unit",
          type: "string",
          description: "New duration unit ('minute' or 'day') (optional)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "New array of label names for the task (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description:
            "New priority level from 1 (normal) to 4 (urgent) (optional)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Move task to this project ID (optional)",
          required: false,
        },
        {
          name: "section_id",
          type: "string",
          description: "Move task to this section ID (optional)",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to update (preferred)",
          required: false,
        },
        {
          name: "task_name",
          type: "string",
          description:
            "Name/content of the task to search for (if ID not provided)",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Array of tasks to update (for batch operations)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_delete_task",
      description: "Delete one or more tasks from Todoist",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to delete (preferred)",
          required: false,
        },
        {
          name: "task_name",
          type: "string",
          description:
            "Name/content of the task to search for and delete (if ID not provided)",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Array of tasks to delete (for batch operations)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_complete_task",
      description: "Mark one or more tasks as complete in Todoist",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to complete (preferred)",
          required: false,
        },
        {
          name: "task_name",
          type: "string",
          description:
            "Name/content of the task to search for and complete (if ID not provided)",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description:
            "Array of tasks to mark as complete (for batch operations)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_get_projects",
      description:
        "Get projects with optional filtering and hierarchy information",
      parameters: [
        {
          name: "include_hierarchy",
          type: "boolean",
          description: "Optional: Include full parent-child relationships",
          required: false,
        },
        {
          name: "include_sections",
          type: "boolean",
          description: "Optional: Include sections within each project",
          required: false,
        },
        {
          name: "project_ids",
          type: "string array",
          description: "Optional: Specific project IDs to retrieve",
          required: false,
        },
      ],
    },
    {
      name: "todoist_create_project",
      description:
        "Create one or more projects with support for nested hierarchies",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Color of the project (optional)",
          required: false,
        },
        {
          name: "favorite",
          type: "boolean",
          description: "Whether the project is a favorite (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the project (for single project creation)",
          required: false,
        },
        {
          name: "parent_id",
          type: "string",
          description: "Parent project ID (optional)",
          required: false,
        },
        {
          name: "projects",
          type: "object array",
          description: "Array of projects to create (for batch operations)",
          required: false,
        },
        {
          name: "view_style",
          type: "string",
          description: "View style of the project (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_update_project",
      description: "Update one or more projects in Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "New color for the project (optional)",
          required: false,
        },
        {
          name: "favorite",
          type: "boolean",
          description: "Whether the project should be a favorite (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the project (optional)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "ID of the project to update",
          required: false,
        },
        {
          name: "projects",
          type: "object array",
          description: "Array of projects to update (for batch operations)",
          required: false,
        },
        {
          name: "view_style",
          type: "string",
          description: "View style of the project (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_get_project_sections",
      description: "Get sections from one or more projects in Todoist",
      parameters: [
        {
          name: "include_empty",
          type: "boolean",
          description: "Whether to include sections with no tasks",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "ID of the project to get sections from",
          required: false,
        },
        {
          name: "project_name",
          type: "string",
          description:
            "Name of the project to get sections from (if ID not provided)",
          required: false,
        },
        {
          name: "projects",
          type: "object array",
          description:
            "Array of projects to get sections from (for batch operations)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_create_project_section",
      description: "Create one or more sections in Todoist projects",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the section",
          required: false,
        },
        {
          name: "order",
          type: "number",
          description: "Order of the section (optional)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "ID of the project",
          required: false,
        },
        {
          name: "sections",
          type: "object array",
          description: "Array of sections to create (for batch operations)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_get_personal_labels",
      description: "Get all personal labels from Todoist",
      parameters: [],
    },
    {
      name: "todoist_create_personal_label",
      description: "Create one or more personal labels in Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Color of the label (optional)",
          required: false,
        },
        {
          name: "is_favorite",
          type: "boolean",
          description: "Whether the label is a favorite (optional)",
          required: false,
        },
        {
          name: "labels",
          type: "object array",
          description: "Array of labels to create (for batch operations)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the label",
          required: false,
        },
        {
          name: "order",
          type: "number",
          description: "Order of the label (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_get_personal_label",
      description: "Get a personal label by ID",
      parameters: [
        {
          name: "label_id",
          type: "string",
          description: "ID of the label to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "todoist_update_personal_label",
      description: "Update one or more existing personal labels in Todoist",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "New color for the label (optional)",
          required: false,
        },
        {
          name: "is_favorite",
          type: "boolean",
          description: "Whether the label is a favorite (optional)",
          required: false,
        },
        {
          name: "label_id",
          type: "string",
          description: "ID of the label to update",
          required: false,
        },
        {
          name: "label_name",
          type: "string",
          description:
            "Name of the label to search for and update (if ID not provided)",
          required: false,
        },
        {
          name: "labels",
          type: "object array",
          description: "Array of labels to update (for batch operations)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the label (optional)",
          required: false,
        },
        {
          name: "order",
          type: "number",
          description: "New order for the label (optional)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_delete_personal_label",
      description: "Delete a personal label from Todoist",
      parameters: [
        {
          name: "label_id",
          type: "string",
          description: "ID of the label to delete",
          required: true,
        },
      ],
    },
    {
      name: "todoist_get_shared_labels",
      description: "Get all shared labels from Todoist",
      parameters: [
        {
          name: "omit_personal",
          type: "boolean",
          description:
            "Whether to exclude the names of the user's personal labels from the results (default: false)",
          required: false,
        },
      ],
    },
    {
      name: "todoist_rename_shared_labels",
      description: "Rename one or more shared labels in Todoist",
      parameters: [
        {
          name: "labels",
          type: "object array",
          description:
            "Array of label rename operations (for batch operations)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The name of the existing label to rename",
          required: false,
        },
        {
          name: "new_name",
          type: "string",
          description: "The new name for the label",
          required: false,
        },
      ],
    },
    {
      name: "todoist_remove_shared_labels",
      description: "Remove one or more shared labels from Todoist tasks",
      parameters: [
        {
          name: "labels",
          type: "object array",
          description:
            "Array of shared label names to remove (for batch operations)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The name of the label to remove",
          required: false,
        },
      ],
    },
    {
      name: "todoist_update_task_labels",
      description: "Update the labels of one or more tasks in Todoist",
      parameters: [
        {
          name: "labels",
          type: "string array",
          description: "Array of label names to set for the task",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to update labels for (preferred)",
          required: false,
        },
        {
          name: "task_name",
          type: "string",
          description:
            "Name/content of the task to search for and update labels (if ID not provided)",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description:
            "Array of tasks to update labels for (for batch operations)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Chrusic/todoist-mcp-server-extended",
  _varName: "todoistMcpServer1Plugin",
};

const mcpServerForApacheAirflowPlugin: Plugin = {
  id: "e99b6vx9lw",
  name: "MCP Server for Apache Airflow",
  description:
    "Provides a standardized way for MCP clients to interact with Apache Airflow's REST API, supporting operations like DAG management and monitoring Airflow system health.",
  image: "https://github.com/yangkyeongmo.png",
  actions: [
    {
      name: "list_dags",
      description: "Lists all DAGs in the Airflow instance",
      parameters: [
        {
          name: "dag_id_pattern",
          type: "string",
          description:
            "If set, only return DAGs with dag_ids matching this pattern",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "The numbers of items to return (default: 100)",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description:
            "The number of items to skip before starting to collect the result set",
          required: false,
        },
        {
          name: "only_active",
          type: "boolean",
          description: "Only filter active DAGs (default: true)",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description:
            "The name of the field to order the results by. Prefix with - to reverse sort order",
          required: false,
        },
        {
          name: "paused",
          type: "boolean",
          description:
            "Only filter paused/unpaused DAGs. If absent, returns both",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "List of tags to filter results",
          required: false,
        },
      ],
    },
    {
      name: "get_dag",
      description: "Get details of a specific DAG",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "pause_dag",
      description: "Pause a DAG",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG to pause",
          required: true,
        },
      ],
    },
    {
      name: "unpause_dag",
      description: "Unpause a DAG",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG to unpause",
          required: true,
        },
      ],
    },
    {
      name: "trigger_dag",
      description: "Trigger a DAG run",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG to trigger",
          required: true,
        },
      ],
    },
    {
      name: "get_dag_runs",
      description: "Get DAG runs for a specific DAG",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG to retrieve DAG runs for",
          required: true,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Returns objects greater or equal the specified date",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description:
            "Returns objects less than or equal to the specified date",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Returns objects greater or equal to the specified date",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description:
            "Returns objects less than or equal to the specified date",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "The numbers of items to return (default: 100)",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description:
            "The number of items to skip before starting to collect the result set",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description:
            "The name of the field to order the results by. Prefix with - to reverse sort order",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Returns objects greater or equal the specified date",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Returns objects less or equal the specified date",
          required: false,
        },
        {
          name: "state",
          type: "string array",
          description:
            "The value can be repeated to retrieve multiple matching values (OR condition)",
          required: false,
        },
        {
          name: "updated_at_gte",
          type: "string",
          description: "Returns objects greater or equal the specified date",
          required: false,
        },
        {
          name: "updated_at_lte",
          type: "string",
          description: "Returns objects less or equal the specified date",
          required: false,
        },
      ],
    },
    {
      name: "get_dag_tasks",
      description: "Get tasks for a specific DAG",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG to retrieve tasks for",
          required: true,
        },
      ],
    },
    {
      name: "get_task_instance",
      description: "Get details of a specific task instance",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG",
          required: true,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "The ID of the DAG run",
          required: true,
        },
        {
          name: "task_id",
          type: "string",
          description: "The ID of the task",
          required: true,
        },
      ],
    },
    {
      name: "list_task_instances",
      description: "List all task instances for a specific DAG run",
      parameters: [
        {
          name: "dag_id",
          type: "string",
          description: "The ID of the DAG",
          required: true,
        },
        {
          name: "dag_run_id",
          type: "string",
          description: "The ID of the DAG run",
          required: true,
        },
        {
          name: "duration_gte",
          type: "number",
          description:
            "Returns objects greater than or equal to the specified values",
          required: false,
        },
        {
          name: "duration_lte",
          type: "number",
          description:
            "Returns objects less than or equal to the specified values",
          required: false,
        },
        {
          name: "end_date_gte",
          type: "string",
          description: "Returns objects greater or equal the specified date",
          required: false,
        },
        {
          name: "end_date_lte",
          type: "string",
          description:
            "Returns objects less than or equal to the specified date",
          required: false,
        },
        {
          name: "execution_date_gte",
          type: "string",
          description: "Returns objects greater or equal to the specified date",
          required: false,
        },
        {
          name: "execution_date_lte",
          type: "string",
          description:
            "Returns objects less than or equal to the specified date",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "The numbers of items to return (default: 100)",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description:
            "The number of items to skip before starting to collect the result set",
          required: false,
        },
        {
          name: "pool",
          type: "string array",
          description:
            "The value can be repeated to retrieve multiple matching values (OR condition)",
          required: false,
        },
        {
          name: "queue",
          type: "string array",
          description:
            "The value can be repeated to retrieve multiple matching values (OR condition)",
          required: false,
        },
        {
          name: "start_date_gte",
          type: "string",
          description: "Returns objects greater or equal the specified date",
          required: false,
        },
        {
          name: "start_date_lte",
          type: "string",
          description: "Returns objects less or equal the specified date",
          required: false,
        },
        {
          name: "state",
          type: "string array",
          description:
            "States of the task instance. The value can be repeated to retrieve multiple matching values (OR condition)",
          required: false,
        },
        {
          name: "updated_at_gte",
          type: "string",
          description: "Returns objects greater or equal the specified date",
          required: false,
        },
        {
          name: "updated_at_lte",
          type: "string",
          description: "Returns objects less or equal the specified date",
          required: false,
        },
      ],
    },
    {
      name: "get_import_error",
      description: "Get details of a specific import error",
      parameters: [
        {
          name: "import_error_id",
          type: "integer",
          description: "The ID of the import error to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "list_import_errors",
      description: "List all import errors",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "The numbers of items to return (default: 100)",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description:
            "The number of items to skip before starting to collect the result set",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description:
            "The name of the field to order the results by. Prefix with - to reverse sort order",
          required: false,
        },
      ],
    },
    {
      name: "get_health",
      description: "Get the health status of the Airflow instance",
      parameters: [],
    },
    {
      name: "get_version",
      description: "Get the version information of the Airflow instance",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/yangkyeongmo/mcp-server-apache-airflow",
  _varName: "mcpServerForApacheAirflowPlugin",
};

const mysqlMcpServer2Plugin: Plugin = {
  id: "0zlx06wtft",
  name: "MySQL MCP Server",
  description:
    "An MCP server that integrates with MySQL databases, enabling secure read and write operations through LLM-driven interfaces with support for transaction handling and performance monitoring.",
  image: "https://github.com/kevinwatt.png",
  actions: [],
  githubUrl: "https://github.com/kevinwatt/mysql-mcp",
  _varName: "mysqlMcpServer2Plugin",
};

const jupyterMcpServerPlugin: Plugin = {
  id: "et849kq742",
  name: "Jupyter MCP Server",
  description:
    "Enables interaction with Jupyter notebooks through the Model Context Protocol, supporting code execution and markdown insertion within JupyterLab environments.",
  image: "https://github.com/datalayer.png",
  actions: [],
  githubUrl: "https://github.com/datalayer/jupyter-mcp-server",
  _varName: "jupyterMcpServerPlugin",
};

const figmaMcpServer2Plugin: Plugin = {
  id: "kcftotr525",
  name: "Figma MCP Server",
  description:
    "Enables Cursor to access Figma files through the Model Context Protocol, enhancing its ability to accurately interpret and utilize design data for code generation.",
  image: "https://github.com/GLips.png",
  actions: [
    {
      name: "add_figma_file",
      description: "Add a Figma file to your context",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the Figma file to add",
          required: true,
        },
      ],
    },
    {
      name: "view_node",
      description: "Get a thumbnail for a specific node in a Figma file",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
        {
          name: "node_id",
          type: "string",
          description:
            "The ID of the node to view. Node ids have the format `<number>:<number>`",
          required: true,
        },
      ],
    },
    {
      name: "read_comments",
      description: "Get all comments on a Figma file",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
      ],
    },
    {
      name: "post_comment",
      description: "Post a comment on a node in a Figma file",
      parameters: [
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "The comment message",
          required: true,
        },
        {
          name: "node_id",
          type: "string",
          description:
            "The ID of the node to comment on. Node ids have the format `<number>:<number>`",
          required: false,
        },
        {
          name: "x",
          type: "number",
          description: "The x coordinate of the comment pin",
          required: true,
        },
        {
          name: "y",
          type: "number",
          description: "The y coordinate of the comment pin",
          required: true,
        },
      ],
    },
    {
      name: "reply_to_comment",
      description: "Reply to an existing comment in a Figma file",
      parameters: [
        {
          name: "comment_id",
          type: "string",
          description:
            "The ID of the comment to reply to. Comment ids have the format `<number>`",
          required: true,
        },
        {
          name: "file_key",
          type: "string",
          description: "The key of the Figma file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "The reply message",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/GLips/Figma-Context-MCP",
  _varName: "figmaMcpServer2Plugin",
};

const bearMcpServerPlugin: Plugin = {
  id: "2gg54jdwwv",
  name: "Bear MCP Server",
  description:
    "Facilitates interaction with Bear note-taking software, allowing users to perform actions like opening notes, creating notes, and searching through Bear's X-callback-url Scheme.",
  image: "https://github.com/jkawamoto.png",
  actions: [
    {
      name: "open_note",
      description:
        "Open a note identified by its title or id and return its content.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "note unique identifier",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "note title",
          required: false,
        },
      ],
    },
    {
      name: "create",
      description:
        "Create a new note and return its unique identifier. Empty notes are not allowed.",
      parameters: [
        {
          name: "tags",
          type: "string",
          description: "list of tags",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "note body",
          required: false,
        },
        {
          name: "timestamp",
          type: "boolean",
          description: "prepend the current date and time to the text",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "note title",
          required: false,
        },
      ],
    },
    {
      name: "tags",
      description: "Return all the tags currently displayed in Bear’s sidebar.",
      parameters: [],
    },
    {
      name: "open_tag",
      description: "Show all the notes which have a selected tag in bear.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "tag name or a list of tags divided by comma",
          required: true,
        },
      ],
    },
    {
      name: "todo",
      description: "Select the Todo sidebar item.",
      parameters: [
        {
          name: "search",
          type: "string",
          description: "string to search",
          required: false,
        },
      ],
    },
    {
      name: "today",
      description: "Select the Today sidebar item.",
      parameters: [
        {
          name: "search",
          type: "string",
          description: "string to search",
          required: false,
        },
      ],
    },
    {
      name: "search",
      description:
        "Show search results in Bear for all notes or for a specific tag.",
      parameters: [
        {
          name: "tag",
          type: "string",
          description: "tag to search into",
          required: false,
        },
        {
          name: "term",
          type: "string",
          description: "string to search",
          required: false,
        },
      ],
    },
    {
      name: "grab_url",
      description:
        "Create a new note with the content of a web page and return its unique identifier.",
      parameters: [
        {
          name: "tags",
          type: "string",
          description:
            "list of tags. If tags are specified in the Bear’s web content preferences, this parameter is ignored.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "url to grab",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jkawamoto/mcp-bear",
  _varName: "bearMcpServerPlugin",
};

const singaporeLtaMcpServerPlugin: Plugin = {
  id: "my4hyiqxuy",
  name: "Singapore LTA MCP Server",
  description:
    "Facilitates real-time access to Singapore's Land Transport Authority (LTA) transportation data, offering insights into bus arrivals, train services, traffic conditions, and more through integration with the LTA DataMall API.",
  image: "https://github.com/arjunkmrm.png",
  actions: [
    {
      name: "bus_arrival",
      description:
        "Get real-time bus arrival information for a specific bus stop and optionally a specific service number. Returns estimated arrival times, bus locations, and crowding levels.",
      parameters: [
        {
          name: "busStopCode",
          type: "string",
          description: "The unique 5-digit bus stop code",
          required: true,
        },
        {
          name: "serviceNo",
          type: "string",
          description: "Optional bus service number to filter results",
          required: false,
        },
      ],
    },
    {
      name: "station_crowding",
      description:
        "Get real-time MRT/LRT station crowdedness level for a particular train network line. Updates every 10 minutes.",
      parameters: [
        {
          name: "trainLine",
          type: "string",
          description:
            "Code of train network line (CCL, CEL, CGL, DTL, EWL, NEL, NSL, BPL, SLRT, PLRT, TEL)",
          required: true,
        },
      ],
    },
    {
      name: "train_alerts",
      description:
        "Get real-time train service alerts including service disruptions and shuttle services. Updates when there are changes.",
      parameters: [],
    },
    {
      name: "carpark_availability",
      description:
        "Get real-time availability of parking lots for HDB, LTA, and URA carparks. Updates every minute.",
      parameters: [],
    },
    {
      name: "travel_times",
      description:
        "Get estimated travel times on expressway segments. Updates every 5 minutes.",
      parameters: [],
    },
    {
      name: "traffic_incidents",
      description:
        "Get current road incidents including accidents, roadworks, and heavy traffic. Updates every 2 minutes.",
      parameters: [],
    },
    {
      name: "station_crowd_forecast",
      description:
        "Get forecasted MRT/LRT station crowdedness levels in 30-minute intervals.",
      parameters: [
        {
          name: "trainLine",
          type: "string",
          description:
            "Code of train network line (CCL, CEL, CGL, DTL, EWL, NEL, NSL, BPL, SLRT, PLRT, TEL)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/arjunkmrm/mcp-sg-lta",
  _varName: "singaporeLtaMcpServerPlugin",
};

const searxngMcpServerPlugin: Plugin = {
  id: "fjoqf30os0",
  name: "SearXNG MCP Server",
  description:
    "This server provides a privacy-focused meta search capability by integrating multiple search engines without tracking or user profiling, supporting various categories and languages for filtered searches.",
  image: "https://github.com/kevinwatt.png",
  actions: [
    {
      name: "web_search",
      description:
        "Performs a web search using SearXNG, ideal for general queries, news, articles and online content. Supports multiple search categories, languages, time ranges and safe search filtering. Returns relevant results from multiple search engines combined.",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description: "Parameter: categories",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Search language code (e.g. 'en', 'zh', 'jp', 'all')",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number (default 1)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "safesearch",
          type: "number",
          description: "0: None, 1: Moderate, 2: Strict",
          required: false,
        },
        {
          name: "time_range",
          type: "string",
          description: "Parameter: time_range",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kevinwatt/mcp-server-searxng",
  _varName: "searxngMcpServerPlugin",
};

const socialListeningMcpServerPlugin: Plugin = {
  id: "axry6nqwll",
  name: "Social Listening MCP Server",
  description:
    "An MCP server offering AI-driven social mention analysis via Syften's API, featuring real-time notifications and trend analysis.",
  image: "https://github.com/fred-em.png",
  actions: [],
  githubUrl: "https://github.com/fred-em/social-listening",
  _varName: "socialListeningMcpServerPlugin",
};

const gitMcpServer1Plugin: Plugin = {
  id: "46aozzlyhx",
  name: "Git MCP Server",
  description:
    "The Git MCP Server allows AI assistants to perform enhanced Git operations via the Model Context Protocol, supporting core Git functions, branch and tag management, GitHub integration, and more.",
  image: "https://github.com/Sheshiyer.png",
  actions: [
    {
      name: "init",
      description: "Initialize a new Git repository",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to initialize the repository in. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "clone",
      description: "Clone a repository",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to clone into. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the repository to clone",
          required: true,
        },
      ],
    },
    {
      name: "status",
      description: "Get repository status",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "add",
      description: "Stage files",
      parameters: [
        {
          name: "files",
          type: "string array",
          description: "Files to stage",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "commit",
      description: "Create a commit",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "push",
      description: "Push commits to remote",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "force",
          type: "boolean",
          description: "Force push changes",
          required: false,
        },
        {
          name: "noVerify",
          type: "boolean",
          description: "Skip pre-push hooks",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "remote",
          type: "string",
          description: "Remote name",
          required: false,
        },
        {
          name: "tags",
          type: "boolean",
          description: "Push all tags",
          required: false,
        },
      ],
    },
    {
      name: "pull",
      description: "Pull changes from remote",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "remote",
          type: "string",
          description: "Remote name",
          required: false,
        },
      ],
    },
    {
      name: "branch_list",
      description: "List all branches",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "branch_create",
      description: "Create a new branch",
      parameters: [
        {
          name: "force",
          type: "boolean",
          description: "Force create branch even if it exists",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "setUpstream",
          type: "boolean",
          description: "Set upstream for push/pull",
          required: false,
        },
        {
          name: "track",
          type: "boolean",
          description: "Set up tracking mode",
          required: false,
        },
      ],
    },
    {
      name: "branch_delete",
      description: "Delete a branch",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Branch name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "checkout",
      description: "Switch branches or restore working tree files",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "target",
          type: "string",
          description: "Branch name, commit hash, or file path",
          required: true,
        },
      ],
    },
    {
      name: "tag_list",
      description: "List tags",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "tag_create",
      description: "Create a tag",
      parameters: [
        {
          name: "annotated",
          type: "boolean",
          description: "Create an annotated tag",
          required: false,
        },
        {
          name: "force",
          type: "boolean",
          description: "Force create tag even if it exists",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Tag message",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Tag name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "sign",
          type: "boolean",
          description: "Create a signed tag",
          required: false,
        },
      ],
    },
    {
      name: "tag_delete",
      description: "Delete a tag",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Tag name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "remote_list",
      description: "List remotes",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "remote_add",
      description: "Add a remote",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Remote name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Remote URL",
          required: true,
        },
      ],
    },
    {
      name: "remote_remove",
      description: "Remove a remote",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Remote name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "stash_list",
      description: "List stashes",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "stash_save",
      description: "Save changes to stash",
      parameters: [
        {
          name: "all",
          type: "boolean",
          description: "Include ignored files",
          required: false,
        },
        {
          name: "includeUntracked",
          type: "boolean",
          description: "Include untracked files",
          required: false,
        },
        {
          name: "keepIndex",
          type: "boolean",
          description: "Keep staged changes",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Stash message",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "stash_pop",
      description: "Apply and remove a stash",
      parameters: [
        {
          name: "index",
          type: "number",
          description: "Stash index",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
    {
      name: "bulk_action",
      description:
        "Execute multiple Git operations in sequence. This is the preferred way to execute multiple operations.",
      parameters: [
        {
          name: "actions",
          type: "object array",
          description: "Array of Git operations to execute in sequence",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to repository. MUST be an absolute path (e.g., /Users/username/projects/my-repo)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sheshiyer/git-mcp-v2",
  _varName: "gitMcpServer1Plugin",
};

const portkeyMcpServerPlugin: Plugin = {
  id: "iftjfqrk0v",
  name: "Portkey MCP Server",
  description:
    "Connects Claude to Portkey's API for managing AI configurations, workspaces, analytics, and user access, providing comprehensive control over API usage and settings.",
  image: "https://github.com/r-huijts.png",
  actions: [
    {
      name: "list_all_users",
      description:
        "List all users in your Portkey organization, including their roles and account details",
      parameters: [],
    },
    {
      name: "invite_user",
      description:
        "Invite a new user to your Portkey organization with specific workspace access and API key permissions",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Email address of the user to invite",
          required: true,
        },
        {
          name: "first_name",
          type: "string",
          description: "User's first name",
          required: false,
        },
        {
          name: "last_name",
          type: "string",
          description: "User's last name",
          required: false,
        },
        {
          name: "role",
          type: "string",
          description:
            "Organization-level role: 'admin' for full access, 'member' for limited access",
          required: true,
        },
        {
          name: "workspace_api_key_details",
          type: "object",
          description: "Optional API key to be created for the user",
          required: false,
        },
        {
          name: "workspaces",
          type: "object array",
          description:
            "List of workspaces and corresponding roles to grant to the user",
          required: true,
        },
      ],
    },
    {
      name: "get_user_stats",
      description:
        "Retrieve detailed analytics data about user activity within a specified time range, including request counts and costs",
      parameters: [
        {
          name: "cost_max",
          type: "number",
          description: "Maximum cost in cents to filter by",
          required: false,
        },
        {
          name: "cost_min",
          type: "number",
          description: "Minimum cost in cents to filter by",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Number of results per page (for pagination)",
          required: false,
        },
        {
          name: "status_code",
          type: "string",
          description: "Filter by specific HTTP status codes (comma-separated)",
          required: false,
        },
        {
          name: "time_of_generation_max",
          type: "string",
          description:
            "End time for the analytics period (ISO8601 format, e.g., '2024-02-01T00:00:00Z')",
          required: true,
        },
        {
          name: "time_of_generation_min",
          type: "string",
          description:
            "Start time for the analytics period (ISO8601 format, e.g., '2024-01-01T00:00:00Z')",
          required: true,
        },
        {
          name: "total_units_max",
          type: "number",
          description: "Maximum number of total tokens to filter by",
          required: false,
        },
        {
          name: "total_units_min",
          type: "number",
          description: "Minimum number of total tokens to filter by",
          required: false,
        },
        {
          name: "virtual_keys",
          type: "string",
          description: "Filter by specific virtual key slugs (comma-separated)",
          required: false,
        },
      ],
    },
    {
      name: "list_workspaces",
      description:
        "Retrieve all workspaces in your Portkey organization, including their configurations and metadata",
      parameters: [
        {
          name: "current_page",
          type: "number",
          description: "Page number to retrieve when results are paginated",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description:
            "Number of workspaces to return per page (default varies by endpoint)",
          required: false,
        },
      ],
    },
    {
      name: "get_workspace",
      description:
        "Retrieve detailed information about a specific workspace, including its configuration, metadata, and user access details",
      parameters: [
        {
          name: "workspace_id",
          type: "string",
          description:
            "The unique identifier of the workspace to retrieve. This can be found in the workspace's URL or from the list_workspaces tool response",
          required: true,
        },
      ],
    },
    {
      name: "list_configs",
      description:
        "Retrieve all configurations in your Portkey organization, including their status and workspace associations",
      parameters: [],
    },
    {
      name: "list_virtual_keys",
      description:
        "Retrieve all virtual keys in your Portkey organization, including their usage limits, rate limits, and status",
      parameters: [],
    },
    {
      name: "get_cost_analytics",
      description:
        "Retrieve detailed cost analytics data over time, including total costs and averages per request",
      parameters: [
        {
          name: "ai_org_model",
          type: "string",
          description:
            "Filter by AI provider and model (comma-separated, use __ as separator)",
          required: false,
        },
        {
          name: "api_key_ids",
          type: "string",
          description: "Filter by specific API key UUIDs (comma-separated)",
          required: false,
        },
        {
          name: "completion_token_max",
          type: "number",
          description: "Maximum number of completion tokens",
          required: false,
        },
        {
          name: "completion_token_min",
          type: "number",
          description: "Minimum number of completion tokens",
          required: false,
        },
        {
          name: "configs",
          type: "string",
          description: "Filter by specific config slugs (comma-separated)",
          required: false,
        },
        {
          name: "cost_max",
          type: "number",
          description: "Maximum cost in cents to filter by",
          required: false,
        },
        {
          name: "cost_min",
          type: "number",
          description: "Minimum cost in cents to filter by",
          required: false,
        },
        {
          name: "metadata",
          type: "string",
          description: "Filter by metadata (stringified JSON object)",
          required: false,
        },
        {
          name: "prompt_token_max",
          type: "number",
          description: "Maximum number of prompt tokens",
          required: false,
        },
        {
          name: "prompt_token_min",
          type: "number",
          description: "Minimum number of prompt tokens",
          required: false,
        },
        {
          name: "span_id",
          type: "string",
          description: "Filter by span IDs (comma-separated)",
          required: false,
        },
        {
          name: "status_code",
          type: "string",
          description: "Filter by specific HTTP status codes (comma-separated)",
          required: false,
        },
        {
          name: "time_of_generation_max",
          type: "string",
          description:
            "End time for the analytics period (ISO8601 format, e.g., '2024-02-01T00:00:00Z')",
          required: true,
        },
        {
          name: "time_of_generation_min",
          type: "string",
          description:
            "Start time for the analytics period (ISO8601 format, e.g., '2024-01-01T00:00:00Z')",
          required: true,
        },
        {
          name: "total_units_max",
          type: "number",
          description: "Maximum number of total tokens to filter by",
          required: false,
        },
        {
          name: "total_units_min",
          type: "number",
          description: "Minimum number of total tokens to filter by",
          required: false,
        },
        {
          name: "trace_id",
          type: "string",
          description: "Filter by trace IDs (comma-separated)",
          required: false,
        },
        {
          name: "virtual_keys",
          type: "string",
          description: "Filter by specific virtual key slugs (comma-separated)",
          required: false,
        },
        {
          name: "weighted_feedback_max",
          type: "number",
          description: "Maximum weighted feedback score (-10 to 10)",
          required: false,
        },
        {
          name: "weighted_feedback_min",
          type: "number",
          description: "Minimum weighted feedback score (-10 to 10)",
          required: false,
        },
        {
          name: "workspace_slug",
          type: "string",
          description: "Filter by specific workspace",
          required: false,
        },
      ],
    },
    {
      name: "get_config",
      description:
        "Retrieve detailed information about a specific configuration, including cache settings, retry policies, and routing strategy",
      parameters: [
        {
          name: "slug",
          type: "string",
          description:
            "The unique identifier (slug) of the configuration to retrieve. This can be found in the configuration's URL or from the list_configs tool response",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/r-huijts/portkey-admin-mcp-server",
  _varName: "portkeyMcpServerPlugin",
};

const ollamaMcpServer1Plugin: Plugin = {
  id: "n798ehuw4c",
  name: "Ollama MCP Server",
  description:
    "Enables seamless integration between Ollama's local LLM models and MCP-compatible applications, supporting model management and chat interactions.",
  image: "https://github.com/rawveg.png",
  actions: [],
  githubUrl: "https://github.com/rawveg/ollama-mcp",
  _varName: "ollamaMcpServer1Plugin",
};

const scryfallMcpServerPlugin: Plugin = {
  id: "jdaj6hj69s",
  name: "Scryfall MCP Server",
  description:
    "Enables interaction with the Scryfall API, allowing users to search for Magic: The Gathering card details, retrieve card rulings, and access pricing information using the Model Context Protocol.",
  image: "https://github.com/cryppadotta.png",
  actions: [
    {
      name: "random_card",
      description:
        "Retrieve a random Magic card from Scryfall. Returns JSON data for that random card.",
      parameters: [],
    },
    {
      name: "get_rulings",
      description:
        "Retrieve official rulings for a specified card by Scryfall ID or Oracle ID. Returns an array of rulings. Each ruling has a 'published_at' date and a 'comment' field.",
      parameters: [
        {
          name: "id",
          type: "string",
          description:
            "A Scryfall ID or Oracle ID. Example: 'c09c71fb-7acb-4ffb-a47b-8961a0cf4990'",
          required: true,
        },
      ],
    },
    {
      name: "search_cards",
      description:
        "Search for MTG cards by a text query, e.g. 'oracle text includes: draw cards'. Returns a list of matching cards (with basic fields: name, set, collector_number, ID). If no matches are found, returns an error message from Scryfall.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "A full text query, e.g. 't:goblin pow=2 o:haste'",
          required: true,
        },
      ],
    },
    {
      name: "get_card_by_id",
      description:
        "Retrieve a card by its Scryfall ID (a 36-char UUID). Returns the card data in JSON.",
      parameters: [
        {
          name: "id",
          type: "string",
          description:
            "The Scryfall UUID, e.g. 'c09c71fb-7acb-4ffb-a47b-8961a0cf4990'",
          required: true,
        },
      ],
    },
    {
      name: "get_card_by_name",
      description:
        "Retrieve a card by its exact English name, e.g. 'Black Lotus'. Returns the card data in JSON. If multiple cards share that exact name, Scryfall returns one (usually the most relevant printing).",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Exact name of the card, e.g. 'Lightning Bolt'",
          required: true,
        },
      ],
    },
    {
      name: "get_prices_by_id",
      description:
        "Retrieve price information for a card by its Scryfall ID. Returns JSON with usd, usd_foil, eur, tix, etc.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Scryfall ID of the card",
          required: true,
        },
      ],
    },
    {
      name: "get_prices_by_name",
      description:
        "Retrieve price information for a card by its exact name. Returns JSON with usd, usd_foil, eur, tix, etc.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Exact card name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cryppadotta/scryfall-mcp",
  _varName: "scryfallMcpServerPlugin",
};

const mcpServerWeaviatePlugin: Plugin = {
  id: "muiet9gmdv",
  name: "MCP Server Weaviate",
  description:
    "The MCP Server for Weaviate facilitates integration with Weaviate using a customizable Python-based server, enabling interaction with Weaviate databases and OpenAI APIs via configurable URL and API keys.",
  image: "https://github.com/weaviate.png",
  actions: [],
  githubUrl: "https://github.com/weaviate/mcp-server-weaviate",
  _varName: "mcpServerWeaviatePlugin",
};

const mcpSeleniumPlugin: Plugin = {
  id: "s2em7b2kwf",
  name: "MCP Selenium",
  description:
    "Enables browser automation using the Selenium WebDriver through MCP, supporting browser management, element location, and both basic and advanced user interactions.",
  image: "https://github.com/angiejones.png",
  actions: [],
  githubUrl: "https://github.com/angiejones/mcp-selenium",
  _varName: "mcpSeleniumPlugin",
};

const searchMcpServerPlugin: Plugin = {
  id: "x9pd5cqiyx",
  name: "Search MCP Server",
  description:
    "The Search MCP Server enables seamless integration of network and local search capabilities in tools like Claude Desktop and Cursor, utilizing the Brave Search API for high-concurrency and asynchronous requests.",
  image: "https://github.com/fengin.png",
  actions: [
    {
      name: "search",
      description:
        "执行网页搜索，从全网搜索任何网页信息和网页链接。结果准确、摘要完整，更适合AI使用。支持以下特性：\n- 时间范围过滤\n- 显示详细摘要\n- 分页获取\n每次请求最多返回10个结果。（当前使用博查搜索API实现）",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "结果数量(1-10，默认10)",
          required: false,
        },
        {
          name: "freshness",
          type: "string",
          description:
            "时间范围(noLimit:不限, oneDay:一天内, oneWeek:一周内, oneMonth:一月内, oneYear:一年内)",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "页码，从1开始",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "搜索查询内容",
          required: true,
        },
        {
          name: "summary",
          type: "boolean",
          description: "是否显示详细摘要",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/fengin/search-server",
  _varName: "searchMcpServerPlugin",
};

const perplexityAiMcpServer1Plugin: Plugin = {
  id: "s053f29pye",
  name: "Perplexity AI MCP Server",
  description:
    "This server provides access to the Perplexity AI API, enabling interaction through chatting, searching, and documentation retrieval within MCP-based systems.",
  image: "https://github.com/fr0ziii.png",
  actions: [
    {
      name: "chat_perplexity",
      description:
        "Maintains ongoing conversations with Perplexity AI. Creates new chats or continues existing ones with full history context.",
      parameters: [
        {
          name: "chat_id",
          type: "string",
          description:
            "Optional: ID of an existing chat to continue. If not provided, a new chat will be created.",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "The message to send to Perplexity AI",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description:
        "Perform a general search query to get comprehensive information on any topic",
      parameters: [
        {
          name: "detail_level",
          type: "string",
          description:
            "Optional: Desired level of detail (brief, normal, detailed)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query or question",
          required: true,
        },
      ],
    },
    {
      name: "get_documentation",
      description:
        "Get documentation and usage examples for a specific technology, library, or API",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context or specific aspects to focus on",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "The technology, library, or API to get documentation for",
          required: true,
        },
      ],
    },
    {
      name: "find_apis",
      description:
        "Find and evaluate APIs that could be integrated into a project",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context about the project or specific needs",
          required: false,
        },
        {
          name: "requirement",
          type: "string",
          description:
            "The functionality or requirement you're looking to fulfill",
          required: true,
        },
      ],
    },
    {
      name: "check_deprecated_code",
      description:
        "Check if code or dependencies might be using deprecated features",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "The code snippet or dependency to check",
          required: true,
        },
        {
          name: "technology",
          type: "string",
          description:
            "The technology or framework context (e.g., 'React', 'Node.js')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/fr0ziii/perplexity-mcp-server",
  _varName: "perplexityAiMcpServer1Plugin",
};

const headlineVibesAnalysisMcpServerPlugin: Plugin = {
  id: "jkojbe4jve",
  name: "Headline Vibes Analysis MCP Server",
  description:
    "Analyzes sentiment in news headlines from major US publications using both standard and natural language date inputs, enabling insights into public sentiment trends.",
  image: "https://github.com/fred-em.png",
  actions: [
    {
      name: "analyze_headlines",
      description:
        "Analyze sentiment of major news headlines using natural language date input",
      parameters: [
        {
          name: "input",
          type: "string",
          description:
            'Date input (e.g., "yesterday", "last Friday", "March 10th", or "2025-02-11")',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/fred-em/headline-vibes",
  _varName: "headlineVibesAnalysisMcpServerPlugin",
};

const brevoMcpPlugin: Plugin = {
  id: "4ee67u5egx",
  name: "Brevo MCP",
  description:
    "A TypeScript server enabling integration with the Brevo (Sendinblue) API for managing contacts, sending emails, and tracking email events in multi-channel applications like Claude Desktop.",
  image: "https://github.com/apicolet.png",
  actions: [],
  githubUrl: "https://github.com/apicolet/brevo-mcp",
  _varName: "brevoMcpPlugin",
};

const mcpExcelReaderPlugin: Plugin = {
  id: "jr2ggpdk3a",
  name: "MCP Excel Reader",
  description:
    "Provides efficient handling of large Excel files through automatic chunking and pagination, using MCP to enable seamless file reading and management features such as sheet selection and error handling.",
  image: "https://github.com/ArchimedesCrypto.png",
  actions: [
    {
      name: "read_excel",
      description:
        "Read an Excel file and return its contents as structured data",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the Excel file to read",
          required: true,
        },
        {
          name: "maxRows",
          type: "number",
          description: "Maximum number of rows to read (optional)",
          required: false,
        },
        {
          name: "sheetName",
          type: "string",
          description: "Name of the sheet to read (optional)",
          required: false,
        },
        {
          name: "startRow",
          type: "number",
          description: "Starting row index (optional)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ArchimedesCrypto/excel-reader-mcp",
  _varName: "mcpExcelReaderPlugin",
};

const mcpanyopenapiPlugin: Plugin = {
  id: "uxugly3ixf",
  name: "mcp-any-openapi",
  description:
    "A Python-based MCP server that integrates OpenAPI-described REST APIs into MCP workflows, enabling dynamic exposure of API endpoints as MCP tools.",
  image: "https://github.com/matthewhand.png",
  actions: [
    {
      name: "list_functions",
      description:
        "\n    Lists available functions (API endpoints) defined in the OpenAPI specification.\n\n    Returns:\n        A JSON-encoded string of available function descriptions, or an error message if configuration is missing.\n    ",
      parameters: [],
    },
    {
      name: "call_function",
      description:
        '\n    Calls a specified API function (an endpoint defined in the OpenAPI spec) with parameters.\n\n    Args:\n        function_name (str): The name of the API function to call (e.g., "GET /pets").\n        parameters (dict, optional): Parameters for the API call (query parameters, request body, etc.).\n\n    Returns:\n        The raw API response as a JSON-encoded string or an error message.\n    ',
      parameters: [
        {
          name: "function_name",
          type: "string",
          description: "Parameter: function_name",
          required: true,
        },
        {
          name: "parameters",
          type: "object",
          description: "Parameter: parameters",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/matthewhand/mcp-openapi-proxy",
  _varName: "mcpanyopenapiPlugin",
};

const pulsemcpServerPlugin: Plugin = {
  id: "pprxunng2s",
  name: "PulseMCP Server",
  description:
    "PulseMCP Server is a TypeScript-based MCP server that implements a simple notes system, allowing users to create, access, and summarize text notes through Model Context Protocol with URI-based resource management and LLM summarization prompts.",
  image: "https://github.com/orliesaurus.png",
  actions: [
    {
      name: "list_servers",
      description: "List MCP servers with optional filtering",
      parameters: [
        {
          name: "count_per_page",
          type: "number",
          description: "Number of results per page (maximum: 5000)",
          required: false,
        },
        {
          name: "integrations",
          type: "string array",
          description: "Filter by integration slugs",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of results to skip for pagination",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search term to filter servers",
          required: false,
        },
      ],
    },
    {
      name: "list_integrations",
      description: "List all available integrations",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/orliesaurus/pulsemcp-server",
  _varName: "pulsemcpServerPlugin",
};

const perplexityMcpServer2Plugin: Plugin = {
  id: "jmwpwn6uqh",
  name: "Perplexity MCP Server",
  description:
    "advance mcp server utilizing Perplexity, without the need for an API key",
  image: "https://github.com/wysh3.png",
  actions: [],
  githubUrl: "https://github.com/wysh3/perplexity-mcp-zerver",
  _varName: "perplexityMcpServer2Plugin",
};

const novuMcpServerPlugin: Plugin = {
  id: "89nc3dt35d",
  name: "Novu MCP Server",
  description:
    "Enables AI agents to interact with Novu's notification system, facilitating operations like sending notifications, managing subscribers, and organizing topics.",
  image: "https://github.com/novuhq.png",
  actions: [],
  githubUrl: "https://github.com/novuhq/smithery-mcp",
  _varName: "novuMcpServerPlugin",
};

const mcpServerTemplateForCursorIde3Plugin: Plugin = {
  id: "85awdn6qjl",
  name: "MCP Server Template for Cursor IDE",
  description:
    "A simple template for creating custom tools for Cursor IDE using Model Context Protocol, deployable via Heroku, Docker, or directly within Cursor IDE.",
  image: "https://github.com/chrisboden.png",
  actions: [
    {
      name: "mcp_fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "mood",
      description: "Ask the server about its mood - it's always happy!",
      parameters: [
        {
          name: "question",
          type: "string",
          description:
            "Ask this MCP server about its mood! You can phrase your question in any way you like - 'How are you?', 'What's your mood?', or even 'Are you having a good day?'. The server will always respond with a cheerful message and a heart ❤️",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/chrisboden/mcp_template",
  _varName: "mcpServerTemplateForCursorIde3Plugin",
};

const mcpServerStarterPlugin: Plugin = {
  id: "rlkcxdr2y9",
  name: "MCP Server Starter",
  description:
    "A TypeScript-based template for building Model Context Protocol servers, featuring fast testing, automated version management, and a clean structure for MCP tool implementations.",
  image: "https://github.com/GreatAuk.png",
  actions: [
    {
      name: "hello_tool",
      description: "Hello tool",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the person to greet",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/GreatAuk/mcp-weather",
  _varName: "mcpServerStarterPlugin",
};

const mcpllmstxtPlugin: Plugin = {
  id: "kqwhhpe8l7",
  name: "MCP-llms-txt",
  description:
    "MCP server for SecretiveShell/Awesome-llms-txt. Add documentation directly into your conversation via MCP resources.",
  image: "https://github.com/SecretiveShell.png",
  actions: [],
  githubUrl: "https://github.com/SecretiveShell/MCP-llms-txt",
  _varName: "mcpllmstxtPlugin",
};

const ghostMcpServerPlugin: Plugin = {
  id: "vor63xn7ky",
  name: "Ghost MCP Server",
  description:
    "Enables interaction with Ghost CMS via LLM interfaces, providing secure access through JWT authentication for managing posts, users, and newsletters with detailed output and error handling.",
  image: "https://github.com/MFYDev.png",
  actions: [
    {
      name: "batchly_update_post",
      description:
        'Update multiple blog posts that match the filter criteria.\n    \n    Args:\n        filter_criteria: Dictionary containing fields to filter posts by, example:\n            {\n                "status": "draft",\n                "tag": "news",\n                "featured": True\n            }\n            Supported filter fields:\n            - status: Post status (draft, published, etc)\n            - tag: Filter by tag name\n            - author: Filter by author name\n            - featured: Boolean to filter featured posts\n            - visibility: Post visibility (public, members, paid)\n            \n        update_data: Dictionary containing the fields to update. The updated_at field is required.\n                    All fields supported by the Ghost API can be updated:\n                    - slug: Unique URL slug for the post\n                    - title: The title of the post\n                    - lexical: JSON string representing the post content in lexical format\n                    - html: HTML version of the post content\n                    - comment_id: Identifier for the comment thread\n                    - feature_image: URL to the post\'s feature image\n                    - feature_image_alt: Alternate text for the feature image\n                    - feature_image_caption: Caption for the feature image\n                    - featured: Boolean flag indicating if the post is featured\n                    - status: The publication status (e.g., published, draft)\n                    - visibility: Visibility setting (e.g., public, private)\n                    - created_at: Timestamp when the post was created\n                    - updated_at: Timestamp when the post was last updated (REQUIRED)\n                    - published_at: Timestamp when the post was published\n                    - custom_excerpt: Custom excerpt text for the post\n                    - codeinjection_head: Code to be injected into the head section\n                    - codeinjection_foot: Code to be injected into the footer section\n                    - custom_template: Custom template assigned to the post\n                    - canonical_url: The canonical URL for SEO purposes\n                    - tags: List of tag objects associated with the post\n                    - authors: List of author objects for the post\n                    - primary_author: The primary author object\n                    - primary_tag: The primary tag object\n                    - og_image: Open Graph image URL for social sharing\n                    - og_title: Open Graph title for social sharing\n                    - og_description: Open Graph description for social sharing\n                    - twitter_image: Twitter-specific image URL\n                    - twitter_title: Twitter-specific title\n                    - twitter_description: Twitter-specific description\n                    - meta_title: Meta title for SEO\n                    - meta_description: Meta description for SEO\n                    - email_only: Boolean flag indicating if the post is for email distribution only\n                    - newsletter: Dictionary containing newsletter configuration details\n                    - email: Dictionary containing email details related to the post\n\n                    Example:\n                    {\n                        "updated_at": "2025-02-11T22:54:40.000Z",\n                        "status": "published",\n                        "featured": True,\n                        "tags": [{"name": "news"}, {"name": "featured"}],\n                        "meta_title": "My Updated Title",\n                        "og_description": "New social sharing description"\n                    }\n        ctx: Optional context for logging\n        \n    Returns:\n        Formatted string containing summary of updated posts\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API or missing required fields\n    ',
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Parameter: filter_criteria",
          required: true,
        },
        {
          name: "update_data",
          type: "object",
          description: "Parameter: update_data",
          required: true,
        },
      ],
    },
    {
      name: "browse_tags",
      description:
        'Get the list of tags from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of tags per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing tag information\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "create_invite",
      description:
        "Create a staff user invite in Ghost.\n    \n    Args:\n        role_id: ID of the role to assign to the invited user (required)\n        email: Email address to send the invite to (required)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the created invite\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If required parameters are missing or invalid\n    ",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: true,
        },
        {
          name: "role_id",
          type: "string",
          description: "Parameter: role_id",
          required: true,
        },
      ],
    },
    {
      name: "create_member",
      description:
        "Create a new member in Ghost.\n    \n    Args:\n        email: Member's email address (required)\n        name: Member's name (optional)\n        note: Notes about the member (optional)\n        labels: List of labels to apply to the member. Each label should be a dict with 'name' and 'slug' (optional)\n        newsletter_ids: List of newsletter IDs to subscribe the member to (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the created member\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If required parameters are missing or invalid\n    ",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: true,
        },
        {
          name: "labels",
          type: "array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "newsletter_ids",
          type: "array",
          description: "Parameter: newsletter_ids",
          required: false,
        },
        {
          name: "note",
          type: "string",
          description: "Parameter: note",
          required: false,
        },
      ],
    },
    {
      name: "list_posts",
      description:
        'Get the list of posts from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of posts per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing post information\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "create_newsletter",
      description:
        'Create a new newsletter.\n    \n    Args:\n        name: Name of the newsletter (required)\n        description: Newsletter description\n        status: Newsletter status ("active" or "archived")\n        subscribe_on_signup: Whether to subscribe new members automatically\n        opt_in_existing: Whether to subscribe existing members\n        sender_reply_to: Reply-to setting ("newsletter" or "support")\n        show_header_icon: Whether to show header icon\n        show_header_title: Whether to show header title\n        show_header_name: Whether to show header name\n        show_feature_image: Whether to show feature image\n        title_font_category: Font category for titles\n        title_alignment: Title alignment\n        body_font_category: Font category for body text\n        show_badge: Whether to show badge\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing the created newsletter details\n    ',
      parameters: [
        {
          name: "body_font_category",
          type: "string",
          description: "Parameter: body_font_category",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "opt_in_existing",
          type: "boolean",
          description: "Parameter: opt_in_existing",
          required: false,
        },
        {
          name: "sender_reply_to",
          type: "string",
          description: "Parameter: sender_reply_to",
          required: false,
        },
        {
          name: "show_badge",
          type: "boolean",
          description: "Parameter: show_badge",
          required: false,
        },
        {
          name: "show_feature_image",
          type: "boolean",
          description: "Parameter: show_feature_image",
          required: false,
        },
        {
          name: "show_header_icon",
          type: "boolean",
          description: "Parameter: show_header_icon",
          required: false,
        },
        {
          name: "show_header_name",
          type: "boolean",
          description: "Parameter: show_header_name",
          required: false,
        },
        {
          name: "show_header_title",
          type: "boolean",
          description: "Parameter: show_header_title",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "subscribe_on_signup",
          type: "boolean",
          description: "Parameter: subscribe_on_signup",
          required: false,
        },
        {
          name: "title_alignment",
          type: "string",
          description: "Parameter: title_alignment",
          required: false,
        },
        {
          name: "title_font_category",
          type: "string",
          description: "Parameter: title_font_category",
          required: false,
        },
      ],
    },
    {
      name: "create_offer",
      description:
        "Create a new offer in Ghost.\n    \n    Args:\n        name: Internal name for the offer (required)\n        code: Shortcode for the offer (required)\n        type: Either 'percent' or 'fixed' (required)\n        cadence: Either 'month' or 'year' (required)\n        amount: Discount amount - percentage or fixed value (required)\n        tier_id: ID of the tier to apply offer to (required)\n        duration: Either 'once', 'forever' or 'repeating' (required)\n        display_title: Name displayed in the offer window (optional)\n        display_description: Text displayed in the offer window (optional) \n        currency: Required when type is 'fixed', must match tier's currency (optional)\n        duration_in_months: Required when duration is 'repeating' (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the created offer\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If required parameters are missing or invalid\n    ",
      parameters: [
        {
          name: "amount",
          type: "integer",
          description: "Parameter: amount",
          required: true,
        },
        {
          name: "cadence",
          type: "string",
          description: "Parameter: cadence",
          required: true,
        },
        {
          name: "code",
          type: "string",
          description: "Parameter: code",
          required: true,
        },
        {
          name: "currency",
          type: "string",
          description: "Parameter: currency",
          required: false,
        },
        {
          name: "display_description",
          type: "string",
          description: "Parameter: display_description",
          required: false,
        },
        {
          name: "display_title",
          type: "string",
          description: "Parameter: display_title",
          required: false,
        },
        {
          name: "duration",
          type: "string",
          description: "Parameter: duration",
          required: true,
        },
        {
          name: "duration_in_months",
          type: "integer",
          description: "Parameter: duration_in_months",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "tier_id",
          type: "string",
          description: "Parameter: tier_id",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
    {
      name: "create_post",
      description:
        'Create a new blog post.\n    \n    Args:\n        post_data: Dictionary containing post data with required fields:\n            - title: The title of the post \n            - lexical: The lexical content as a JSON string\n            Additional optional fields:\n            - status: Post status (\'draft\' or \'published\', defaults to \'draft\')\n            - tags: List of tags\n            - authors: List of authors\n            - feature_image: URL of featured image\n            \n            Example:\n            {\n                "title": "My test post",\n                "lexical": "{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Hello World","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}"\n                "status": "draft",\n            }\n            \n        ctx: Optional context for logging\n\n    Returns:\n        Formatted string containing the created post details\n\n    Raises:\n        GhostError: If there is an error accessing the Ghost API or invalid post data\n    ',
      parameters: [
        {
          name: "post_data",
          type: "object",
          description: "Parameter: post_data",
          required: true,
        },
      ],
    },
    {
      name: "create_tag",
      description:
        'Create a new tag.\n    \n    Args:\n        tag_data: Dictionary containing tag data with required fields:\n            - name: The name of the tag\n            Additional optional fields:\n            - slug: URL slug for the tag\n            - description: Description of the tag\n            - feature_image: URL to the tag\'s feature image\n            - visibility: Tag visibility (\'public\' or \'internal\')\n            - accent_color: CSS color hex value for the tag\n            - meta_title: Meta title for SEO\n            - meta_description: Meta description for SEO\n            - canonical_url: The canonical URL\n            - og_image: Open Graph image URL\n            - og_title: Open Graph title\n            - og_description: Open Graph description\n            - twitter_image: Twitter card image URL\n            - twitter_title: Twitter card title\n            - twitter_description: Twitter card description\n            - codeinjection_head: Code to inject in header\n            - codeinjection_foot: Code to inject in footer\n            \n            Example:\n            {\n                "name": "Technology",\n                "description": "Posts about technology",\n                "visibility": "public"\n            }\n            \n        ctx: Optional context for logging\n\n    Returns:\n        Formatted string containing the created tag details\n\n    Raises:\n        GhostError: If there is an error accessing the Ghost API or invalid tag data\n    ',
      parameters: [
        {
          name: "tag_data",
          type: "object",
          description: "Parameter: tag_data",
          required: true,
        },
      ],
    },
    {
      name: "create_tier",
      description:
        'Create a new tier in Ghost.\n    \n    Args:\n        name: Name of the tier (required)\n        monthly_price: Optional monthly price in cents (e.g. 500 for $5.00)\n        yearly_price: Optional yearly price in cents (e.g. 5000 for $50.00)\n        description: Optional description of the tier\n        benefits: Optional list of benefits for the tier\n        welcome_page_url: Optional URL for the welcome page\n        visibility: Visibility of tier, either "public" or "none" (default: "public")\n        currency: Currency for prices (default: "usd")\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the created tier\n\n    Raises:\n        GhostError: If the Ghost API request fails\n    ',
      parameters: [
        {
          name: "benefits",
          type: "string",
          description: "Parameter: benefits",
          required: false,
        },
        {
          name: "currency",
          type: "string",
          description: "Parameter: currency",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "monthly_price",
          type: "string",
          description: "Parameter: monthly_price",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "visibility",
          type: "string",
          description: "Parameter: visibility",
          required: false,
        },
        {
          name: "welcome_page_url",
          type: "string",
          description: "Parameter: welcome_page_url",
          required: false,
        },
        {
          name: "yearly_price",
          type: "string",
          description: "Parameter: yearly_price",
          required: false,
        },
      ],
    },
    {
      name: "create_webhook",
      description:
        "Create a new webhook in Ghost.\n    \n    Args:\n        event: Event to trigger the webhook (required)\n        target_url: URL to send the webhook to (required)\n        integration_id: ID of the integration (optional - only needed for user authentication)\n        name: Name of the webhook (optional)\n        secret: Secret for the webhook (optional)\n        api_version: API version for the webhook (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the created webhook\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If required parameters are missing or invalid\n    ",
      parameters: [
        {
          name: "api_version",
          type: "string",
          description: "Parameter: api_version",
          required: false,
        },
        {
          name: "event",
          type: "string",
          description: "Parameter: event",
          required: true,
        },
        {
          name: "integration_id",
          type: "string",
          description: "Parameter: integration_id",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "secret",
          type: "string",
          description: "Parameter: secret",
          required: false,
        },
        {
          name: "target_url",
          type: "string",
          description: "Parameter: target_url",
          required: true,
        },
      ],
    },
    {
      name: "delete_post",
      description:
        "Delete a blog post.\n    \n    Args:\n        post_id: The ID of the post to delete\n        ctx: Optional context for logging\n        \n    Returns:\n        Success message if post was deleted\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API or the post doesn't exist\n    ",
      parameters: [
        {
          name: "post_id",
          type: "string",
          description: "Parameter: post_id",
          required: true,
        },
      ],
    },
    {
      name: "delete_tag",
      description:
        "Delete a tag.\n    \n    Args:\n        tag_id: The ID of the tag to delete\n        ctx: Optional context for logging\n        \n    Returns:\n        Success message if tag was deleted\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API or the tag doesn't exist\n    ",
      parameters: [
        {
          name: "tag_id",
          type: "string",
          description: "Parameter: tag_id",
          required: true,
        },
      ],
    },
    {
      name: "delete_user",
      description:
        "Delete a user from Ghost.\n    \n    Args:\n        user_id: ID of the user to delete (required)\n        ctx: Optional context for logging\n    \n    Returns:\n        Success message if deletion was successful\n\n    Raises:\n        GhostError: If the Ghost API request fails or if attempting to delete the Owner\n        ValueError: If user_id is not provided\n    ",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter: user_id",
          required: true,
        },
      ],
    },
    {
      name: "delete_webhook",
      description:
        "Delete a webhook from Ghost.\n    \n    Args:\n        webhook_id: ID of the webhook to delete (required)\n        ctx: Optional context for logging\n    \n    Returns:\n        Success message if deletion was successful\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If webhook_id is not provided\n    ",
      parameters: [
        {
          name: "webhook_id",
          type: "string",
          description: "Parameter: webhook_id",
          required: true,
        },
      ],
    },
    {
      name: "get_auth_headers",
      description:
        "Get authenticated headers for Ghost API requests.\n    \n    Args:\n        staff_api_key: API key in 'id:secret' format\n        api_version: Ghost API version to use (default: v5.109)\n        \n    Returns:\n        Dictionary of request headers including authorization and version\n        \n    Example:\n        >>> headers = await get_auth_headers(\"1234:abcd5678\")\n        >>> headers\n        {\n            'Authorization': 'Ghost eyJ0eXAiOiJKV1...',\n            'Accept-Version': 'v5.109'\n        }\n    ",
      parameters: [
        {
          name: "api_version",
          type: "string",
          description: "Parameter: api_version",
          required: false,
        },
        {
          name: "staff_api_key",
          type: "string",
          description: "Parameter: staff_api_key",
          required: true,
        },
      ],
    },
    {
      name: "get_close_matches",
      description:
        'Use SequenceMatcher to return list of the best "good enough" matches.\n\n    word is a sequence for which close matches are desired (typically a\n    string).\n\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don\'t score at least that similar to word are ignored.\n\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n\n    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])\n    [\'apple\', \'ape\']\n    >>> import keyword as _keyword\n    >>> get_close_matches("wheel", _keyword.kwlist)\n    [\'while\']\n    >>> get_close_matches("Apple", _keyword.kwlist)\n    []\n    >>> get_close_matches("accept", _keyword.kwlist)\n    [\'except\']\n    ',
      parameters: [
        {
          name: "cutoff",
          type: "string",
          description: "Parameter: cutoff",
          required: false,
        },
        {
          name: "n",
          type: "string",
          description: "Parameter: n",
          required: false,
        },
        {
          name: "possibilities",
          type: "string",
          description: "Parameter: possibilities",
          required: true,
        },
        {
          name: "word",
          type: "string",
          description: "Parameter: word",
          required: true,
        },
      ],
    },
    {
      name: "import_module",
      description:
        "Import a module.\n\n    The 'package' argument is required when performing a relative import. It\n    specifies the package to use as the anchor point from which to resolve the\n    relative import to an absolute import.\n\n    ",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "package",
          type: "string",
          description: "Parameter: package",
          required: false,
        },
      ],
    },
    {
      name: "list_members",
      description:
        'Get the list of members from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of members per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing member information\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "list_newsletters",
      description:
        'Get the list of newsletters from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of newsletters per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing newsletter information\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "list_offers",
      description:
        'Get the list of offers from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of offers per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing offer information\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "list_roles",
      description:
        'Get the list of roles from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of roles per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing role information\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "list_tiers",
      description:
        'Get the list of tiers from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of tiers per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing tier information\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "list_users",
      description:
        'Get the list of users from your Ghost blog.\n    \n    Args:\n        format: Output format - either "text" or "json" (default: "text")\n        page: Page number for pagination (default: 1)\n        limit: Number of users per page (default: 15)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing user information\n    ',
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Parameter: page",
          required: false,
        },
      ],
    },
    {
      name: "make_ghost_request",
      description:
        'Make an authenticated request to the Ghost API.\n    \n    Args:\n        endpoint: API endpoint to call (e.g. "posts" or "users")\n        headers: Request headers from get_auth_headers()\n        ctx: Optional context for logging (not used for resources)\n        is_resource: Whether this request is for a resource\n        http_method: HTTP method to use (GET, POST, PUT, or DELETE)\n        json_data: Optional JSON data for POST/PUT requests\n        \n    Returns:\n        Parsed JSON response from the Ghost API\n        \n    Raises:\n        GhostError: For any Ghost API errors including:\n            - Network connectivity issues\n            - Invalid authentication\n            - Rate limiting\n            - Server errors\n        ValueError: For invalid HTTP methods\n        \n    Example:\n        >>> headers = await get_auth_headers("1234:abcd5678")\n        >>> response = await make_ghost_request(\n        ...     "posts",\n        ...     headers,\n        ...     http_method=GET\n        ... )\n    ',
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: false,
        },
        {
          name: "endpoint",
          type: "string",
          description: "Parameter: endpoint",
          required: true,
        },
        {
          name: "headers",
          type: "object",
          description: "Parameter: headers",
          required: true,
        },
        {
          name: "http_method",
          type: "string",
          description: "Parameter: http_method",
          required: false,
        },
        {
          name: "is_resource",
          type: "boolean",
          description: "Parameter: is_resource",
          required: false,
        },
        {
          name: "json_data",
          type: "string",
          description: "Parameter: json_data",
          required: false,
        },
      ],
    },
    {
      name: "read_member",
      description:
        "Get the details of a specific member.\n  \n    Args:\n        member_id: The ID of the member to retrieve\n        ctx: Optional context for logging\n      \n    Returns:\n        Formatted string containing the member details\n    ",
      parameters: [
        {
          name: "member_id",
          type: "string",
          description: "Parameter: member_id",
          required: true,
        },
      ],
    },
    {
      name: "read_newsletter",
      description:
        "Get the details of a specific newsletter.\n  \n    Args:\n        newsletter_id: The ID of the newsletter to retrieve\n        ctx: Optional context for logging\n      \n    Returns:\n        Formatted string containing the newsletter details\n    ",
      parameters: [
        {
          name: "newsletter_id",
          type: "string",
          description: "Parameter: newsletter_id",
          required: true,
        },
      ],
    },
    {
      name: "read_offer",
      description:
        "Get the details of a specific offer.\n  \n    Args:\n        offer_id: The ID of the offer to retrieve\n        ctx: Optional context for logging\n      \n    Returns:\n        Formatted string containing the offer details\n    ",
      parameters: [
        {
          name: "offer_id",
          type: "string",
          description: "Parameter: offer_id",
          required: true,
        },
      ],
    },
    {
      name: "read_post",
      description:
        "Get the full content and metadata of a specific blog post.\n    \n    Args:\n        post_id: The ID of the post to retrieve\n        ctx: Optional context for logging\n        \n    Returns:\n        Formatted string containing all post details including:\n        - Basic info (title, slug, status, etc)\n        - Content in both HTML and Lexical formats\n        - Feature image details\n        - Meta fields (SEO, Open Graph, Twitter)\n        - Authors and tags\n        - Email settings\n        - Timestamps\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API\n    ",
      parameters: [
        {
          name: "post_id",
          type: "string",
          description: "Parameter: post_id",
          required: true,
        },
      ],
    },
    {
      name: "read_tag",
      description:
        "Get the full metadata of a specific tag.\n    \n    Args:\n        tag_id: The ID of the tag to retrieve\n        ctx: Optional context for logging\n        \n    Returns:\n        Formatted string containing all tag details\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API\n    ",
      parameters: [
        {
          name: "tag_id",
          type: "string",
          description: "Parameter: tag_id",
          required: true,
        },
      ],
    },
    {
      name: "read_tier",
      description:
        "Get the details of a specific tier.\n  \n    Args:\n        tier_id: The ID of the tier to retrieve\n        ctx: Optional context for logging\n      \n    Returns:\n        Formatted string containing the tier details\n    ",
      parameters: [
        {
          name: "tier_id",
          type: "string",
          description: "Parameter: tier_id",
          required: true,
        },
      ],
    },
    {
      name: "read_user",
      description:
        "Get the details of a specific user.\n  \n    Args:\n        user_id: The ID of the user to retrieve\n        ctx: Optional context for logging\n      \n    Returns:\n        Formatted string containing the user details\n    ",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Parameter: user_id",
          required: true,
        },
      ],
    },
    {
      name: "search_posts_by_title",
      description:
        "Search for posts by title.\n    \n    Args:\n        query: The title or part of the title to search for\n        exact: If True, only return exact matches (default: False)\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing matching post information\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API\n    ",
      parameters: [
        {
          name: "exact",
          type: "boolean",
          description: "Parameter: exact",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "update_member",
      description:
        "Update an existing member in Ghost.\n    \n    Args:\n        member_id: ID of the member to update (required)\n        email: New email address for the member (optional)\n        name: New name for the member (optional)\n        note: New notes about the member (optional)\n        labels: New list of labels. Each label should be a dict with 'name' and 'slug' (optional)\n        newsletter_ids: New list of newsletter IDs to subscribe the member to (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the updated member\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If no fields to update are provided\n    ",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: false,
        },
        {
          name: "labels",
          type: "array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "member_id",
          type: "string",
          description: "Parameter: member_id",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "newsletter_ids",
          type: "array",
          description: "Parameter: newsletter_ids",
          required: false,
        },
        {
          name: "note",
          type: "string",
          description: "Parameter: note",
          required: false,
        },
      ],
    },
    {
      name: "update_newsletter",
      description:
        'Update an existing newsletter.\n    \n    Args:\n        newsletter_id: ID of the newsletter to update (required)\n        name: New newsletter name\n        description: New newsletter description\n        sender_name: Name shown in email clients\n        sender_email: Email address newsletters are sent from\n        sender_reply_to: Reply-to setting ("newsletter" or "support")\n        status: Newsletter status ("active" or "archived")\n        subscribe_on_signup: Whether to subscribe new members automatically\n        sort_order: Order in lists\n        header_image: URL of header image\n        show_header_icon: Whether to show header icon\n        show_header_title: Whether to show header title\n        show_header_name: Whether to show header name\n        title_font_category: Font category for titles\n        title_alignment: Title alignment\n        show_feature_image: Whether to show feature image\n        body_font_category: Font category for body text\n        footer_content: Custom footer content\n        show_badge: Whether to show badge\n        ctx: Optional context for logging\n    \n    Returns:\n        Formatted string containing the updated newsletter details\n    ',
      parameters: [
        {
          name: "body_font_category",
          type: "string",
          description: "Parameter: body_font_category",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "footer_content",
          type: "string",
          description: "Parameter: footer_content",
          required: false,
        },
        {
          name: "header_image",
          type: "string",
          description: "Parameter: header_image",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "newsletter_id",
          type: "string",
          description: "Parameter: newsletter_id",
          required: true,
        },
        {
          name: "sender_email",
          type: "string",
          description: "Parameter: sender_email",
          required: false,
        },
        {
          name: "sender_name",
          type: "string",
          description: "Parameter: sender_name",
          required: false,
        },
        {
          name: "sender_reply_to",
          type: "string",
          description: "Parameter: sender_reply_to",
          required: false,
        },
        {
          name: "show_badge",
          type: "boolean",
          description: "Parameter: show_badge",
          required: false,
        },
        {
          name: "show_feature_image",
          type: "boolean",
          description: "Parameter: show_feature_image",
          required: false,
        },
        {
          name: "show_header_icon",
          type: "boolean",
          description: "Parameter: show_header_icon",
          required: false,
        },
        {
          name: "show_header_name",
          type: "boolean",
          description: "Parameter: show_header_name",
          required: false,
        },
        {
          name: "show_header_title",
          type: "boolean",
          description: "Parameter: show_header_title",
          required: false,
        },
        {
          name: "sort_order",
          type: "integer",
          description: "Parameter: sort_order",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "subscribe_on_signup",
          type: "boolean",
          description: "Parameter: subscribe_on_signup",
          required: false,
        },
        {
          name: "title_alignment",
          type: "string",
          description: "Parameter: title_alignment",
          required: false,
        },
        {
          name: "title_font_category",
          type: "string",
          description: "Parameter: title_font_category",
          required: false,
        },
      ],
    },
    {
      name: "update_offer",
      description:
        "Update an existing offer in Ghost.\n    \n    Args:\n        offer_id: ID of the offer to update (required)\n        name: New internal name for the offer (optional)\n        code: New shortcode for the offer (optional)\n        display_title: New name displayed in the offer window (optional)\n        display_description: New text displayed in the offer window (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the updated offer\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If no fields to update are provided\n    ",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Parameter: code",
          required: false,
        },
        {
          name: "display_description",
          type: "string",
          description: "Parameter: display_description",
          required: false,
        },
        {
          name: "display_title",
          type: "string",
          description: "Parameter: display_title",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "offer_id",
          type: "string",
          description: "Parameter: offer_id",
          required: true,
        },
      ],
    },
    {
      name: "update_post",
      description:
        'Update a blog post with new data.\n    \n    Args:\n        post_id: The ID of the post to update\n        update_data: Dictionary containing the updated data and updated_at timestamp.\n                     Note: \'updated_at\' is required. If \'lexical\' is provided, it must be a valid JSON string.\n                     The lexical content must be a properly escaped JSON string in this format:\n                     {\n                       "root": {\n                         "children": [\n                           {\n                             "children": [\n                               {\n                                 "detail": 0,\n                                 "format": 0,\n                                 "mode": "normal",\n                                 "style": "",\n                                 "text": "Your content here",\n                                 "type": "text",\n                                 "version": 1\n                               }\n                             ],\n                             "direction": "ltr",\n                             "format": "",\n                             "indent": 0,\n                             "type": "paragraph",\n                             "version": 1\n                           }\n                         ],\n                         "direction": "ltr",\n                         "format": "",\n                         "indent": 0,\n                         "type": "root",\n                         "version": 1\n                       }\n                     }\n                     \n                     Example usage:\n                     update_data = {\n                         "post_id": "67abcffb7f82ac000179d76f",\n                         "update_data": {\n                            "updated_at": "2025-02-11T22:54:40.000Z",\n                             "lexical": "{"root":{"children":[{"children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Hello World","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"type":"paragraph","version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}"\n                         }\n                     }\n                Updatable fields for a blog post:\n\n                - slug: Unique URL slug for the post.\n                - id: Identifier of the post.\n                - uuid: Universally unique identifier for the post.\n                - title: The title of the post.\n                - lexical: JSON string representing the post content in lexical format.\n                - html: HTML version of the post content.\n                - comment_id: Identifier for the comment thread.\n                - feature_image: URL to the post\'s feature image.\n                - feature_image_alt: Alternate text for the feature image.\n                - feature_image_caption: Caption for the feature image.\n                - featured: Boolean flag indicating if the post is featured.\n                - status: The publication status (e.g., published, draft).\n                - visibility: Visibility setting (e.g., public, private).\n                - created_at: Timestamp when the post was created.\n                - updated_at: Timestamp when the post was last updated.\n                - published_at: Timestamp when the post was published.\n                - custom_excerpt: Custom excerpt text for the post.\n                - codeinjection_head: Code to be injected into the head section.\n                - codeinjection_foot: Code to be injected into the footer section.\n                - custom_template: Custom template assigned to the post.\n                - canonical_url: The canonical URL for SEO purposes.\n                - tags: List of tag objects associated with the post.\n                - authors: List of author objects for the post.\n                - primary_author: The primary author object.\n                - primary_tag: The primary tag object.\n                - url: Direct URL link to the post.\n                - excerpt: Short excerpt or summary of the post.\n                - og_image: Open Graph image URL for social sharing.\n                - og_title: Open Graph title for social sharing.\n                - og_description: Open Graph description for social sharing.\n                - twitter_image: Twitter-specific image URL.\n                - twitter_title: Twitter-specific title.\n                - twitter_description: Twitter-specific description.\n                - meta_title: Meta title for SEO.\n                - meta_description: Meta description for SEO.\n                - email_only: Boolean flag indicating if the post is for email distribution only.\n                - newsletter: Dictionary containing newsletter configuration details.\n                - email: Dictionary containing email details related to the post.\n        ctx: Optional context for logging\n        \n    Returns:\n        Formatted string containing the updated post details\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API or missing required fields\n    ',
      parameters: [
        {
          name: "post_id",
          type: "string",
          description: "Parameter: post_id",
          required: true,
        },
        {
          name: "update_data",
          type: "object",
          description: "Parameter: update_data",
          required: true,
        },
      ],
    },
    {
      name: "update_tag",
      description:
        'Update a tag with new data.\n    \n    Args:\n        tag_id: The ID of the tag to update\n        update_data: Dictionary containing the updated data. Fields that can be updated:\n            - name: The name of the tag\n            - slug: URL slug for the tag\n            - description: Description of the tag\n            - feature_image: URL to the tag\'s feature image\n            - visibility: Tag visibility (\'public\' or \'internal\')\n            - accent_color: CSS color hex value for the tag\n            - meta_title: Meta title for SEO\n            - meta_description: Meta description for SEO\n            - canonical_url: The canonical URL\n            - og_image: Open Graph image URL\n            - og_title: Open Graph title\n            - og_description: Open Graph description\n            - twitter_image: Twitter card image URL\n            - twitter_title: Twitter card title\n            - twitter_description: Twitter card description\n            - codeinjection_head: Code to inject in header\n            - codeinjection_foot: Code to inject in footer\n            \n            Example:\n            {\n                "name": "Updated Name",\n                "description": "Updated description"\n            }\n            \n        ctx: Optional context for logging\n        \n    Returns:\n        Formatted string containing the updated tag details\n        \n    Raises:\n        GhostError: If there is an error accessing the Ghost API\n    ',
      parameters: [
        {
          name: "tag_id",
          type: "string",
          description: "Parameter: tag_id",
          required: true,
        },
        {
          name: "update_data",
          type: "object",
          description: "Parameter: update_data",
          required: true,
        },
      ],
    },
    {
      name: "update_tier",
      description:
        'Update an existing tier in Ghost.\n    \n    Args:\n        tier_id: ID of the tier to update (required)\n        name: New name for the tier\n        description: New description for the tier\n        monthly_price: New monthly price in cents (e.g. 500 for $5.00)\n        yearly_price: New yearly price in cents (e.g. 5000 for $50.00)\n        benefits: New list of benefits for the tier\n        welcome_page_url: New URL for the welcome page\n        visibility: New visibility setting ("public" or "none")\n        currency: New currency for prices\n        active: New active status\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the updated tier\n\n    Raises:\n        GhostError: If the Ghost API request fails\n    ',
      parameters: [
        {
          name: "active",
          type: "string",
          description: "Parameter: active",
          required: false,
        },
        {
          name: "benefits",
          type: "string",
          description: "Parameter: benefits",
          required: false,
        },
        {
          name: "currency",
          type: "string",
          description: "Parameter: currency",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "monthly_price",
          type: "string",
          description: "Parameter: monthly_price",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "tier_id",
          type: "string",
          description: "Parameter: tier_id",
          required: true,
        },
        {
          name: "visibility",
          type: "string",
          description: "Parameter: visibility",
          required: false,
        },
        {
          name: "welcome_page_url",
          type: "string",
          description: "Parameter: welcome_page_url",
          required: false,
        },
        {
          name: "yearly_price",
          type: "string",
          description: "Parameter: yearly_price",
          required: false,
        },
      ],
    },
    {
      name: "update_user",
      description:
        "Update an existing user in Ghost.\n    \n    Args:\n        user_id: ID of the user to update (required)\n        name: User's full name (optional)\n        slug: User's slug (optional)\n        email: User's email address (optional)\n        profile_image: URL for profile image (optional)\n        cover_image: URL for cover image (optional)\n        bio: User's bio (optional)\n        website: User's website URL (optional)\n        location: User's location (optional)\n        facebook: Facebook username (optional)\n        twitter: Twitter username (optional)\n        meta_title: Meta title for SEO (optional)\n        meta_description: Meta description for SEO (optional)\n        accessibility: Accessibility settings (optional)\n        comment_notifications: Enable comment notifications (optional)\n        free_member_signup_notification: Enable free member signup notifications (optional)\n        paid_subscription_started_notification: Enable paid subscription started notifications (optional)\n        paid_subscription_canceled_notification: Enable paid subscription canceled notifications (optional)\n        mention_notifications: Enable mention notifications (optional)\n        milestone_notifications: Enable milestone notifications (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the updated user\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If no fields to update are provided\n    ",
      parameters: [
        {
          name: "accessibility",
          type: "string",
          description: "Parameter: accessibility",
          required: false,
        },
        {
          name: "bio",
          type: "string",
          description: "Parameter: bio",
          required: false,
        },
        {
          name: "comment_notifications",
          type: "boolean",
          description: "Parameter: comment_notifications",
          required: false,
        },
        {
          name: "cover_image",
          type: "string",
          description: "Parameter: cover_image",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: false,
        },
        {
          name: "facebook",
          type: "string",
          description: "Parameter: facebook",
          required: false,
        },
        {
          name: "free_member_signup_notification",
          type: "boolean",
          description: "Parameter: free_member_signup_notification",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "Parameter: location",
          required: false,
        },
        {
          name: "mention_notifications",
          type: "boolean",
          description: "Parameter: mention_notifications",
          required: false,
        },
        {
          name: "meta_description",
          type: "string",
          description: "Parameter: meta_description",
          required: false,
        },
        {
          name: "meta_title",
          type: "string",
          description: "Parameter: meta_title",
          required: false,
        },
        {
          name: "milestone_notifications",
          type: "boolean",
          description: "Parameter: milestone_notifications",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "paid_subscription_canceled_notification",
          type: "boolean",
          description: "Parameter: paid_subscription_canceled_notification",
          required: false,
        },
        {
          name: "paid_subscription_started_notification",
          type: "boolean",
          description: "Parameter: paid_subscription_started_notification",
          required: false,
        },
        {
          name: "profile_image",
          type: "string",
          description: "Parameter: profile_image",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description: "Parameter: slug",
          required: false,
        },
        {
          name: "twitter",
          type: "string",
          description: "Parameter: twitter",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "Parameter: user_id",
          required: true,
        },
        {
          name: "website",
          type: "string",
          description: "Parameter: website",
          required: false,
        },
      ],
    },
    {
      name: "update_webhook",
      description:
        "Update an existing webhook in Ghost.\n    \n    Args:\n        webhook_id: ID of the webhook to update (required)\n        event: New event to trigger the webhook (optional)\n        target_url: New URL to send the webhook to (optional)\n        name: New name of the webhook (optional)\n        api_version: New API version for the webhook (optional)\n        ctx: Optional context for logging\n    \n    Returns:\n        String representation of the updated webhook\n\n    Raises:\n        GhostError: If the Ghost API request fails\n        ValueError: If no fields to update are provided or if the event is invalid\n    ",
      parameters: [
        {
          name: "api_version",
          type: "string",
          description: "Parameter: api_version",
          required: false,
        },
        {
          name: "event",
          type: "string",
          description: "Parameter: event",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "target_url",
          type: "string",
          description: "Parameter: target_url",
          required: false,
        },
        {
          name: "webhook_id",
          type: "string",
          description: "Parameter: webhook_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MFYDev/ghost-mcp",
  _varName: "ghostMcpServerPlugin",
};

const azureMcpServer1Plugin: Plugin = {
  id: "cczdogb799",
  name: "Azure MCP Server",
  description:
    "This server implements the Model Context Protocol for seamless interaction with Azure Blob Storage and Cosmos DB, enabling automatic logging and audit tracking of operations.",
  image: "https://github.com/mashriram.png",
  actions: [
    {
      name: "blob_container_create",
      description: "Create a new Blob Storage container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Blob Storage container to create",
          required: true,
        },
      ],
    },
    {
      name: "blob_container_list",
      description: "List all Blob Storage containers",
      parameters: [],
    },
    {
      name: "blob_container_delete",
      description: "Delete a Blob Storage container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Blob Storage container to delete",
          required: true,
        },
      ],
    },
    {
      name: "blob_upload",
      description: "Upload a blob to Blob Storage",
      parameters: [
        {
          name: "blob_name",
          type: "string",
          description: "Name of the blob in the container",
          required: true,
        },
        {
          name: "container_name",
          type: "string",
          description: "Name of the Blob Storage container",
          required: true,
        },
        {
          name: "file_content",
          type: "string",
          description: "Base64 encoded file content for upload",
          required: true,
        },
      ],
    },
    {
      name: "blob_delete",
      description: "Delete a blob from Blob Storage",
      parameters: [
        {
          name: "blob_name",
          type: "string",
          description: "Name of the blob to delete",
          required: true,
        },
        {
          name: "container_name",
          type: "string",
          description: "Name of the Blob Storage container",
          required: true,
        },
      ],
    },
    {
      name: "blob_list",
      description: "List blobs in a Blob Storage container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Blob Storage container",
          required: true,
        },
      ],
    },
    {
      name: "blob_read",
      description: "Read a blob's content from Blob Storage",
      parameters: [
        {
          name: "blob_name",
          type: "string",
          description: "Name of the blob to read",
          required: true,
        },
        {
          name: "container_name",
          type: "string",
          description: "Name of the Blob Storage container",
          required: true,
        },
      ],
    },
    {
      name: "cosmosdb_container_create",
      description: "Create a new Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
        {
          name: "partition_key",
          type: "object",
          description:
            "Partition key definition for the container (e.g., {'paths': ['/partitionKey'], 'kind': 'Hash'})",
          required: true,
        },
      ],
    },
    {
      name: "cosmosdb_container_describe",
      description: "Get details about a Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
      ],
    },
    {
      name: "cosmosdb_container_list",
      description: "List all Cosmos DB containers in a database",
      parameters: [
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
      ],
    },
    {
      name: "cosmosdb_container_delete",
      description: "Delete a Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
      ],
    },
    {
      name: "cosmosdb_item_create",
      description: "Create a new item in a Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
        {
          name: "item",
          type: "object",
          description: "Item data to create (JSON object)",
          required: true,
        },
      ],
    },
    {
      name: "cosmosdb_item_read",
      description: "Read an item from a Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
        {
          name: "item_id",
          type: "string",
          description: "ID of the item to read",
          required: true,
        },
        {
          name: "partition_key",
          type: "string",
          description: "Partition key value for the item",
          required: true,
        },
      ],
    },
    {
      name: "cosmosdb_item_replace",
      description: "Replace an item in a Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
        {
          name: "item",
          type: "object",
          description: "Updated item data (JSON object)",
          required: true,
        },
        {
          name: "item_id",
          type: "string",
          description: "ID of the item to replace",
          required: true,
        },
        {
          name: "partition_key",
          type: "string",
          description: "Partition key value for the item",
          required: true,
        },
      ],
    },
    {
      name: "cosmosdb_item_delete",
      description: "Delete an item from a Cosmos DB container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
        {
          name: "item_id",
          type: "string",
          description: "ID of the item to delete",
          required: true,
        },
        {
          name: "partition_key",
          type: "string",
          description: "Partition key value for the item",
          required: true,
        },
      ],
    },
    {
      name: "cosmosdb_item_query",
      description: "Query items in a Cosmos DB container using SQL",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Name of the Cosmos DB container",
          required: true,
        },
        {
          name: "database_name",
          type: "string",
          description:
            "Name of the Cosmos DB database (optional, defaults to 'defaultdb')",
          required: false,
        },
        {
          name: "parameters",
          type: "object array",
          description: "Parameters for the SQL query (optional)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Cosmos DB SQL query string",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mashriram/azure_mcp_server",
  _varName: "azureMcpServer1Plugin",
};

const linearMcpServer5Plugin: Plugin = {
  id: "zh2tj9gvsa",
  name: "Linear MCP Server",
  description:
    "Enables interaction with Linear resources through an MCP interface, offering functionality for issue management and resource retrieval with rate limiting and error handling support.",
  image: "https://github.com/Iwark.png",
  actions: [
    {
      name: "read-resource",
      description: "Read a Linear resource",
      parameters: [
        {
          name: "uri",
          type: "string",
          description:
            "Resource URI to read e.g. linear://issues/4cb972e7-9ba1-4c52-8465-cdf2679ccea7",
          required: true,
        },
      ],
    },
    {
      name: "create-issue",
      description: "Create a new Linear issue",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Assignee ID",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: false,
        },
        {
          name: "estimate",
          type: "number",
          description: "Issue estimate",
          required: false,
        },
        {
          name: "labelIds",
          type: "string array",
          description: "Label IDs",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Issue priority (0: No priority, 1: Urgent, 2: High, 3: Medium, 4: Low)",
          required: false,
        },
        {
          name: "stateId",
          type: "string",
          description: "State ID",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "search-issues",
      description: "Search Linear issues",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Assignee ID to filter by",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "Status to filter by",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID to filter by",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Iwark/linear-mcp-server",
  _varName: "linearMcpServer5Plugin",
};

const gitlabMcpPlugin: Plugin = {
  id: "7jwbk4r6d7",
  name: "gitlab mcp",
  description: "gitlab mcp",
  image: "https://github.com/zereight.png",
  actions: [
    {
      name: "create_or_update_file",
      description: "Create or update a single file in a GitLab project",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to create/update the file in",
          required: true,
        },
        {
          name: "commit_message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Content of the file",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path where to create/update the file",
          required: true,
        },
        {
          name: "previous_path",
          type: "string",
          description: "Path of the file to move/rename",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "search_repositories",
      description: "Search for GitLab projects",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Number of results per page (default: 20)",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "create_repository",
      description: "Create a new GitLab project",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "initialize_with_readme",
          type: "boolean",
          description: "Initialize with README.md",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "visibility",
          type: "string",
          description: "Repository visibility level",
          required: false,
        },
      ],
    },
    {
      name: "get_file_contents",
      description:
        "Get the contents of a file or directory from a GitLab project",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Path to the file or directory",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "ref",
          type: "string",
          description: "Branch/tag/commit to get contents from",
          required: false,
        },
      ],
    },
    {
      name: "push_files",
      description: "Push multiple files to a GitLab project in a single commit",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to push to",
          required: true,
        },
        {
          name: "commit_message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Array of files to push",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "Create a new issue in a GitLab project",
      parameters: [
        {
          name: "assignee_ids",
          type: "number array",
          description: "Array of user IDs to assign",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of label names",
          required: false,
        },
        {
          name: "milestone_id",
          type: "number",
          description: "Milestone ID to assign",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "create_merge_request",
      description: "Create a new merge request in a GitLab project",
      parameters: [
        {
          name: "allow_collaboration",
          type: "boolean",
          description: "Allow commits from upstream members",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Merge request description",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Create as draft merge request",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "source_branch",
          type: "string",
          description: "Branch containing changes",
          required: true,
        },
        {
          name: "target_branch",
          type: "string",
          description: "Branch to merge into",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Merge request title",
          required: true,
        },
      ],
    },
    {
      name: "fork_repository",
      description:
        "Fork a GitLab project to your account or specified namespace",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Namespace to fork to (full path)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description: "Create a new branch in a GitLab project",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Name for the new branch",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "ref",
          type: "string",
          description: "Source branch/commit for new branch",
          required: false,
        },
      ],
    },
    {
      name: "get_merge_request",
      description: "Get details of a merge request",
      parameters: [
        {
          name: "merge_request_iid",
          type: "number",
          description: "The internal ID of the merge request",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "get_merge_request_diffs",
      description: "Get the changes/diffs of a merge request",
      parameters: [
        {
          name: "merge_request_iid",
          type: "number",
          description: "The internal ID of the merge request",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "view",
          type: "string",
          description: "Diff view type",
          required: false,
        },
      ],
    },
    {
      name: "update_merge_request",
      description: "Update a merge request",
      parameters: [
        {
          name: "assignee_ids",
          type: "number array",
          description: "The ID of the users to assign the MR to",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "The description of the merge request",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Work in progress merge request",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Labels for the MR",
          required: false,
        },
        {
          name: "merge_request_iid",
          type: "number",
          description: "The internal ID of the merge request",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "remove_source_branch",
          type: "boolean",
          description: "Flag indicating if the source branch should be removed",
          required: false,
        },
        {
          name: "squash",
          type: "boolean",
          description: "Squash commits into a single commit when merging",
          required: false,
        },
        {
          name: "state_event",
          type: "string",
          description: "New state (close/reopen) for the MR",
          required: false,
        },
        {
          name: "target_branch",
          type: "string",
          description: "The target branch",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "The title of the merge request",
          required: false,
        },
      ],
    },
    {
      name: "create_note",
      description: "Create a new note (comment) to an issue or merge request",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Note content",
          required: true,
        },
        {
          name: "noteable_iid",
          type: "number",
          description: "IID of the issue or merge request",
          required: true,
        },
        {
          name: "noteable_type",
          type: "string",
          description: "Type of noteable (issue or merge_request)",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or namespace/project_path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zereight/gitlab-mcp",
  _varName: "gitlabMcpPlugin",
};

const confluencemcpPlugin: Plugin = {
  id: "p7fnmpaukj",
  name: "confluence-mcp",
  description: "jira, wiki mcp",
  image: "https://github.com/zereight.png",
  actions: [
    {
      name: "execute_cql_search",
      description: "Execute a CQL query on Confluence to search pages",
      parameters: [
        {
          name: "cql",
          type: "string",
          description: "CQL query string",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "get_page_content",
      description: "Get the content of a Confluence page",
      parameters: [
        {
          name: "pageId",
          type: "string",
          description: "Confluence Page ID",
          required: true,
        },
      ],
    },
    {
      name: "create_page",
      description: "Create a new Confluence page",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Page content in storage format",
          required: true,
        },
        {
          name: "parentId",
          type: "string",
          description: "Parent page ID (optional)",
          required: false,
        },
        {
          name: "spaceKey",
          type: "string",
          description: "Space key where the page will be created",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Page title",
          required: true,
        },
      ],
    },
    {
      name: "update_page",
      description: "Update an existing Confluence page",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "New page content in storage format",
          required: true,
        },
        {
          name: "pageId",
          type: "string",
          description: "ID of the page to update",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "New page title (optional)",
          required: false,
        },
      ],
    },
    {
      name: "execute_jql_search",
      description: "Execute a JQL query on Jira to search issues",
      parameters: [
        {
          name: "jql",
          type: "string",
          description: "JQL query string",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Number of results to return",
          required: false,
        },
      ],
    },
    {
      name: "create_jira_issue",
      description: "Create a new Jira issue",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Assignee account ID",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: false,
        },
        {
          name: "issuetype",
          type: "string",
          description: "Issue type name",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "Priority ID",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Project key",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Issue summary",
          required: true,
        },
      ],
    },
    {
      name: "update_jira_issue",
      description: "Update an existing Jira issue",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "New assignee account ID",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New issue description",
          required: false,
        },
        {
          name: "issueKey",
          type: "string",
          description: "Issue key (e.g. PROJ-123)",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "New priority ID",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "New issue summary",
          required: false,
        },
      ],
    },
    {
      name: "transition_jira_issue",
      description: "Change the status of a Jira issue",
      parameters: [
        {
          name: "issueKey",
          type: "string",
          description: "Issue key (e.g. PROJ-123)",
          required: true,
        },
        {
          name: "transitionId",
          type: "string",
          description: "Transition ID to change the issue status",
          required: true,
        },
      ],
    },
    {
      name: "get_board_sprints",
      description: "Get all sprints from a Jira board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Jira board ID",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "Filter sprints by state (active, future, closed)",
          required: false,
        },
      ],
    },
    {
      name: "get_sprint_issues",
      description: "Get all issues from a sprint",
      parameters: [
        {
          name: "fields",
          type: "string array",
          description: "List of fields to return for each issue",
          required: false,
        },
        {
          name: "sprintId",
          type: "string",
          description: "Sprint ID",
          required: true,
        },
      ],
    },
    {
      name: "get_current_sprint",
      description: "Get current active sprint from a board with its issues",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Jira board ID",
          required: true,
        },
        {
          name: "includeIssues",
          type: "boolean",
          description: "Whether to include sprint issues in the response",
          required: false,
        },
      ],
    },
    {
      name: "get_epic_issues",
      description: "Get all issues belonging to an epic",
      parameters: [
        {
          name: "epicKey",
          type: "string",
          description: "Epic issue key (e.g. CONNECT-1234)",
          required: true,
        },
        {
          name: "fields",
          type: "string array",
          description: "List of fields to return for each issue",
          required: false,
        },
      ],
    },
    {
      name: "get_user_issues",
      description:
        "Get all issues assigned to or reported by a specific user in a board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "Jira board ID",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by issue status",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of user association with issues",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Username to search issues for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zereight/confluence-mcp",
  _varName: "confluencemcpPlugin",
};

const integratedMcpServerPlugin: Plugin = {
  id: "2r8d1xr71e",
  name: "Integrated MCP Server",
  description:
    "Facilitates real-time tool discovery and documentation retrieval for command-line tools within a VSCode extension, using Express and SSE for secure and dynamic content streaming.",
  image: "https://github.com/patelnav.png",
  actions: [],
  githubUrl: "https://github.com/patelnav/my-tools-mcp",
  _varName: "integratedMcpServerPlugin",
};

const clickupMcpServer1Plugin: Plugin = {
  id: "iwjvs2zy63",
  name: "ClickUp MCP Server",
  description:
    "Enables AI integrations with ClickUp tasks, supporting resource management, task operations, workspace organization, and AI-powered task recommendations through a standardized protocol.",
  image: "https://github.com/TaazKareem.png",
  actions: [
    {
      name: "get_task",
      description:
        "Retrieve comprehensive details about a specific ClickUp task. Use this tool when you need in-depth information about a particular task, including its description, custom fields, attachments, and other metadata. Before calling, check if you already have the necessary task ID from previous responses in the conversation, as this avoids redundant lookups.",
      parameters: [
        {
          name: "listName",
          type: "string",
          description:
            "Optional: Name of the list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to retrieve (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to retrieve - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "delete_task",
      description:
        "Permanently remove a task from your ClickUp workspace. Use this tool with caution as deletion cannot be undone. Before calling, check if you already have the necessary task ID from previous responses in the conversation, as this avoids redundant lookups. For safety, the task ID is required.",
      parameters: [
        {
          name: "listName",
          type: "string",
          description:
            "Optional: Name of the list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to delete - this is required for safety to prevent accidental deletions. If you have this ID from a previous response, use it directly.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to delete - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_folder",
      description:
        "Retrieve details about a specific ClickUp folder including its name, status, and other metadata. Before calling, check if you already have the necessary folder ID from previous responses in the conversation history, as this avoids redundant lookups. Helps you understand folder structure before creating or updating lists.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to retrieve (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to retrieve - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead, and only needed when using folderName). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder (optional if using spaceId instead, and only needed when using folderName). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "update_folder",
      description:
        "Modify an existing ClickUp folder's properties, such as name or status settings. Before calling, check if you already have the necessary folder ID from previous responses in the conversation history, as this avoids redundant lookups. Use when reorganizing or renaming workspace elements.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to update (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to update - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the folder",
          required: false,
        },
        {
          name: "override_statuses",
          type: "boolean",
          description:
            "Whether to override space statuses with folder-specific statuses",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead, and only needed when using folderName). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder (optional if using spaceId instead, and only needed when using folderName). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "delete_folder",
      description:
        "Permanently remove a folder from your ClickUp workspace. Use with caution as deletion cannot be undone and will remove all lists and tasks within the folder. Before calling, check if you already have the necessary folder ID from previous responses in the conversation history, as this avoids redundant lookups.",
      parameters: [
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to delete (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to delete - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead, and only needed when using folderName). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder (optional if using spaceId instead, and only needed when using folderName). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_list",
      description:
        "Retrieve details about a specific ClickUp list including its name, content, status options, and other metadata. Before calling, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups. Useful to understand list structure before creating or updating tasks.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to retrieve (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to retrieve - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "update_list",
      description:
        "Modify an existing ClickUp list's properties, such as name, content, or status options. Before calling, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups. Use when reorganizing or renaming workspace elements.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "New description or content for the list",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to update (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to update - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the list",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New status for the list",
          required: false,
        },
      ],
    },
    {
      name: "delete_list",
      description:
        "Permanently remove a list from your ClickUp workspace. Use with caution as deletion cannot be undone and will remove all tasks within the list. Before calling, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to delete (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to delete - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_workspace_hierarchy",
      description:
        "Retrieve the complete ClickUp workspace hierarchy, including all spaces, folders, and lists with their IDs, names, and hierarchical paths. Call this tool only when you need to discover the workspace structure and don't already have this information from recent context. Avoid using for repeated lookups of the same information.",
      parameters: [],
    },
    {
      name: "create_task",
      description:
        "Create a single task in a ClickUp list. Use this tool for individual task creation only. For multiple tasks, use create_bulk_tasks instead. Before calling this tool, check if you already have the necessary list ID from previous responses in the conversation history, as this avoids redundant lookups. When creating a task, you must provide either a listId or listName.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Plain text description for the task",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date of the task (Unix timestamp in milliseconds). Convert dates to this format before submitting.",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to create the task in (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the task in - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "markdown_description",
          type: "string",
          description:
            "Markdown formatted description for the task. If provided, this takes precedence over description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Name of the task. Put a relevant emoji followed by a blank space before the name.",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Priority of the task (1-4), where 1 is urgent/highest priority and 4 is lowest priority. Only set this when the user explicitly requests a priority level.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "OPTIONAL: Override the default ClickUp status. In most cases, you should omit this to use ClickUp defaults",
          required: false,
        },
      ],
    },
    {
      name: "create_bulk_tasks",
      description:
        "Create multiple tasks in a ClickUp list simultaneously. Use this tool when you need to add several related tasks in one operation. Before calling, check if you already have the necessary list ID from previous responses in the conversation, as this avoids redundant lookups. More efficient than creating tasks one by one for batch operations.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to create the tasks in (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the tasks in - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Array of tasks to create (at least one task required)",
          required: true,
        },
      ],
    },
    {
      name: "create_list",
      description:
        "Create a new list directly in a ClickUp space. Use this tool when you need a top-level list not nested inside a folder. Before calling, check if you already have the necessary space ID from previous responses in the conversation, as this avoids redundant lookups. For creating lists inside folders, use create_list_in_folder instead.",
      parameters: [
        {
          name: "assignee",
          type: "number",
          description: "User ID to assign the list to",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Description or content of the list",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description:
            "Due date for the list (Unix timestamp in milliseconds). Convert dates to this format before submitting.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the list",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Priority of the list (1-4), where 1 is urgent/highest priority and 4 is lowest priority. Only set when explicitly requested.",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space to create the list in (optional if using spaceName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space to create the list in - will automatically find the space by name (optional if using spaceId instead). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Status of the list",
          required: false,
        },
      ],
    },
    {
      name: "create_folder",
      description:
        "Create a new folder in a ClickUp space for organizing related lists. Use this tool when you need to group multiple lists together. Before calling, check if you already have the necessary space ID from previous responses in the conversation, as this avoids redundant lookups. After creating a folder, you can add lists to it using create_list_in_folder.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the folder",
          required: true,
        },
        {
          name: "override_statuses",
          type: "boolean",
          description:
            "Whether to override space statuses with folder-specific statuses",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space to create the folder in (optional if using spaceName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space to create the folder in - will automatically find the space by name (optional if using spaceId instead). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "create_list_in_folder",
      description:
        "Create a new list within a ClickUp folder. Use this tool when you need to add a list to an existing folder structure. Before calling, check if you already have the necessary folder ID and space ID from previous responses in the conversation, as this avoids redundant lookups. For top-level lists not in folders, use create_list instead.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Description or content of the list",
          required: false,
        },
        {
          name: "folderId",
          type: "string",
          description:
            "ID of the folder to create the list in (optional if using folderName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "folderName",
          type: "string",
          description:
            "Name of the folder to create the list in - will automatically find the folder by name (optional if using folderId instead). Only use this if you don't already have the folder ID from previous responses.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the list",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "ID of the space containing the folder (optional if using spaceName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "spaceName",
          type: "string",
          description:
            "Name of the space containing the folder - will automatically find the space by name (optional if using spaceId instead). Only use this if you don't already have the space ID from previous responses.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "Status of the list (uses folder default if not specified)",
          required: false,
        },
      ],
    },
    {
      name: "move_task",
      description:
        "Move an existing task from its current list to a different list. Use this tool when you need to relocate a task within your workspace hierarchy. Before calling, check if you already have the necessary task ID and list ID from previous responses in the conversation, as this avoids redundant lookups. Task statuses may be reset if the destination list uses different status options.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the destination list (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the destination list - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "sourceListName",
          type: "string",
          description:
            "Optional: Name of the source list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to move (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to move - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "duplicate_task",
      description:
        "Create a copy of an existing task in the same or different list. Use this tool when you need to replicate a task's content and properties. Before calling, check if you already have the necessary task ID and list ID from previous responses in the conversation, as this avoids redundant lookups. The duplicate will preserve name, description, priority, and other attributes from the original task.",
      parameters: [
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to create the duplicate in (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to create the duplicate in - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "sourceListName",
          type: "string",
          description:
            "Optional: Name of the source list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to duplicate (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to duplicate - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "update_task",
      description:
        "Modify the properties of an existing task. Use this tool when you need to change a task's name, description, status, priority, or due date. Before calling, check if you already have the necessary task ID from previous responses in the conversation, as this avoids redundant lookups. Only the fields you specify will be updated; other fields will remain unchanged.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New plain text description for the task",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Optional: Name of the list to narrow down task search when multiple tasks have the same name",
          required: false,
        },
        {
          name: "markdown_description",
          type: "string",
          description:
            "New markdown formatted description for the task. If provided, this takes precedence over description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the task",
          required: false,
        },
        {
          name: "priority",
          type: ["number", "null"],
          description:
            "New priority for the task (1-4 or null), where 1 is urgent/highest priority and 4 is lowest priority. Set to null to clear priority.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "New status for the task (must be a valid status in the task's list)",
          required: false,
        },
        {
          name: "taskId",
          type: "string",
          description:
            "ID of the task to update (optional if using taskName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "taskName",
          type: "string",
          description:
            "Name of the task to update - will automatically find the task by name (optional if using taskId instead). Only use this if you don't already have the task ID from previous responses.",
          required: false,
        },
      ],
    },
    {
      name: "get_tasks",
      description:
        "Retrieve tasks from a ClickUp list with optional filtering capabilities. Use this tool when you need to see existing tasks or analyze your current workload. Before calling, check if you already have the necessary list ID from previous responses in the conversation, as this avoids redundant lookups. Results can be filtered by status, assignees, dates, and more.",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Set to true to include archived tasks in the results",
          required: false,
        },
        {
          name: "assignees",
          type: "string array",
          description: "Array of user IDs to filter tasks by assignee",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object",
          description:
            "Object with custom field IDs as keys and desired values for filtering",
          required: false,
        },
        {
          name: "date_created_gt",
          type: "number",
          description:
            "Filter tasks created after this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "date_created_lt",
          type: "number",
          description:
            "Filter tasks created before this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "date_updated_gt",
          type: "number",
          description:
            "Filter tasks updated after this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "date_updated_lt",
          type: "number",
          description:
            "Filter tasks updated before this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "due_date_gt",
          type: "number",
          description:
            "Filter tasks due after this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "due_date_lt",
          type: "number",
          description:
            "Filter tasks due before this timestamp (Unix milliseconds)",
          required: false,
        },
        {
          name: "include_closed",
          type: "boolean",
          description: "Set to true to include tasks with 'Closed' status",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description:
            "ID of the list to get tasks from (optional if using listName instead). If you have this ID from a previous response, use it directly rather than looking up by name.",
          required: false,
        },
        {
          name: "listName",
          type: "string",
          description:
            "Name of the list to get tasks from - will automatically find the list by name (optional if using listId instead). Only use this if you don't already have the list ID from previous responses.",
          required: false,
        },
        {
          name: "order_by",
          type: "string",
          description:
            "Field to order tasks by (e.g., 'due_date', 'created', 'updated')",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description:
            "Page number for pagination when dealing with many tasks (starts at 0)",
          required: false,
        },
        {
          name: "reverse",
          type: "boolean",
          description:
            "Set to true to reverse the sort order (descending instead of ascending)",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description:
            "Array of status names to filter tasks by (e.g., ['To Do', 'In Progress'])",
          required: false,
        },
        {
          name: "subtasks",
          type: "boolean",
          description: "Set to true to include subtasks in the results",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/TaazKareem/clickup-mcp-server",
  _varName: "clickupMcpServer1Plugin",
};

const secondBrainOsMcpServerPlugin: Plugin = {
  id: "dn77ue4b0c",
  name: "Second Brain OS MCP Server",
  description:
    "Facilitates integration with Claude Desktop to run AI agents and execute purchased actions without code, leveraging the Model Context Protocol framework.",
  image: "https://github.com/umairkamilcodes.png",
  actions: [],
  githubUrl: "https://github.com/umairkamilcodes/secondbrainos-mcp-server",
  _varName: "secondBrainOsMcpServerPlugin",
};

const featurediscussionMcpServerPlugin: Plugin = {
  id: "5lu4y0g8m5",
  name: "Feature-Discussion MCP Server",
  description:
    "Facilitates interactive feature discussions with AI guidance, maintaining context and providing intelligent recommendations for implementation, architecture, and best practices in software development.",
  image: "https://github.com/squirrelogic.png",
  actions: [
    {
      name: "begin_feature_discussion",
      description: "Start a new feature discussion",
      parameters: [
        {
          name: "title",
          type: "string",
          description: "Title or name of the feature",
          required: true,
        },
      ],
    },
    {
      name: "provide_feature_input",
      description:
        "Provide information for the current feature discussion prompt",
      parameters: [
        {
          name: "featureId",
          type: "string",
          description: "ID of the feature being discussed",
          required: true,
        },
        {
          name: "response",
          type: "string",
          description: "Your response to the current prompt",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/squirrelogic/mcp-feature-discussion",
  _varName: "featurediscussionMcpServerPlugin",
};

const youtubeMcpServer1Plugin: Plugin = {
  id: "0nvr1xbmpk",
  name: "YouTube MCP Server",
  description:
    "Connects 'yt-dlp' with LLMs via the Model Context Protocol, allowing users to download YouTube content and integrate it with Dive and other MCP-compatible LLMs.",
  image: "https://github.com/kevinwatt.png",
  actions: [
    {
      name: "download_youtube_srt",
      description:
        "Download YouTube subtitles in SRT format so that LLM can read them.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the YouTube video",
          required: true,
        },
      ],
    },
    {
      name: "download_youtube_video",
      description:
        "Download YouTube video to the user's default Downloads folder (usually ~/Downloads).",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the YouTube video",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kevinwatt/yt-dlp-mcp",
  _varName: "youtubeMcpServer1Plugin",
};

const mcpPlaywrightCdpPlugin: Plugin = {
  id: "fdvu5n58kv",
  name: "MCP Playwright CDP",
  description:
    "Enables LLMs to perform browser automation through the Playwright framework with Chrome DevTools Protocol support, connecting to existing Chrome instances for advanced web interactions and JavaScript execution.",
  image: "https://github.com/lars-hagen.png",
  actions: [
    {
      name: "playwright_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Viewport height in pixels (default: 1080)",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Navigation timeout in milliseconds",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
        {
          name: "waitUntil",
          type: "string",
          description: "Navigation wait condition",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Viewport width in pixels (default: 1920)",
          required: false,
        },
      ],
    },
    {
      name: "playwright_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "downloadsDir",
          type: "string",
          description:
            "Custom downloads directory path (default: user's Downloads folder)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "savePng",
          type: "boolean",
          description: "Save screenshot as PNG file (default: false)",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "storeBase64",
          type: "boolean",
          description: "Store screenshot in base64 format (default: true)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "playwright_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_fill",
      description: "fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "playwright_select",
      description: "Select an element on the page with Select tag",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "playwright_hover",
      description: "Hover an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "playwright_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
    {
      name: "playwright_get",
      description: "Perform an HTTP GET request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform GET operation",
          required: true,
        },
      ],
    },
    {
      name: "playwright_post",
      description: "Perform an HTTP POST request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform POST operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to post in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_put",
      description: "Perform an HTTP PUT request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PUT in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_patch",
      description: "Perform an HTTP PATCH request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PATCH in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_delete",
      description: "Perform an HTTP DELETE request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform DELETE operation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lars-hagen/mcp-playwright-cdp",
  _varName: "mcpPlaywrightCdpPlugin",
};

const fileEditCheckMcpServerPlugin: Plugin = {
  id: "m0wmoltgwq",
  name: "File Edit Check MCP Server",
  description:
    "This MCP server enforces pre-read checks and detailed commit documentation to prevent unauthorized file modifications, ensuring write and diff operations are preceded by explicit reads.",
  image: "https://github.com/8grackles.png",
  actions: [
    {
      name: "checked_read_file",
      description: "Read a file and mark it as read for future editing",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the file to read",
          required: true,
        },
      ],
    },
    {
      name: "checked_write_to_file",
      description:
        "Write to a file, requiring it to have been read first if it exists",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "line_count",
          type: "number",
          description: "Number of lines in the content",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path to write the file to",
          required: true,
        },
      ],
    },
    {
      name: "checked_apply_diff",
      description:
        "Apply a diff to a file, requiring it to have been read first",
      parameters: [
        {
          name: "diff",
          type: "string",
          description: "Unified diff content to apply",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the file to modify",
          required: true,
        },
      ],
    },
    {
      name: "list_my_tools",
      description: "List the tools registered in this server",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/8grackles/file-edit-check-server",
  _varName: "fileEditCheckMcpServerPlugin",
};

const mcptavilysearchPlugin: Plugin = {
  id: "qjjzkmrmw9",
  name: "mcp-tavily-search",
  description: "Use Tavily Search to search for news pages or images.",
  image: "https://github.com/y7ut.png",
  actions: [],
  githubUrl: "https://github.com/y7ut/mcp-tavily-search",
  _varName: "mcptavilysearchPlugin",
};

const mcpImagePlaceholderServerPlugin: Plugin = {
  id: "pye2qsv1wz",
  name: "MCP Image Placeholder Server",
  description:
    "This server generates placeholder image URLs from various providers, supporting input validation and integration with desktop applications like Claude and Cursor.",
  image: "https://github.com/husniadil.png",
  actions: [
    {
      name: "image_placeholder",
      description:
        "\n    Generate a placeholder image based on a provider, width, and height.\n    Use this tool to generate a placeholder image for testing or development purposes.\n\n    Args:\n        provider: The provider to use for the image, must be either `placehold` or `lorem-picsum`.\n        width: The width of the image, must be a positive integer between 1 and 10000.\n        height: The height of the image, must be a positive integer between 1 and 10000.\n    ",
      parameters: [
        {
          name: "height",
          type: "integer",
          description: "Parameter: height",
          required: true,
        },
        {
          name: "provider",
          type: "string",
          description: "Parameter: provider",
          required: true,
        },
        {
          name: "width",
          type: "integer",
          description: "Parameter: width",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/husniadil/mcp-image-placeholder",
  _varName: "mcpImagePlaceholderServerPlugin",
};

const cryptocurrencyDaemonMcpServerPlugin: Plugin = {
  id: "s2eac079a2",
  name: "Cryptocurrency Daemon MCP Server",
  description:
    "Enables secure interactions with cryptocurrency daemon RPC interfaces through AI assistants, supporting transaction management, wallet operations, and daemon monitoring for Bitcoin-derived cryptocurrencies.",
  image: "https://github.com/raw391.png",
  actions: [],
  githubUrl: "https://github.com/raw391/coin_daemon_mcp",
  _varName: "cryptocurrencyDaemonMcpServerPlugin",
};

const mcpIcalServerPlugin: Plugin = {
  id: "utbztx910d",
  name: "MCP iCal Server",
  description:
    "Transforms macOS calendar management into a conversational experience using natural language, allowing users to create, manage, and update calendar events seamlessly through an MCP-compatible client.",
  image: "https://github.com/Omar-V2.png",
  actions: [],
  githubUrl: "https://github.com/Omar-V2/mcp-ical",
  _varName: "mcpIcalServerPlugin",
};

const puppeteerMcpServer1Plugin: Plugin = {
  id: "lpt1tvbubf",
  name: "Puppeteer MCP Server",
  description:
    "Enables browser automation with Puppeteer, supporting navigation, form interactions, and connection to active Chrome instances for comprehensive web page interaction.",
  image: "https://github.com/merajmehrabi.png",
  actions: [
    {
      name: "puppeteer_connect_active_tab",
      description:
        "Connect to an existing Chrome instance with remote debugging enabled",
      parameters: [
        {
          name: "debugPort",
          type: "number",
          description: "Optional Chrome debugging port (default: 9222)",
          required: false,
        },
        {
          name: "targetUrl",
          type: "string",
          description:
            "Optional URL of the target tab to connect to. If not provided, connects to the first available tab.",
          required: false,
        },
      ],
    },
    {
      name: "puppeteer_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "puppeteer_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_fill",
      description: "Fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_select",
      description: "Select an element on the page with Select tag",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_hover",
      description: "Hover an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/merajmehrabi/puppeteer-mcp-server",
  _varName: "puppeteerMcpServer1Plugin",
};

const mcpLiveEventsServerPlugin: Plugin = {
  id: "964s5igske",
  name: "MCP Live Events Server",
  description:
    "This server integrates with the Ticketmaster API to provide AI agents with real-time concert and event data, enabling dynamic fetching and formatting for ease of interpretation.",
  image: "https://github.com/mmmaaatttttt.png",
  actions: [
    {
      name: "get_upcoming_events",
      description:
        "\nGet upcoming music events for a city.\n\nArgs:\n    city: City in which to search for events.\n    start_dttm_str: Start date/time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ). Example: 2025-02-08T00:00:00Z\n    end_dttm_str: Start date/time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ). Example: 2025-02-10T00:00:00Z\n    keyword: Any optional keywords to help filter search results.\n",
      parameters: [
        {
          name: "city",
          type: "string",
          description: "Parameter: city",
          required: true,
        },
        {
          name: "end_dttm_str",
          type: "string",
          description: "Parameter: end_dttm_str",
          required: true,
        },
        {
          name: "keyword",
          type: "string",
          description: "Parameter: keyword",
          required: false,
        },
        {
          name: "start_dttm_str",
          type: "string",
          description: "Parameter: start_dttm_str",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mmmaaatttttt/mcp-live-events",
  _varName: "mcpLiveEventsServerPlugin",
};

const mcpServerScalableOpenapiEndpointDiscoveryAndApiRequestToolPlugin: Plugin =
  {
    id: "ieg0jgwn5h",
    name: "MCP Server: Scalable OpenAPI Endpoint Discovery and API Request Tool",
    description:
      "This server facilitates scalable discovery and execution of OpenAPI endpoints using semantic search and high-performance processing, overcoming limitations of large spec handling for streamlined API interactions.",
    image: "https://github.com/baryhuang.png",
    actions: [],
    githubUrl: "https://github.com/baryhuang/mcp-server-any-openapi",
    _varName:
      "mcpServerScalableOpenapiEndpointDiscoveryAndApiRequestToolPlugin",
  };

const mcpServerTemplate1Plugin: Plugin = {
  id: "g0qi4yvl33",
  name: "MCP Server Template",
  description:
    "A template for creating Model Context Protocol (MCP) servers in TypeScript, offering features like container-based dependency injection, a service-based architecture, and integration with the LLM CLI for architectural design feedback through natural language.",
  image: "https://github.com/stevennevins.png",
  actions: [
    {
      name: "architect",
      description:
        'MCP server for the LLM Architect tool. Exposes resource "/llm-architect/chat" accepting POST requests with a prompt and optional conversationId, and interacts with the llm chat CLI to provide architectural design feedback while maintaining conversation context.',
      parameters: [
        {
          name: "conversationId",
          type: "string",
          description: "Optional conversation ID for context",
          required: false,
        },
        {
          name: "input",
          type: "string",
          description: "Input prompt to process",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stevennevins/architect-mcp-server",
  _varName: "mcpServerTemplate1Plugin",
};

const deepclaudeMcpServerPlugin: Plugin = {
  id: "b9zf4a5xid",
  name: "DeepClaude MCP Server",
  description:
    "Enables integration and control of DeepSeek and Claude AI models through RESTful APIs, supporting seamless AI model operations with configurable parameters and robust error handling.",
  image: "https://github.com/smithery-ai.png",
  actions: [],
  githubUrl: "https://github.com/smithery-ai/DeepClaudeMcp",
  _varName: "deepclaudeMcpServerPlugin",
};

const perplexityAiMcpServer2Plugin: Plugin = {
  id: "s45iho8wbk",
  name: "Perplexity AI MCP Server",
  description:
    "An MCP server integrating Perplexity AI's API to offer advanced search capabilities with support for multiple models and result configuration.",
  image: "https://github.com/mkusaka.png",
  actions: [
    {
      name: "perplexity_search",
      description:
        "Search using Perplexity AI's models with context-aware responses and citations",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Parameter: count",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description:
            "Model to use (sonar-reasoning-pro, sonar-reasoning, sonar-pro, sonar)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mkusaka/mcp-server-perplexity",
  _varName: "perplexityAiMcpServer2Plugin",
};

const decentsamplerDrumsMcpServerPlugin: Plugin = {
  id: "phypkuqwcn",
  name: "Decent-Sampler Drums MCP Server",
  description:
    "Facilitates the creation of DecentSampler drum kit configurations, supporting WAV file analysis and XML generation to ensure accurate sample lengths and well-structured presets.",
  image: "https://github.com/dandeliongold.png",
  actions: [
    {
      name: "configure_drum_controls",
      description:
        "Configure global pitch and envelope controls for each drum type.\n\nThis tool will:\n- Add per-drum pitch controls with customizable ranges\n- Configure ADSR envelope settings for natural decay control\n- Generate proper XML structure for global drum controls\n\nError Handling:\n- Validates pitch range values (min/max must be valid numbers)\n- Ensures envelope times are positive values\n- Verifies curve values are within -100 to 100 range\n- Returns detailed error messages for invalid configurations\n\nSuccess Response:\nReturns XML structure containing:\n- Global controls for each drum type\n- MIDI CC mappings for real-time control\n- Properly formatted parameter bindings",
      parameters: [
        {
          name: "drumControls",
          type: "object",
          description: "Parameter: drumControls",
          required: true,
        },
      ],
    },
    {
      name: "configure_round_robin",
      description:
        "Configure round robin sample playback for a set of samples.\n\nThis tool will:\n- Validate sequence positions\n- Verify sample files exist\n- Generate proper XML structure for round robin playback\n\nError Handling:\n- Checks if sample files exist at specified paths\n- Validates sequence positions are unique and sequential\n- Ensures mode is one of: round_robin, random, true_random, always\n- Returns specific error messages for missing files or invalid sequences\n\nSuccess Response:\nReturns XML structure with:\n- Configured playback mode\n- Sample sequence assignments\n- Proper group organization for round robin playback",
      parameters: [
        {
          name: "directory",
          type: "string",
          description: "Absolute path to the directory containing samples",
          required: true,
        },
        {
          name: "length",
          type: "number",
          description: "Number of round robin variations",
          required: true,
        },
        {
          name: "mode",
          type: "string",
          description: "Round robin playback mode",
          required: true,
        },
        {
          name: "samples",
          type: "object array",
          description: "Parameter: samples",
          required: true,
        },
      ],
    },
    {
      name: "analyze_wav_samples",
      description:
        "Analyze WAV files to detect common issues in drum kit samples.\n\nThis tool checks for:\n- Non-standard WAV headers that may cause playback issues\n- Metadata inconsistencies that could affect multi-mic setups\n- Sample rate and bit depth compatibility\n- Channel configuration issues\n- File size and format validation\n\nError Handling:\n- Reports detailed header format issues\n- Identifies metadata inconsistencies between related samples\n- Flags potential playback compatibility problems\n- Returns specific error messages for each issue type\n\nSuccess Response:\nReturns detailed analysis including:\n- WAV header information\n- Sample metadata\n- Potential compatibility issues\n- Recommendations for fixes\n\nIMPORTANT: Always use absolute paths (e.g., 'C:/Users/username/Documents/Samples/kick.wav') rather than relative paths.",
      parameters: [
        {
          name: "paths",
          type: "string array",
          description:
            "Array of absolute paths to WAV files to analyze (e.g., ['C:/Users/username/Documents/Samples/kick.wav'])",
          required: true,
        },
      ],
    },
    {
      name: "configure_mic_routing",
      description:
        "Configure multi-mic routing with MIDI controls for drum samples.\n\nThis tool will:\n- Set up individual volume controls for each mic position (close, OH L/R, room L/R)\n- Route each mic to its own auxiliary output for DAW mixing\n- Configure MIDI CC mappings for mic volumes\n- Generate proper XML structure for DecentSampler\n\nError Handling:\n- Validates mic position assignments\n- Checks for duplicate MIDI CC assignments\n- Ensures valid output routing targets\n- Verifies bus indices are unique and valid\n- Returns specific errors for routing conflicts\n\nSuccess Response:\nReturns XML structure containing:\n- Configured mic bus routing\n- Volume control mappings\n- MIDI CC assignments\n- Complete routing matrix for all samples",
      parameters: [
        {
          name: "drumPieces",
          type: "object array",
          description: "Parameter: drumPieces",
          required: true,
        },
        {
          name: "micBuses",
          type: "object array",
          description: "Parameter: micBuses",
          required: true,
        },
      ],
    },
    {
      name: "generate_drum_groups",
      description:
        'Generate DecentSampler <groups> XML for drum kits.\n\nThis tool supports two configuration types:\n\nBasicDrumKitConfig:\n- For simple presets with minimal features\n- No UI controls, effects, or routing\n- Only supports basic sample mapping and optional velocity layers\n- Recommended for straightforward drum kits\n\nAdvancedDrumKitConfig:\n- For complex setups combining multiple features\n- Supports UI controls, effects, and routing\n- Integrates with other tools (configure_drum_controls, configure_mic_routing, etc.)\n- Use when you need advanced features like round robin or multi-mic setups\n\nBest Practices:\n- IMPORTANT: Always use absolute paths (e.g., \'C:/Users/username/Documents/Samples/kick.wav\')\n- Group all samples for a drum piece into a single group\n- When using multiple mic positions, include them all in the same group\n- Use velocity layers within a group to control dynamics\n\nError Handling:\n- Validates all sample paths exist\n- Checks for valid MIDI note numbers\n- Ensures velocity layers don\'t overlap\n- Verifies muting group configurations\n- Returns specific errors for any invalid settings\n\nExample Configurations:\n\n1. Basic Configuration (simple drum kit):\n{\n  "globalSettings": {\n    "velocityLayers": [\n      { "low": 1, "high": 42, "name": "soft" },\n      { "low": 43, "high": 85, "name": "medium" },\n      { "low": 86, "high": 127, "name": "hard" }\n    ]\n  },\n  "drumPieces": [{\n    "name": "Kick",\n    "rootNote": 36,\n    "samples": [\n      {"path": "C:/Samples/Kick_Soft.wav"},\n      {"path": "C:/Samples/Kick_Medium.wav"},\n      {"path": "C:/Samples/Kick_Hard.wav"}\n    ]\n  }]\n}\n\n2. Advanced Configuration (multi-mic kit with controls):\n{\n  "globalSettings": {\n    "velocityLayers": [\n      { "low": 1, "high": 127, "name": "full" }\n    ],\n    "drumControls": {\n      "kick": {\n        "pitch": { "default": 0, "min": -12, "max": 12 },\n        "envelope": {\n          "attack": 0.001,\n          "decay": 0.5,\n          "sustain": 0,\n          "release": 0.1\n        }\n      }\n    },\n    "micBuses": [\n      {\n        "name": "Close Mic",\n        "outputTarget": "MAIN_OUTPUT",\n        "volume": { "default": 0, "midiCC": 20 }\n      }\n    ]\n  },\n  "drumPieces": [{\n    "name": "Kick",\n    "rootNote": 36,\n    "samples": [\n      {\n        "path": "C:/Samples/Kick_Close.wav",\n        "micConfig": {\n          "position": "close",\n          "busIndex": 0\n        }\n      }\n    ],\n    "muting": {\n      "tags": ["kick"],\n      "silencedByTags": []\n    }\n  }]\n}\n\nSuccess Response:\nReturns complete XML structure with:\n- Organized sample groups\n- Velocity layer mappings\n- Muting group configurations\n- All sample references and settings\n- Advanced features when using AdvancedDrumKitConfig',
      parameters: [
        {
          name: "drumPieces",
          type: "object array",
          description: "Parameter: drumPieces",
          required: true,
        },
        {
          name: "globalSettings",
          type: "object",
          description: "Parameter: globalSettings",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dandeliongold/mcp-decent-sampler-drums",
  _varName: "decentsamplerDrumsMcpServerPlugin",
};

const flutterToolsMcpServerPlugin: Plugin = {
  id: "4v3bx1viov",
  name: "Flutter Tools MCP Server",
  description:
    "Enables interaction with the Flutter SDK by providing tools to analyze and apply fixes to Dart and Flutter files.",
  image: "https://github.com/dkpoulsen.png",
  actions: [
    {
      name: "get_diagnostics",
      description: "Get Flutter/Dart diagnostics for a file",
      parameters: [
        {
          name: "file",
          type: "string",
          description: "Path to the Dart/Flutter file",
          required: true,
        },
      ],
    },
    {
      name: "apply_fixes",
      description: "Apply Dart fix suggestions to a file",
      parameters: [
        {
          name: "file",
          type: "string",
          description: "Path to the Dart/Flutter file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dkpoulsen/flutter-tools",
  _varName: "flutterToolsMcpServerPlugin",
};

const youtubeTranscriptMcpServerPlugin: Plugin = {
  id: "of3kwtmlqp",
  name: "YouTube Transcript MCP Server",
  description:
    "This server retrieves transcripts for given YouTube video URLs, enabling integration with Goose CLI or Goose Desktop for transcript extraction and processing.",
  image: "https://github.com/jkawamoto.png",
  actions: [
    {
      name: "get_transcript",
      description: "Retrieves the transcript of a YouTube video.",
      parameters: [
        {
          name: "lang",
          type: "string",
          description: "The preferred language for the transcript",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL of the YouTube video",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jkawamoto/mcp-youtube-transcript",
  _varName: "youtubeTranscriptMcpServerPlugin",
};

const mcpSourceRelationServerPlugin: Plugin = {
  id: "jmnzj9317i",
  name: "MCP Source Relation Server",
  description:
    "Analyzes source code dependencies across multiple programming languages in the specified directory to identify file relationships, assisting in dependency management and project structure understanding.",
  image: "https://github.com/owayo.png",
  actions: [
    {
      name: "get_source_relation",
      description: "Analyze dependencies between source files",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/owayo/mcp-source-relation",
  _varName: "mcpSourceRelationServerPlugin",
};

const ramiLevyMcpServerPlugin: Plugin = {
  id: "3up0tbfts7",
  name: "Rami Levy MCP Server",
  description:
    "Enables interaction with the Rami Levy Online Grocery Store API, allowing users to perform product searches, add or remove items from their cart, and prepare for checkout, all while integrating with MCP-enabled LLMs.",
  image: "https://github.com/shilomagen.png",
  actions: [
    {
      name: "add_to_cart",
      description: "Add one or more items to the shopping cart",
      parameters: [
        {
          name: "items",
          type: "object array",
          description: "List of items to add to cart",
          required: true,
        },
        {
          name: "store",
          type: "string",
          description: "Store identifier (e.g., '331')",
          required: true,
        },
      ],
    },
    {
      name: "remove_from_cart",
      description:
        "Remove items from the cart by providing an updated list of items to keep",
      parameters: [
        {
          name: "items",
          type: "object array",
          description: "Updated list of items to keep in cart",
          required: true,
        },
        {
          name: "store",
          type: "string",
          description: "Store identifier",
          required: true,
        },
      ],
    },
    {
      name: "update_quantity",
      description: "Update the quantity of an item in the cart",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Product identifier",
          required: true,
        },
        {
          name: "newQuantity",
          type: "number",
          description: "New quantity for the product",
          required: true,
        },
        {
          name: "store",
          type: "string",
          description: "Store identifier",
          required: true,
        },
      ],
    },
    {
      name: "search_items",
      description: "Search for items in the Rami Levy catalog",
      parameters: [
        {
          name: "aggs",
          type: "number",
          description: "Aggregation flag",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "store",
          type: "string",
          description: "Store identifier (default: '331')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/shilomagen/rami-levy-mcp",
  _varName: "ramiLevyMcpServerPlugin",
};

const researchMcpServerPlugin: Plugin = {
  id: "54ktuin739",
  name: "Research MCP Server",
  description:
    "The server functions as an MCP server to interact with Notion for retrieving and creating survey data, integrating with the Claude Desktop Client for conducting and reviewing surveys.",
  image: "https://github.com/h-yanagawa.png",
  actions: [
    {
      name: "get_survey_summaries",
      description: "Get survey summaries",
      parameters: [],
    },
    {
      name: "get_survey_summary",
      description: "Get survey summary",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "Parameter: page_id",
          required: true,
        },
      ],
    },
    {
      name: "get_property_definition",
      description: "Get property definition for survey summary",
      parameters: [],
    },
    {
      name: "update_survey_summary_property",
      description:
        "\n    Update survey summary property\n    To know definition of properties, use `get_property_definition` tool in advance.\n    ",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description: "Parameter: page_id",
          required: true,
        },
        {
          name: "updates",
          type: "array",
          description: "Parameter: updates",
          required: true,
        },
      ],
    },
    {
      name: "update_survey_summary_block",
      description: "Action for update_survey_summary_block",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: true,
        },
        {
          name: "page_id",
          type: "string",
          description: "Parameter: page_id",
          required: true,
        },
      ],
    },
    {
      name: "create_new_survey_summary",
      description: "Action for create_new_survey_summary",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/h-yanagawa/research-mcp-server",
  _varName: "researchMcpServerPlugin",
};

const mcpServerPagespeedPlugin: Plugin = {
  id: "wes81w8il2",
  name: "MCP Server Pagespeed",
  description:
    "Enables AI models to analyze webpage performance using the Google PageSpeed Insights API, providing real-time performance scores and improvement suggestions.",
  image: "https://github.com/enemyrr.png",
  actions: [
    {
      name: "analyze_pagespeed",
      description: "Analyzes a webpage using Google PageSpeed Insights API",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL to analyze",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/enemyrr/mcp-server-pagespeed",
  _varName: "mcpServerPagespeedPlugin",
};

const mcpmysqlServerPlugin: Plugin = {
  id: "hcqqd3qi8q",
  name: "MCP-MySQL Server",
  description:
    "Enables AI models to perform MySQL database operations through a standardized interface, supporting secure connections, query execution, and comprehensive schema management.",
  image: "https://github.com/enemyrr.png",
  actions: [
    {
      name: "connect_db",
      description: "Connect to MySQL database using URL or config",
      parameters: [
        {
          name: "database",
          type: "string",
          description: "Parameter: database",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description: "Parameter: host",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Database URL (mysql://user:pass@host:port/db)",
          required: false,
        },
        {
          name: "user",
          type: "string",
          description: "Parameter: user",
          required: false,
        },
        {
          name: "workspace",
          type: "string",
          description: "Project workspace path",
          required: false,
        },
      ],
    },
    {
      name: "query",
      description: "Execute a SELECT query",
      parameters: [
        {
          name: "params",
          type: "string,number,boolean,null array",
          description: "Query parameters (optional)",
          required: false,
        },
        {
          name: "sql",
          type: "string",
          description: "SQL SELECT query",
          required: true,
        },
      ],
    },
    {
      name: "execute",
      description: "Execute an INSERT, UPDATE, or DELETE query",
      parameters: [
        {
          name: "params",
          type: "string,number,boolean,null array",
          description: "Query parameters (optional)",
          required: false,
        },
        {
          name: "sql",
          type: "string",
          description: "SQL query (INSERT, UPDATE, DELETE)",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "List all tables in the database",
      parameters: [],
    },
    {
      name: "describe_table",
      description: "Get table structure",
      parameters: [
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
    {
      name: "create_table",
      description: "Create a new table in the database",
      parameters: [
        {
          name: "fields",
          type: "object array",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "indexes",
          type: "object array",
          description: "Parameter: indexes",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
    {
      name: "add_column",
      description: "Add a new column to existing table",
      parameters: [
        {
          name: "field",
          type: "object",
          description: "Parameter: field",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/enemyrr/mcp-mysql-server",
  _varName: "mcpmysqlServerPlugin",
};

const drupalmodulesmcpMcpServerPlugin: Plugin = {
  id: "yuseiq2ka3",
  name: "drupal-modules-mcp MCP Server",
  description:
    "This TypeScript-based MCP server implements a simple notes system, allowing the creation, listing, and summarization of text notes using MCP concepts with note:// URIs and metadata.",
  image: "https://github.com/Cleversoft-IT.png",
  actions: [
    {
      name: "get_module_info",
      description: "Get information about a Drupal module from drupal.org",
      parameters: [
        {
          name: "module_name",
          type: "string",
          description: "Machine name of the Drupal module",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Cleversoft-IT/drupal-modules-mcp",
  _varName: "drupalmodulesmcpMcpServerPlugin",
};

const playwrightMcpServerPlugin: Plugin = {
  id: "6opz5d3mfh",
  name: "Playwright MCP Server",
  description:
    "Provides a server utilizing Model Context Protocol to enable human-like browser automation with Playwright, allowing control over browser actions such as navigation, element interaction, and scrolling.",
  image: "https://github.com/showfive.png",
  actions: [],
  githubUrl: "https://github.com/showfive/playwright-mcp-server",
  _varName: "playwrightMcpServerPlugin",
};

const deepclaudeMcpServer1Plugin: Plugin = {
  id: "bdzcyii9m8",
  name: "DeepClaude MCP Server",
  description:
    "This server integrates DeepSeek and Claude AI models to provide enhanced AI responses, featuring a RESTful API, configurable parameters, and robust error handling.",
  image: "https://github.com/Mrdapeng.png",
  actions: [],
  githubUrl: "https://github.com/Mrdapeng/DeepClaudeMcp",
  _varName: "deepclaudeMcpServer1Plugin",
};

const mcpapplemusicPlugin: Plugin = {
  id: "5tfuto5q19",
  name: "MCP-AppleMusic",
  description:
    "Facilitates controlling Apple Music on macOS via AppleScript through MCP commands, allowing users to manage playback, search for tracks, and create playlists.",
  image: "https://github.com/kennethreitz.png",
  actions: [],
  githubUrl: "https://github.com/kennethreitz/mcp-applemusic",
  _varName: "mcpapplemusicPlugin",
};

const mcpserverasanaPlugin: Plugin = {
  id: "ln1qzdhwmc",
  name: "mcp-server-asana",
  description:
    "Perform Asana operations from an MCP Client such as Anthropic's Claude Desktop Application, and many more.",
  image: "https://github.com/roychri.png",
  actions: [
    {
      name: "asana_create_task",
      description: "Create a new task in a project",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Assignee (can be 'me' or a user ID)",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object",
          description:
            "Object mapping custom field GID strings to their values. For enum fields use the enum option GID as the value.",
          required: false,
        },
        {
          name: "due_on",
          type: "string",
          description: "Due date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "followers",
          type: "string array",
          description: "Array of user IDs to add as followers",
          required: false,
        },
        {
          name: "html_notes",
          type: "string",
          description:
            'HTML-like formatted description of the task. Does not support ALL HTML tags. Only a subset. The only allowed TAG in the HTML are: <body> <h1> <h2> <ol> <ul> <li> <strong> <em> <u> <s> <code> <pre> <blockquote> <a data-asana-type="" data-asana-gid=""> <hr> <img> <table> <tr> <td>. No other tags are allowed. Use the \\n to create a newline. Do not use \\n after <body>. Example: <body><h1>Motivation</h1>\nA customer called in to complain\n<h1>Goal</h1>\nFix the problem</body>',
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the task",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "Description of the task",
          required: false,
        },
        {
          name: "parent",
          type: "string",
          description: "The parent task ID to set this task under",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The project to create the task in",
          required: true,
        },
        {
          name: "projects",
          type: "string array",
          description: "Array of project IDs to add this task to",
          required: false,
        },
        {
          name: "resource_subtype",
          type: "string",
          description:
            "The type of the task. Can be one of 'default_task' or 'milestone'",
          required: false,
        },
      ],
    },
    {
      name: "asana_get_task_stories",
      description: "Get comments and stories for a specific task",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to get stories for",
          required: true,
        },
      ],
    },
    {
      name: "asana_update_task",
      description: "Update an existing task's details",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "New assignee (can be 'me' or a user ID)",
          required: false,
        },
        {
          name: "completed",
          type: "boolean",
          description: "Mark task as completed or not",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object",
          description:
            "Object mapping custom field GID strings to their values. For enum fields use the enum option GID as the value.",
          required: false,
        },
        {
          name: "due_on",
          type: "string",
          description: "New due date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the task",
          required: false,
        },
        {
          name: "notes",
          type: "string",
          description: "New description for the task",
          required: false,
        },
        {
          name: "resource_subtype",
          type: "string",
          description:
            "The type of the task. Can be one of 'default_task' or 'milestone'",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to update",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_project",
      description: "Get detailed information about a specific project",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The project ID to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_project_task_counts",
      description: "Get the number of tasks in a project",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The project ID to get task counts for",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_project_sections",
      description: "Get sections in a project",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "The project ID to get sections for",
          required: true,
        },
      ],
    },
    {
      name: "asana_create_task_story",
      description: "Create a comment or story on a task",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to add the story to",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The text content of the story/comment",
          required: true,
        },
      ],
    },
    {
      name: "asana_add_task_dependencies",
      description: "Set dependencies for a task",
      parameters: [
        {
          name: "dependencies",
          type: "string array",
          description: "Array of task IDs that this task depends on",
          required: true,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to add dependencies to",
          required: true,
        },
      ],
    },
    {
      name: "asana_add_task_dependents",
      description: "Set dependents for a task (tasks that depend on this task)",
      parameters: [
        {
          name: "dependents",
          type: "string array",
          description: "Array of task IDs that depend on this task",
          required: true,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to add dependents to",
          required: true,
        },
      ],
    },
    {
      name: "asana_create_subtask",
      description: "Create a new subtask for an existing task",
      parameters: [
        {
          name: "assignee",
          type: "string",
          description: "Assignee (can be 'me' or a user ID)",
          required: false,
        },
        {
          name: "due_on",
          type: "string",
          description: "Due date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the subtask",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "Description of the subtask",
          required: false,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "parent_task_id",
          type: "string",
          description: "The parent task ID to create the subtask under",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_multiple_tasks_by_gid",
      description:
        "Get detailed information about multiple tasks by their GIDs (maximum 25 tasks)",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "task_ids",
          type: "string",
          description:
            "Array or comma-separated string of task GIDs to retrieve (max 25)",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_project_status",
      description: "Get a project status update",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "project_status_gid",
          type: "string",
          description: "The project status GID to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_project_statuses",
      description: "Get all status updates for a project",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Results per page (1-100)",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "Pagination offset token",
          required: false,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "project_gid",
          type: "string",
          description: "The project GID to get statuses for",
          required: true,
        },
      ],
    },
    {
      name: "asana_create_project_status",
      description: "Create a new status update for a project",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "The color of the status (green, yellow, red)",
          required: false,
        },
        {
          name: "html_text",
          type: "string",
          description: "HTML formatted text for the status update",
          required: false,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "project_gid",
          type: "string",
          description: "The project GID to create the status for",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The text content of the status update",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "The title of the status update",
          required: false,
        },
      ],
    },
    {
      name: "asana_delete_project_status",
      description: "Delete a project status update",
      parameters: [
        {
          name: "project_status_gid",
          type: "string",
          description: "The project status GID to delete",
          required: true,
        },
      ],
    },
    {
      name: "asana_set_parent_for_task",
      description:
        "Set the parent of a task and position the subtask within the other subtasks of that parent",
      parameters: [
        {
          name: "data",
          type: "string",
          description: "Parameter: data",
          required: true,
        },
        {
          name: "opts",
          type: "string",
          description: "Parameter: opts",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to operate on",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_tasks_for_tag",
      description: "Get tasks for a specific tag",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description:
            "The number of objects to return per page. The value must be between 1 and 100.",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description: "An offset to the next page returned by the API.",
          required: false,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "opt_pretty",
          type: "boolean",
          description: "Provides the response in a 'pretty' format",
          required: false,
        },
        {
          name: "tag_gid",
          type: "string",
          description: "The tag GID to retrieve tasks for",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_tags_for_workspace",
      description: "Get tags in a workspace",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description:
            "Results per page. The number of objects to return per page. The value must be between 1 and 100.",
          required: false,
        },
        {
          name: "offset",
          type: "string",
          description:
            "Offset token. An offset to the next page returned by the API.",
          required: false,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "workspace_gid",
          type: "string",
          description:
            "Globally unique identifier for the workspace or organization",
          required: true,
        },
      ],
    },
    {
      name: "asana_list_workspaces",
      description: "List all available workspaces in Asana",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
      ],
    },
    {
      name: "asana_search_projects",
      description: "Search for projects in Asana using name pattern matching",
      parameters: [
        {
          name: "archived",
          type: "boolean",
          description: "Only return archived projects",
          required: false,
        },
        {
          name: "name_pattern",
          type: "string",
          description: "Regular expression pattern to match project names",
          required: true,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "workspace",
          type: "string",
          description: "The workspace to search in",
          required: true,
        },
      ],
    },
    {
      name: "asana_search_tasks",
      description:
        "Search tasks in a workspace with advanced filtering options",
      parameters: [
        {
          name: "assigned_by_any",
          type: "string",
          description: "Comma-separated list of user IDs",
          required: false,
        },
        {
          name: "assigned_by_not",
          type: "string",
          description: "Comma-separated list of user IDs to exclude",
          required: false,
        },
        {
          name: "assignee_any",
          type: "string",
          description: "Comma-separated list of user IDs",
          required: false,
        },
        {
          name: "assignee_not",
          type: "string",
          description: "Comma-separated list of user IDs to exclude",
          required: false,
        },
        {
          name: "commented_on_by_not",
          type: "string",
          description: "Comma-separated list of user IDs to exclude",
          required: false,
        },
        {
          name: "completed",
          type: "boolean",
          description: "Filter for completed tasks",
          required: false,
        },
        {
          name: "completed_at_after",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "completed_at_before",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "completed_on",
          type: "string",
          description: "ISO 8601 date string or null",
          required: false,
        },
        {
          name: "completed_on_after",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "completed_on_before",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "created_at_after",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "created_at_before",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "created_by_any",
          type: "string",
          description: "Comma-separated list of user IDs",
          required: false,
        },
        {
          name: "created_by_not",
          type: "string",
          description: "Comma-separated list of user IDs to exclude",
          required: false,
        },
        {
          name: "created_on",
          type: "string",
          description: "ISO 8601 date string or null",
          required: false,
        },
        {
          name: "created_on_after",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "created_on_before",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object",
          description:
            'Object containing custom field filters. Keys should be in the format "{gid}.{operation}" where operation can be:\n- {gid}.is_set: Boolean - For all custom field types, check if value is set\n- {gid}.value: String|Number|String(enum_option_gid) - Direct value match for Text, Number or Enum fields\n- {gid}.starts_with: String - For Text fields only, check if value starts with string\n- {gid}.ends_with: String - For Text fields only, check if value ends with string\n- {gid}.contains: String - For Text fields only, check if value contains string\n- {gid}.less_than: Number - For Number fields only, check if value is less than number\n- {gid}.greater_than: Number - For Number fields only, check if value is greater than number\n\nExample: { "12345.value": "high", "67890.contains": "urgent" }',
          required: false,
        },
        {
          name: "due_at_after",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "due_at_before",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "due_on",
          type: "string",
          description: "ISO 8601 date string or null",
          required: false,
        },
        {
          name: "due_on_after",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "due_on_before",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "followers_not",
          type: "string",
          description: "Comma-separated list of user IDs to exclude",
          required: false,
        },
        {
          name: "has_attachment",
          type: "boolean",
          description: "Filter for tasks with attachments",
          required: false,
        },
        {
          name: "is_blocked",
          type: "boolean",
          description: "Filter for tasks with incomplete dependencies",
          required: false,
        },
        {
          name: "is_blocking",
          type: "boolean",
          description: "Filter for incomplete tasks with dependents",
          required: false,
        },
        {
          name: "is_subtask",
          type: "boolean",
          description: "Filter for subtasks",
          required: false,
        },
        {
          name: "liked_by_not",
          type: "string",
          description: "Comma-separated list of user IDs to exclude",
          required: false,
        },
        {
          name: "modified_at_after",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "modified_at_before",
          type: "string",
          description: "ISO 8601 datetime string",
          required: false,
        },
        {
          name: "modified_on",
          type: "string",
          description: "ISO 8601 date string or null",
          required: false,
        },
        {
          name: "modified_on_after",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "modified_on_before",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "portfolios_any",
          type: "string",
          description: "Comma-separated list of portfolio IDs",
          required: false,
        },
        {
          name: "projects_all",
          type: "string",
          description:
            "Comma-separated list of project IDs that must all match",
          required: false,
        },
        {
          name: "projects_any",
          type: "string",
          description: "Comma-separated list of project IDs",
          required: false,
        },
        {
          name: "projects_not",
          type: "string",
          description: "Comma-separated list of project IDs to exclude",
          required: false,
        },
        {
          name: "resource_subtype",
          type: "string",
          description: "Filter by task subtype (e.g. milestone)",
          required: false,
        },
        {
          name: "sections_all",
          type: "string",
          description:
            "Comma-separated list of section IDs that must all match",
          required: false,
        },
        {
          name: "sections_any",
          type: "string",
          description: "Comma-separated list of section IDs",
          required: false,
        },
        {
          name: "sections_not",
          type: "string",
          description: "Comma-separated list of section IDs to exclude",
          required: false,
        },
        {
          name: "sort_ascending",
          type: "boolean",
          description: "Sort in ascending order",
          required: false,
        },
        {
          name: "sort_by",
          type: "string",
          description:
            "Sort by: due_date, created_at, completed_at, likes, modified_at",
          required: false,
        },
        {
          name: "start_on",
          type: "string",
          description: "ISO 8601 date string or null",
          required: false,
        },
        {
          name: "start_on_after",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "start_on_before",
          type: "string",
          description: "ISO 8601 date string",
          required: false,
        },
        {
          name: "tags_all",
          type: "string",
          description: "Comma-separated list of tag IDs that must all match",
          required: false,
        },
        {
          name: "tags_any",
          type: "string",
          description: "Comma-separated list of tag IDs",
          required: false,
        },
        {
          name: "tags_not",
          type: "string",
          description: "Comma-separated list of tag IDs to exclude",
          required: false,
        },
        {
          name: "teams_any",
          type: "string",
          description: "Comma-separated list of team IDs",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Text to search for in task names and descriptions",
          required: false,
        },
        {
          name: "workspace",
          type: "string",
          description: "The workspace to search in",
          required: true,
        },
      ],
    },
    {
      name: "asana_get_task",
      description: "Get detailed information about a specific task",
      parameters: [
        {
          name: "opt_fields",
          type: "string",
          description: "Comma-separated list of optional fields to include",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "The task ID to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/roychri/mcp-server-asana",
  _varName: "mcpserverasanaPlugin",
};

const deepseekR1McpServerPlugin: Plugin = {
  id: "7y2c1x48oz",
  name: "Deepseek R1 MCP Server",
  description:
    "Enables browser automation and real-time computer vision tasks through AI-driven commands, offering zero-cost digital navigation and interaction for enhanced web experiences.",
  image: "https://github.com/grapheneaffiliate.png",
  actions: [],
  githubUrl: "https://github.com/grapheneaffiliate/dRiNk-ThE-kOoLaId",
  _varName: "deepseekR1McpServerPlugin",
};

const browserAutomationMcpServerPlugin: Plugin = {
  id: "3o1j64rc1q",
  name: "Browser Automation MCP Server",
  description:
    "Enables AI agents to control web browsers via a standardized interface for operations like launching, interacting with, and closing browsers.",
  image: "https://github.com/grapheneaffiliate.png",
  actions: [],
  githubUrl: "https://github.com/grapheneaffiliate/browser-automation-mcp",
  _varName: "browserAutomationMcpServerPlugin",
};

const mcpSourceTreeServerPlugin: Plugin = {
  id: "1igr60piqh",
  name: "MCP Source Tree Server",
  description:
    "Generates a JSON file tree from a specified directory's 'src' folder, adhering to '.gitignore' rules, allowing for quick project structure review in Claude.",
  image: "https://github.com/owayo.png",
  actions: [
    {
      name: "get_src_tree",
      description:
        "\n    Generate a file tree for the specified directory, filtering files based on .gitignore.\n    Traverses the filesystem and generates a JSON-formatted tree structure that preserves hierarchy.\n    ",
      parameters: [
        {
          name: "directory",
          type: "string",
          description: "Parameter: directory",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/owayo/mcp-src-tree",
  _varName: "mcpSourceTreeServerPlugin",
};

const crawl4aiMcpServerPlugin: Plugin = {
  id: "u7vv8jye74",
  name: "Crawl4AI MCP Server",
  description:
    "Crawl4AI MCP Server is an intelligent information retrieval server offering robust search capabilities and LLM-optimized web content understanding, utilizing multi-engine search and intelligent content extraction to efficiently gather and comprehend internet information.",
  image: "https://github.com/weidwonder.png",
  actions: [],
  githubUrl: "https://github.com/weidwonder/crawl4ai-mcp-server",
  _varName: "crawl4aiMcpServerPlugin",
};

const codeAnalysisMcpServerPlugin: Plugin = {
  id: "8jplfnetf9",
  name: "Code Analysis MCP Server",
  description:
    "The server facilitates natural language interactions for exploring and understanding codebases, providing insights into data models and system architecture using a cost-effective, simple setup with support for existing Claude Pro subscriptions.",
  image: "https://github.com/saiprashanths.png",
  actions: [
    {
      name: "initialize_repository",
      description:
        "Initialize the repository path for future code analysis operations.\n    \n    Args:\n        path: Path to the repository root directory that contains the code to analyze\n    ",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "get_repo_info",
      description:
        "Get information about the currently initialized code repository.",
      parameters: [],
    },
    {
      name: "get_repo_structure",
      description:
        "Get the structure of files and directories in the repository.\n    \n    Args:\n        sub_path: Optional subdirectory path relative to repository root\n        depth: Optional maximum depth to traverse (default is 3)\n    ",
      parameters: [
        {
          name: "depth",
          type: "string",
          description: "Parameter: depth",
          required: false,
        },
        {
          name: "sub_path",
          type: "string",
          description: "Parameter: sub_path",
          required: false,
        },
      ],
    },
    {
      name: "read_file",
      description:
        "Read and display the contents of a file from the repository.\n    \n    Args:\n        file_path: Path to the file relative to repository root\n    ",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/saiprashanths/code-analysis-mcp",
  _varName: "codeAnalysisMcpServerPlugin",
};

const mcpServerFirecrawlPlugin: Plugin = {
  id: "th4nzh22ea",
  name: "MCP Server Firecrawl",
  description:
    "A server that provides web scraping and intelligent content searching capabilities using the Firecrawl API, enabling AI agents to extract structured data from websites and perform content searches.",
  image: "https://github.com/Msparihar.png",
  actions: [
    {
      name: "crawl",
      description: "Crawls a website starting from a base URL",
      parameters: [
        {
          name: "allowBackwardLinks",
          type: "boolean",
          description: "Allow crawling links that point to parent directories",
          required: false,
        },
        {
          name: "allowExternalLinks",
          type: "boolean",
          description: "Allow crawling links to external domains",
          required: false,
        },
        {
          name: "excludePaths",
          type: "string array",
          description: "URL patterns to exclude",
          required: false,
        },
        {
          name: "ignoreQueryParameters",
          type: "boolean",
          description: "Ignore URL query parameters when comparing URLs",
          required: false,
        },
        {
          name: "ignoreSitemap",
          type: "boolean",
          description: "Ignore sitemap.xml during crawling",
          required: false,
        },
        {
          name: "includePaths",
          type: "string array",
          description: "URL patterns to include",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum pages to crawl",
          required: false,
        },
        {
          name: "maxDepth",
          type: "number",
          description: "Maximum crawl depth",
          required: false,
        },
        {
          name: "scrapeOptions",
          type: "object",
          description: "Options for scraping crawled pages",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Base URL to start crawling from",
          required: true,
        },
        {
          name: "webhook",
          type: "string",
          description: "Webhook URL for progress notifications",
          required: false,
        },
      ],
    },
    {
      name: "map",
      description: "Maps a website's structure",
      parameters: [
        {
          name: "ignoreSitemap",
          type: "boolean",
          description: "Ignore sitemap.xml during mapping",
          required: false,
        },
        {
          name: "includeSubdomains",
          type: "boolean",
          description: "Include subdomains in mapping",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum links to return",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Search query for mapping",
          required: false,
        },
        {
          name: "sitemapOnly",
          type: "boolean",
          description: "Only use sitemap.xml for mapping",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Request timeout",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Base URL to map",
          required: true,
        },
      ],
    },
    {
      name: "extract",
      description: "Extracts structured data from URLs",
      parameters: [
        {
          name: "enableWebSearch",
          type: "boolean",
          description: "Use web search for additional data",
          required: false,
        },
        {
          name: "ignoreSitemap",
          type: "boolean",
          description: "Ignore sitemap.xml during processing",
          required: false,
        },
        {
          name: "includeSubdomains",
          type: "boolean",
          description: "Include subdomains in processing",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Extraction guidance prompt",
          required: false,
        },
        {
          name: "schema",
          type: "object",
          description: "Data structure schema",
          required: false,
        },
        {
          name: "urls",
          type: "string array",
          description: "URLs to extract from",
          required: true,
        },
      ],
    },
    {
      name: "scrape_url",
      description: "Scrape content from a URL using Firecrawl API",
      parameters: [
        {
          name: "blockAds",
          type: "boolean",
          description: "Enable ad/cookie popup blocking",
          required: false,
        },
        {
          name: "excludeTags",
          type: "string array",
          description: "Tags to exclude from output",
          required: false,
        },
        {
          name: "formats",
          type: "string array",
          description: "Output formats",
          required: false,
        },
        {
          name: "includeTags",
          type: "string array",
          description: "Tags to include in output",
          required: false,
        },
        {
          name: "jsonOptions",
          type: "object",
          description: "Parameter: jsonOptions",
          required: false,
        },
        {
          name: "location",
          type: "object",
          description: "Parameter: location",
          required: false,
        },
        {
          name: "mobile",
          type: "boolean",
          description: "Emulate mobile device",
          required: false,
        },
        {
          name: "onlyMainContent",
          type: "boolean",
          description:
            "Only return main content excluding headers, navs, footers",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to scrape",
          required: true,
        },
        {
          name: "waitFor",
          type: "number",
          description: "Delay in milliseconds before fetching content",
          required: false,
        },
      ],
    },
    {
      name: "search_content",
      description: "Search content using Firecrawl API",
      parameters: [
        {
          name: "country",
          type: "string",
          description: "Country code",
          required: false,
        },
        {
          name: "lang",
          type: "string",
          description: "Language code",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "Location parameter",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "scrapeOptions",
          type: "object",
          description: "Parameter: scrapeOptions",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Request timeout in milliseconds",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Msparihar/mcp-server-firecrawl",
  _varName: "mcpServerFirecrawlPlugin",
};

const datetimeMcpServerPlugin: Plugin = {
  id: "fd8f58oegw",
  name: "Datetime MCP Server",
  description:
    "This server enables users to store, manage, and summarize notes using a custom URI scheme, with functionality to add new notes and generate summaries with varying levels of detail.",
  image: "https://github.com/bossjones.png",
  actions: [
    {
      name: "add-note",
      description: "Add a new note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "get-current-time",
      description: "Get the current time in various formats",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Format to return the time in",
          required: true,
        },
        {
          name: "timezone",
          type: "string",
          description: "Optional timezone (default: local system timezone)",
          required: false,
        },
      ],
    },
    {
      name: "format-date",
      description: "Format a date string according to the specified format",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Date string to format (default: today)",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Format string (e.g., '%Y-%m-%d %H:%M:%S')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bossjones/datetime-mcp-server",
  _varName: "datetimeMcpServerPlugin",
};

const mcpAsyncServerPlugin: Plugin = {
  id: "k2os9maqr0",
  name: "MCP Async Server",
  description:
    "This server implements the Model Context Protocol (MCP) to handle asynchronous tasks with real-time status tracking, robust error handling, and automatic resource management.",
  image: "https://github.com/ViezeVingertjes.png",
  actions: [
    {
      name: "process_task",
      description: "Start processing a task asynchronously.",
      parameters: [
        {
          name: "delayMs",
          type: "number",
          description:
            "Optional delay in milliseconds to simulate processing time",
          required: false,
        },
        {
          name: "input",
          type: "string",
          description: "The input to process",
          required: true,
        },
        {
          name: "timeoutMs",
          type: "number",
          description: "Optional timeout in milliseconds",
          required: false,
        },
      ],
    },
    {
      name: "check_task_status",
      description: "Check the status of an async task",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "The task ID returned by process_task",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ViezeVingertjes/example-async-mcp",
  _varName: "mcpAsyncServerPlugin",
};

const drupalmodulesmcpMcpServer1Plugin: Plugin = {
  id: "xhqtor5rub",
  name: "Drupal-Modules-MCP MCP Server",
  description:
    "This TypeScript-based MCP server allows users to manage and interact with a note system through Model Context Protocol, enabling note creation and summarization with URIs and metadata.",
  image: "https://github.com/Cleversoft-IT.png",
  actions: [
    {
      name: "get_command_info",
      description: "Get detailed information about a specific Drush command",
      parameters: [
        {
          name: "command_name",
          type: "string",
          description: "Name of the Drush command",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Drush version (e.g. '13.x'). Defaults to '13.x'",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Cleversoft-IT/drupal-tools-mcp",
  _varName: "drupalmodulesmcpMcpServer1Plugin",
};

const mcpServerTemplate2Plugin: Plugin = {
  id: "vo6c2ak3zs",
  name: "MCP Server Template",
  description:
    "A TypeScript-based template for developing Model Context Protocol servers with features like dependency injection and service-based architecture, facilitating the creation and integration of custom data processing tools.",
  image: "https://github.com/stevennevins.png",
  actions: [
    {
      name: "example-tool",
      description: "An example tool that processes input data",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "Input string to process",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stevennevins/mcp-server-template",
  _varName: "mcpServerTemplate2Plugin",
};

const academicPaperSearchMcpServerPlugin: Plugin = {
  id: "kzsu1zzz9j",
  name: "Academic Paper Search MCP Server",
  description:
    "Enables real-time search and retrieval of academic paper information from multiple sources, providing access to paper metadata, abstracts, and full-text content when available, with structured data responses for integration with AI models that support tool/function calling.",
  image: "https://github.com/afrise.png",
  actions: [
    {
      name: "search_papers",
      description:
        "Search for papers across multiple sources.\n\n    args: \n        query: the search query\n        limit: the maximum number of results to return (default 10)\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "fetch_paper_details",
      description:
        'Get detailed information about a specific paper.\n\n    Args:\n        paper_id: Paper identifier (DOI for Crossref, paper ID for Semantic Scholar)\n        source: Source database ("semantic_scholar" or "crossref")\n    ',
      parameters: [
        {
          name: "paper_id",
          type: "string",
          description: "Parameter: paper_id",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Parameter: source",
          required: false,
        },
      ],
    },
    {
      name: "search_by_topic",
      description:
        "Search for papers by topic with optional date range. \n    \n    Note: Query length is limited to 300 characters. Longer queries will be automatically truncated.\n    \n    Args:\n        topic (str): Search query (max 300 chars)\n        year_start (int, optional): Start year for date range\n        year_end (int, optional): End year for date range  \n        limit (int, optional): Maximum number of results to return (default 10)\n        \n    Returns:\n        str: Formatted search results or error message\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "topic",
          type: "string",
          description: "Parameter: topic",
          required: true,
        },
        {
          name: "year_end",
          type: "integer",
          description: "Parameter: year_end",
          required: false,
        },
        {
          name: "year_start",
          type: "integer",
          description: "Parameter: year_start",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/afrise/academic-search-mcp-server",
  _varName: "academicPaperSearchMcpServerPlugin",
};

const webAccessibilityMcpServerPlugin: Plugin = {
  id: "mya2mkxy9a",
  name: "Web Accessibility MCP Server",
  description:
    "Provides web accessibility analysis and color blindness simulation using axe-core and Puppeteer, enabling detailed accessibility checks and visual simulations based on WCAG guidelines.",
  image: "https://github.com/bilhasry-deriv.png",
  actions: [
    {
      name: "check_accessibility",
      description: "Check web accessibility of a given URL using axe-core",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to analyze",
          required: true,
        },
        {
          name: "userAgent",
          type: "string",
          description: "Optional user agent string to use for the request",
          required: false,
        },
        {
          name: "waitForSelector",
          type: "string",
          description: "Optional CSS selector to wait for before analysis",
          required: false,
        },
      ],
    },
    {
      name: "simulate_colorblind",
      description: "Simulate how a webpage looks for colorblind users",
      parameters: [
        {
          name: "outputPath",
          type: "string",
          description: "Optional path to save the screenshot",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of color blindness to simulate",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL to capture",
          required: true,
        },
        {
          name: "userAgent",
          type: "string",
          description: "Optional user agent string to use for the request",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bilhasry-deriv/mcp-web-a11y",
  _varName: "webAccessibilityMcpServerPlugin",
};

const web3McpServerPlugin: Plugin = {
  id: "an8x6gmzdn",
  name: "Web3 MCP Server",
  description:
    "A Model-Context-Protocol server enabling users to perform basic operations on Solana and Ethereum blockchains through simple RPC endpoints.",
  image: "https://github.com/strangelove-ventures.png",
  actions: [
    {
      name: "getSlot",
      description: "Get the current slot",
      parameters: [],
    },
    {
      name: "getBalance",
      description: "Get balance for a Solana address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Solana account address",
          required: true,
        },
      ],
    },
    {
      name: "getKeypairInfo",
      description: "Get information about a keypair from its secret key",
      parameters: [
        {
          name: "secretKey",
          type: "string",
          description: "Base58 encoded secret key or array of bytes",
          required: true,
        },
      ],
    },
    {
      name: "getAccountInfo",
      description: "Get detailed account information for a Solana address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Solana account address",
          required: true,
        },
        {
          name: "encoding",
          type: "string",
          description: "Data encoding format",
          required: false,
        },
      ],
    },
    {
      name: "transfer",
      description: "Transfer SOL from your keypair to another address",
      parameters: [
        {
          name: "amount",
          type: "number",
          description: "Amount of SOL to send",
          required: true,
        },
        {
          name: "secretKey",
          type: "string",
          description:
            "Your keypair's secret key (as comma-separated numbers or JSON array)",
          required: true,
        },
        {
          name: "toAddress",
          type: "string",
          description: "Destination wallet address",
          required: true,
        },
      ],
    },
    {
      name: "getSplTokenBalances",
      description: "Get SPL token balances for a Solana address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Solana account address",
          required: true,
        },
      ],
    },
    {
      name: "getSplTokenInfo",
      description:
        "Get detailed information about a specific SPL token account",
      parameters: [
        {
          name: "ownerAddress",
          type: "string",
          description: "Token account owner address",
          required: true,
        },
        {
          name: "tokenMint",
          type: "string",
          description: "Token mint address",
          required: true,
        },
      ],
    },
    {
      name: "getEvmBalance",
      description:
        "Get native token balance for an EVM address on any supported network",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "EVM account address",
          required: true,
        },
        {
          name: "network",
          type: "string",
          description:
            "Network name (ethereum, base, arbitrum, optimism, bsc, polygon, avalanche)",
          required: true,
        },
      ],
    },
    {
      name: "getEvmTokenBalance",
      description:
        "Get ERC-20 token balance for an address on any supported EVM network",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "EVM account address",
          required: true,
        },
        {
          name: "network",
          type: "string",
          description:
            "Network name (ethereum, base, arbitrum, optimism, bsc, polygon, avalanche)",
          required: true,
        },
        {
          name: "tokenAddress",
          type: "string",
          description: "ERC-20 token contract address",
          required: true,
        },
      ],
    },
    {
      name: "getGasPrice",
      description: "Get current gas price for any supported EVM network",
      parameters: [
        {
          name: "network",
          type: "string",
          description:
            "Network name (ethereum, base, arbitrum, optimism, bsc, polygon, avalanche)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/strangelove-ventures/web3-mcp",
  _varName: "web3McpServerPlugin",
};

const mcptoolhousePlugin: Plugin = {
  id: "6rasjnw19n",
  name: "MCP-toolhouse",
  description:
    "MCP server for toolhouse.ai. This does not rely on an external llm unlike the official server.",
  image: "https://github.com/SecretiveShell.png",
  actions: [],
  githubUrl: "https://github.com/SecretiveShell/MCP-toolhouse",
  _varName: "mcptoolhousePlugin",
};

const mcpServerRedditPlugin: Plugin = {
  id: "4032xr14pu",
  name: "MCP Server Reddit",
  description:
    "A server allowing interaction with Reddit via the public API, enabling browsing frontpage posts, retrieving subreddit details, and reading post comments through a Model Context Protocol.",
  image: "https://github.com/Hawstein.png",
  actions: [
    {
      name: "get_frontpage_posts",
      description: "Get hot posts from Reddit frontpage",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of posts to return (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "get_subreddit_info",
      description: "Get information about a subreddit",
      parameters: [
        {
          name: "subreddit_name",
          type: "string",
          description: "Name of the subreddit (e.g. 'Python', 'news')",
          required: true,
        },
      ],
    },
    {
      name: "get_subreddit_hot_posts",
      description: "Get hot posts from a specific subreddit",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of posts to return (default: 10)",
          required: false,
        },
        {
          name: "subreddit_name",
          type: "string",
          description: "Name of the subreddit (e.g. 'Python', 'news')",
          required: true,
        },
      ],
    },
    {
      name: "get_subreddit_new_posts",
      description: "Get new posts from a specific subreddit",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of posts to return (default: 10)",
          required: false,
        },
        {
          name: "subreddit_name",
          type: "string",
          description: "Name of the subreddit (e.g. 'Python', 'news')",
          required: true,
        },
      ],
    },
    {
      name: "get_subreddit_top_posts",
      description: "Get top posts from a specific subreddit",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of posts to return (default: 10)",
          required: false,
        },
        {
          name: "subreddit_name",
          type: "string",
          description: "Name of the subreddit (e.g. 'Python', 'news')",
          required: true,
        },
        {
          name: "time",
          type: "string",
          description:
            "Time filter for top posts (e.g. 'hour', 'day', 'week', 'month', 'year', 'all')",
          required: false,
        },
      ],
    },
    {
      name: "get_subreddit_rising_posts",
      description: "Get rising posts from a specific subreddit",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of posts to return (default: 10)",
          required: false,
        },
        {
          name: "subreddit_name",
          type: "string",
          description: "Name of the subreddit (e.g. 'Python', 'news')",
          required: true,
        },
      ],
    },
    {
      name: "get_post_content",
      description: "Get detailed content of a specific post",
      parameters: [
        {
          name: "comment_depth",
          type: "integer",
          description: "Maximum depth of comment tree (default: 3)",
          required: false,
        },
        {
          name: "comment_limit",
          type: "integer",
          description: "Number of top-level comments to return (default: 10)",
          required: false,
        },
        {
          name: "post_id",
          type: "string",
          description: "ID of the post",
          required: true,
        },
      ],
    },
    {
      name: "get_post_comments",
      description: "Get comments from a post",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of comments to return (default: 10)",
          required: false,
        },
        {
          name: "post_id",
          type: "string",
          description: "ID of the post",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Hawstein/mcp-server-reddit",
  _varName: "mcpServerRedditPlugin",
};

const mcpCodeExecutorPlugin: Plugin = {
  id: "45ix8xode3",
  name: "MCP Code Executor",
  description:
    "Allows LLMs to execute Python code in a specified Conda environment, enabling access to necessary libraries and dependencies for efficient code execution.",
  image: "https://github.com/bazinga012.png",
  actions: [
    {
      name: "execute_code",
      description: "Execute Python code in the specified conda environment",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Python code to execute",
          required: true,
        },
        {
          name: "filename",
          type: "string",
          description:
            "Optional: Name of the file to save the code (default: generated UUID)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bazinga012/mcp_code_executor",
  _varName: "mcpCodeExecutorPlugin",
};

const mcpDeepseekAgentServerPlugin: Plugin = {
  id: "hwiczumm33",
  name: "MCP Deepseek Agent Server",
  description:
    "Enables seamless AI integration via Ollama's Deepseek model, providing protocol compliance and automatic configuration for clean AI-driven interactions.",
  image: "https://github.com/freebeiro.png",
  actions: [],
  githubUrl: "https://github.com/freebeiro/mcp-deepseek-agent",
  _varName: "mcpDeepseekAgentServerPlugin",
};

const safariScreenshotMcpServerPlugin: Plugin = {
  id: "q6bgsw64aw",
  name: "Safari Screenshot MCP Server",
  description:
    "Enables capturing high-quality native macOS screenshots using Safari through a Node.js server, supporting various sizes, zoom levels, and load wait times.",
  image: "https://github.com/rogerheykoop.png",
  actions: [
    {
      name: "take_screenshot",
      description: "Take a screenshot of a webpage using Safari on macOS",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Window height in pixels (default: 768)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Path where the screenshot will be saved (default: ./screenshots/[hostname]-[timestamp].png)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to capture",
          required: true,
        },
        {
          name: "waitTime",
          type: "number",
          description: "Time to wait for page load in seconds (default: 3)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Window width in pixels (default: 1024)",
          required: false,
        },
        {
          name: "zoomLevel",
          type: "number",
          description: "Zoom level (1 = 100%, 0.5 = 50%, 2 = 200%)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/rogerheykoop/mcp-safari-screenshot",
  _varName: "safariScreenshotMcpServerPlugin",
};

const clickupMcpServer2Plugin: Plugin = {
  id: "9a7p2exf6u",
  name: "ClickUp MCP Server",
  description:
    "This server integrates AI assistants with ClickUp workspaces, enabling task, team, list, and board management through a secure OAuth2 authentication process.",
  image: "https://github.com/Nazruden.png",
  actions: [
    {
      name: "clickup_create_task",
      description: "Create a new task in ClickUp workspace",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Array of assignee user IDs",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Task description in markdown format",
          required: false,
        },
        {
          name: "due_date",
          type: "string",
          description: "Due date in milliseconds timestamp",
          required: false,
        },
        {
          name: "list_id",
          type: "string",
          description:
            "The ID of the list to create the task in. The unique identifier for the resource in ClickUp.",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Task name",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description: "Task priority (1: Urgent, 2: High, 3: Normal, 4: Low)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Task status",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Array of tag names",
          required: false,
        },
        {
          name: "time_estimate",
          type: "string",
          description: "Time estimate in milliseconds",
          required: false,
        },
      ],
    },
    {
      name: "clickup_update_task",
      description: "Update an existing task in ClickUp",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Array of assignee user IDs",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Task description in markdown format",
          required: false,
        },
        {
          name: "due_date",
          type: "string",
          description: "Due date in milliseconds timestamp",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Task name",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Task priority (1: Urgent, 2: High, 3: Normal, 4: Low)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Task status",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Array of tag names",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description:
            "The ID of the task to update. The unique identifier for the resource in ClickUp.",
          required: true,
        },
        {
          name: "time_estimate",
          type: "string",
          description: "Time estimate in milliseconds",
          required: false,
        },
      ],
    },
    {
      name: "clickup_get_teams",
      description: "Get all teams accessible to the authenticated user",
      parameters: [],
    },
    {
      name: "clickup_get_lists",
      description: "Get all lists in a specific folder",
      parameters: [
        {
          name: "folder_id",
          type: "string",
          description:
            "The ID of the folder to get lists from. The unique identifier for the resource in ClickUp.",
          required: true,
        },
      ],
    },
    {
      name: "clickup_create_board",
      description: "Create a new board in a ClickUp space",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Board description or content",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Board name",
          required: true,
        },
        {
          name: "space_id",
          type: "string",
          description:
            "The ID of the space to create the board in. The unique identifier for the resource in ClickUp.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Nazruden/clickup-mcp-server",
  _varName: "clickupMcpServer2Plugin",
};

const fileContextMcpPlugin: Plugin = {
  id: "cllpbhp6yy",
  name: "File Context MCP",
  description:
    "This server provides an API to query Large Language Models using context from local files, supporting various models and file types for context-aware responses.",
  image: "https://github.com/compiledwithproblems.png",
  actions: [],
  githubUrl: "https://github.com/compiledwithproblems/file-context-mcp",
  _varName: "fileContextMcpPlugin",
};

const mcpCommandAndSearchServerPlugin: Plugin = {
  id: "beox7u7a9u",
  name: "MCP Command and Search Server",
  description:
    "Facilitates executing system commands and retrieving web data using the Brave Search API by interpreting user intents via a Large Language Model (LLM).",
  image: "https://github.com/mjunaid46.png",
  actions: [],
  githubUrl: "https://github.com/mjunaid46/mcp",
  _varName: "mcpCommandAndSearchServerPlugin",
};

const mcpArchitectPlugin: Plugin = {
  id: "51892k2rxw",
  name: "MCP Architect",
  description:
    "Facilitates comprehensive architectural design and evaluation through specialized agents, rich resources, and powerful tools covering diverse architectural domains, including cloud, AI, and blockchain.",
  image: "https://github.com/squirrelogic.png",
  actions: [
    {
      name: "analyze_architecture",
      description:
        "Perform a comprehensive analysis of a software architecture",
      parameters: [
        {
          name: "constraints",
          type: "string array",
          description: "Parameter: constraints",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: true,
        },
        {
          name: "domain",
          type: "string",
          description: "Parameter: domain",
          required: true,
        },
        {
          name: "requirements",
          type: "string array",
          description: "Parameter: requirements",
          required: true,
        },
      ],
    },
    {
      name: "generate_architecture",
      description:
        "Generate a software architecture design based on requirements",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Parameter: domain",
          required: true,
        },
        {
          name: "requirements",
          type: "string array",
          description: "Parameter: requirements",
          required: true,
        },
        {
          name: "style",
          type: "string",
          description: "Parameter: style",
          required: false,
        },
      ],
    },
    {
      name: "evaluate_architecture",
      description: "Evaluate an architecture design against specific criteria",
      parameters: [
        {
          name: "architecture",
          type: "object",
          description: "Parameter: architecture",
          required: true,
        },
        {
          name: "criteria",
          type: "string array",
          description: "Parameter: criteria",
          required: true,
        },
        {
          name: "domain",
          type: "string",
          description: "Parameter: domain",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/squirrelogic/mcp-architect",
  _varName: "mcpArchitectPlugin",
};

const bitcoinMcpServerPlugin: Plugin = {
  id: "y42jsc8cig",
  name: "Bitcoin MCP Server",
  description:
    "Facilitates interaction with the Bitcoin network via the Model Context Protocol, enabling key generation, address validation, transaction decoding, and blockchain data retrieval.",
  image: "https://github.com/AbdelStark.png",
  actions: [
    {
      name: "generate_key",
      description: "Generate a new Bitcoin key pair and address",
      parameters: [],
    },
    {
      name: "validate_address",
      description: "Validate a Bitcoin address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Bitcoin address to validate",
          required: true,
        },
      ],
    },
    {
      name: "decode_tx",
      description: "Decode a Bitcoin transaction",
      parameters: [
        {
          name: "tx",
          type: "string",
          description: "Transaction hex",
          required: true,
        },
      ],
    },
    {
      name: "get_latest_block",
      description: "Get the latest block",
      parameters: [],
    },
    {
      name: "get_transaction",
      description: "Get transaction details",
      parameters: [
        {
          name: "txid",
          type: "string",
          description: "Transaction ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AbdelStark/bitcoin-mcp",
  _varName: "bitcoinMcpServerPlugin",
};

const mcpperplexityPlugin: Plugin = {
  id: "0nggjl0ohi",
  name: "mcp-perplexity",
  description: "MCP Server for the Perplexity API.",
  image: "https://github.com/daniel-lxs.png",
  actions: [],
  githubUrl: "https://github.com/daniel-lxs/mcp-perplexity",
  _varName: "mcpperplexityPlugin",
};

const mcpAccessServerPlugin: Plugin = {
  id: "l0143hjrjj",
  name: "MCP Access Server",
  description:
    "Enables text extraction from web pages and PDFs, and execution of predefined commands, enhancing content processing and automation capabilities.",
  image: "https://github.com/shin-t-o.png",
  actions: [
    {
      name: "get-webpage-markdown",
      description: "Parses a web page into Markdown and returns it",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL of the web page to parse",
          required: true,
        },
      ],
    },
    {
      name: "get-pdf-content",
      description: "Text parsing and return of PDF content",
      parameters: [
        {
          name: "pdfFilePath",
          type: "string",
          description: "The filepath of the PDF file to parse",
          required: true,
        },
      ],
    },
    {
      name: "command-execute",
      description:
        "Executes a command in the allowed list: ls / mkdir / cd / npm / npx / node / git / rm",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            "The command(command only) to execute on Windows PowerShell",
          required: true,
        },
        {
          name: "cwd",
          type: "string",
          description: "Working directory at command execution",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/shin-t-o/mcp-access",
  _varName: "mcpAccessServerPlugin",
};

const perplexityMcpServer3Plugin: Plugin = {
  id: "97nsl3drhq",
  name: "Perplexity MCP Server",
  description:
    "Facilitates web search capabilities using Perplexity's API, allowing users to retrieve search results through Claude's interface.",
  image: "https://github.com/jaacob.png",
  actions: [
    {
      name: "search",
      description: "Search the web using Perplexity AI",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jaacob/perplexity-mcp",
  _varName: "perplexityMcpServer3Plugin",
};

const awsWellarchitectedFrameworkMcpServerPlugin: Plugin = {
  id: "dziz3e836z",
  name: "AWS Well-Architected Framework MCP Server",
  description:
    "This server provides guidance and recommendations based on AWS's Well-Architected Framework for cloud architectures, enabling analysis and review focused on operational excellence, security, reliability, performance efficiency, cost optimization, and sustainability.",
  image: "https://github.com/artofthepossible.png",
  actions: [],
  githubUrl: "https://github.com/artofthepossible/mcp-well-architected",
  _varName: "awsWellarchitectedFrameworkMcpServerPlugin",
};

const mcpTitanPlugin: Plugin = {
  id: "oleughyw2v",
  name: "MCP Titan",
  description:
    "This advanced memory server facilitates neural memory-based sequence learning and prediction, enhancing code generation and understanding through state maintenance and manifold optimization as inspired by Google Research's framework.",
  image: "https://github.com/henryhawke.png",
  actions: [],
  githubUrl: "https://github.com/henryhawke/mcp-titan",
  _varName: "mcpTitanPlugin",
};

const minecraftDockerMcpPlugin: Plugin = {
  id: "dlb3k8u61h",
  name: "Minecraft Docker MCP",
  description:
    "Enables AI interactions with a running Minecraft server inside a Docker container using RCON, allowing models to programmatically create Minecraft builds and manage the server.",
  image: "https://github.com/rgbkrk.png",
  actions: [],
  githubUrl: "https://github.com/rgbkrk/rcon-mcp",
  _varName: "minecraftDockerMcpPlugin",
};

const gitForensicsMcpPlugin: Plugin = {
  id: "xp4kpz0mdl",
  name: "Git Forensics MCP",
  description:
    "A specialized MCP server for in-depth analysis of git repositories, offering tools for branch overview, time period analysis, file changes, and merge recommendations.",
  image: "https://github.com/davidorex.png",
  actions: [
    {
      name: "get_branch_overview",
      description: "Get high-level overview of branch states and relationships",
      parameters: [
        {
          name: "branches",
          type: "string array",
          description: "Branches to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "analyze_time_period",
      description:
        "Analyze detailed development activity in a specific time period",
      parameters: [
        {
          name: "branches",
          type: "string array",
          description: "Branches to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
        {
          name: "timeRange",
          type: "object",
          description: "Parameter: timeRange",
          required: true,
        },
      ],
    },
    {
      name: "analyze_file_changes",
      description: "Analyze changes to specific files across branches",
      parameters: [
        {
          name: "branches",
          type: "string array",
          description: "Branches to analyze",
          required: true,
        },
        {
          name: "files",
          type: "string array",
          description: "Files to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "get_merge_recommendations",
      description: "Get detailed merge strategy recommendations",
      parameters: [
        {
          name: "branches",
          type: "string array",
          description: "Branches to analyze",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path to write analysis output",
          required: true,
        },
        {
          name: "repoPath",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/davidorex/git-forensics-mcp",
  _varName: "gitForensicsMcpPlugin",
};

const apptweakMcpServerPlugin: Plugin = {
  id: "f576yxbmsa",
  name: "AppTweak MCP Server",
  description:
    "Empowers users to search and analyze mobile apps via the AppTweak API, providing insights into app store data, reviews, ratings, and keyword performance on iOS and Android platforms.",
  image: "https://github.com/robertredbox.png",
  actions: [],
  githubUrl: "https://github.com/robertredbox/apptweak-mcp-server",
  _varName: "apptweakMcpServerPlugin",
};

const wegeneAssistantMcpServerPlugin: Plugin = {
  id: "5yj84euypm",
  name: "Wegene Assistant MCP Server",
  description:
    "Leverages large language models to analyze users' WeGene genetic testing reports, providing access to report data via custom URI schemes and enabling profile and report management through OAuth authentication and API utilization.",
  image: "https://github.com/xraywu.png",
  actions: [
    {
      name: "wegene-oauth",
      description:
        "Authorizing a user's account using WeGene Open API with oAuth2 protocol and retrieve a valid access token for further use",
      parameters: [],
    },
    {
      name: "wegene-get-profiles",
      description: "Retrieve all the profiles under the current account",
      parameters: [],
    },
    {
      name: "wegene-get-report-info",
      description: "Get all available report information",
      parameters: [],
    },
    {
      name: "wegene-get-report",
      description: "Get a specific genetic test report from a profile",
      parameters: [
        {
          name: "profile_id",
          type: "string",
          description: "The ID of the profile",
          required: true,
        },
        {
          name: "report_endpoint",
          type: "string",
          description: "The endpoint of the report",
          required: true,
        },
        {
          name: "report_id",
          type: "string",
          description: "The ID of the report",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/xraywu/mcp-wegene-assistant",
  _varName: "wegeneAssistantMcpServerPlugin",
};

const githubMcpServerPlusPlugin: Plugin = {
  id: "qmvm4mx87p",
  name: "GitHub MCP Server Plus",
  description:
    "MCP Server for the GitHub API, providing features for file operations, repository management, and advanced search, with automatic branch creation and comprehensive error handling.",
  image: "https://github.com/PhialsBasement.png",
  actions: [
    {
      name: "create_or_update_file",
      description: "Create or update a single file in a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to create/update the file in",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Content of the file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path where to create/update the file",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "sha",
          type: "string",
          description:
            "SHA of the file being replaced (required when updating existing files)",
          required: false,
        },
      ],
    },
    {
      name: "search_repositories",
      description: "Search for GitHub repositories",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Number of results per page (default: 30, max: 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (see GitHub search syntax)",
          required: true,
        },
      ],
    },
    {
      name: "create_repository",
      description: "Create a new GitHub repository in your account",
      parameters: [
        {
          name: "autoInit",
          type: "boolean",
          description: "Initialize with README.md",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "private",
          type: "boolean",
          description: "Whether the repository should be private",
          required: false,
        },
      ],
    },
    {
      name: "get_file_contents",
      description:
        "Get the contents of a file or directory from a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to get contents from",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the file or directory",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "push_files_content",
      description:
        "Push multiple files with direct content to a GitHub repository in a single commit",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to push to (e.g., 'main' or 'master')",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Array of files to push with their content",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "push_files_from_path",
      description:
        "Push multiple files from filesystem paths to a GitHub repository in a single commit",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to push to (e.g., 'main' or 'master')",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Array of files to push from filesystem paths",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "Create a new issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Parameter: assignees",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Parameter: milestone",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request",
      description: "Create a new pull request in a GitHub repository",
      parameters: [
        {
          name: "base",
          type: "string",
          description:
            "The name of the branch you want the changes pulled into",
          required: true,
        },
        {
          name: "body",
          type: "string",
          description: "Pull request body/description",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Whether to create the pull request as a draft",
          required: false,
        },
        {
          name: "head",
          type: "string",
          description:
            "The name of the branch where your changes are implemented",
          required: true,
        },
        {
          name: "maintainer_can_modify",
          type: "boolean",
          description: "Whether maintainers can modify the pull request",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Pull request title",
          required: true,
        },
      ],
    },
    {
      name: "fork_repository",
      description:
        "Fork a GitHub repository to your account or specified organization",
      parameters: [
        {
          name: "organization",
          type: "string",
          description:
            "Optional: organization to fork to (defaults to your personal account)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description: "Create a new branch in a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Name for the new branch",
          required: true,
        },
        {
          name: "from_branch",
          type: "string",
          description:
            "Optional: source branch to create from (defaults to the repository's default branch)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "list_commits",
      description: "Get list of commits of a branch in a GitHub repository",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Parameter: perPage",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "sha",
          type: "string",
          description: "Parameter: sha",
          required: false,
        },
      ],
    },
    {
      name: "list_issues",
      description: "List issues in a GitHub repository with filtering options",
      parameters: [
        {
          name: "direction",
          type: "string",
          description: "Parameter: direction",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "since",
          type: "string",
          description: "Parameter: since",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Parameter: assignees",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: false,
        },
        {
          name: "issue_number",
          type: "number",
          description: "Parameter: issue_number",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Parameter: milestone",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "add_issue_comment",
      description: "Add a comment to an existing issue",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: true,
        },
        {
          name: "issue_number",
          type: "number",
          description: "Parameter: issue_number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
    {
      name: "search_code",
      description: "Search for code across GitHub repositories",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Parameter: q",
          required: true,
        },
      ],
    },
    {
      name: "search_issues",
      description:
        "Search for issues and pull requests across GitHub repositories",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Parameter: q",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
      ],
    },
    {
      name: "search_users",
      description: "Search for users on GitHub",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Parameter: q",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Get details of a specific issue in a GitHub repository.",
      parameters: [
        {
          name: "issue_number",
          type: "number",
          description: "Parameter: issue_number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PhialsBasement/mcp-github-server-plus",
  _varName: "githubMcpServerPlusPlugin",
};

const deepseekR1McpServer1Plugin: Plugin = {
  id: "qui5thpyvu",
  name: "Deepseek R1 MCP Server",
  description:
    "A Node.js/TypeScript implementation of a Model Context Protocol server for the Deepseek R1 language model, optimized for reasoning tasks with a large context window and fully integrated with Claude Desktop.",
  image: "https://github.com/66julienmartin.png",
  actions: [
    {
      name: "deepseek_r1",
      description: "Generate text using DeepSeek R1 model",
      parameters: [
        {
          name: "max_tokens",
          type: "number",
          description: "Maximum tokens to generate (default: 8192)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Input text for DeepSeek",
          required: true,
        },
        {
          name: "temperature",
          type: "number",
          description: "Sampling temperature (default: 0.2)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/66julienmartin/MCP-server-Deepseek_R1",
  _varName: "deepseekR1McpServer1Plugin",
};

const daipendencyPlugin: Plugin = {
  id: "ltfjmd77yo",
  name: "Daipendency",
  description:
    "Get the narrative and API documentation for the exact version of any of your dependencies. (Only Rust is supported at the moment.)",
  image: "https://github.com/daipendency.png",
  actions: [
    {
      name: "dependency_docs_getter",
      description:
        "Extract all the documentation and public API for a dependency of a local project",
      parameters: [
        {
          name: "dependant_path",
          type: "string",
          description: "The absolute path to the dependant project",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description:
            "The name of the dependency for which to extract documentation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/daipendency/daipendency-mcp",
  _varName: "daipendencyPlugin",
};

const aiDevelopmentAssistantMcpServer1Plugin: Plugin = {
  id: "h1em8fv7iy",
  name: "AI Development Assistant MCP Server",
  description:
    "An AI-powered development toolkit for Cursor providing intelligent coding assistance through advanced reasoning, UI screenshot analysis, and code review tools.",
  image: "https://github.com/kleneway.png",
  actions: [],
  githubUrl: "https://github.com/kleneway/awesome-cursor-mpc-server",
  _varName: "aiDevelopmentAssistantMcpServer1Plugin",
};

const browseruseMcpServerPlugin: Plugin = {
  id: "sgcdww166l",
  name: "browser-use MCP server",
  description:
    "This server provides a note storage system with a custom URI scheme, allowing users to add and summarize notes, with adjustable summary detail levels.",
  image: "https://github.com/adamdude828.png",
  actions: [
    {
      name: "add-note",
      description: "Add a new note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adamdude828/mcp-browser-use",
  _varName: "browseruseMcpServerPlugin",
};

const mcpOllamaServerPlugin: Plugin = {
  id: "h0t3210s62",
  name: "MCP Ollama Server",
  description:
    "MCP Ollama server integrates Ollama models with MCP clients, allowing users to list models, get detailed information, and interact with them through questions.",
  image: "https://github.com/emgeee.png",
  actions: [
    {
      name: "list_models",
      description: "List all downloaded Ollama models",
      parameters: [],
    },
    {
      name: "show_model",
      description:
        "Get detailed information about a specific model\n\n    Args:\n        name: Name of the model to show information about\n    ",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "ask_model",
      description:
        "Ask a question to a specific Ollama model\n\n    Args:\n        model: Name of the model to use (e.g., 'llama2')\n        question: The question to ask the model\n    ",
      parameters: [
        {
          name: "model",
          type: "string",
          description: "Parameter: model",
          required: true,
        },
        {
          name: "question",
          type: "string",
          description: "Parameter: question",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/emgeee/mcp-ollama",
  _varName: "mcpOllamaServerPlugin",
};

const mcpOllamaLinkPlugin: Plugin = {
  id: "y75yyd2wtk",
  name: "MCP Ollama Link",
  description:
    "Facilitates initiating Ollama queries via Claude and manages a simple note storage system with capabilities to add, summarize, and access notes using custom URIs.",
  image: "https://github.com/truaxki.png",
  actions: [
    {
      name: "query-ollama",
      description: "Query the Ollama model with performance tracking",
      parameters: [
        {
          name: "context",
          type: "string",
          description:
            "Additional context or background information for the query",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "The Ollama model to use for the query",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "The question or prompt to send to the model",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/truaxki/mcp-ollama-link",
  _varName: "mcpOllamaLinkPlugin",
};

const memoryCacheServerPlugin: Plugin = {
  id: "4b4y97ooyl",
  name: "Memory Cache Server",
  description:
    "A Model Context Protocol (MCP) server that optimizes token usage by caching data during language model interactions, compatible with any language model and MCP client.",
  image: "https://github.com/tosin2013.png",
  actions: [
    {
      name: "store_data",
      description: "Store data in the cache with optional TTL",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Unique identifier for the cached data",
          required: true,
        },
        {
          name: "ttl",
          type: "number",
          description: "Time-to-live in seconds (optional)",
          required: false,
        },
        {
          name: "value",
          type: "any",
          description: "Data to cache",
          required: true,
        },
      ],
    },
    {
      name: "retrieve_data",
      description: "Retrieve data from the cache",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Key of the cached data to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "clear_cache",
      description: "Clear specific or all cache entries",
      parameters: [
        {
          name: "key",
          type: "string",
          description:
            "Specific key to clear (optional - clears all if not provided)",
          required: false,
        },
      ],
    },
    {
      name: "get_cache_stats",
      description: "Get cache statistics",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/tosin2013/mcp-memory-cache-server",
  _varName: "memoryCacheServerPlugin",
};

const mcpregistryserverPlugin: Plugin = {
  id: "8pg7mzcpt8",
  name: "mcp-registry-server",
  description:
    "Easily find MCP servers using our MCP registry. Search with natural language.",
  image: "https://github.com/KBB99.png",
  actions: [
    {
      name: "retrieve_mcps",
      description: "Performs retrieval from our registry of MCPs.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The query to perform retrieval on",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/KBB99/mcp-registry-server",
  _varName: "mcpregistryserverPlugin",
};

const aqicnMcpServerPlugin: Plugin = {
  id: "pi3py17y7w",
  name: "AQICN MCP Server",
  description:
    "Enables interaction with the World Air Quality Index to fetch real-time air quality data for cities and coordinates worldwide via Model Context Protocol (MCP).",
  image: "https://github.com/mattmarcin.png",
  actions: [],
  githubUrl: "https://github.com/mattmarcin/aqicn-mcp",
  _varName: "aqicnMcpServerPlugin",
};

const simpleFilesVectorStoreServerPlugin: Plugin = {
  id: "8az6gm4zz3",
  name: "Simple Files Vector Store Server",
  description:
    "A very simple vector store that provides capability to watch a list of directories, and automatically index all the markdown, html and text files in the directory to a vector store to enhance context.",
  image: "https://github.com/lishenxydlgzs.png",
  actions: [],
  githubUrl: "https://github.com/lishenxydlgzs/simple-files-vectorstore",
  _varName: "simpleFilesVectorStoreServerPlugin",
};

const qwenMaxMcpServerPlugin: Plugin = {
  id: "1v7po9oa9w",
  name: "Qwen Max MCP Server",
  description:
    "Enables text generation using the Qwen Max language model with configurable parameters and seamless integration with Claude Desktop via the Model Context Protocol (MCP).",
  image: "https://github.com/66julienmartin.png",
  actions: [
    {
      name: "qwen_max",
      description: "Generate text using Qwen Max model",
      parameters: [
        {
          name: "max_tokens",
          type: "number",
          description: "Maximum number of tokens to generate",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "The text prompt to generate content from",
          required: true,
        },
        {
          name: "temperature",
          type: "number",
          description: "Sampling temperature (0-2)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/66julienmartin/MCP-server-Qwen_Max",
  _varName: "qwenMaxMcpServerPlugin",
};

const mcpServerTemplateForCursorIde4Plugin: Plugin = {
  id: "jgisqn8zco",
  name: "MCP Server Template for Cursor IDE",
  description:
    "A simple template for creating custom tools using the Model Context Protocol to interact with Cursor IDE, allowing for easy deployment and integration with different transport methods like stdio and SSE.",
  image: "https://github.com/kirill-markin.png",
  actions: [
    {
      name: "mcp_fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "mood",
      description: "Ask the server about its mood - it's always happy!",
      parameters: [
        {
          name: "question",
          type: "string",
          description:
            "Ask this MCP server about its mood! You can phrase your question in any way you like - 'How are you?', 'What's your mood?', or even 'Are you having a good day?'. The server will always respond with a cheerful message and a heart ❤️",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kirill-markin/example-mcp-server",
  _varName: "mcpServerTemplateForCursorIde4Plugin",
};

const weaviateMcpServerPlugin: Plugin = {
  id: "iwyh0e7za6",
  name: "Weaviate MCP Server",
  description:
    "A simple MCP server that facilitates website fetching through a configurable server platform using stdio or SSE transport, allowing integration with tools like Cursor for streamlined access.",
  image: "https://github.com/kirill-markin.png",
  actions: [
    {
      name: "mcp_fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
    {
      name: "mood",
      description: "Ask the server about its mood - it's always happy!",
      parameters: [
        {
          name: "question",
          type: "string",
          description:
            "Ask this MCP server about its mood! You can phrase your question in any way you like - 'How are you?', 'What's your mood?', or even 'Are you having a good day?'. The server will always respond with a cheerful message and a heart ❤️",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kirill-markin/example-mcp-server",
  _varName: "weaviateMcpServerPlugin",
};

const mcpdiscordchatMcpServerPlugin: Plugin = {
  id: "wdagn7yhm5",
  name: "mcp-discord-chat MCP server",
  description:
    "Facilitates note storage and summarization through custom URIs, allowing users to manage, summarize, and update notes with varying detail levels in a collaborative environment.",
  image: "https://github.com/koladev32.png",
  actions: [],
  githubUrl: "https://github.com/koladev32/mcp-discord-chat",
  _varName: "mcpdiscordchatMcpServerPlugin",
};

const tuyaMcpServerPlugin: Plugin = {
  id: "wilsdjn1df",
  name: "Tuya MCP Server",
  description:
    "Provides a note storage system with a custom URI scheme and includes tools for adding notes and generating summaries for Tuya devices.",
  image: "https://github.com/cabra-lat.png",
  actions: [],
  githubUrl: "https://github.com/cabra-lat/tuyactl",
  _varName: "tuyaMcpServerPlugin",
};

const composioMcpServerPlugin: Plugin = {
  id: "t0sevbihnh",
  name: "Composio MCP Server",
  description:
    "A server implementation that provides MCP-compatible access to Composio applications like Gmail and Linear, allowing interaction through a structured interface for language models.",
  image: "https://github.com/ComposioHQ.png",
  actions: [],
  githubUrl: "https://github.com/ComposioHQ/composio-mcp-server",
  _varName: "composioMcpServerPlugin",
};

const lumbretravelMcpServerPlugin: Plugin = {
  id: "tp79r72xyd",
  name: "LumbreTravel MCP Server",
  description:
    "Facilitates access to LumbreTravel API for managing travel programs, activities, and related entities through MCP clients.",
  image: "https://github.com/lumile.png",
  actions: [
    {
      name: "get_program",
      description: "Obtiene un programa de viajes de LumbreTravel por ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del programa",
          required: true,
        },
      ],
    },
    {
      name: "get_programs_by_name",
      description: "Busca programas de viajes de LumbreTravel por nombre",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del programa",
          required: true,
        },
      ],
    },
    {
      name: "get_programs_by_date_range",
      description:
        "Obtiene programas de viajes de LumbreTravel por rango de fechas",
      parameters: [
        {
          name: "endDate",
          type: "string",
          description: "Fecha de fin del programa (DD-MM-YYYY)",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Fecha de inicio del programa (DD-MM-YYYY)",
          required: false,
        },
      ],
    },
    {
      name: "daily_activities",
      description:
        "Obtiene las actividades diarias en LumbreTravel.  Retorna un objeto JSON con un array de actividaes en la propiedad 'activities' con las actividades del día buscado.  En la propiedad 'monthlyTotals' se encuentra el total de actividades de cada día del mes",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Fecha en la que buscar las actividades (DD-MM-YYYY)",
          required: true,
        },
        {
          name: "hotelIdToFilter",
          type: "string",
          description:
            "ID del hotel a filtrar las actividades, si no se especifica se obtienen todas las actividades",
          required: false,
        },
        {
          name: "leaderIdToFilter",
          type: "string",
          description:
            "ID del guía a filtrar las actividades, si no se especifica se obtienen todas las actividades",
          required: false,
        },
        {
          name: "serviceIdToFilter",
          type: "string",
          description:
            "ID del servicio a filtrar las actividades, si no se especifica se obtienen todas las actividades",
          required: false,
        },
        {
          name: "vehicleIdToFilter",
          type: "string",
          description:
            "ID del vehículo a filtrar las actividades, si no se especifica se obtienen todas las actividades",
          required: false,
        },
      ],
    },
    {
      name: "season_summary",
      description:
        "Obtiene un resumen de pasajeros a lo largo de una temporada.  Retorna un objeto JSON que contiene un array por cada año de la temporada.  En cada item del array la propiedad 'yearTotal' contiene el total de pasajeros del año.  En la propiedad 'agencies' se encuentra un resumen por mes de los pasajeros del año asociados a cada agencia.  Y en el array 'monthlyTotals' se encuentra el total de pasajeros de cada mes.  Esta tool es muy útil para obtener el total de pasajeros de una temporada y ver como se distribuye por agencias.  Siempre que se quiera obtener información estadistica de pasajeros se debe usar esta tool.  Al ser una solucion para agencias de viaje los analisis estadísticos pueden ser muy útiles para tomar decisiones de negocio.  Se pueden usar estos datos para armar graficos e indicadores.  Ademas es normal que las fechas de analisis sean en el futuro.",
      parameters: [
        {
          name: "endYear",
          type: "string",
          description: "Año de fin de la temporada (YYYY)",
          required: true,
        },
        {
          name: "startYear",
          type: "string",
          description: "Año de inicio de la temporada (YYYY)",
          required: true,
        },
      ],
    },
    {
      name: "create_program",
      description:
        "Crea un nuevo programa de viajes en LumbreTravel.  Antes de crear un nuevo programa se debe preguntar al si quiere que primero se busque el programa a ver si existe. Si no se especifica la fecha de inicio o fin del programa, no la asumas, pide al usuario que la especifique. Si no se especifica el ID de la agencia, pide al usuario que la especifique.",
      parameters: [
        {
          name: "agencyId",
          type: "string",
          description: "ID de la agencia a asociar con este programa",
          required: true,
        },
        {
          name: "endDate",
          type: "string",
          description:
            "Fecha de fin del programa (DD-MM-YYYY), salvo que el usuario lo indique las fechas siempre deben ser en el futuro.  Y la fecha de fin debe ser mayor que la fecha de inicio",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del programa",
          required: true,
        },
        {
          name: "startDate",
          type: "string",
          description:
            "Fecha de inicio del programa (DD-MM-YYYY), salvo que el usuario lo indique las fechas siempre deben ser en el futuro",
          required: true,
        },
      ],
    },
    {
      name: "update_program",
      description: "Actualiza un programa de viajes en LumbreTravel",
      parameters: [
        {
          name: "agencyId",
          type: "string",
          description: "ID de la agencia a asociar con este programa",
          required: true,
        },
        {
          name: "endDate",
          type: "string",
          description:
            "Fecha de fin del programa (DD-MM-YYYY), salvo que el usuario lo indique las fechas siempre deben ser en el futuro.  Y la fecha de fin debe ser mayor que la fecha de inicio",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "ID del programa",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del programa",
          required: true,
        },
        {
          name: "startDate",
          type: "string",
          description:
            "Fecha de inicio del programa (DD-MM-YYYY), salvo que el usuario lo indique las fechas siempre deben ser en el futuro",
          required: true,
        },
      ],
    },
    {
      name: "delete_program",
      description: "Elimina un programa de viajes en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_program",
      description: "Reactiva un programa de viajes en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "list_agencies",
      description:
        "Obtiene todas las agencias disponibles para asociar a un programa de viajes en LumbreTravel",
      parameters: [],
    },
    {
      name: "list_services",
      description:
        "Obtiene todos los servicios disponibles para asociar a una actividad en un programa de viajes en LumbreTravel",
      parameters: [],
    },
    {
      name: "list_hotels",
      description:
        "Obtiene todos los hoteles disponibles para asociar a una actividad en un programa de viajes en LumbreTravel",
      parameters: [],
    },
    {
      name: "list_leaders",
      description:
        "Obtiene todos los guías disponibles para asociar a una actividad en un programa de viajes en LumbreTravel",
      parameters: [],
    },
    {
      name: "list_vehicles",
      description:
        "Obtiene todos los vehículos disponibles para asociar a una actividad en un programa de viajes en LumbreTravel",
      parameters: [],
    },
    {
      name: "list_includes",
      description:
        "Obtiene todos los incluye o extras disponibles para asociar a una actividad en un programa de viajes en LumbreTravel",
      parameters: [],
    },
    {
      name: "list_service_languages",
      description:
        "Obtiene todos los idiomas en los que se pueden prestar los servicios para asociar a una actividad en un programa de viajes en LumbreTravel.  Estos idiomas solo se pueden usar para asociar a un servicio.  Estos idiomas solo pueden ser asociados a un servicio",
      parameters: [],
    },
    {
      name: "list_providers",
      description: "Obtiene todos los proveedores disponibles en LumbreTravel",
      parameters: [],
    },
    {
      name: "get_passengers_by_fullname",
      description: "Obtiene pasajeros por nombre completo en LumbreTravel",
      parameters: [
        {
          name: "fullname",
          type: "string",
          description: "Nombre completo del pasajero",
          required: true,
        },
      ],
    },
    {
      name: "get_passengers_by_email",
      description: "Obtiene pasajeros por email en LumbreTravel",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Email del pasajero",
          required: true,
        },
      ],
    },
    {
      name: "create_passengers",
      description:
        "Crea pasajeros en LumbreTravel, usa esta tool cuando el asistente recibe los datos de los pasajeros como parte del pedido del usuario",
      parameters: [
        {
          name: "passengers",
          type: "object array",
          description: "Parameter: passengers",
          required: true,
        },
      ],
    },
    {
      name: "update_passengers",
      description:
        "Edita pasajeros en LumbreTravel teniendo en cuenta que se conoce el ID del pasajero.  Si el id no se conoce entonces se puede usar la tool get_passengers_by_fullname o get_passengers_by_email para obtener el id del pasajero.  Retorna el pasajero editado.",
      parameters: [
        {
          name: "passengers",
          type: "object array",
          description: "Parameter: passengers",
          required: true,
        },
      ],
    },
    {
      name: "delete_passengers",
      description:
        "Elimina pasajeros en LumbreTravel teniendo en cuenta que se conoce el ID del pasajero.  Si el id no se conoce entonces se puede usar la tool get_passengers_by_fullname o get_passengers_by_email para obtener el id del pasajero.  Retorna el pasajero eliminado.",
      parameters: [
        {
          name: "passengers",
          type: "object array",
          description: "Parameter: passengers",
          required: true,
        },
      ],
    },
    {
      name: "delete_passenger",
      description:
        "Elimina un pasajero en LumbreTravel teniendo en cuenta que se conoce el ID del pasajero.  Si el id no se conoce entonces se puede usar la tool get_passengers_by_fullname o get_passengers_by_email para obtener el id del pasajero.  Retorna el pasajero eliminado.",
      parameters: [
        {
          name: "passengerId",
          type: "string",
          description: "Parameter: passengerId",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_passenger",
      description:
        "Reactiva un pasajero en LumbreTravel teniendo en cuenta que se conoce el ID del pasajero.  Si el id no se conoce entonces se puede usar la tool get_passengers_by_fullname o get_passengers_by_email para obtener el id del pasajero.  Retorna el pasajero reactivado.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "add_passengers_to_program",
      description:
        "Agrega pasajeros a un programa en LumbreTravel.  Es importante que los pasajeros ya existan en LumbreTravel, si no existen se puede usar la tool create_passengers para crearlos.  O si existen se puede usar la tool get_passengers_by_fullname o get_passengers_by_email para obtener el id de cada pasajero.",
      parameters: [
        {
          name: "passengers",
          type: "object array",
          description: "Lista de pasajeros",
          required: true,
        },
        {
          name: "programId",
          type: "string",
          description: "ID del programa",
          required: true,
        },
      ],
    },
    {
      name: "add_activities",
      description:
        "Crea actividades asociadas a un programa en LumbreTravel.  Es importante que los servicios, hoteles, guías, vehículos y extras ya existan en LumbreTravel, si no existen se puede usar las tools create_service, create_hotel, create_leader, create_vehicle y create_include para crearlos.  O si existen se puede usar las tools get_services_by_name, get_hotel_by_name, get_leader_by_name, get_vehicle_by_name y get_include_by_name para obtener el id de cada servicio, hotel, guía, vehículo y extra.",
      parameters: [
        {
          name: "activities",
          type: "object array",
          description: "Lista de actividades a agregar",
          required: true,
        },
        {
          name: "programId",
          type: "string",
          description: "ID del programa",
          required: true,
        },
      ],
    },
    {
      name: "update_activities",
      description: "Actualizar múltiples actividades asociadas a un programa",
      parameters: [
        {
          name: "activities",
          type: "object array",
          description:
            "Lista de actividades a actualizar, es importante que las actividades ya existan en LumbreTravel, si no existen se puede usar la tool add_activities para crearlas.  O si existen se puede usar la tool get_program_by_name para obtener la lista de todas las actividades del programa.",
          required: true,
        },
        {
          name: "programId",
          type: "string",
          description: "ID del programa",
          required: true,
        },
      ],
    },
    {
      name: "delete_activities",
      description: "Eliminar múltiples actividades asociadas a un programa",
      parameters: [
        {
          name: "activities",
          type: "object array",
          description:
            "Lista de actividades a eliminar.  Para poder eliminar una actividad se debe especificar el ID de la actividad.  Se puede usar la tool get_program_by_name para obtener la lista de todas las actividades del programa.  Es importante avisarle al usuario que esta acción es irreversible y que se debe tener cuidado al eliminar actividades.",
          required: true,
        },
        {
          name: "programId",
          type: "string",
          description: "ID del programa",
          required: true,
        },
      ],
    },
    {
      name: "create_agency",
      description:
        "Crear una agencia en LumbreTravel, retorna la agencia creada.  Antes de crear una nueva agencia se debe preguntar al si quiere que primero se busque la agencia a ver si existe.  La agencia creada se puede usar para asociarle programas en LumbreTravel.  Es importante que el proveedor de la agencia tenga un ID de proveedor en LumbreTravel.  Si el proveedor no tiene un ID de proveedor en LumbreTravel, se puede usar la tool create_provider para crear un proveedor y luego usar el ID de proveedor creado para crear la agencia.  Si el proveedor ya tiene un ID de proveedor en LumbreTravel, se puede usar el ID de proveedor para crear la agencia. Para buscar un proveedor por nombre se puede usar la tool get_provider_by_name.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción de la agencia",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre de la agencia",
          required: true,
        },
        {
          name: "provider",
          type: "object",
          description: "Parameter: provider",
          required: true,
        },
      ],
    },
    {
      name: "update_agency",
      description:
        "Actualizar una agencia en LumbreTravel, retorna la agencia actualizada.  La agencia actualizada se puede usar para asociarle programas en LumbreTravel.  Es importante que el proveedor de la agencia tenga un ID de proveedor en LumbreTravel.  Si el proveedor no tiene un ID de proveedor en LumbreTravel, se puede usar la tool create_provider para crear un proveedor y luego usar el ID de proveedor creado para crear la agencia.  Si el proveedor ya tiene un ID de proveedor en LumbreTravel, se puede usar el ID de proveedor para crear la agencia. Para buscar un proveedor por nombre se puede usar la tool get_provider_by_name.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción de la agencia",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description:
            "ID de la agencia a actualizar, es importante que la agencia ya exista en LumbreTravel, si no existe se puede usar la tool create_agency para crearla.  O si existe se puede usar la tool get_agency_by_name para obtener el id de la agencia.",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre de la agencia",
          required: true,
        },
        {
          name: "provider",
          type: "object",
          description: "Parameter: provider",
          required: true,
        },
      ],
    },
    {
      name: "delete_agency",
      description:
        "Eliminar una agencia en LumbreTravel.  La agencia eliminada no se puede usar para asociarle programas en LumbreTravel.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID de la agencia a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_agency",
      description: "Reactivar una agencia en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID de la agencia a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_agency_by_name",
      description:
        "Obtener una agencia por nombre, retorna la agencia encontrada.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre de la agencia",
          required: true,
        },
      ],
    },
    {
      name: "create_hotel",
      description:
        "Crear un hotel en LumbreTravel, retorna el hotel creado.  Antes de crear un nuevo hotel se debe preguntar al si quiere que primero se busque el hotel a ver si existe.",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Dirección del hotel",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Descripción del hotel",
          required: true,
        },
        {
          name: "email",
          type: "string",
          description: "Email del hotel",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del hotel",
          required: true,
        },
        {
          name: "phone",
          type: "string",
          description: "Teléfono del hotel",
          required: true,
        },
      ],
    },
    {
      name: "update_hotel",
      description:
        "Actualizar un hotel en LumbreTravel, retorna el hotel actualizado.",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Dirección del hotel",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Descripción del hotel",
          required: true,
        },
        {
          name: "email",
          type: "string",
          description: "Email del hotel",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "ID del hotel a actualizar",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del hotel",
          required: true,
        },
        {
          name: "phone",
          type: "string",
          description: "Teléfono del hotel",
          required: true,
        },
      ],
    },
    {
      name: "delete_hotel",
      description: "Eliminar un hotel en LumbreTravel.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del hotel a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_hotel",
      description: "Reactivar un hotel en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del hotel a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_hotel_by_name",
      description:
        "Buscar hoteles por su nombre, retorna la lista de hoteles encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del hotel",
          required: true,
        },
      ],
    },
    {
      name: "create_leader",
      description:
        "Crear un guía en LumbreTravel.  Antes de crear un nuevo guía se debe preguntar al si quiere que primero se busque el guía a ver si existe.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción del guía",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "Email del guía",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description:
            "Idioma del guía de acuerdo a ISO 639-1.  No intentes usar 'list_service_languages' ni 'get_service_language_by_name' para obtener el idioma del guía.",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del guía",
          required: true,
        },
        {
          name: "phone",
          type: "string",
          description: "Teléfono del guía",
          required: false,
        },
      ],
    },
    {
      name: "update_leader",
      description:
        "Actualizar un guía en LumbreTravel, retorna el guía actualizado.  Es importante que el guía ya exista en LumbreTravel, si no existe se puede usar la tool create_leader para crearlo.  O si existe se puede usar la tool get_leader_by_name para obtener el id del guía.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción del guía",
          required: true,
        },
        {
          name: "email",
          type: "string",
          description: "Email del guía",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "ID del guía a actualizar",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description:
            "Idioma del guía de acuerdo a ISO 639-1.  NO intentes usar 'list_service_languages' ni 'get_service_language_by_name' para obtener el idioma del guía.",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del guía",
          required: true,
        },
        {
          name: "phone",
          type: "string",
          description: "Teléfono del guía",
          required: true,
        },
      ],
    },
    {
      name: "delete_leader",
      description: "Eliminar un guía en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del guía a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_leader",
      description: "Reactivar un guía en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del guía a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_leader_by_name",
      description:
        "Buscar guías por su nombre, retorna la lista de guías encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del guía",
          required: true,
        },
      ],
    },
    {
      name: "create_vehicle",
      description:
        "Crear un vehículo en LumbreTravel.  Antes de crear un nuevo vehículo se debe preguntar al si quiere que primero se busque el vehículo a ver si existe.",
      parameters: [
        {
          name: "brand",
          type: "string",
          description: "Marca del vehículo",
          required: false,
        },
        {
          name: "capacity",
          type: "number",
          description: "Capacidad del vehículo",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Descripción del vehículo",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "Modelo del vehículo",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del vehículo",
          required: true,
        },
        {
          name: "provider",
          type: "object",
          description: "Parameter: provider",
          required: true,
        },
      ],
    },
    {
      name: "update_vehicle",
      description:
        "Actualizar un vehículo en LumbreTravel, retorna el vehículo actualizado.  Es importante que el vehículo ya exista en LumbreTravel, si no existe se puede usar la tool create_vehicle para crearlo.  O si existe se puede usar la tool get_vehicle_by_name para obtener el id del vehículo.",
      parameters: [
        {
          name: "brand",
          type: "string",
          description: "Marca del vehículo",
          required: true,
        },
        {
          name: "capacity",
          type: "number",
          description: "Capacidad del vehículo",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Descripción del vehículo",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "ID del vehículo a actualizar",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "Modelo del vehículo",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del vehículo",
          required: true,
        },
        {
          name: "provider",
          type: "object",
          description: "Parameter: provider",
          required: true,
        },
      ],
    },
    {
      name: "delete_vehicle",
      description: "Eliminar un vehículo en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del vehículo a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_vehicle",
      description: "Reactivar un vehículo en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del vehículo a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_vehicle_by_name",
      description:
        "Buscar vehículos por su nombre, retorna la lista de vehículos encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del vehículo",
          required: true,
        },
      ],
    },
    {
      name: "create_include",
      description:
        "Crear un extra o incluído en LumbreTravel.  Antes de crear un nuevo extra o incluído se debe preguntar al si quiere que primero se busque el extra o incluído a ver si existe.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre",
          required: true,
        },
      ],
    },
    {
      name: "update_include",
      description:
        "Actualizar un extra o incluído en LumbreTravel, retorna el extra o incluído actualizado.  Es importante que el extra o incluído ya exista en LumbreTravel, si no existe se puede usar la tool create_include para crearlo.  O si existe se puede usar la tool get_include_by_name para obtener el id del extra o incluído.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "ID del include a actualizar",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre",
          required: true,
        },
      ],
    },
    {
      name: "delete_include",
      description: "Eliminar un extra o incluído en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del include a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_include",
      description: "Reactivar un extra o incluído en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del include a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_includes_by_name",
      description:
        "Buscar extras o incluídos por su nombre, retorna la lista de extras o incluídos encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del include",
          required: true,
        },
      ],
    },
    {
      name: "create_service_language",
      description:
        "Crear un idioma de servicio en LumbreTravel.  Antes de crear un nuevo idioma de servicio se debe preguntar al si quiere que primero se busque el idioma de servicio a ver si existe.  Este idioma solo se puede usar para asociar a un servicio.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del idioma de servicio",
          required: true,
        },
      ],
    },
    {
      name: "update_service_language",
      description:
        "Actualizar un idioma de servicio en LumbreTravel, retorna el idioma de servicio actualizado.  Es importante que el idioma de servicio ya exista en LumbreTravel, si no existe se puede usar la tool create_service_language para crearlo.  O si existe se puede usar la tool get_service_language_by_name para obtener el id del idioma de servicio.  Este idioma solo se puede usar para asociar a un servicio.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del idioma de servicio a actualizar",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del idioma de servicio",
          required: true,
        },
      ],
    },
    {
      name: "delete_service_language",
      description: "Eliminar un idioma de servicio en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del idioma de servicio a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_service_language",
      description: "Reactivar un idioma de servicio en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del idioma de servicio a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_service_language_by_name",
      description:
        "Buscar idiomas de servicio por su nombre, retorna la lista de idiomas de servicio encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del idioma de servicio",
          required: true,
        },
      ],
    },
    {
      name: "create_provider",
      description:
        "Crear un proveedor en LumbreTravel.  Antes de crear un nuevo proveedor se debe preguntar al si quiere que primero se busque el proveedor a ver si existe.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción del proveedor",
          required: true,
        },
        {
          name: "email",
          type: "string",
          description:
            "Email del proveedor, si no tiene email se puede dejar en blanco",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del proveedor",
          required: true,
        },
        {
          name: "phone",
          type: "string",
          description:
            "Teléfono del proveedor, si no tiene teléfono se puede dejar en blanco",
          required: false,
        },
      ],
    },
    {
      name: "update_provider",
      description:
        "Actualizar un proveedor en LumbreTravel, retorna el proveedor actualizado.  Es importante que el proveedor ya exista en LumbreTravel, si no existe se puede usar la tool create_provider para crearlo.  O si existe se puede usar la tool get_provider_by_name para obtener el id del proveedor.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción del proveedor",
          required: true,
        },
        {
          name: "email",
          type: "string",
          description:
            "Email del proveedor, si no tiene email se puede dejar en blanco",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID del proveedor a actualizar",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del proveedor",
          required: true,
        },
        {
          name: "phone",
          type: "string",
          description:
            "Teléfono del proveedor, si no tiene teléfono se puede dejar en blanco",
          required: false,
        },
      ],
    },
    {
      name: "delete_provider",
      description: "Eliminar un proveedor en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del proveedor a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_provider",
      description: "Reactivar un proveedor en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del proveedor a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_provider_by_name",
      description:
        "Buscar proveedores por su nombre, retorna la lista de proveedores encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del proveedor",
          required: true,
        },
      ],
    },
    {
      name: "create_service",
      description:
        "Crear un servicio en LumbreTravel.  Antes de crear un nuevo servicio se debe preguntar al si quiere que primero se busque el servicio a ver si existe.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción del servicio",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del servicio",
          required: true,
        },
        {
          name: "provider",
          type: "object",
          description: "Parameter: provider",
          required: true,
        },
      ],
    },
    {
      name: "update_service",
      description:
        "Actualizar un servicio en LumbreTravel, retorna el servicio actualizado.  Es importante que el servicio ya exista en LumbreTravel, si no existe se puede usar la tool create_service para crearlo.  O si existe se puede usar la tool get_services_by_name para obtener el id del servicio.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descripción del servicio",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "ID del servicio a actualizar",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Nombre del servicio",
          required: true,
        },
        {
          name: "provider",
          type: "object",
          description: "Parameter: provider",
          required: true,
        },
      ],
    },
    {
      name: "delete_service",
      description: "Eliminar un servicio en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del servicio a eliminar",
          required: true,
        },
      ],
    },
    {
      name: "reactivate_service",
      description: "Reactivar un servicio en LumbreTravel",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID del servicio a reactivar",
          required: true,
        },
      ],
    },
    {
      name: "get_services_by_name",
      description:
        "Buscar servicios por su nombre, retorna la lista de servicios encontrados.",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Nombre del servicio",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lumile/lumbretravel-mcp",
  _varName: "lumbretravelMcpServerPlugin",
};

const mcpServerForNationalParkServicesDataPlugin: Plugin = {
  id: "vl0vgiu3yc",
  name: "MCP Server for National Park Services Data",
  description:
    "Facilitates retrieval of National Park Services data using the NPS API, allowing users to list national parks by state and access detailed information about specific parks.",
  image: "https://github.com/amysatterlee.png",
  actions: [],
  githubUrl: "https://github.com/amysatterlee/nps_mcp",
  _varName: "mcpServerForNationalParkServicesDataPlugin",
};

const imageGenerationMcpServer2Plugin: Plugin = {
  id: "5dft5chv70",
  name: "Image Generation MCP Server",
  description:
    "Enables users to generate images from text prompts using Replicate's model, with configurable parameters and full MCP protocol compliance.",
  image: "https://github.com/mikeyny.png",
  actions: [
    {
      name: "generate-image",
      description: "Generate an image based on a prompt",
      parameters: [
        {
          name: "aspect_ratio",
          type: "string",
          description: "Parameter: aspect_ratio",
          required: false,
        },
        {
          name: "filename",
          type: "string",
          description: "Base filename to save the image(s) with",
          required: false,
        },
        {
          name: "go_fast",
          type: "boolean",
          description: "Parameter: go_fast",
          required: false,
        },
        {
          name: "megapixels",
          type: "string",
          description: "Parameter: megapixels",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "number",
          description: "Parameter: num_inference_steps",
          required: false,
        },
        {
          name: "num_outputs",
          type: "number",
          description: "Parameter: num_outputs",
          required: false,
        },
        {
          name: "output_dir",
          type: "string",
          description:
            "Full absolute path to output directory. For Windows, use double backslashes like 'C:\\\\Users\\\\name\\\\path'. For Unix/Mac use '/path/to/dir'. Always use the proper path otherwise you will get an error.",
          required: true,
        },
        {
          name: "output_format",
          type: "string",
          description: "Parameter: output_format",
          required: false,
        },
        {
          name: "output_quality",
          type: "number",
          description: "Parameter: output_quality",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mikeyny/ai-image-gen-mcp",
  _varName: "imageGenerationMcpServer2Plugin",
};

const lsdMcpServerPlugin: Plugin = {
  id: "di2jyv7dim",
  name: "LSD MCP Server",
  description:
    "The server connects the Claude AI to the internet through the capabilites of the LSD SQL language, turning web data into a queryable database-like structure to interact with real-world data efficiently.",
  image: "https://github.com/lsd-so.png",
  actions: [],
  githubUrl: "https://github.com/lsd-so/lsd-mcp",
  _varName: "lsdMcpServerPlugin",
};

const allinoneDevPlugin: Plugin = {
  id: "suvoxip0a5",
  name: "All-in-One Dev",
  description:
    "All In One Model Context Protocol:\n\nqdrant, google suite (gmail, calendar, ...), jira, gitlab, CLI, ...",
  image: "https://github.com/nguyenvanduocit.png",
  actions: [],
  githubUrl:
    "https://github.com/nguyenvanduocit/all-in-one-model-context-protocol",
  _varName: "allinoneDevPlugin",
};

const myaiservMcpServerPlugin: Plugin = {
  id: "xw8u4yj92j",
  name: "MyAIServ MCP Server",
  description:
    "A high-performance FastAPI server supporting Model Context Protocol (MCP) for seamless integration with Large Language Models, featuring REST, GraphQL, and WebSocket APIs, along with real-time monitoring and vector search capabilities.",
  image: "https://github.com/eagurin.png",
  actions: [],
  githubUrl: "https://github.com/eagurin/myaiserv",
  _varName: "myaiservMcpServerPlugin",
};

const knowledgeGraphMemoryServer2Plugin: Plugin = {
  id: "mdsegdy7ox",
  name: "Knowledge Graph Memory Server",
  description:
    "This MCP server provides persistent memory integration for chat applications by utilizing a local knowledge graph to remember user information across interactions.",
  image: "https://github.com/yodakeisuke.png",
  actions: [
    {
      name: "create_entities",
      description: "Create multiple new entities in the knowledge graph",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add new observations to existing entities in the knowledge graph",
      parameters: [
        {
          name: "observations",
          type: "object array",
          description: "Parameter: observations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entities",
      description:
        "Delete multiple entities and their associated relations from the knowledge graph",
      parameters: [
        {
          name: "entityNames",
          type: "string array",
          description: "An array of entity names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_observations",
      description:
        "Delete specific observations from entities in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Parameter: deletions",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete multiple relations from the knowledge graph",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "An array of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Read the entire knowledge graph",
      parameters: [],
    },
    {
      name: "search_nodes",
      description:
        "Search for nodes in the knowledge graph based on one or more keywords. The search covers entity names, types, subdomains, and observation content. Multiple keywords are treated as OR conditions, where any keyword must match somewhere in the entity's fields.",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "Space-separated keywords to match against entity fields. Any keyword must match (OR condition). Example: 'budget management' will find entities where either 'budget' or 'management' appears in any field.",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description:
        "Open specific nodes in the knowledge graph by their names. Returns the complete node information including subdomain and all metadata.",
      parameters: [
        {
          name: "names",
          type: "string array",
          description:
            "An array of entity names to retrieve, returning full entity information including subdomain",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/yodakeisuke/mcp-memory-domain-knowledge",
  _varName: "knowledgeGraphMemoryServer2Plugin",
};

const crewAiMcpServerPlugin: Plugin = {
  id: "y5nsuuf5t8",
  name: "Crew AI MCP Server",
  description:
    "Enables AI agent and task management using the CrewAI framework, allowing users to create and run agents and tasks in an automated workflow environment.",
  image: "https://github.com/MatthewLaw1.png",
  actions: [],
  githubUrl: "https://github.com/MatthewLaw1/Near-Intents-MCP-Agentkit",
  _varName: "crewAiMcpServerPlugin",
};

const youtubeMusicMcpServerPlugin: Plugin = {
  id: "zvma3uvbkx",
  name: "YouTube Music MCP Server",
  description:
    "An MCP server that allows AI models to control YouTube Music playback through Google Chrome by searching and playing songs using song and artist names.",
  image: "https://github.com/mondweep.png",
  actions: [],
  githubUrl: "https://github.com/mondweep/youtube-music-mcp-server",
  _varName: "youtubeMusicMcpServerPlugin",
};

const mcpServerSshRailsRunnerPlugin: Plugin = {
  id: "77wuqfg9g3",
  name: "MCP Server: SSH Rails Runner",
  description:
    "Enables secure remote execution of Rails console commands over SSH for read-only operations, mutation planning, and executing approved changes in a deployed Rails environment.",
  image: "https://github.com/tadasant.png",
  actions: [],
  githubUrl: "https://github.com/tadasant/mcp-server-ssh-rails-runner",
  _varName: "mcpServerSshRailsRunnerPlugin",
};

const unconventionalthinkingMcpServerPlugin: Plugin = {
  id: "pam1hp4gtk",
  name: "Unconventional-thinking MCP server",
  description:
    "This is a MCP server that implements an unreasonable thinking system. It helps generate unconventional solutions: Generating unreasonable thoughts that challenge conventional wisdom. Creating branches of thinking in different directions",
  image: "https://github.com/stagsz.png",
  actions: [
    {
      name: "generate_unreasonable_thought",
      description:
        "Generate a new unreasonable thought that challenges conventional thinking",
      parameters: [
        {
          name: "forceRebellion",
          type: "boolean",
          description: "Force the thought to rebel against conventional wisdom",
          required: false,
        },
        {
          name: "previousThoughtId",
          type: "string",
          description:
            "Optional ID of a previous thought to build upon or rebel against",
          required: false,
        },
        {
          name: "problem",
          type: "string",
          description: "The problem or challenge to think unreasonably about",
          required: true,
        },
      ],
    },
    {
      name: "branch_thought",
      description: "Create a new branch of thinking from an existing thought",
      parameters: [
        {
          name: "direction",
          type: "string",
          description:
            "Direction for the new branch (e.g. 'more_extreme', 'opposite', 'tangential')",
          required: true,
        },
        {
          name: "thoughtId",
          type: "string",
          description: "ID of the thought to branch from",
          required: true,
        },
      ],
    },
    {
      name: "list_thoughts",
      description: "List all thoughts in the current thinking session",
      parameters: [
        {
          name: "branchId",
          type: "string",
          description: "Optional branch ID to filter thoughts",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stagsz/Unconventional-thinking",
  _varName: "unconventionalthinkingMcpServerPlugin",
};

const ghostMcpServer1Plugin: Plugin = {
  id: "nxrobq9f46",
  name: "Ghost MCP Server",
  description:
    "Integrates with the Ghost Admin API to allow programmatic management of Ghost CMS features, including posts, pages, tags, authors, members, and image uploads, providing efficient content management capabilities.",
  image: "https://github.com/mtane0412.png",
  actions: [],
  githubUrl: "https://github.com/mtane0412/ghost-mcp-server",
  _varName: "ghostMcpServer1Plugin",
};

const gmailMcpServer4Plugin: Plugin = {
  id: "mkugelscaj",
  name: "Gmail MCP Server",
  description:
    "Enables interaction with Gmail through the Gmail API to read, send, and manage emails. Supports multiple Gmail accounts with real-time monitoring and advanced features for email search and attachment handling.",
  image: "https://github.com/Quantum-369.png",
  actions: [],
  githubUrl: "https://github.com/Quantum-369/Gmail-mcp-server",
  _varName: "gmailMcpServer4Plugin",
};

const attioMcpServerPlugin: Plugin = {
  id: "y261ps497t",
  name: "Attio MCP Server",
  description:
    "Facilitates interaction with the Attio CRM by allowing MCP clients to read and write company records and notes through the Attio API.",
  image: "https://github.com/hmk.png",
  actions: [],
  githubUrl: "https://github.com/hmk/attio-mcp-server",
  _varName: "attioMcpServerPlugin",
};

const kibelaMcpServerPlugin: Plugin = {
  id: "m21nkeig1p",
  name: "Kibela MCP Server",
  description:
    "Enables integration with Kibela API for searching and retrieving notes, allowing LLMs to interact with Kibela content seamlessly.",
  image: "https://github.com/kiwamizamurai.png",
  actions: [
    {
      name: "kibela_search_notes",
      description: "Search Kibela notes with given query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "kibela_get_my_notes",
      description: "Get your latest notes from Kibela",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of notes to fetch (max 50)",
          required: false,
        },
      ],
    },
    {
      name: "kibela_get_note_content",
      description: "Get content and comments of a specific note",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Note ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kiwamizamurai/mcp-kibela-server",
  _varName: "kibelaMcpServerPlugin",
};

const twitchMcpServerPlugin: Plugin = {
  id: "1pub2f29fy",
  name: "Twitch MCP Server",
  description:
    "Enables interaction with the Twitch API, allowing users to retrieve comprehensive information about channels, streams, games, and more, with additional support for searching and accessing chat elements like emotes and badges.",
  image: "https://github.com/mtane0412.png",
  actions: [
    {
      name: "get_global_emotes",
      description: "グローバルエモートのリストを取得します",
      parameters: [],
    },
    {
      name: "get_global_badges",
      description: "グローバルチャットバッジのリストを取得します",
      parameters: [],
    },
    {
      name: "get_users",
      description: "ユーザーの情報を取得します",
      parameters: [
        {
          name: "userNames",
          type: "string array",
          description: "Twitchユーザー名の配列",
          required: true,
        },
      ],
    },
    {
      name: "get_clips",
      description: "クリップの情報を取得します",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Twitchチャンネル名",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "取得する最大クリップ数(デフォルト: 20)",
          required: false,
        },
      ],
    },
    {
      name: "get_chat_settings",
      description: "チャット設定を取得します",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Twitchチャンネル名",
          required: true,
        },
      ],
    },
    {
      name: "get_videos",
      description: "チャンネルのビデオを取得します",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Twitchチャンネル名",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "取得する最大ビデオ数(デフォルト: 20)",
          required: false,
        },
      ],
    },
    {
      name: "get_video_comments",
      description: "アーカイブ動画のコメントを取得します",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "次のページのカーソル",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "取得する最大コメント数(デフォルト: 20)",
          required: false,
        },
        {
          name: "videoId",
          type: "string",
          description: "ビデオID",
          required: true,
        },
      ],
    },
    {
      name: "get_channel_info",
      description: "チャンネル情報を取得します",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Twitchチャンネル名",
          required: true,
        },
      ],
    },
    {
      name: "get_stream_info",
      description: "配信情報を取得します",
      parameters: [
        {
          name: "channelName",
          type: "string",
          description: "Twitchチャンネル名",
          required: true,
        },
      ],
    },
    {
      name: "get_top_games",
      description: "人気のゲームのリストを取得します",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "取得する最大ゲーム数(デフォルト: 20)",
          required: false,
        },
      ],
    },
    {
      name: "get_game",
      description: "特定のゲームの情報を取得します",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "ゲーム名",
          required: true,
        },
      ],
    },
    {
      name: "search_categories",
      description: "ゲームやカテゴリーを検索します",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "取得する最大カテゴリー数(デフォルト: 20)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "検索キーワード",
          required: true,
        },
      ],
    },
    {
      name: "search_channels",
      description: "チャンネルを検索します",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "取得する最大チャンネル数(デフォルト: 20)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "検索キーワード",
          required: true,
        },
      ],
    },
    {
      name: "get_streams",
      description: "現在ライブ配信中のストリームを取得します",
      parameters: [
        {
          name: "game",
          type: "string",
          description: "ゲーム名でフィルター",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "言語でフィルター (例: ja, en)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "取得する最大ストリーム数(デフォルト: 20)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mtane0412/twitch-mcp-server",
  _varName: "twitchMcpServerPlugin",
};

const semgrepMcpServer1Plugin: Plugin = {
  id: "1kb2h7qn0c",
  name: "Semgrep MCP Server",
  description:
    "Enables integration of Semgrep in development environments via the MCP protocol, supporting static code analysis, rule management, and scan result operations.",
  image: "https://github.com/stefanskiasan.png",
  actions: [],
  githubUrl: "https://github.com/stefanskiasan/semgrep-mcp-server",
  _varName: "semgrepMcpServer1Plugin",
};

const mcpGoogleServerPlugin: Plugin = {
  id: "05vc0lafp9",
  name: "MCP Google Server",
  description:
    "Provides web search capabilities using Google Custom Search API, enabling users to perform searches through a Model Context Protocol server.",
  image: "https://github.com/adenot.png",
  actions: [
    {
      name: "search",
      description: "Perform a web search query",
      parameters: [
        {
          name: "num",
          type: "number",
          description: "Number of results (1-10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "read_webpage",
      description: "Fetch and extract text content from a webpage",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the webpage to read",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adenot/mcp-google-search",
  _varName: "mcpGoogleServerPlugin",
};

const voypMcpServerPlugin: Plugin = {
  id: "nlah6xt0ml",
  name: "Voyp MCP Server",
  description:
    "The Voyp MCP Server enables AI systems to integrate with VOYP's calling capabilities, allowing for secure telephony actions such as making calls, scheduling appointments, and tracking call statuses through the Model Context Protocol.",
  image: "https://github.com/paulotaylor.png",
  actions: [
    {
      name: "search_place",
      description: "Search place details in a given location",
      parameters: [
        {
          name: "location",
          type: "string",
          description: "Place location. Ex: San Francisco, CA",
          required: true,
        },
        {
          name: "place",
          type: "string",
          description: "Name of place to search. Ex: The Lane Salon",
          required: true,
        },
      ],
    },
    {
      name: "search_place_by_number",
      description: "Find place name and address by phone number",
      parameters: [
        {
          name: "number",
          type: "string",
          description: "Phone number in E.164 format. Ex: +1234567890",
          required: true,
        },
      ],
    },
    {
      name: "get_call",
      description: "Retrieve call details",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Call Id",
          required: true,
        },
      ],
    },
    {
      name: "get_user",
      description: "Retrieve user profile",
      parameters: [],
    },
    {
      name: "start_call",
      description:
        "Start a new phone call via Voyp API. The API returns the call id and a URL where users can track the progress of the call",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Context of the call. Ex: Order a pizza",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description: "Language of the call. Ex: en-US, pt-PT, fr-FR",
          required: false,
        },
        {
          name: "number",
          type: "string",
          description: "Phone number to call in E.164 format",
          required: true,
        },
      ],
    },
    {
      name: "hangup_call",
      description: "Hangup an existing call",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the call",
          required: true,
        },
      ],
    },
    {
      name: "search_places",
      description: "Search places in a given location",
      parameters: [
        {
          name: "search",
          type: "string",
          description:
            "Places to search. Ex: italian restaurants in New York City, US",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/paulotaylor/voyp-mcp",
  _varName: "voypMcpServerPlugin",
};

const mcpJsonrpcServerPlugin: Plugin = {
  id: "p33upo55dp",
  name: "MCP JSON-RPC Server",
  description:
    "A beginner-friendly MCP-inspired JSON-RPC server built with Node.js, offering basic client-server interaction through an 'initialize' capabilities handshake and an 'echo' function.",
  image: "https://github.com/melvincarvalho.png",
  actions: [],
  githubUrl: "https://github.com/melvincarvalho/mcpjs",
  _varName: "mcpJsonrpcServerPlugin",
};

const audiusMcpServerPlugin: Plugin = {
  id: "qmiveuezs0",
  name: "Audius MCP Server",
  description:
    "Enables interaction with the Audius music platform API, supporting user, track, and playlist operations through the Model Context Protocol.",
  image: "https://github.com/glassBead-tc.png",
  actions: [],
  githubUrl: "https://github.com/glassBead-tc/audius-mcp-atris",
  _varName: "audiusMcpServerPlugin",
};

const calculatorMcpServerPlugin: Plugin = {
  id: "nfm4b9ijgq",
  name: "Calculator MCP Server",
  description:
    "A Model Context Protocol server built with mcp-framework that allows users to create and manage custom tools for processing data, integrating with the Claude Desktop via CLI.",
  image: "https://github.com/QuantGeekDev.png",
  actions: [],
  githubUrl: "https://github.com/QuantGeekDev/mcp-add-sse",
  _varName: "calculatorMcpServerPlugin",
};

const perplexityMcpServer4Plugin: Plugin = {
  id: "uvz269wuup",
  name: "Perplexity MCP Server",
  description:
    "This server allows users to perform web searches using Perplexity AI, providing a tool for retrieving search results through a simple API interface.",
  image: "https://github.com/spragginsdesigns.png",
  actions: [
    {
      name: "perplexity_search",
      description: "Search the web using Perplexity AI",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spragginsdesigns/perplexity-mcp-server",
  _varName: "perplexityMcpServer4Plugin",
};

const mcpFileSystemServerPlugin: Plugin = {
  id: "au0ahyzx4x",
  name: "MCP File System Server",
  description:
    "This server provides an interface for performing basic file system operations such as navigation, reading, writing, and file analysis, allowing users to manage directories and files efficiently.",
  image: "https://github.com/kvas-it.png",
  actions: [],
  githubUrl: "https://github.com/kvas-it/mcp-server-fs",
  _varName: "mcpFileSystemServerPlugin",
};

const xrplmcpservicePlugin: Plugin = {
  id: "qh6y5cvx2o",
  name: "xrpl-mcp-service",
  description:
    "A Model Context Protocol (MCP) server providing comprehensive access to the XRP Ledger (XRPL). This service enables AI models to interact with XRPL through standardized endpoints.",
  image: "https://github.com/tedlikeskix.png",
  actions: [],
  githubUrl: "https://github.com/tedlikeskix/xrpl-mcp-service",
  _varName: "xrplmcpservicePlugin",
};

const mcpJournalingServerPlugin: Plugin = {
  id: "kiay3i2li7",
  name: "MCP Journaling Server",
  description:
    "The MCP server transforms chats with Claude into journaling sessions, saving conversations locally and allowing the LLM to retrieve previous sessions to create continuity in discussions about daily activities.",
  image: "https://github.com/mtct.png",
  actions: [
    {
      name: "start_new_session",
      description:
        "\nStart a new journaling session by clearing previous conversation log.\n\nReturns:\n    str: Welcome message with current save location\n",
      parameters: [],
    },
    {
      name: "record_interaction",
      description:
        "\nRecord both the user's message and assistant's response.\n\nArgs:\n    user_message: The user's message\n    assistant_message: The assistant's response\n    \nReturns:\n    str: Confirmation message\n",
      parameters: [
        {
          name: "assistant_message",
          type: "string",
          description: "Parameter: assistant_message",
          required: true,
        },
        {
          name: "user_message",
          type: "string",
          description: "Parameter: user_message",
          required: true,
        },
      ],
    },
    {
      name: "generate_session_summary",
      description:
        "\nGenerate a markdown summary of the journaling session.\n\nArgs:\n    summary: The llm generated summay of the conversation\n\nReturns:\n    str: Confirmation message\n",
      parameters: [
        {
          name: "summary",
          type: "string",
          description: "Parameter: summary",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mtct/journaling_mcp",
  _varName: "mcpJournalingServerPlugin",
};

const mercadolibreMcpServerPlugin: Plugin = {
  id: "hgsefxwq4c",
  name: "MercadoLibre MCP Server",
  description:
    "Enables interaction with MercadoLibre's API for product search, reviews, descriptions, and seller reputation insights.",
  image: "https://github.com/lumile.png",
  actions: [
    {
      name: "seller_reputation",
      description: "Obtiene la reputación de un vendedor",
      parameters: [
        {
          name: "sellerId",
          type: "string",
          description: "ID del vendedor",
          required: false,
        },
      ],
    },
    {
      name: "product_reviews",
      description: "Obtiene las reseñas de un producto",
      parameters: [
        {
          name: "productId",
          type: "string",
          description: "ID del producto",
          required: false,
        },
      ],
    },
    {
      name: "product_description",
      description: "Obtiene la descripción de un producto",
      parameters: [
        {
          name: "productId",
          type: "string",
          description: "ID del producto",
          required: false,
        },
      ],
    },
    {
      name: "search_products",
      description: "Busca productos en MercadoLibre",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Cantidad de resultados a devolver",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Cantidad de resultados a saltar",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Consulta de búsqueda",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lumile/mercadolibre-mcp",
  _varName: "mercadolibreMcpServerPlugin",
};

const audienseInsightsMcpServerPlugin: Plugin = {
  id: "xz11vmv38c",
  name: "Audiense Insights MCP Server",
  description:
    "Enables interaction with Audiense Insights accounts via the Model Context Protocol, facilitating the extraction and analysis of marketing insights and audience data including demographics, behavior, and influencer engagement.",
  image: "https://github.com/AudienseCo.png",
  actions: [
    {
      name: "get-reports",
      description:
        "Retrieves the list of Audiense insights reports owned by the authenticated user.",
      parameters: [],
    },
    {
      name: "get-report-info",
      description:
        "Retrieves detailed information about a specific intelligence report, including its status, segmentation type, audience size, segments, and access links.",
      parameters: [
        {
          name: "report_id",
          type: "string",
          description: "The ID of the intelligence report.",
          required: true,
        },
      ],
    },
    {
      name: "compare-audience-influencers",
      description:
        "Compares the influencers of an audience with a baseline audience. The baseline is determined as follows: \n    If the selection was the full audience and a single country represents more than 50% of the audience, that country is used as the baseline.\n    Otherwise, the Global baseline is applied. If the selection was a specific segment, the full audience is used as the baseline.\n    Each influencer comparison includes: \n        - Affinity (%) - The level of alignment between the influencer and the audience. Baseline Affinity (%)\n        - The influencer’s affinity within the baseline audience. Uniqueness Score\n        - A measure of how distinct the influencer is within the selected audience compared to the baseline.\n    ",
      parameters: [
        {
          name: "audience_influencers_id",
          type: "string",
          description: "The ID of the audience influencers.",
          required: true,
        },
        {
          name: "baseline_audience_influencers_id",
          type: "string",
          description: "The ID of the baseline audience influencers.",
          required: true,
        },
        {
          name: "bio_keyword",
          type: "string",
          description: "Keyword to filter influencers by their biography.",
          required: false,
        },
        {
          name: "categories",
          type: "string array",
          description: "Filter influencers by categories.",
          required: false,
        },
        {
          name: "count",
          type: "number",
          description: "Number of items per page (default: 200).",
          required: false,
        },
        {
          name: "countries",
          type: "string array",
          description: "Filter influencers by country ISO codes.",
          required: false,
        },
        {
          name: "cursor",
          type: "number",
          description: "Cursor for pagination.",
          required: false,
        },
        {
          name: "entity_type",
          type: "string",
          description: "Filter by entity type (person or brand).",
          required: false,
        },
        {
          name: "followers_max",
          type: "number",
          description: "Maximum number of followers.",
          required: false,
        },
        {
          name: "followers_min",
          type: "number",
          description: "Minimum number of followers.",
          required: false,
        },
      ],
    },
    {
      name: "get-audience-content",
      description:
        "Retrieves audience content engagement details for a given audience.\n\nThis tool provides a detailed breakdown of the content an audience interacts with, including:\n- **Liked Content**: Popular posts, top domains, top emojis, top hashtags, top links, top media, and a word cloud.\n- **Shared Content**: Content that the audience shares, categorized similarly to liked content.\n- **Influential Content**: Content from influential accounts that impact the audience, with similar categorization.\n\nEach category contains:\n- **popularPost**: List of the most engaged posts.\n- **topDomains**: Most mentioned domains.\n- **topEmojis**: Most used emojis.\n- **topHashtags**: Most used hashtags.\n- **topLinks**: Most shared links.\n- **topMedia**: Media types shared and samples.\n- **wordcloud**: Frequently used words.",
      parameters: [
        {
          name: "audience_content_id",
          type: "string",
          description: "The ID of the audience content to retrieve.",
          required: true,
        },
      ],
    },
    {
      name: "report-summary",
      description:
        "Generates a comprehensive summary of an Audiense report, including segment details, top insights, and influencers.",
      parameters: [
        {
          name: "report_id",
          type: "string",
          description: "The ID of the intelligence report to summarize.",
          required: true,
        },
      ],
    },
    {
      name: "get-audience-insights",
      description:
        "Retrieves aggregated insights for a given audience ID, providing statistical distributions across various attributes.\n    Available insights include demographics (e.g., gender, age, country), behavioral traits (e.g., active hours, platform usage), psychographics (e.g., personality traits, interests), and socioeconomic factors (e.g., income, education status).",
      parameters: [
        {
          name: "audience_insights_id",
          type: "string",
          description: "The ID of the audience insights.",
          required: true,
        },
        {
          name: "insights",
          type: "string array",
          description: "Optional list of insight names to filter.",
          required: false,
        },
      ],
    },
    {
      name: "get-baselines",
      description:
        "Retrieves available baselines, optionally filtered by country.",
      parameters: [
        {
          name: "country",
          type: "string",
          description: "ISO country code to filter by.",
          required: false,
        },
      ],
    },
    {
      name: "get-categories",
      description:
        "Retrieves the list of available affinity categories that can be used as the categories parameter in the compare-audience-influencers tool.",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/AudienseCo/mcp-audiense-insights",
  _varName: "audienseInsightsMcpServerPlugin",
};

const mcpServerStarter1Plugin: Plugin = {
  id: "scc5nkibod",
  name: "MCP Server Starter",
  description:
    "A production-ready template for building Model Context Protocol servers in TypeScript, offering fast development with Bun, Biome linting, and automated version management.",
  image: "https://github.com/coinselor.png",
  actions: [
    {
      name: "hello_tool",
      description: "Hello tool",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the person to greet",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/coinselor/mcp-zenon",
  _varName: "mcpServerStarter1Plugin",
};

const mcpeditorPlugin: Plugin = {
  id: "lnfcd9is5i",
  name: "mcp-editor",
  description:
    "A TypeScript MCP server port of Anthropic's filesystem editing tools, allowing file manipulation via client-approved operations without automated writes to prevent system harm.",
  image: "https://github.com/arathald.png",
  actions: [
    {
      name: "view",
      description: "View file contents or directory listing",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Absolute path to the file or directory",
          required: true,
        },
        {
          name: "view_range",
          type: "number array",
          description: "Optional range of lines to view [start, end]",
          required: false,
        },
      ],
    },
    {
      name: "create",
      description: "Create a new file with specified content",
      parameters: [
        {
          name: "file_text",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Absolute path where file should be created",
          required: true,
        },
      ],
    },
    {
      name: "string_replace",
      description: "Replace a string in a file with a new string",
      parameters: [
        {
          name: "new_str",
          type: "string",
          description: "Replacement string (empty string if omitted)",
          required: false,
        },
        {
          name: "old_str",
          type: "string",
          description: "String to replace",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Absolute path to the file",
          required: true,
        },
      ],
    },
    {
      name: "insert",
      description: "Insert text at a specific line in the file",
      parameters: [
        {
          name: "insert_line",
          type: "number",
          description: "Line number where text should be inserted",
          required: true,
        },
        {
          name: "new_str",
          type: "string",
          description: "Text to insert",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Absolute path to the file",
          required: true,
        },
      ],
    },
    {
      name: "undo_edit",
      description: "Undo the last edit to a file",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Absolute path to the file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/arathald/mcp-editor",
  _varName: "mcpeditorPlugin",
};

const mcpIpGeolocationServerPlugin: Plugin = {
  id: "s16mjqvk38",
  name: "MCP IP Geolocation Server",
  description:
    "Provides IP geolocation services using IP-API.com without requiring an API key, enabling users to obtain detailed location and network information for any IP address in a clean, formatted output.",
  image: "https://github.com/tedlikeskix.png",
  actions: [],
  githubUrl: "https://github.com/tedlikeskix/mcp-ip-geolocator",
  _varName: "mcpIpGeolocationServerPlugin",
};

const notesMcpServerPlugin: Plugin = {
  id: "74p3hzzqcc",
  name: "Notes MCP Server",
  description:
    "A TypeScript-based MCP server that enables users to manage text notes with features like note creation and summary generation using a Model Context Protocol.",
  image: "https://github.com/HeatherFlux.png",
  actions: [],
  githubUrl: "https://github.com/HeatherFlux/github-issue-mcp-server",
  _varName: "notesMcpServerPlugin",
};

const flutterMcpServerPlugin: Plugin = {
  id: "kdp6um0oou",
  name: "Flutter MCP Server",
  description:
    "A TypeScript-based MCP server that implements a simple notes system, enabling users to manage text notes with creation and summarization functionalities through structured prompts.",
  image: "https://github.com/robert-northmind.png",
  actions: [
    {
      name: "search_flutter_docs",
      description: "Search Flutter documentation for a given query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query for Flutter documentation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/robert-northmind/flutter-mcp",
  _varName: "flutterMcpServerPlugin",
};

const mcpWebhookServerPlugin: Plugin = {
  id: "ijmd1ia5zg",
  name: "MCP Webhook Server",
  description:
    "Enables sending messages to webhook endpoints through the MCP protocol, supporting custom content, display names, and avatar URLs.",
  image: "https://github.com/kevinwatt.png",
  actions: [
    {
      name: "send_message",
      description: "Send message to webhook endpoint",
      parameters: [
        {
          name: "avatar_url",
          type: "string",
          description: "Avatar URL (optional)",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Message content to send",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "Display name (optional)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kevinwatt/mcp-webhook",
  _varName: "mcpWebhookServerPlugin",
};

const lightningNetworkMcpServerPlugin: Plugin = {
  id: "13o9e1dxiq",
  name: "Lightning Network MCP Server",
  description:
    "Enables AI models to interact with the Lightning Network by providing an MCP-compliant API to pay invoices.",
  image: "https://github.com/AbdelStark.png",
  actions: [],
  githubUrl: "https://github.com/AbdelStark/lightning-mcp",
  _varName: "lightningNetworkMcpServerPlugin",
};

const nostrMcpServerPlugin: Plugin = {
  id: "hum50a32bb",
  name: "Nostr MCP Server",
  description:
    "A Model Context Protocol (MCP) server enabling AI models to interact with the Nostr network, facilitating note posting and interaction with the freedom of speech protocol.",
  image: "https://github.com/AbdelStark.png",
  actions: [],
  githubUrl: "https://github.com/AbdelStark/nostr-mcp",
  _varName: "nostrMcpServerPlugin",
};

const privategptMcpServer1Plugin: Plugin = {
  id: "chit1zedgg",
  name: "PrivateGPT MCP Server",
  description:
    "Facilitates integration of PrivateGPT with MCP-compatible applications, enabling chat functionalities and secure management of knowledge sources and user access.",
  image: "https://github.com/pgpt-dev.png",
  actions: [],
  githubUrl: "https://github.com/pgpt-dev/MCP-Server-for-MAS-Developments",
  _varName: "privategptMcpServer1Plugin",
};

const digitalfateMcpServerPlugin: Plugin = {
  id: "vrrhw9dw4y",
  name: "DigitalFate MCP Server",
  description:
    "Facilitates high-performance multi-client processing by integrating advanced automation tasks with V2 agents and ensuring seamless execution of LLM calls and human-like computer interactions.",
  image: "https://github.com/Kalyankensin.png",
  actions: [],
  githubUrl: "https://github.com/Kalyankensin/DigitalFate",
  _varName: "digitalfateMcpServerPlugin",
};

const mcpMemoryServerWithQdrantPersistencePlugin: Plugin = {
  id: "hbn6r7in36",
  name: "MCP Memory Server with Qdrant Persistence",
  description:
    "Facilitates knowledge graph representation with semantic search using Qdrant, supporting OpenAI embeddings for semantic similarity and robust HTTPS integration with file-based graph persistence.",
  image: "https://github.com/delorenj.png",
  actions: [],
  githubUrl: "https://github.com/delorenj/mcp-qdrant-memory",
  _varName: "mcpMemoryServerWithQdrantPersistencePlugin",
};

const codeSandboxMcpPlugin: Plugin = {
  id: "v1l1r5f6ek",
  name: "Code Sandbox MCP",
  description:
    "An MCP server to create secure code sandbox environment for executing code within Docker containers.",
  image: "https://github.com/Automata-Labs-team.png",
  actions: [],
  githubUrl: "https://github.com/Automata-Labs-team/code-sandbox-mcp",
  _varName: "codeSandboxMcpPlugin",
};

const shopifyMcpServerPlugin: Plugin = {
  id: "jjyo70hi83",
  name: "Shopify MCP Server",
  description:
    "This MCP server connects clients with Shopify store data, enabling retrieval of product and customer information via exposed tools.",
  image: "https://github.com/siddhantbajaj.png",
  actions: [],
  githubUrl: "https://github.com/siddhantbajaj/shopify-mcp-server",
  _varName: "shopifyMcpServerPlugin",
};

const cleverCloudDocumentationMcpServerPlugin: Plugin = {
  id: "gcxm8s1o6v",
  name: "Clever Cloud Documentation MCP Server",
  description:
    "The MCP server provides access to Clever Cloud's documentation, allowing users to query and interact with it through Model Context Protocol clients like Claude Desktop.",
  image: "https://github.com/LostInBrittany.png",
  actions: [],
  githubUrl: "https://github.com/LostInBrittany/clever-doc-mcp-server",
  _varName: "cleverCloudDocumentationMcpServerPlugin",
};

const digitalfateMcpServer1Plugin: Plugin = {
  id: "cpn9ca741u",
  name: "DigitalFate MCP Server",
  description:
    "Facilitates high-performance multi-client processing, enabling scalable task execution and integration of advanced agents for automation in real-world applications.",
  image: "https://github.com/Kalyankensin.png",
  actions: [],
  githubUrl: "https://github.com/Kalyankensin/DigitalFate",
  _varName: "digitalfateMcpServer1Plugin",
};

const mcpservermultiversePlugin: Plugin = {
  id: "xmoltxl3zo",
  name: "mcp-server-multiverse",
  description:
    "A middleware server that enables multiple isolated instances of the same MCP servers to coexist independently with unique namespaces and configurations.",
  image: "https://github.com/lamemind.png",
  actions: [],
  githubUrl: "https://github.com/lamemind/mcp-server-multiverse",
  _varName: "mcpservermultiversePlugin",
};

const clicksendMcpServerPlugin: Plugin = {
  id: "6nj3h62i6b",
  name: "ClickSend MCP Server",
  description:
    "This server enables AI models to send SMS messages and initiate Text-to-Speech calls programmatically using ClickSend's API with built-in rate limiting and input validation.",
  image: "https://github.com/J-Gal02.png",
  actions: [
    {
      name: "send_sms",
      description: "Send SMS messages via ClickSend",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Message content to send",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Phone number in E.164 format (e.g. +61423456789)",
          required: true,
        },
      ],
    },
    {
      name: "make_tts_call",
      description: "Make Text-to-Speech calls via ClickSend",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Text content to convert to speech",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Phone number in E.164 format",
          required: true,
        },
        {
          name: "voice",
          type: "string",
          description: "Voice type for TTS",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/J-Gal02/clicksend-mcp",
  _varName: "clicksendMcpServerPlugin",
};

const mcppifServerPlugin: Plugin = {
  id: "fr71fvl2at",
  name: "MCP-PIF Server",
  description:
    "This server implements the Model Context Protocol to facilitate meaningful interaction and understanding development between humans and AI through structured tools and progressive interaction patterns.",
  image: "https://github.com/hungryrobot1.png",
  actions: [
    {
      name: "read",
      description: "Read file contents",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the file to read",
          required: true,
        },
      ],
    },
    {
      name: "write",
      description: "Write or modify file content",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write",
          required: false,
        },
        {
          name: "edits",
          type: "object array",
          description: "Array of edits for edit operation",
          required: false,
        },
        {
          name: "lineNumber",
          type: "number",
          description: "Line number for replace operation",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Type of write operation to perform",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path for the file to write/modify",
          required: true,
        },
      ],
    },
    {
      name: "cd",
      description: "Change current directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Directory to change to",
          required: true,
        },
      ],
    },
    {
      name: "mkdir",
      description: "Create a new directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path of directory to create",
          required: true,
        },
      ],
    },
    {
      name: "ls",
      description: "List directory contents",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Optional path to list (defaults to current directory)",
          required: false,
        },
      ],
    },
    {
      name: "pwd",
      description: "Print working directory",
      parameters: [],
    },
    {
      name: "rename",
      description: "Rename a file or directory",
      parameters: [
        {
          name: "newPath",
          type: "string",
          description: "New path/name for the file or directory",
          required: true,
        },
        {
          name: "oldPath",
          type: "string",
          description: "Current path of the file or directory",
          required: true,
        },
      ],
    },
    {
      name: "move",
      description: "Move a file or directory to a new location",
      parameters: [
        {
          name: "sourcePath",
          type: "string",
          description: "Source path of the file or directory to move",
          required: true,
        },
        {
          name: "targetPath",
          type: "string",
          description:
            "Target path where the file or directory will be moved to",
          required: true,
        },
      ],
    },
    {
      name: "delete",
      description: "Delete a file or directory",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path of the file or directory to delete",
          required: true,
        },
        {
          name: "recursive",
          type: "boolean",
          description:
            "If true, recursively delete directories and their contents",
          required: false,
        },
      ],
    },
    {
      name: "reason",
      description: "Process thoughts with flexible relationships",
      parameters: [
        {
          name: "thoughts",
          type: "object array",
          description: "Parameter: thoughts",
          required: true,
        },
      ],
    },
    {
      name: "think",
      description: "Non-verbal processing time",
      parameters: [
        {
          name: "duration",
          type: "number",
          description: "Thinking duration in seconds",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "Optional focus for thinking",
          required: false,
        },
      ],
    },
    {
      name: "journal_create",
      description: "Create a new journal entry",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Main content of the entry",
          required: true,
        },
        {
          name: "relatedFiles",
          type: "object array",
          description: "Related files for context",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Optional tags for categorization",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Entry title",
          required: true,
        },
      ],
    },
    {
      name: "journal_read",
      description:
        "Read journal entries within a date range. Dates should be in YYYY-MM-DD format. Times are handled in UTC, and the 'to' date is inclusive through end of day.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format (default: text)",
          required: false,
        },
        {
          name: "from",
          type: "string",
          description: "Start date (YYYY-MM-DD), inclusive from start of day",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "End date (YYYY-MM-DD), inclusive through end of day",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hungryrobot1/MCP-PIF",
  _varName: "mcppifServerPlugin",
};

const postgresqlMcpServer1Plugin: Plugin = {
  id: "bnw58zblt1",
  name: "PostgreSQL MCP Server",
  description:
    "Facilitates management and optimization of PostgreSQL databases, offering analysis, setup guidance, and debugging, while ensuring secure and efficient database operations.",
  image: "https://github.com/nahmanmate.png",
  actions: [
    {
      name: "analyze_database",
      description: "Analyze PostgreSQL database configuration and performance",
      parameters: [
        {
          name: "analysisType",
          type: "string",
          description: "Type of analysis to perform",
          required: false,
        },
        {
          name: "connectionString",
          type: "string",
          description: "PostgreSQL connection string",
          required: true,
        },
      ],
    },
    {
      name: "get_setup_instructions",
      description: "Get step-by-step PostgreSQL setup instructions",
      parameters: [
        {
          name: "platform",
          type: "string",
          description: "Operating system platform",
          required: true,
        },
        {
          name: "useCase",
          type: "string",
          description: "Intended use case",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "PostgreSQL version to install",
          required: false,
        },
      ],
    },
    {
      name: "debug_database",
      description: "Debug common PostgreSQL issues",
      parameters: [
        {
          name: "connectionString",
          type: "string",
          description: "PostgreSQL connection string",
          required: true,
        },
        {
          name: "issue",
          type: "string",
          description: "Type of issue to debug",
          required: true,
        },
        {
          name: "logLevel",
          type: "string",
          description: "Logging detail level",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nahmanmate/postgresql-mcp-server",
  _varName: "postgresqlMcpServer1Plugin",
};

const swaggerExplorerMcpPlugin: Plugin = {
  id: "1z0w1koqpv",
  name: "Swagger Explorer MCP",
  description:
    "A Management Control Plane server that allows users to explore and analyze Swagger/OpenAPI specifications, providing features such as endpoint exploration, schema analysis, and customizable response formatting, with support for authentication and integration with tools like Claude.",
  image: "https://github.com/johnneerdael.png",
  actions: [],
  githubUrl: "https://github.com/johnneerdael/swagger-mcp",
  _varName: "swaggerExplorerMcpPlugin",
};

const mcpServer3Plugin: Plugin = {
  id: "g4a43iyiay",
  name: "MCP Server",
  description:
    "Facilitates multi-client processing for high-performance operations within the DigitalFate framework, enabling advanced automation through task orchestration and agent integration.",
  image: "https://github.com/Kalyankensin.png",
  actions: [],
  githubUrl: "https://github.com/Kalyankensin/DigitalFate",
  _varName: "mcpServer3Plugin",
};

const mssqlMcpServer2Plugin: Plugin = {
  id: "fo0ki6yhge",
  name: "MSSQL MCP Server",
  description:
    "Enables execution of SQL queries and management of Microsoft SQL Server database connections through the Model Context Protocol.",
  image: "https://github.com/c0h1b4.png",
  actions: [],
  githubUrl: "https://github.com/c0h1b4/mssql-mcp-server",
  _varName: "mssqlMcpServer2Plugin",
};

const slackUserMcpServerPlugin: Plugin = {
  id: "wc0u5519qh",
  name: "Slack User MCP Server",
  description:
    "Enables interaction with Slack workspaces as a user, supporting channel listing, message posting, threading, reactions, and user management via the Slack API.",
  image: "https://github.com/lars-hagen.png",
  actions: [
    {
      name: "slack_list_channels",
      description: "List public channels in the workspace with pagination",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of channels to return (default 100, max 200)",
          required: false,
        },
      ],
    },
    {
      name: "slack_post_message",
      description: "Post a new message to a Slack channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel to post to",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The message text to post",
          required: true,
        },
      ],
    },
    {
      name: "slack_reply_to_thread",
      description: "Reply to a specific message thread in Slack",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel containing the thread",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The reply text",
          required: true,
        },
        {
          name: "thread_ts",
          type: "string",
          description:
            "The timestamp of the parent message in the format '1234567890.123456'. Timestamps in the format without the period can be converted by adding the period such that 6 numbers come after it.",
          required: true,
        },
      ],
    },
    {
      name: "slack_add_reaction",
      description: "Add a reaction emoji to a message",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel containing the message",
          required: true,
        },
        {
          name: "reaction",
          type: "string",
          description: "The name of the emoji reaction (without ::)",
          required: true,
        },
        {
          name: "timestamp",
          type: "string",
          description: "The timestamp of the message to react to",
          required: true,
        },
      ],
    },
    {
      name: "slack_get_channel_history",
      description: "Get recent messages from a channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of messages to retrieve (default 10)",
          required: false,
        },
      ],
    },
    {
      name: "slack_get_thread_replies",
      description: "Get all replies in a message thread",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel containing the thread",
          required: true,
        },
        {
          name: "thread_ts",
          type: "string",
          description:
            "The timestamp of the parent message in the format '1234567890.123456'. Timestamps in the format without the period can be converted by adding the period such that 6 numbers come after it.",
          required: true,
        },
      ],
    },
    {
      name: "slack_get_users",
      description:
        "Get a list of all users in the workspace with their basic profile information",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of users to return (default 100, max 200)",
          required: false,
        },
      ],
    },
    {
      name: "slack_get_user_profile",
      description: "Get detailed profile information for a specific user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "The ID of the user",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lars-hagen/slack-user-mcp",
  _varName: "slackUserMcpServerPlugin",
};

const cursorMcpServerPlugin: Plugin = {
  id: "jdkl0uz4sp",
  name: "Cursor MCP Server",
  description:
    "Acts as a bridge between Claude's desktop application and the Cursor editor, enabling seamless AI-powered automation and multi-instance management across platforms with standardized communication and secure token-based authentication.",
  image: "https://github.com/johnneerdael.png",
  actions: [],
  githubUrl: "https://github.com/johnneerdael/multiplatform-cursor-mcp",
  _varName: "cursorMcpServerPlugin",
};

const markitdownMcpServerPlugin: Plugin = {
  id: "sbc6bljjg5",
  name: "MarkItDown MCP Server",
  description:
    "Converts various file formats to Markdown using the MarkItDown utility and can be integrated with MCP clients for seamless document processing and conversion.",
  image: "https://github.com/KorigamiK.png",
  actions: [],
  githubUrl: "https://github.com/KorigamiK/markitdown_mcp_server",
  _varName: "markitdownMcpServerPlugin",
};

const shopifyMcpServer1Plugin: Plugin = {
  id: "uhwaf9e34i",
  name: "Shopify MCP Server",
  description:
    "Enables interaction with Shopify store data via GraphQL API, providing tools for managing products, customers, orders, discounts, and more with robust error handling.",
  image: "https://github.com/rezapex.png",
  actions: [
    {
      name: "get-products",
      description: "Get all products or search by title",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of products to return",
          required: true,
        },
        {
          name: "searchTitle",
          type: "string",
          description: "Search title, if missing, will return all products",
          required: false,
        },
      ],
    },
    {
      name: "get-products-by-collection",
      description: "Get products from a specific collection",
      parameters: [
        {
          name: "collectionId",
          type: "string",
          description: "ID of the collection to get products from",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of products to return",
          required: false,
        },
      ],
    },
    {
      name: "get-products-by-ids",
      description: "Get products by their IDs",
      parameters: [
        {
          name: "productIds",
          type: "string array",
          description: "Array of product IDs to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-variants-by-ids",
      description: "Get product variants by their IDs",
      parameters: [
        {
          name: "variantIds",
          type: "string array",
          description: "Array of variant IDs to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-customers",
      description: "Get shopify customers with pagination support",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Limit of customers to return",
          required: false,
        },
        {
          name: "next",
          type: "string",
          description: "Next page cursor",
          required: false,
        },
      ],
    },
    {
      name: "tag-customer",
      description: "Add tags to a customer",
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Customer ID to tag",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags to add to the customer",
          required: true,
        },
      ],
    },
    {
      name: "get-orders",
      description: "Get shopify orders with advanced filtering and sorting",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Next page cursor",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Limit of orders to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Filter orders using query syntax",
          required: false,
        },
        {
          name: "reverse",
          type: "boolean",
          description: "Reverse sort order",
          required: false,
        },
        {
          name: "sortKey",
          type: "string",
          description: "Field to sort by",
          required: false,
        },
      ],
    },
    {
      name: "get-order",
      description: "Get a single order by ID",
      parameters: [
        {
          name: "orderId",
          type: "string",
          description: "ID of the order to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create-discount",
      description: "Create a basic discount code",
      parameters: [
        {
          name: "appliesOncePerCustomer",
          type: "boolean",
          description: "Whether discount can be used only once per customer",
          required: true,
        },
        {
          name: "code",
          type: "string",
          description: "Discount code that customers will enter",
          required: true,
        },
        {
          name: "endsAt",
          type: "string",
          description: "Optional end date in ISO format",
          required: false,
        },
        {
          name: "startsAt",
          type: "string",
          description: "Start date in ISO format",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the discount",
          required: true,
        },
        {
          name: "value",
          type: "number",
          description: "Discount value (percentage as decimal or fixed amount)",
          required: true,
        },
        {
          name: "valueType",
          type: "string",
          description: "Type of discount",
          required: true,
        },
      ],
    },
    {
      name: "create-draft-order",
      description: "Create a draft order",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Customer email",
          required: true,
        },
        {
          name: "lineItems",
          type: "object array",
          description: "Line items to add to the order",
          required: true,
        },
        {
          name: "note",
          type: "string",
          description: "Optional note for the order",
          required: false,
        },
        {
          name: "shippingAddress",
          type: "object",
          description: "Shipping address details",
          required: true,
        },
      ],
    },
    {
      name: "complete-draft-order",
      description: "Complete a draft order",
      parameters: [
        {
          name: "draftOrderId",
          type: "string",
          description: "ID of the draft order to complete",
          required: true,
        },
        {
          name: "variantId",
          type: "string",
          description: "ID of the variant in the draft order",
          required: true,
        },
      ],
    },
    {
      name: "get-collections",
      description: "Get all collections",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of collections to return",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter collections by name",
          required: false,
        },
      ],
    },
    {
      name: "get-shop",
      description: "Get shop details",
      parameters: [],
    },
    {
      name: "get-shop-details",
      description: "Get extended shop details including shipping countries",
      parameters: [],
    },
    {
      name: "manage-webhook",
      description: "Subscribe, find, or unsubscribe webhooks",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform with webhook",
          required: true,
        },
        {
          name: "callbackUrl",
          type: "string",
          description: "Webhook callback URL",
          required: true,
        },
        {
          name: "topic",
          type: "string",
          description: "Webhook topic to subscribe to",
          required: true,
        },
        {
          name: "webhookId",
          type: "string",
          description: "Webhook ID (required for unsubscribe)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/rezapex/shopify-mcp-server-main",
  _varName: "shopifyMcpServer1Plugin",
};

const descopemcpserverPlugin: Plugin = {
  id: "xr7eiu0phx",
  name: "descope-mcp-server",
  description:
    "Interact with Descope's Management APIs to manage users, audit, and more.",
  image: "https://github.com/descope-sample-apps.png",
  actions: [
    {
      name: "search-audits",
      description: "Search Descope project audit logs",
      parameters: [
        {
          name: "actions",
          type: "string array",
          description: "Filter by specific action types",
          required: false,
        },
        {
          name: "excludedActions",
          type: "string array",
          description: "Actions to exclude from results",
          required: false,
        },
        {
          name: "geos",
          type: "string array",
          description: "Filter by geographic locations",
          required: false,
        },
        {
          name: "hoursBack",
          type: "number",
          description: "Hours to look back (max 720 hours / 30 days)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of audit logs to fetch (max 10)",
          required: false,
        },
        {
          name: "loginIds",
          type: "string array",
          description: "Filter by specific login IDs",
          required: false,
        },
        {
          name: "methods",
          type: "string array",
          description: "Filter by authentication methods",
          required: false,
        },
        {
          name: "noTenants",
          type: "boolean",
          description: "If true, only show events without tenants",
          required: false,
        },
        {
          name: "tenants",
          type: "string array",
          description: "Filter by specific tenant IDs",
          required: false,
        },
      ],
    },
    {
      name: "search-users",
      description: "Search for users in Descope project",
      parameters: [
        {
          name: "emails",
          type: "string array",
          description: "Filter by specific email addresses",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of users per page (max 100)",
          required: false,
        },
        {
          name: "loginIds",
          type: "string array",
          description: "Filter by specific login IDs",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number for pagination",
          required: false,
        },
        {
          name: "phones",
          type: "string array",
          description: "Filter by specific phone numbers",
          required: false,
        },
        {
          name: "roles",
          type: "string array",
          description: "Filter users by role names",
          required: false,
        },
        {
          name: "ssoAppIds",
          type: "string array",
          description: "Filter users by SSO application IDs",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description:
            "Filter by user statuses ('enabled', 'disabled', or 'invited')",
          required: false,
        },
        {
          name: "tenantIds",
          type: "string array",
          description: "Filter users by specific tenant IDs",
          required: false,
        },
        {
          name: "testUsersOnly",
          type: "boolean",
          description: "Return only test users",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Text to search for in user fields",
          required: false,
        },
        {
          name: "withTestUser",
          type: "boolean",
          description: "Include test users in results",
          required: false,
        },
      ],
    },
    {
      name: "create-user",
      description: "Create a new user in Descope project",
      parameters: [
        {
          name: "additionalLoginIds",
          type: "string array",
          description: "Additional login identifiers",
          required: false,
        },
        {
          name: "customAttributes",
          type: "object",
          description: "Custom attributes for the user",
          required: false,
        },
        {
          name: "displayName",
          type: "string",
          description: "User's display name",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "User's email address",
          required: false,
        },
        {
          name: "familyName",
          type: "string",
          description: "User's family/last name",
          required: false,
        },
        {
          name: "givenName",
          type: "string",
          description: "User's given/first name",
          required: false,
        },
        {
          name: "loginId",
          type: "string",
          description: "Primary login identifier for the user",
          required: true,
        },
        {
          name: "middleName",
          type: "string",
          description: "User's middle name",
          required: false,
        },
        {
          name: "phone",
          type: "string",
          description: "User's phone number in E.164 format",
          required: false,
        },
        {
          name: "picture",
          type: "string",
          description: "URL to user's profile picture",
          required: false,
        },
        {
          name: "roles",
          type: "string array",
          description: "Global role names to assign to the user",
          required: false,
        },
        {
          name: "ssoAppIds",
          type: "string array",
          description: "SSO application IDs to associate",
          required: false,
        },
        {
          name: "userTenants",
          type: "object array",
          description: "Tenant associations with specific roles",
          required: false,
        },
        {
          name: "verifiedEmail",
          type: "boolean",
          description: "Whether the email is pre-verified",
          required: false,
        },
        {
          name: "verifiedPhone",
          type: "boolean",
          description: "Whether the phone is pre-verified",
          required: false,
        },
      ],
    },
    {
      name: "invite-user",
      description: "Create and invite a new user to the Descope project",
      parameters: [
        {
          name: "additionalLoginIds",
          type: "string array",
          description: "Additional login identifiers",
          required: false,
        },
        {
          name: "customAttributes",
          type: "object",
          description: "Custom attributes for the user",
          required: false,
        },
        {
          name: "displayName",
          type: "string",
          description: "User's display name",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "User's email address",
          required: false,
        },
        {
          name: "familyName",
          type: "string",
          description: "User's family/last name",
          required: false,
        },
        {
          name: "givenName",
          type: "string",
          description: "User's given/first name",
          required: false,
        },
        {
          name: "inviteUrl",
          type: "string",
          description: "Custom URL for the invitation link",
          required: false,
        },
        {
          name: "loginId",
          type: "string",
          description: "Primary login identifier for the user",
          required: true,
        },
        {
          name: "middleName",
          type: "string",
          description: "User's middle name",
          required: false,
        },
        {
          name: "phone",
          type: "string",
          description: "User's phone number in E.164 format",
          required: false,
        },
        {
          name: "picture",
          type: "string",
          description: "URL to user's profile picture",
          required: false,
        },
        {
          name: "roles",
          type: "string array",
          description: "Global role names to assign to the user",
          required: false,
        },
        {
          name: "sendMail",
          type: "boolean",
          description:
            "Send invite via email (default follows project settings)",
          required: false,
        },
        {
          name: "sendSMS",
          type: "boolean",
          description: "Send invite via SMS (default follows project settings)",
          required: false,
        },
        {
          name: "ssoAppIds",
          type: "string array",
          description: "SSO application IDs to associate",
          required: false,
        },
        {
          name: "templateId",
          type: "string",
          description: "Custom template ID for the invitation",
          required: false,
        },
        {
          name: "templateOptions",
          type: "object",
          description: "Options for customizing the invitation template",
          required: false,
        },
        {
          name: "userTenants",
          type: "object array",
          description: "Tenant associations with specific roles",
          required: false,
        },
        {
          name: "verifiedEmail",
          type: "boolean",
          description: "Whether the email is pre-verified",
          required: false,
        },
        {
          name: "verifiedPhone",
          type: "boolean",
          description: "Whether the phone is pre-verified",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/descope-sample-apps/descope-mcp-server",
  _varName: "descopemcpserverPlugin",
};

const mcprocqPlugin: Plugin = {
  id: "13cwhwe8l5",
  name: "MCP-RoCQ",
  description:
    "MCP-RoCQ integrates with the Coq proof assistant to enable automated dependent type checking, inductive type definitions, and property proving through XML protocol communication.",
  image: "https://github.com/angrysky56.png",
  actions: [],
  githubUrl: "https://github.com/angrysky56/mcp-rocq",
  _varName: "mcprocqPlugin",
};

const alphavantagemcpPlugin: Plugin = {
  id: "0wues5td08",
  name: "AlphaVantage-MCP",
  description:
    "A Model Context Protocol (MCP) server that provides real-time access to financial market data through the free Alpha Vantage API. This server implements a standardized interface for retrieving stock quotes and company information.",
  image: "https://github.com/berlinbra.png",
  actions: [
    {
      name: "get-stock-quote",
      description: "Get current stock quote information",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., AAPL, MSFT)",
          required: true,
        },
      ],
    },
    {
      name: "get-company-info",
      description: "Get detailed company information",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., AAPL, MSFT)",
          required: true,
        },
      ],
    },
    {
      name: "get-crypto-exchange-rate",
      description: "Get current cryptocurrency exchange rate",
      parameters: [
        {
          name: "crypto_symbol",
          type: "string",
          description: "Cryptocurrency symbol (e.g., BTC, ETH)",
          required: true,
        },
        {
          name: "market",
          type: "string",
          description: "Market currency (e.g., USD, EUR)",
          required: false,
        },
      ],
    },
    {
      name: "get-time-series",
      description: "Get daily time series data for a stock",
      parameters: [
        {
          name: "outputsize",
          type: "string",
          description:
            "compact (latest 100 data points) or full (up to 20 years of data)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., AAPL, MSFT)",
          required: true,
        },
      ],
    },
    {
      name: "get-historical-options",
      description:
        "Get historical options chain data for a stock with sorting capabilities",
      parameters: [
        {
          name: "date",
          type: "string",
          description:
            "Optional: Trading date in YYYY-MM-DD format (defaults to previous trading day, must be after 2008-01-01)",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Optional: Number of contracts to return (default: 10, use -1 for all contracts)",
          required: false,
        },
        {
          name: "sort_by",
          type: "string",
          description: "Optional: Field to sort by",
          required: false,
        },
        {
          name: "sort_order",
          type: "string",
          description: "Optional: Sort order",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Stock symbol (e.g., AAPL, MSFT)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/berlinbra/alpha-vantage-mcp",
  _varName: "alphavantagemcpPlugin",
};

const morphoApiMcpServerPlugin: Plugin = {
  id: "t3vqcxa90h",
  name: "Morpho API MCP Server",
  description:
    "Enables interaction with the Morpho GraphQL API, providing tools for accessing market data, vaults, positions, and transactions through a Model Context Protocol (MCP) server.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "get_markets",
      description:
        "Retrieves markets from Morpho with pagination, ordering, and filtering support.",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Number of items to return (default: 100)",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Field to order by",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Order direction",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of items to skip",
          required: false,
        },
        {
          name: "where",
          type: "object",
          description: "Parameter: where",
          required: false,
        },
      ],
    },
    {
      name: "get_whitelisted_markets",
      description: "Retrieves only whitelisted markets from Morpho.",
      parameters: [],
    },
    {
      name: "get_asset_price",
      description:
        "Get current price and yield information for specific assets.",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description: "Chain ID (default: 1 for Ethereum)",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of items to return",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of items to skip",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: 'Asset symbol (e.g. "sDAI")',
          required: true,
        },
      ],
    },
    {
      name: "get_market_positions",
      description:
        "Get positions overview for specific markets with pagination and ordering.",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Number of positions to return (default: 30)",
          required: false,
        },
        {
          name: "marketUniqueKey",
          type: "string",
          description: "Unique key of the market",
          required: true,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Field to order by",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Order direction",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of positions to skip",
          required: false,
        },
      ],
    },
    {
      name: "get_historical_apy",
      description: "Get historical APY data for a specific market.",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description: "Parameter: chainId",
          required: false,
        },
        {
          name: "endTimestamp",
          type: "number",
          description: "Parameter: endTimestamp",
          required: true,
        },
        {
          name: "interval",
          type: "string",
          description: "Parameter: interval",
          required: true,
        },
        {
          name: "marketUniqueKey",
          type: "string",
          description: "Parameter: marketUniqueKey",
          required: true,
        },
        {
          name: "startTimestamp",
          type: "number",
          description: "Parameter: startTimestamp",
          required: true,
        },
      ],
    },
    {
      name: "get_oracle_details",
      description: "Get oracle details for a specific market.",
      parameters: [
        {
          name: "chainId",
          type: "number",
          description: "Parameter: chainId",
          required: false,
        },
        {
          name: "marketUniqueKey",
          type: "string",
          description: "Parameter: marketUniqueKey",
          required: true,
        },
      ],
    },
    {
      name: "get_account_overview",
      description: "Get account overview including positions and transactions.",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Parameter: address",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description: "Parameter: chainId",
          required: false,
        },
      ],
    },
    {
      name: "get_liquidations",
      description: "Get liquidation events with filtering and pagination.",
      parameters: [
        {
          name: "endTimestamp",
          type: "number",
          description: "Parameter: endTimestamp",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Parameter: first",
          required: false,
        },
        {
          name: "marketUniqueKeys",
          type: "string array",
          description: "Parameter: marketUniqueKeys",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Parameter: orderBy",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Parameter: orderDirection",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Parameter: skip",
          required: false,
        },
        {
          name: "startTimestamp",
          type: "number",
          description: "Parameter: startTimestamp",
          required: false,
        },
      ],
    },
    {
      name: "get_vault_allocation",
      description: "Get vault allocation for a specific market.",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Parameter: address",
          required: true,
        },
        {
          name: "chainId",
          type: "number",
          description: "Parameter: chainId",
          required: false,
        },
      ],
    },
    {
      name: "get_vault_reallocates",
      description: "Get vault reallocates for a specific vault.",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Parameter: first",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Parameter: orderBy",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Parameter: orderDirection",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Parameter: skip",
          required: false,
        },
        {
          name: "vaultAddress",
          type: "string",
          description: "Parameter: vaultAddress",
          required: true,
        },
      ],
    },
    {
      name: "get_vaults",
      description: "Retrieves all vaults with their current states.",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Parameter: first",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Parameter: orderBy",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Parameter: orderDirection",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Parameter: skip",
          required: false,
        },
      ],
    },
    {
      name: "get_vault_positions",
      description: "Get positions for a specific vault.",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Parameter: first",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Parameter: orderBy",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Parameter: orderDirection",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Parameter: skip",
          required: false,
        },
        {
          name: "vaultAddress",
          type: "string",
          description: "Parameter: vaultAddress",
          required: true,
        },
      ],
    },
    {
      name: "get_vault_transactions",
      description: "Get latest vault transactions.",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Parameter: first",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Parameter: orderBy",
          required: false,
        },
        {
          name: "orderDirection",
          type: "string",
          description: "Parameter: orderDirection",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Parameter: skip",
          required: false,
        },
        {
          name: "type_in",
          type: "string array",
          description: "Parameter: type_in",
          required: false,
        },
      ],
    },
    {
      name: "get_vault_apy_history",
      description: "Get historical APY data for a vault.",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Parameter: address",
          required: true,
        },
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-morpho-server",
  _varName: "morphoApiMcpServerPlugin",
};

const releaseNotesMcpServerPlugin: Plugin = {
  id: "c9dg9z23rx",
  name: "Release Notes MCP Server",
  description:
    "Generates comprehensive and formatted release notes from GitHub repositories, efficiently organizing commits by type and including detailed statistics using smart API usage.",
  image: "https://github.com/nickbaumann98.png",
  actions: [
    {
      name: "generate_release_notes",
      description:
        "Generate release notes from commits in a given timeframe or commit range",
      parameters: [
        {
          name: "commitRange",
          type: "object",
          description: "Parameter: commitRange",
          required: false,
        },
        {
          name: "format",
          type: "object",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "timeRange",
          type: "object",
          description: "Parameter: timeRange",
          required: false,
        },
      ],
    },
    {
      name: "analyze_commits",
      description: "Analyze commits and provide statistics",
      parameters: [
        {
          name: "commitRange",
          type: "object",
          description: "Parameter: commitRange",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "timeRange",
          type: "object",
          description: "Parameter: timeRange",
          required: false,
        },
      ],
    },
    {
      name: "configure_template",
      description: "Configure a custom template for release notes",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "template",
          type: "string",
          description: "Parameter: template",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nickbaumann98/release-notes-server",
  _varName: "releaseNotesMcpServerPlugin",
};

const tavilyMcpServer2Plugin: Plugin = {
  id: "jog9una8ox",
  name: "Tavily MCP Server",
  description:
    "This server enables AI systems to integrate with Tavily's search and data extraction tools, providing real-time web information access and domain-specific searches.",
  image: "https://github.com/tavily-ai.png",
  actions: [
    {
      name: "tavily-search",
      description:
        "A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.",
      parameters: [
        {
          name: "days",
          type: "number",
          description:
            "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
          required: false,
        },
        {
          name: "exclude_domains",
          type: "string array",
          description:
            "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
          required: false,
        },
        {
          name: "include_domains",
          type: "string array",
          description:
            "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
          required: false,
        },
        {
          name: "include_image_descriptions",
          type: "boolean",
          description:
            "Include a list of query-related images and their descriptions in the response",
          required: false,
        },
        {
          name: "include_images",
          type: "boolean",
          description: "Include a list of query-related images in the response",
          required: false,
        },
        {
          name: "include_raw_content",
          type: "boolean",
          description:
            "Include the cleaned and parsed HTML content of each search result",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "The maximum number of search results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "search_depth",
          type: "string",
          description:
            "The depth of the search. It can be 'basic' or 'advanced'",
          required: false,
        },
        {
          name: "time_range",
          type: "string",
          description:
            "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
          required: false,
        },
        {
          name: "topic",
          type: "string",
          description:
            "The category of the search. This will determine which of our agents will be used for the search",
          required: false,
        },
      ],
    },
    {
      name: "tavily-extract",
      description:
        "A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.",
      parameters: [
        {
          name: "extract_depth",
          type: "string",
          description:
            "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
          required: false,
        },
        {
          name: "include_images",
          type: "boolean",
          description:
            "Include a list of images extracted from the urls in the response",
          required: false,
        },
        {
          name: "urls",
          type: "string array",
          description: "List of URLs to extract content from",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tavily-ai/tavily-mcp",
  _varName: "tavilyMcpServer2Plugin",
};

const mcpWeatherServerPlugin: Plugin = {
  id: "q1uythorg6",
  name: "MCP Weather Server",
  description:
    "This SSE-based MCP server allows users to connect and interact with National Weather Service APIs to retrieve weather alerts and forecasts.",
  image: "https://github.com/sidharthrajaram.png",
  actions: [],
  githubUrl: "https://github.com/sidharthrajaram/mcp-sse",
  _varName: "mcpWeatherServerPlugin",
};

const youtubesummarizerMcpServerPlugin: Plugin = {
  id: "iys2qih2ti",
  name: "Youtube-Summarizer MCP Server",
  description:
    "Enables AI applications to integrate with YouTube-Summarizer's APIs through the MCP protocol, offering local tool-based interaction for summarizing YouTube content.",
  image: "https://github.com/trilogy-group.png",
  actions: [],
  githubUrl: "https://github.com/trilogy-group/youtube-summarizer-mcp",
  _varName: "youtubesummarizerMcpServerPlugin",
};

const mcpServer4Plugin: Plugin = {
  id: "cnv39q8220",
  name: "MCP Server",
  description:
    "The MCP Server integrates APIs from the Youtube-Summarizer as tools within the MCP protocol, allowing for local AI application interaction and tool utilization through natural language queries.",
  image: "https://github.com/kabir-ti.png",
  actions: [],
  githubUrl: "https://github.com/kabir-ti/youtube-summarizer-mcp",
  _varName: "mcpServer4Plugin",
};

const columbiaMcpServerPlugin: Plugin = {
  id: "t7621umzae",
  name: "Columbia MCP Server",
  description:
    "Provides a scalable, containerized infrastructure for deploying and managing Model Context Protocol servers with monitoring, high availability, and secure configurations.",
  image: "https://github.com/smithery-ai.png",
  actions: [],
  githubUrl: "https://github.com/smithery-ai/COLUMBIA-MCP-SERVERS",
  _varName: "columbiaMcpServerPlugin",
};

const codeResearchMcpServerPlugin: Plugin = {
  id: "8ibodeufsz",
  name: "Code Research MCP Server",
  description:
    "Facilitates searching and accessing programming resources across platforms like Stack Overflow, MDN, GitHub, npm, and PyPI, aiding LLMs in finding code examples and documentation.",
  image: "https://github.com/nahmanmate.png",
  actions: [
    {
      name: "search_stackoverflow",
      description:
        "Search Stack Overflow for programming questions and answers",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results (default: 5)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "search_mdn",
      description: "Search MDN Web Docs for web development documentation",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "search_github",
      description: "Search GitHub for repositories and code",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Filter by programming language",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results per category (default: 5)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "search_npm",
      description: "Search npm registry for JavaScript packages",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results (default: 5)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "search_pypi",
      description: "Search PyPI for Python packages",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "search_all",
      description: "Search all platforms simultaneously",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum results per platform (1-5, default: 3)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nahmanmate/code-research-mcp-server",
  _varName: "codeResearchMcpServerPlugin",
};

const betterAuthMcpServerPlugin: Plugin = {
  id: "7f1irpro2i",
  name: "Better Auth MCP Server",
  description:
    "Enables enterprise-grade authentication management with secure credential handling and support for multi-protocol auth, complete with tools for analyzing, setting up, and testing authentication systems.",
  image: "https://github.com/nahmanmate.png",
  actions: [
    {
      name: "analyze_project",
      description:
        "Analyze project structure and dependencies to recommend Better-Auth setup approach",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root",
          required: true,
        },
      ],
    },
    {
      name: "setup_better_auth",
      description: "Install and configure Better-Auth in the project",
      parameters: [
        {
          name: "config",
          type: "object",
          description: "Better-Auth configuration options",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root",
          required: true,
        },
      ],
    },
    {
      name: "analyze_current_auth",
      description:
        "Detect and analyze existing auth.js/next-auth implementation",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root",
          required: true,
        },
      ],
    },
    {
      name: "generate_migration_plan",
      description:
        "Create step-by-step migration plan from existing auth to Better-Auth",
      parameters: [
        {
          name: "currentAuthType",
          type: "string",
          description: "Current authentication system type",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root",
          required: true,
        },
      ],
    },
    {
      name: "test_auth_flows",
      description: "Test authentication workflows",
      parameters: [
        {
          name: "flows",
          type: "string array",
          description: "Authentication flows to test",
          required: true,
        },
      ],
    },
    {
      name: "test_security",
      description: "Run security tests on Better-Auth setup",
      parameters: [
        {
          name: "tests",
          type: "string array",
          description: "Parameter: tests",
          required: true,
        },
      ],
    },
    {
      name: "analyze_logs",
      description: "Analyze Better-Auth logs for issues",
      parameters: [
        {
          name: "timeRange",
          type: "string",
          description: "Time range to analyze (e.g. '24h', '7d')",
          required: true,
        },
      ],
    },
    {
      name: "monitor_auth_flows",
      description: "Real-time monitoring of authentication processes",
      parameters: [
        {
          name: "duration",
          type: "string",
          description: "Monitoring duration (e.g. '1h', '30m')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nahmanmate/better-auth-mcp-server",
  _varName: "betterAuthMcpServerPlugin",
};

const deepseekclaudeMcpServerPlugin: Plugin = {
  id: "w3q7v1srsw",
  name: "DeepSeek-Claude MCP Server",
  description:
    "Enhances Claude's reasoning capabilities by integrating DeepSeek R1's advanced reasoning engine for intricate multi-step reasoning tasks with precision and efficiency.",
  image: "https://github.com/HarshJ23.png",
  actions: [
    {
      name: "reason",
      description:
        "\n    Process a query using DeepSeek's R1 reasoning engine and prepare it for integration with Claude.\n\n    DeepSeek R1 leverages advanced reasoning capabilities that naturally evolved from large-scale \n    reinforcement learning, enabling sophisticated reasoning behaviors. The output is enclosed \n    within `<ant_thinking>` tags to align with Claude's thought processing framework.\n\n    Args:\n        query (dict): Contains the following keys:\n            - context (str): Optional background information for the query.\n            - question (str): The specific question to be analyzed.\n\n    Returns:\n        str: The reasoning output from DeepSeek, formatted with `<ant_thinking>` tags for seamless use with Claude.\n    ",
      parameters: [
        {
          name: "query",
          type: "object",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/HarshJ23/deepseek-claude-MCP-server",
  _varName: "deepseekclaudeMcpServerPlugin",
};

const trelloMcpServerPlugin: Plugin = {
  id: "zekev8gy7i",
  name: "Trello MCP Server",
  description:
    "Enables interaction with Trello boards, lists, and cards through Model Context Protocol (MCP) tools, leveraging TypeScript for type safety and asynchronous operations.",
  image: "https://github.com/andypost.png",
  actions: [
    {
      name: "get_boards",
      description: "Get all boards for the authenticated user",
      parameters: [],
    },
    {
      name: "get_lists",
      description: "Get all lists in a board",
      parameters: [
        {
          name: "request",
          type: "object",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "get_cards",
      description: "Get cards from a board or specific list",
      parameters: [
        {
          name: "request",
          type: "object",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "get_card_details",
      description: "Get detailed information about a specific card",
      parameters: [
        {
          name: "request",
          type: "object",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "update_card",
      description: "Update properties of a specific card",
      parameters: [
        {
          name: "request",
          type: "object",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/andypost/mcp-server-ts-trello",
  _varName: "trelloMcpServerPlugin",
};

const iacMemoryMcpServerPlugin: Plugin = {
  id: "g4vkk4v3w5",
  name: "IaC Memory MCP Server",
  description:
    "Enhances Claude AI with persistent memory storage for Infrastructure-as-Code components, supporting version tracking and relationship mapping for Terraform and Ansible resources.",
  image: "https://github.com/AgentWong.png",
  actions: [
    {
      name: "get_terraform_provider_info",
      description:
        "Retrieve comprehensive information about a Terraform provider",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
      ],
    },
    {
      name: "list_terraform_providers",
      description: "List all cached Terraform providers with basic metadata",
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Optional filtering criteria",
          required: false,
        },
      ],
    },
    {
      name: "get_provider_version_history",
      description: "Retrieve version history for a specific Terraform provider",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
      ],
    },
    {
      name: "get_terraform_resource_info",
      description:
        "Retrieve comprehensive information about a Terraform resource including schema and documentation",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
        {
          name: "resource_name",
          type: "string",
          description: "Name of the resource",
          required: true,
        },
      ],
    },
    {
      name: "list_provider_resources",
      description:
        "List all resources associated with a specific Terraform provider",
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Optional filtering criteria",
          required: false,
        },
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
      ],
    },
    {
      name: "get_ansible_collection_info",
      description:
        "Retrieve comprehensive information about an Ansible collection",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
      ],
    },
    {
      name: "list_ansible_collections",
      description: "List all cached Ansible collections with basic metadata",
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Optional filtering criteria",
          required: false,
        },
      ],
    },
    {
      name: "get_collection_version_history",
      description: "Retrieve version history for a specific Ansible collection",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
      ],
    },
    {
      name: "get_ansible_module_info",
      description:
        "Retrieve comprehensive information about an Ansible module including schema and documentation",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
        {
          name: "module_name",
          type: "string",
          description: "Name of the module",
          required: true,
        },
      ],
    },
    {
      name: "get_resource_version_compatibility",
      description: "Check resource compatibility across provider versions",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
        {
          name: "resource_name",
          type: "string",
          description: "Name of the resource to check",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Target provider version to check compatibility against",
          required: true,
        },
      ],
    },
    {
      name: "add_terraform_provider",
      description:
        "Add a new Terraform provider to the memory store with version and documentation information",
      parameters: [
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Provider name",
          required: true,
        },
        {
          name: "source_url",
          type: "string",
          description: "Source repository URL",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Provider version",
          required: true,
        },
      ],
    },
    {
      name: "update_provider_version",
      description:
        "Update an existing Terraform provider's version information and documentation links",
      parameters: [
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_source_url",
          type: "string",
          description: "New source URL",
          required: false,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: true,
        },
        {
          name: "provider_name",
          type: "string",
          description: "Name of the provider",
          required: true,
        },
      ],
    },
    {
      name: "add_terraform_resource",
      description:
        "Add a new Terraform resource definition with its schema and version information",
      parameters: [
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Resource name",
          required: true,
        },
        {
          name: "provider_id",
          type: "string",
          description: "Provider ID",
          required: false,
        },
        {
          name: "resource_type",
          type: "string",
          description: "Resource type",
          required: true,
        },
        {
          name: "schema",
          type: "string",
          description: "Resource schema",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Resource version",
          required: true,
        },
      ],
    },
    {
      name: "update_resource_schema",
      description:
        "Update an existing Terraform resource's schema and related information",
      parameters: [
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_schema",
          type: "string",
          description: "New schema",
          required: true,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: false,
        },
        {
          name: "resource_id",
          type: "string",
          description: "Resource ID",
          required: true,
        },
      ],
    },
    {
      name: "add_ansible_collection",
      description:
        "Add a new Ansible collection to the memory store with version and documentation information",
      parameters: [
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "source_url",
          type: "string",
          description: "Source repository URL",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Collection version",
          required: true,
        },
      ],
    },
    {
      name: "update_collection_version",
      description:
        "Update an existing Ansible collection's version information and documentation links",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_source_url",
          type: "string",
          description: "New source URL",
          required: false,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: true,
        },
      ],
    },
    {
      name: "add_ansible_module",
      description:
        "Add a new Ansible module definition with its schema and version information",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection ID or name",
          required: true,
        },
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "module_type",
          type: "string",
          description: "Module type",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Module name",
          required: true,
        },
        {
          name: "schema",
          type: "string",
          description: "Module schema",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Module version",
          required: true,
        },
      ],
    },
    {
      name: "update_module_version",
      description:
        "Update an existing Ansible module's schema and related information",
      parameters: [
        {
          name: "module_id",
          type: "string",
          description: "Module ID",
          required: true,
        },
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_schema",
          type: "string",
          description: "New schema",
          required: true,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: false,
        },
      ],
    },
    {
      name: "get_module_version_compatibility",
      description: "Check module compatibility across collection versions",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
        {
          name: "module_name",
          type: "string",
          description: "Name of the module to check",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description:
            "Target collection version to check compatibility against",
          required: true,
        },
      ],
    },
    {
      name: "create_entity",
      description:
        "Create a new entity in the knowledge graph with optional initial observations",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Entity name",
          required: true,
        },
        {
          name: "observation",
          type: "string",
          description: "Initial observation",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Entity type",
          required: true,
        },
      ],
    },
    {
      name: "update_entity",
      description:
        "Update an existing entity's properties and add new observations",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Entity ID",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New name",
          required: false,
        },
        {
          name: "observation",
          type: "string",
          description: "New observation",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "New type",
          required: false,
        },
      ],
    },
    {
      name: "delete_entity",
      description:
        "Remove an entity and its relationships from the knowledge graph",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Entity ID",
          required: true,
        },
      ],
    },
    {
      name: "view_relationships",
      description:
        "Retrieve all relationships and observations for a specific entity",
      parameters: [
        {
          name: "entity_id",
          type: "string",
          description: "Entity ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AgentWong/iac-memory-mcp-server-project",
  _varName: "iacMemoryMcpServerPlugin",
};

const browserUseServerPlugin: Plugin = {
  id: "0aqrsbhx3z",
  name: "Browser Use Server",
  description:
    "Enables browser automation using Python scripts, offering operations like taking webpage screenshots, retrieving HTML content, and executing JavaScript.",
  image: "https://github.com/ztobs.png",
  actions: [
    {
      name: "screenshot",
      description: "Take a screenshot of a webpage",
      parameters: [
        {
          name: "full_page",
          type: "boolean",
          description: "Whether to capture the full page or just the viewport",
          required: false,
        },
        {
          name: "steps",
          type: "string",
          description:
            'Comma-separated actions or sentences describing steps to take after page load (e.g., "click #submit, scroll down" or "Fill the login form and submit")',
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to navigate to",
          required: true,
        },
      ],
    },
    {
      name: "get_html",
      description: "Get the HTML content of a webpage",
      parameters: [
        {
          name: "steps",
          type: "string",
          description:
            'Comma-separated actions or sentences describing steps to take after page load (e.g., "click #submit, scroll down" or "Fill the login form and submit")',
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to navigate to",
          required: true,
        },
      ],
    },
    {
      name: "execute_js",
      description: "Execute JavaScript code on a webpage",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "The JavaScript code to execute",
          required: true,
        },
        {
          name: "steps",
          type: "string",
          description:
            'Comma-separated actions or sentences describing steps to take after page load (e.g., "click #submit, scroll down" or "Fill the login form and submit")',
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to navigate to",
          required: true,
        },
      ],
    },
    {
      name: "get_console_logs",
      description: "Get the console logs of a webpage",
      parameters: [
        {
          name: "steps",
          type: "string",
          description:
            'Comma-separated actions or sentences describing steps to take after page load (e.g., "click #submit, scroll down" or "Fill the login form and submit")',
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to navigate to",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ztobs/cline-browser-use-mcp",
  _varName: "browserUseServerPlugin",
};

const skrapeMcpServerPlugin: Plugin = {
  id: "7i81qzgkzd",
  name: "Skrape MCP Server",
  description:
    "This server converts webpages into clean, structured Markdown optimized for language model consumption, removing unnecessary content and supporting JavaScript rendering.",
  image: "https://github.com/skrapeai.png",
  actions: [
    {
      name: "get_markdown",
      description: "Get markdown content from a webpage using skrape.ai",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Additional scraping options",
          required: false,
        },
        {
          name: "returnJson",
          type: "boolean",
          description:
            "Whether to return JSON response (true) or raw markdown (false)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the webpage to scrape",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/skrapeai/skrape-mcp",
  _varName: "skrapeMcpServerPlugin",
};

const filesystemquarkiversequarkusmcpserversPlugin: Plugin = {
  id: "x4x44pbgs3",
  name: "filesystem@quarkiverse/quarkus-mcp-servers",
  description:
    "browse, list and edit filesystem. Implemented in Java/Quarkus with native image (Fast!) available",
  image: "https://github.com/quarkiverse.png",
  actions: [],
  githubUrl: "https://github.com/quarkiverse/quarkus-mcp-servers",
  _varName: "filesystemquarkiversequarkusmcpserversPlugin",
};

const mcpserverjfxPlugin: Plugin = {
  id: "qtyj4gyu9z",
  name: "mcp-server-jfx",
  description: "Make drawings on a JavaFX canvas",
  image: "https://github.com/quarkiverse.png",
  actions: [],
  githubUrl: "https://github.com/quarkiverse/quarkus-mcp-servers",
  _varName: "mcpserverjfxPlugin",
};

const smartPhotoJournalMcpServerPlugin: Plugin = {
  id: "51jiworg5k",
  name: "Smart Photo Journal MCP Server",
  description:
    "This MCP server aids users in searching and analyzing their photo library by location, labels, and people, offering functionalities like photo analysis and fuzzy matching for enhanced photo management.",
  image: "https://github.com/Siddhant-K-code.png",
  actions: [],
  githubUrl: "https://github.com/Siddhant-K-code/memory-journal-mcp-server",
  _varName: "smartPhotoJournalMcpServerPlugin",
};

const postmanToolGenerationMcpServerPlugin: Plugin = {
  id: "36hxinm405",
  name: "Postman Tool Generation MCP Server",
  description:
    "An MCP server that generates AI agent tools from Postman collections and requests. This server integrates with the Postman API to convert API endpoints into type-safe code that can be used with various AI frameworks.",
  image: "https://github.com/giovannicocco.png",
  actions: [
    {
      name: "generate_ai_tool",
      description:
        "Generate code for an AI agent tool using a Postman collection and request",
      parameters: [
        {
          name: "agentFramework",
          type: "string",
          description: "AI agent framework to use",
          required: true,
        },
        {
          name: "collectionId",
          type: "string",
          description: "The Public API Network collection ID",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description: "Programming language to use",
          required: true,
        },
        {
          name: "requestId",
          type: "string",
          description: "The public request ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl:
    "https://github.com/giovannicocco/mcp-server-postman-tool-generation",
  _varName: "postmanToolGenerationMcpServerPlugin",
};

const mcpSpotifyServerPlugin: Plugin = {
  id: "mmrvuig6tp",
  name: "MCP Spotify Server",
  description:
    "Enables interaction with Spotify's music catalog via the Spotify Web API, supporting searches, artist information retrieval, playlist management, and automatic token handling.",
  image: "https://github.com/superseoworld.png",
  actions: [
    {
      name: "get_access_token",
      description: "Get a valid Spotify access token for API requests",
      parameters: [],
    },
    {
      name: "search",
      description: "Search for tracks, albums, artists, or playlists",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results (1-50)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of item to search for",
          required: true,
        },
      ],
    },
    {
      name: "get_artist",
      description: "Get Spotify catalog information for an artist",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the artist",
          required: true,
        },
      ],
    },
    {
      name: "get_multiple_artists",
      description: "Get Spotify catalog information for multiple artists",
      parameters: [
        {
          name: "ids",
          type: "string array",
          description: "Array of Spotify artist IDs or URIs (max 50)",
          required: true,
        },
      ],
    },
    {
      name: "get_artist_top_tracks",
      description:
        "Get Spotify catalog information about an artist's top tracks",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the artist",
          required: true,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
      ],
    },
    {
      name: "get_artist_related_artists",
      description:
        "Get Spotify catalog information about artists similar to a given artist",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the artist",
          required: true,
        },
      ],
    },
    {
      name: "get_artist_albums",
      description: "Get Spotify catalog information about an artist's albums",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the artist",
          required: true,
        },
        {
          name: "include_groups",
          type: "string array",
          description: "Optional. Filter by album types",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of albums to return (1-50)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "The index of the first album to return",
          required: false,
        },
      ],
    },
    {
      name: "get_album",
      description: "Get Spotify catalog information for an album",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the album",
          required: true,
        },
      ],
    },
    {
      name: "get_album_tracks",
      description: "Get Spotify catalog information for an album's tracks",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the album",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tracks to return (1-50)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "The index of the first track to return",
          required: false,
        },
      ],
    },
    {
      name: "get_multiple_albums",
      description: "Get Spotify catalog information for multiple albums",
      parameters: [
        {
          name: "ids",
          type: "string array",
          description: "Array of Spotify album IDs or URIs (max 20)",
          required: true,
        },
      ],
    },
    {
      name: "get_track",
      description: "Get Spotify catalog information for a track",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the track",
          required: true,
        },
      ],
    },
    {
      name: "get_available_genres",
      description: "Get a list of available genres for recommendations",
      parameters: [],
    },
    {
      name: "get_new_releases",
      description: "Get a list of new album releases featured in Spotify",
      parameters: [
        {
          name: "country",
          type: "string",
          description: "Optional. A country code (ISO 3166-1 alpha-2)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of releases to return (1-50)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "The index of the first release to return",
          required: false,
        },
      ],
    },
    {
      name: "get_recommendations",
      description:
        "Get track recommendations based on seed tracks, artists, or genres",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of recommendations (1-100)",
          required: false,
        },
        {
          name: "seed_artists",
          type: "string array",
          description: "Array of Spotify artist IDs or URIs",
          required: false,
        },
        {
          name: "seed_genres",
          type: "string array",
          description: "Array of genre names",
          required: false,
        },
        {
          name: "seed_tracks",
          type: "string array",
          description: "Array of Spotify track IDs or URIs",
          required: false,
        },
      ],
    },
    {
      name: "get_audiobook",
      description: "Get Spotify catalog information for an audiobook",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the audiobook",
          required: true,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
      ],
    },
    {
      name: "get_multiple_audiobooks",
      description: "Get Spotify catalog information for multiple audiobooks",
      parameters: [
        {
          name: "ids",
          type: "string array",
          description: "Array of Spotify audiobook IDs or URIs (max 50)",
          required: true,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
      ],
    },
    {
      name: "get_audiobook_chapters",
      description:
        "Get Spotify catalog information about an audiobook's chapters",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI for the audiobook",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of chapters to return (1-50)",
          required: false,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "The index of the first chapter to return",
          required: false,
        },
      ],
    },
    {
      name: "get_playlist",
      description: "Get a playlist owned by a Spotify user",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI of the playlist",
          required: true,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
      ],
    },
    {
      name: "get_playlist_tracks",
      description: "Get full details of the tracks of a playlist",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Optional. Filters for the query",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI of the playlist",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Optional. Maximum number of tracks to return (1-100)",
          required: false,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Optional. Index of the first track to return",
          required: false,
        },
      ],
    },
    {
      name: "get_playlist_items",
      description: "Get full details of the items of a playlist",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Optional. Filters for the query",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI of the playlist",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Optional. Maximum number of items to return (1-100)",
          required: false,
        },
        {
          name: "market",
          type: "string",
          description: "Optional. An ISO 3166-1 alpha-2 country code",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Optional. Index of the first item to return",
          required: false,
        },
      ],
    },
    {
      name: "modify_playlist",
      description: "Change a playlist's name and public/private state",
      parameters: [
        {
          name: "collaborative",
          type: "boolean",
          description:
            "Optional. If true, the playlist will become collaborative",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Optional. New description for the playlist",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI of the playlist",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Optional. New name for the playlist",
          required: false,
        },
        {
          name: "public",
          type: "boolean",
          description: "Optional. If true the playlist will be public",
          required: false,
        },
      ],
    },
    {
      name: "add_tracks_to_playlist",
      description: "Add one or more tracks to a playlist",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI of the playlist",
          required: true,
        },
        {
          name: "position",
          type: "number",
          description:
            "Optional. The position to insert the tracks (zero-based)",
          required: false,
        },
        {
          name: "uris",
          type: "string array",
          description: "Array of Spotify track URIs to add",
          required: true,
        },
      ],
    },
    {
      name: "remove_tracks_from_playlist",
      description: "Remove one or more tracks from a playlist",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The Spotify ID or URI of the playlist",
          required: true,
        },
        {
          name: "snapshot_id",
          type: "string",
          description: "Optional. The playlist's snapshot ID",
          required: false,
        },
        {
          name: "tracks",
          type: "object array",
          description:
            "Array of objects containing Spotify track URIs to remove",
          required: true,
        },
      ],
    },
    {
      name: "get_current_user_playlists",
      description:
        "Get a list of the playlists owned or followed by the current Spotify user",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of playlists to return (1-50)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "The index of the first playlist to return",
          required: false,
        },
      ],
    },
    {
      name: "get_featured_playlists",
      description: "Get a list of Spotify featured playlists",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Optional. Maximum number of playlists (1-50)",
          required: false,
        },
        {
          name: "locale",
          type: "string",
          description: "Optional. Desired language (format: es_MX)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Optional. Index of the first playlist to return",
          required: false,
        },
      ],
    },
    {
      name: "get_category_playlists",
      description:
        "Get a list of Spotify playlists tagged with a particular category",
      parameters: [
        {
          name: "category_id",
          type: "string",
          description: "The Spotify category ID",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Optional. Maximum number of playlists (1-50)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Optional. Index of the first playlist to return",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/superseoworld/mcp-spotify",
  _varName: "mcpSpotifyServerPlugin",
};

const googleWorkspaceMcpServerPlugin: Plugin = {
  id: "0finyxgwlk",
  name: "Google Workspace MCP Server",
  description:
    "Provides authenticated access to Google Workspace APIs with a focus on Gmail operations and planned Calendar support, featuring secure OAuth authentication and multi-account management with detailed error handling.",
  image: "https://github.com/aaronsb.png",
  actions: [],
  githubUrl: "https://github.com/aaronsb/google-workspace-mcp",
  _varName: "googleWorkspaceMcpServerPlugin",
};

const mcpReadImagesPlugin: Plugin = {
  id: "75ezdsyagp",
  name: "MCP Read Images",
  description:
    "An MCP server for analyzing images using OpenRouter vision models, offering capabilities like automatic image resizing, model configuration, and handling custom queries about images.",
  image: "https://github.com/catalystneuro.png",
  actions: [],
  githubUrl: "https://github.com/catalystneuro/mcp_read_images",
  _varName: "mcpReadImagesPlugin",
};

const goveeMcpServerPlugin: Plugin = {
  id: "9pxau1w6vo",
  name: "Govee MCP Server",
  description:
    "Enables users to control Govee LED devices using the Govee API, with features for turning devices on/off, setting colors, and adjusting brightness through a CLI or MCP clients.",
  image: "https://github.com/mathd.png",
  actions: [],
  githubUrl: "https://github.com/mathd/govee_mcp_server",
  _varName: "goveeMcpServerPlugin",
};

const zoteroMcpServer1Plugin: Plugin = {
  id: "jknz38ntu4",
  name: "Zotero MCP Server",
  description:
    "This server allows users to interact with their Zotero library through the Model Context Protocol, providing tools for searching items, retrieving metadata, and accessing full text using natural language queries.",
  image: "https://github.com/kujenga.png",
  actions: [
    {
      name: "zotero_item_metadata",
      description:
        "Get metadata information about a specific Zotero item, given the item key.",
      parameters: [
        {
          name: "item_key",
          type: "string",
          description: "Parameter: item_key",
          required: true,
        },
      ],
    },
    {
      name: "zotero_item_fulltext",
      description:
        "Get the full text content of a Zotero item, given the item key of a parent item or specific attachment.",
      parameters: [
        {
          name: "item_key",
          type: "string",
          description: "Parameter: item_key",
          required: true,
        },
      ],
    },
    {
      name: "zotero_search_items",
      description:
        "Search for items in your Zotero library, given a query string, query mode (titleCreatorYear or everything), and optional tag search (supports boolean searches). Returned results can be looked up with zotero_get_fulltext or zotero_get_metadata.",
      parameters: [
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "qmode",
          type: "string",
          description: "Parameter: qmode",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "tag",
          type: "string",
          description: "Parameter: tag",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kujenga/zotero-mcp",
  _varName: "zoteroMcpServer1Plugin",
};

const mcpragServerPlugin: Plugin = {
  id: "cni0rqrp11",
  name: "MCP-RAG Server",
  description:
    "Connects a RAG application to open-webui using Model Context Protocol (MCP), enabling server-to-client communication for context retrieval and tool usage in remote environments through Server-Sent Events (SSE).",
  image: "https://github.com/felixscherz.png",
  actions: [],
  githubUrl: "https://github.com/felixscherz/mcp-rag",
  _varName: "mcpragServerPlugin",
};

const modesMcpServerPlugin: Plugin = {
  id: "kxbyxtgfut",
  name: "Modes MCP Server",
  description:
    "The Modes MCP Server allows for comprehensive management and control over custom operational modes, supporting full CRUD operations, schema validation, and real-time configuration changes for enhanced mode management.",
  image: "https://github.com/ccc0168.png",
  actions: [
    {
      name: "list_modes",
      description: "List all custom modes",
      parameters: [],
    },
    {
      name: "get_mode",
      description: "Get details of a specific mode",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Slug of the mode to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create_mode",
      description: "Create a new custom mode",
      parameters: [
        {
          name: "customInstructions",
          type: "string",
          description: "Optional additional instructions for the mode",
          required: false,
        },
        {
          name: "groups",
          type: "array",
          description: "Array of allowed tool groups",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Display name for the mode",
          required: true,
        },
        {
          name: "roleDefinition",
          type: "string",
          description:
            "Detailed description of the mode's role and capabilities",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description:
            "Unique slug for the mode (lowercase letters, numbers, and hyphens)",
          required: true,
        },
      ],
    },
    {
      name: "update_mode",
      description: "Update an existing custom mode",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Slug of the mode to update",
          required: true,
        },
        {
          name: "updates",
          type: "object",
          description: "Parameter: updates",
          required: true,
        },
      ],
    },
    {
      name: "delete_mode",
      description: "Delete a custom mode",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Slug of the mode to delete",
          required: true,
        },
      ],
    },
    {
      name: "validate_mode",
      description: "Validate a mode configuration without saving it",
      parameters: [
        {
          name: "mode",
          type: "object",
          description: "Parameter: mode",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ccc0168/modes-mcp-server",
  _varName: "modesMcpServerPlugin",
};

const braveSearchMcpServerPlugin: Plugin = {
  id: "ikuzlpupnl",
  name: "Brave Search MCP Server",
  description:
    "Facilitates integration of Brave Search functionalities with AI assistants through the Model Context Protocol, enabling web and local searches using the Brave Search API.",
  image: "https://github.com/arben-adm.png",
  actions: [
    {
      name: "brave_web_search",
      description:
        "Execute web search using Brave Search API with improved results\n            \n            Args:\n                query: Search terms\n                count: Desired number of results (10-20)\n            ",
      parameters: [
        {
          name: "count",
          type: "string",
          description: "Parameter: count",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "brave_local_search",
      description:
        "Search for local businesses and places\n            \n            Args:\n                query: Location terms\n                count: Results (1-20\n            ",
      parameters: [
        {
          name: "count",
          type: "string",
          description: "Parameter: count",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/arben-adm/brave-mcp-search",
  _varName: "braveSearchMcpServerPlugin",
};

const mcpAccessibilityScannerPlugin: Plugin = {
  id: "hxb84fpg6o",
  name: "MCP Accessibility Scanner",
  description:
    "Enables automated web accessibility scans for WCAG compliance using Playwright and Axe-core, providing visual and JSON reports with remediation guidance.",
  image: "https://github.com/JustasMonkev.png",
  actions: [],
  githubUrl: "https://github.com/JustasMonkev/mcp-accessibility-scanner",
  _varName: "mcpAccessibilityScannerPlugin",
};

const waldurMcpServerPlugin: Plugin = {
  id: "w4fbsg6izf",
  name: "Waldur MCP Server",
  description:
    "The Waldur MCP Server facilitates interaction with Waldur instances via MCP, allowing seamless integration and management of services through customized API access.",
  image: "https://github.com/waldur.png",
  actions: [
    {
      name: "query",
      description: "Run a read-only SQL query",
      parameters: [
        {
          name: "sql",
          type: "string",
          description: "Parameter: sql",
          required: true,
        },
      ],
    },
    {
      name: "list_customers",
      description: "List all customers",
      parameters: [],
    },
    {
      name: "list_projects",
      description: "List all projects",
      parameters: [],
    },
    {
      name: "list_resources",
      description: "List all resources",
      parameters: [],
    },
    {
      name: "list_invoices",
      description: "List all invoices",
      parameters: [],
    },
    {
      name: "list_offerings",
      description: "List all offerings",
      parameters: [],
    },
    {
      name: "create_invitation",
      description:
        "Invite users to project or organization by email\n\nArgs:\n    scope_type: Whether to invite users to organization or project\n    scope_name: Name of the organization or project to invite users to\n    role: Role to assign to invited users\n    emails: List of email addresses to invite\n    extra_invitation_text: Custom message to include in the invitation\n",
      parameters: [
        {
          name: "emails",
          type: "string array",
          description: "Parameter: emails",
          required: true,
        },
        {
          name: "extra_invitation_text",
          type: "string",
          description: "Parameter: extra_invitation_text",
          required: false,
        },
        {
          name: "role",
          type: "string",
          description: "Parameter: role",
          required: true,
        },
        {
          name: "scope_name",
          type: "string",
          description: "Parameter: scope_name",
          required: true,
        },
        {
          name: "scope_type",
          type: "string",
          description: "Parameter: scope_type",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/waldur/waldur-mcp-server",
  _varName: "waldurMcpServerPlugin",
};

const columbiaMcpServer1Plugin: Plugin = {
  id: "f3qzo1pkqa",
  name: "Columbia MCP Server",
  description:
    "Facilitates deployment and management of services using the Model Context Protocol with a focus on high availability, scalability, and secure communication, leveraging Docker-based infrastructure, Prometheus, and Grafana for monitoring.",
  image: "https://github.com/GitDakky.png",
  actions: [],
  githubUrl: "https://github.com/GitDakky/COLUMBIA-MCP-SERVERS",
  _varName: "columbiaMcpServer1Plugin",
};

const nestjsMcpServerModulePlugin: Plugin = {
  id: "lh2oqhrntb",
  name: "NestJS MCP Server Module",
  description:
    "A NestJS module that allows services to be exposed as an MCP server with Server-Sent Events transport, facilitating tool discovery and execution by clients.",
  image: "https://github.com/rekog-labs.png",
  actions: [],
  githubUrl: "https://github.com/rekog-labs/MCP-Nest",
  _varName: "nestjsMcpServerModulePlugin",
};

const shopifyMcpServer2Plugin: Plugin = {
  id: "bemvhpy885",
  name: "Shopify MCP Server",
  description:
    "Enables interaction with Shopify store data using the GraphQL API, supporting product, customer, and order management with comprehensive error handling.",
  image: "https://github.com/amir-bengherbi.png",
  actions: [
    {
      name: "get-products",
      description: "Get all products or search by title",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of products to return",
          required: true,
        },
        {
          name: "searchTitle",
          type: "string",
          description: "Search title, if missing, will return all products",
          required: false,
        },
      ],
    },
    {
      name: "get-products-by-collection",
      description: "Get products from a specific collection",
      parameters: [
        {
          name: "collectionId",
          type: "string",
          description: "ID of the collection to get products from",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of products to return",
          required: false,
        },
      ],
    },
    {
      name: "get-products-by-ids",
      description: "Get products by their IDs",
      parameters: [
        {
          name: "productIds",
          type: "string array",
          description: "Array of product IDs to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-variants-by-ids",
      description: "Get product variants by their IDs",
      parameters: [
        {
          name: "variantIds",
          type: "string array",
          description: "Array of variant IDs to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "get-customers",
      description: "Get shopify customers with pagination support",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Limit of customers to return",
          required: false,
        },
        {
          name: "next",
          type: "string",
          description: "Next page cursor",
          required: false,
        },
      ],
    },
    {
      name: "tag-customer",
      description: "Add tags to a customer",
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Customer ID to tag",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags to add to the customer",
          required: true,
        },
      ],
    },
    {
      name: "get-orders",
      description: "Get shopify orders with advanced filtering and sorting",
      parameters: [
        {
          name: "after",
          type: "string",
          description: "Next page cursor",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Limit of orders to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Filter orders using query syntax",
          required: false,
        },
        {
          name: "reverse",
          type: "boolean",
          description: "Reverse sort order",
          required: false,
        },
        {
          name: "sortKey",
          type: "string",
          description: "Field to sort by",
          required: false,
        },
      ],
    },
    {
      name: "get-order",
      description: "Get a single order by ID",
      parameters: [
        {
          name: "orderId",
          type: "string",
          description: "ID of the order to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create-discount",
      description: "Create a basic discount code",
      parameters: [
        {
          name: "appliesOncePerCustomer",
          type: "boolean",
          description: "Whether discount can be used only once per customer",
          required: true,
        },
        {
          name: "code",
          type: "string",
          description: "Discount code that customers will enter",
          required: true,
        },
        {
          name: "endsAt",
          type: "string",
          description: "Optional end date in ISO format",
          required: false,
        },
        {
          name: "startsAt",
          type: "string",
          description: "Start date in ISO format",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the discount",
          required: true,
        },
        {
          name: "value",
          type: "number",
          description: "Discount value (percentage as decimal or fixed amount)",
          required: true,
        },
        {
          name: "valueType",
          type: "string",
          description: "Type of discount",
          required: true,
        },
      ],
    },
    {
      name: "create-draft-order",
      description: "Create a draft order",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Customer email",
          required: true,
        },
        {
          name: "lineItems",
          type: "object array",
          description: "Line items to add to the order",
          required: true,
        },
        {
          name: "note",
          type: "string",
          description: "Optional note for the order",
          required: false,
        },
        {
          name: "shippingAddress",
          type: "object",
          description: "Shipping address details",
          required: true,
        },
      ],
    },
    {
      name: "complete-draft-order",
      description: "Complete a draft order",
      parameters: [
        {
          name: "draftOrderId",
          type: "string",
          description: "ID of the draft order to complete",
          required: true,
        },
        {
          name: "variantId",
          type: "string",
          description: "ID of the variant in the draft order",
          required: true,
        },
      ],
    },
    {
      name: "get-collections",
      description: "Get all collections",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of collections to return",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter collections by name",
          required: false,
        },
      ],
    },
    {
      name: "get-shop",
      description: "Get shop details",
      parameters: [],
    },
    {
      name: "get-shop-details",
      description: "Get extended shop details including shipping countries",
      parameters: [],
    },
    {
      name: "manage-webhook",
      description: "Subscribe, find, or unsubscribe webhooks",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform with webhook",
          required: true,
        },
        {
          name: "callbackUrl",
          type: "string",
          description: "Webhook callback URL",
          required: true,
        },
        {
          name: "topic",
          type: "string",
          description: "Webhook topic to subscribe to",
          required: true,
        },
        {
          name: "webhookId",
          type: "string",
          description: "Webhook ID (required for unsubscribe)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/amir-bengherbi/shopify-mcp-server",
  _varName: "shopifyMcpServer2Plugin",
};

const mcpresearcherServerPlugin: Plugin = {
  id: "g1i6ilg8sl",
  name: "MCP-researcher Server",
  description:
    "This TypeScript-based server implements a simple notes system using MCP concepts, enabling users to create, list, and summarize text notes through natural language prompts.",
  image: "https://github.com/DaInfernalCoder.png",
  actions: [
    {
      name: "chat_perplexity",
      description:
        "Maintains ongoing conversations with Perplexity AI. Creates new chats or continues existing ones with full history context.",
      parameters: [
        {
          name: "chat_id",
          type: "string",
          description:
            "Optional: ID of an existing chat to continue. If not provided, a new chat will be created.",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "The message to send to Perplexity AI",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description:
        "Perform a general search query to get comprehensive information on any topic",
      parameters: [
        {
          name: "detail_level",
          type: "string",
          description:
            "Optional: Desired level of detail (brief, normal, detailed)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query or question",
          required: true,
        },
      ],
    },
    {
      name: "get_documentation",
      description:
        "Get documentation and usage examples for a specific technology, library, or API",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context or specific aspects to focus on",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "The technology, library, or API to get documentation for",
          required: true,
        },
      ],
    },
    {
      name: "find_apis",
      description:
        "Find and evaluate APIs that could be integrated into a project",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context about the project or specific needs",
          required: false,
        },
        {
          name: "requirement",
          type: "string",
          description:
            "The functionality or requirement you're looking to fulfill",
          required: true,
        },
      ],
    },
    {
      name: "check_deprecated_code",
      description:
        "Check if code or dependencies might be using deprecated features",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "The code snippet or dependency to check",
          required: true,
        },
        {
          name: "technology",
          type: "string",
          description:
            "The technology or framework context (e.g., 'React', 'Node.js')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DaInfernalCoder/perplexity-mcp",
  _varName: "mcpresearcherServerPlugin",
};

const ragDocumentationMcpServerPlugin: Plugin = {
  id: "co522bhy31",
  name: "RAG Documentation MCP Server",
  description:
    "Enables AI assistants to enhance their responses with relevant documentation through a semantic vector search, offering tools for managing and processing documentation efficiently.",
  image: "https://github.com/rahulretnan.png",
  actions: [],
  githubUrl: "https://github.com/rahulretnan/mcp-ragdocs",
  _varName: "ragDocumentationMcpServerPlugin",
};

const mcpRelayServerPlugin: Plugin = {
  id: "avt4b03uks",
  name: "MCP Relay Server",
  description:
    "This server allows integration with Discord, enabling message exchanges between Claude and a Discord channel using prompts and notifications.",
  image: "https://github.com/emiliobool.png",
  actions: [],
  githubUrl: "https://github.com/emiliobool/MCP-Relay",
  _varName: "mcpRelayServerPlugin",
};

const gyazoMcpServerPlugin: Plugin = {
  id: "bhrk879agk",
  name: "Gyazo MCP Server",
  description:
    "A TypeScript-based MCP server that enables AI assistants to interact with Gyazo images using the Model Context Protocol, providing access to image URIs, metadata, and OCR data via the Gyazo API.",
  image: "https://github.com/yuiseki.png",
  actions: [],
  githubUrl: "https://github.com/yuiseki/gyazo-mcp-server",
  _varName: "gyazoMcpServerPlugin",
};

const mentorMcpServerPlugin: Plugin = {
  id: "fdyf7qsmit",
  name: "Mentor MCP Server",
  description:
    "Provides LLM Agents with AI-powered mentorship for code review, design critique, writing feedback, and brainstorming using the Deepseek API, enabling enhanced output in various development and strategic planning tasks.",
  image: "https://github.com/cyanheads.png",
  actions: [
    {
      name: "second_opinion",
      description:
        "Provides a second opinion on a user's request by analyzing it with an LLM and listing critical considerations.",
      parameters: [
        {
          name: "user_request",
          type: "string",
          description:
            "The user's original request (e.g., 'Explain Python to me' or 'Build a login system')",
          required: true,
        },
      ],
    },
    {
      name: "code_review",
      description:
        "Provides a code review for a given file or code snippet, focusing on potential bugs, style issues, performance bottlenecks, and security vulnerabilities.",
      parameters: [
        {
          name: "code_snippet",
          type: "string",
          description:
            "Optional small code snippet for quick reviews (alternative to file_path)",
          required: false,
        },
        {
          name: "file_path",
          type: "string",
          description:
            "The full path to the local file containing the code to review",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "The programming language of the code",
          required: false,
        },
      ],
    },
    {
      name: "design_critique",
      description:
        "Offers a critique of a design document, UI/UX mockup, or architectural diagram, focusing on usability, aesthetics, consistency, accessibility, and potential design flaws.",
      parameters: [
        {
          name: "design_document",
          type: "string",
          description: "A description or URL to the design document/image",
          required: true,
        },
        {
          name: "design_type",
          type: "string",
          description:
            "Type of design (e.g., 'web UI', 'system architecture', 'mobile app')",
          required: true,
        },
      ],
    },
    {
      name: "writing_feedback",
      description:
        "Provides feedback on a piece of writing, such as an essay, article, or technical documentation, focusing on clarity, grammar, style, structure, and overall effectiveness.",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The text to review",
          required: true,
        },
        {
          name: "writing_type",
          type: "string",
          description:
            "The type of writing (e.g., 'essay', 'article', 'documentation')",
          required: true,
        },
      ],
    },
    {
      name: "brainstorm_enhancements",
      description:
        "Generates creative ideas for improving a given concept, product, or feature, focusing on innovation, feasibility, and user value.",
      parameters: [
        {
          name: "concept",
          type: "string",
          description:
            "A description of the concept, product, or feature to enhance",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cyanheads/mentor-mcp-server",
  _varName: "mentorMcpServerPlugin",
};

const googleSearchMcpServer1Plugin: Plugin = {
  id: "na33znv5mg",
  name: "Google Search MCP Server",
  description:
    "Provides Google search capabilities, web content extraction, and screenshot functionality with advanced bot detection avoidance through the MCP protocol.",
  image: "https://github.com/Claw256.png",
  actions: [],
  githubUrl: "https://github.com/Claw256/mcp-web-search",
  _varName: "googleSearchMcpServer1Plugin",
};

const modesMcpServer1Plugin: Plugin = {
  id: "kwqxkri24g",
  name: "Modes MCP Server",
  description:
    "Enables programmatic control over Roo's custom operational modes with full CRUD operations and schema validation, allowing for seamless mode configuration and management.",
  image: "https://github.com/mkc909.png",
  actions: [
    {
      name: "list_modes",
      description: "List all custom modes",
      parameters: [],
    },
    {
      name: "get_mode",
      description: "Get details of a specific mode",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Slug of the mode to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "create_mode",
      description: "Create a new custom mode",
      parameters: [
        {
          name: "customInstructions",
          type: "string",
          description: "Optional additional instructions for the mode",
          required: false,
        },
        {
          name: "groups",
          type: "array",
          description: "Array of allowed tool groups",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Display name for the mode",
          required: true,
        },
        {
          name: "roleDefinition",
          type: "string",
          description:
            "Detailed description of the mode's role and capabilities",
          required: true,
        },
        {
          name: "slug",
          type: "string",
          description:
            "Unique slug for the mode (lowercase letters, numbers, and hyphens)",
          required: true,
        },
      ],
    },
    {
      name: "update_mode",
      description: "Update an existing custom mode",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Slug of the mode to update",
          required: true,
        },
        {
          name: "updates",
          type: "object",
          description: "Parameter: updates",
          required: true,
        },
      ],
    },
    {
      name: "delete_mode",
      description: "Delete a custom mode",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Slug of the mode to delete",
          required: true,
        },
      ],
    },
    {
      name: "validate_mode",
      description: "Validate a mode configuration without saving it",
      parameters: [
        {
          name: "mode",
          type: "object",
          description: "Parameter: mode",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mkc909/modes-mcp-server",
  _varName: "modesMcpServer1Plugin",
};

const ratMcpServerPlugin: Plugin = {
  id: "t0ykwg3k7n",
  name: "RAT MCP Server",
  description:
    "Facilitates two-stage reasoning processes using DeepSeek for detailed analysis and supports multiple response models such as Claude 3.5 Sonnet and OpenRouter, maintaining conversation context and enhancing AI-driven interactions.",
  image: "https://github.com/newideas99.png",
  actions: [
    {
      name: "generate_response",
      description:
        "Generate a response using DeepSeek's reasoning and Claude's response generation through OpenRouter.",
      parameters: [
        {
          name: "clearContext",
          type: "boolean",
          description: "Clear conversation history before this request",
          required: false,
        },
        {
          name: "includeHistory",
          type: "boolean",
          description: "Include Cline conversation history for context",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "The user's input prompt",
          required: true,
        },
        {
          name: "showReasoning",
          type: "boolean",
          description: "Whether to include reasoning in response",
          required: false,
        },
      ],
    },
    {
      name: "check_response_status",
      description: "Check the status of a response generation task",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "The task ID returned by generate_response",
          required: true,
        },
      ],
    },
  ],
  githubUrl:
    "https://github.com/newideas99/Deepseek-Thinking-Claude-3.5-Sonnet-CLINE-MCP",
  _varName: "ratMcpServerPlugin",
};

const mcpjdbcPlugin: Plugin = {
  id: "2au072rrbc",
  name: "mcp-jdbc",
  description:
    "MCP to access any database accessible via JDBC such as Postgres, Oracle, mysql, mariadb, sqlite etc.",
  image: "https://github.com/quarkiverse.png",
  actions: [],
  githubUrl: "https://github.com/quarkiverse/quarkus-mcp-servers",
  _varName: "mcpjdbcPlugin",
};

const mcpInceptionMcpServerPlugin: Plugin = {
  id: "hedrd1hxv5",
  name: "MCP Inception MCP Server",
  description:
    "A TypeScript-based server that allows calling other MCP clients from your own MCP client, facilitating task delegation and context window offloading for enhanced multi-agent interactions.",
  image: "https://github.com/tanevanwifferen.png",
  actions: [
    {
      name: "execute_mcp_client",
      description:
        "Offload certain tasks to AI. Used for research purposes, do not use for code editing or anything code related. Only used to fetch data.",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "The MCP client command to execute",
          required: true,
        },
      ],
    },
    {
      name: "execute_parallel_mcp_client",
      description:
        "Execute multiple AI tasks in parallel, with responses in JSON key-value pairs.",
      parameters: [
        {
          name: "items",
          type: "string array",
          description: "Array of parameters to process in parallel",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "The base prompt to use for all executions",
          required: true,
        },
      ],
    },
    {
      name: "execute_map_reduce_mcp_client",
      description:
        "Process multiple items in parallel then sequentially reduce the results to a single output.",
      parameters: [
        {
          name: "initialValue",
          type: "string",
          description: "Initial value for the accumulator (optional).",
          required: false,
        },
        {
          name: "items",
          type: "string array",
          description: "Array of items to process.",
          required: true,
        },
        {
          name: "mapPrompt",
          type: "string",
          description:
            "Template prompt for processing each individual item. Use {item} as placeholder for the current item.",
          required: true,
        },
        {
          name: "reducePrompt",
          type: "string",
          description:
            "Template prompt for reducing results. Use {accumulator} and {result} as placeholders.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tanevanwifferen/mcp-inception",
  _varName: "mcpInceptionMcpServerPlugin",
};

const systempromptMcpGmailServerPlugin: Plugin = {
  id: "qjl092dg46",
  name: "Systemprompt MCP Gmail Server",
  description:
    "Enables users to manage Gmail accounts using AI agent-assisted operations via an MCP protocol, supporting email search, reading, deletion, and sending with a voice-powered interface.",
  image: "https://github.com/Ejb503.png",
  actions: [],
  githubUrl: "https://github.com/Ejb503/systemprompt-mcp-gmail",
  _varName: "systempromptMcpGmailServerPlugin",
};

const mcpServerForEsignaturesPlugin: Plugin = {
  id: "0ev38n83u4",
  name: "MCP Server for eSignatures",
  description:
    "Facilitates contract and template management for eSignatures, enabling users to create, send, update, and manage contracts and templates with customizable options through a user-friendly interface.",
  image: "https://github.com/esignaturescom.png",
  actions: [
    {
      name: "create_contract",
      description:
        "Creates a new contract. The contract can be a draft which the user can customize/send, or the contract can be sent instantly. So called 'signature fields' like Name/Date/signature-line must be left out, they are all handled automatically. Contract owners can customize the content by replacing {{placeholder fields}} inside the content, and the signers can fill in Signer fields when they sign the contract.",
      parameters: [
        {
          name: "assigned_user_email",
          type: "string",
          description:
            "Assigns an eSignatures user as contract owner with edit/view/send rights and notification settings. Contract owners get email notifications for signings and full contract completion if enabled on their Profile.",
          required: false,
        },
        {
          name: "contract_source",
          type: "string",
          description:
            "Identifies the originating system. Currently only mcpserver supported for MCP requests.",
          required: true,
        },
        {
          name: "custom_branding",
          type: "object",
          description: "Customize branding for documents and emails.",
          required: false,
        },
        {
          name: "custom_webhook_url",
          type: "string",
          description:
            "Overrides default webhook HTTPS URL for this contract, defined on the API page in eSignatures. Retries 6 times with 1 hour delays, timeout is 20 seconds.",
          required: false,
        },
        {
          name: "document_elements",
          type: "object array",
          description:
            "Customize document content with headers, text, images, etc. Owners can manually replace {{placeholder fields}} in the eSignatures editor, and signers can fill in Signer fields. Use placeholders for signer names unless names are already provided. The contract title is automatically added as the first line.",
          required: false,
        },
        {
          name: "emails",
          type: "object",
          description:
            "Customize email communications for signing and final documents.",
          required: false,
        },
        {
          name: "expires_in_hours",
          type: "string",
          description:
            "Sets contract expiry time in hours; expired contracts can't be signed. Expiry period can be extended per contract in eSignatures.",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description:
            "Assigns labels to the contract, overriding template labels. Labels assist in organizing contracts without using folders.",
          required: false,
        },
        {
          name: "locale",
          type: "string",
          description: "Language for signer page and emails.",
          required: false,
        },
        {
          name: "mcp_query",
          type: "string",
          description:
            "The original text query that the user typed which triggered this MCP command execution. Used for logging and debugging purposes.",
          required: true,
        },
        {
          name: "metadata",
          type: "string",
          description:
            "Custom data for contract owners and webhook notifications; e.g. internal IDs.",
          required: false,
        },
        {
          name: "placeholder_fields",
          type: "object array",
          description:
            "Replaces text placeholders in templates when creating a contract. Example: {{interest_rate}}. Do not add placeholder values when creating a draft.",
          required: false,
        },
        {
          name: "save_as_draft",
          type: "string",
          description:
            "Saves contract as draft for further editing; draft can be edited and sent via UI. URL: https://esignatures.com/contracts/contract_id/edit, where contract_id is in the API response.",
          required: false,
        },
        {
          name: "signer_fields",
          type: "object array",
          description: "Set default values for Signer fields.",
          required: false,
        },
        {
          name: "signers",
          type: "object array",
          description:
            "List of individuals required to sign the contract. Only include specific persons with their contact details; do not add generic signers.",
          required: false,
        },
        {
          name: "template_id",
          type: "string",
          description:
            "GUID of a mobile-friendly contract template within eSignatures. The template provides content, title, and labels. Required unless document_elements is provided.",
          required: false,
        },
        {
          name: "test",
          type: "string",
          description:
            "Marks contract as 'demo' with no fees; adds DEMO stamp, disables reminders.",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description:
            "Sets the contract's title, which appears as the first line in contracts and PDF files, in email subjects, and overrides the template's title.",
          required: false,
        },
      ],
    },
    {
      name: "query_contract",
      description:
        "Responds with the contract details, contract_id, status, final PDF url if present, title, labels, metadata, expiry time if present, and signer details with all signer events (signer events are included only for recent contracts, with rate limiting).",
      parameters: [
        {
          name: "contract_id",
          type: "string",
          description:
            "GUID of the contract (draft contracts can't be queried, only sent contracts).",
          required: true,
        },
      ],
    },
    {
      name: "withdraw_contract",
      description: "Withdraws a sent contract.",
      parameters: [
        {
          name: "contract_id",
          type: "string",
          description: "GUID of the contract to be withdrawn.",
          required: true,
        },
      ],
    },
    {
      name: "delete_contract",
      description:
        "Deletes a contract. The contract can only be deleted if it's a test contract or a draft contract.",
      parameters: [
        {
          name: "contract_id",
          type: "string",
          description: "GUID of the contract to be deleted.",
          required: true,
        },
      ],
    },
    {
      name: "list_recent_contracts",
      description: "Returns the the details of the latest 100 contracts.",
      parameters: [],
    },
    {
      name: "create_template",
      description:
        "Creates a reusable contract template for contracts to be based on.",
      parameters: [
        {
          name: "document_elements",
          type: "object array",
          description:
            "Customize template content with headers, text, images. Owners can manually replace {{placeholder fields}} in the eSignatures contract editor, and signers can fill in Signer fields when signing the document. Use placeholders for signer names if needed, instead of Signer fields. Contract title auto-inserts as the first line.",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description:
            "Assign labels for organizing templates and contracts; labels are inherited by contracts.",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description:
            "Title for the new template; used for contracts based on this template.",
          required: true,
        },
      ],
    },
    {
      name: "update_template",
      description:
        "Updates the title, labels or the content of a contract template.",
      parameters: [
        {
          name: "document_elements",
          type: "object array",
          description:
            "The content of the template like headers, text, and images for the document.",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "List of labels to be assigned to the template.",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "The new title of the template.",
          required: false,
        },
      ],
    },
    {
      name: "query_template",
      description:
        "Responds with the template details, template_id, title, labels, created_at, list of the Placeholder fields in the template, list of Signer fields int he template, and the full content inside document_elements",
      parameters: [
        {
          name: "template_id",
          type: "string",
          description: "GUID of the template.",
          required: true,
        },
      ],
    },
    {
      name: "delete_template",
      description: "Deletes a contract template.",
      parameters: [
        {
          name: "template_id",
          type: "string",
          description: "GUID of the template to be deleted.",
          required: true,
        },
      ],
    },
    {
      name: "list_templates",
      description: "Lists the templates.",
      parameters: [],
    },
    {
      name: "add_template_collaborator",
      description:
        "Creates a HTTPS link for editing a contract template; sends an invitation email if an email is provided..",
      parameters: [
        {
          name: "email",
          type: "string",
          description:
            "Collaborator's email; triggers an invitation email when provided",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Collaborator's name",
          required: false,
        },
        {
          name: "template_id",
          type: "string",
          description: "Parameter: template_id",
          required: true,
        },
      ],
    },
    {
      name: "remove_template_collaborator",
      description: "Removes the template collaborator",
      parameters: [
        {
          name: "template_collaborator_id",
          type: "string",
          description: "Collaborator's GUID.",
          required: true,
        },
        {
          name: "template_id",
          type: "string",
          description: "Templates's GUID.",
          required: true,
        },
      ],
    },
    {
      name: "list_template_collaborators",
      description:
        "Returns the list of template collaborators, including their GUID, name, email, and the HTTPS link for editing the template",
      parameters: [
        {
          name: "template_id",
          type: "string",
          description: "Parameter: template_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/esignaturescom/mcp-server-esignatures",
  _varName: "mcpServerForEsignaturesPlugin",
};

const blueskyMcpServerPlugin: Plugin = {
  id: "bxvvsqt34k",
  name: "BlueSky MCP Server",
  description:
    "Facilitates interaction with the BlueSky social network via its official API, allowing users to retrieve detailed user profiles and following lists with authentication and error handling capabilities.",
  image: "https://github.com/berlinbra.png",
  actions: [
    {
      name: "bluesky_get_profile",
      description: "Get a user's profile information",
      parameters: [],
    },
    {
      name: "bluesky_get_posts",
      description: "Get recent posts from a user",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of posts to return (default 50, max 100)",
          required: false,
        },
      ],
    },
    {
      name: "bluesky_search_posts",
      description: "Search for posts on Bluesky",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of posts to return (default 25, max 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
      ],
    },
    {
      name: "bluesky_get_follows",
      description: "Get a list of accounts the user follows",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of follows to return (default 50, max 100)",
          required: false,
        },
      ],
    },
    {
      name: "bluesky_get_followers",
      description: "Get a list of accounts following the user",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of followers to return (default 50, max 100)",
          required: false,
        },
      ],
    },
    {
      name: "bluesky_get_liked_posts",
      description: "Get a list of posts liked by the user",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of liked posts to return (default 50, max 100)",
          required: false,
        },
      ],
    },
    {
      name: "bluesky_get_personal_feed",
      description: "Get your personalized Bluesky feed",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of feed items to return (default 50, max 100)",
          required: false,
        },
      ],
    },
    {
      name: "bluesky_search_profiles",
      description: "Search for Bluesky profiles",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description:
            "Maximum number of results to return (default 25, max 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/berlinbra/BlueSky-MCP",
  _varName: "blueskyMcpServerPlugin",
};

const netskopeMcpServerPlugin: Plugin = {
  id: "fbsq8oidqv",
  name: "Netskope MCP Server",
  description:
    "Provides tools for managing Netskope infrastructure, policies, and steering configurations via the Model Context Protocol.",
  image: "https://github.com/johnneerdael.png",
  actions: [
    {
      name: "listPublishers",
      description: "Action for listPublishers",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
      ],
    },
    {
      name: "getPublisher",
      description: "Action for getPublisher",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "createPublisher",
      description: "Action for createPublisher",
      parameters: [
        {
          name: "lbrokerconnect",
          type: "boolean",
          description: "Optional local broker connection",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Display name for the publisher",
          required: true,
        },
        {
          name: "publisher_upgrade_profiles_id",
          type: "number",
          description: "Optional upgrade profile assignment",
          required: false,
        },
      ],
    },
    {
      name: "replacePublisher",
      description: "Action for replacePublisher",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Unique identifier of the publisher",
          required: true,
        },
        {
          name: "lbrokerconnect",
          type: "boolean",
          description: "Optional local broker connection",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New display name",
          required: true,
        },
        {
          name: "tags",
          type: "object array",
          description: "Optional publisher tags",
          required: false,
        },
      ],
    },
    {
      name: "updatePublisher",
      description: "Action for updatePublisher",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Optional publisher identifier",
          required: false,
        },
        {
          name: "lbrokerconnect",
          type: "boolean",
          description: "Optional local broker connection",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Display name for the publisher",
          required: true,
        },
        {
          name: "publisher_upgrade_profiles_id",
          type: "number",
          description: "Optional upgrade profile assignment",
          required: false,
        },
      ],
    },
    {
      name: "deletePublisher",
      description: "Action for deletePublisher",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "bulkUpgradePublishers",
      description: "Action for bulkUpgradePublishers",
      parameters: [
        {
          name: "publishers",
          type: "object",
          description: "Publishers to upgrade",
          required: true,
        },
      ],
    },
    {
      name: "getReleases",
      description: "Action for getReleases",
      parameters: [],
    },
    {
      name: "getPrivateApps",
      description: "Action for getPrivateApps",
      parameters: [
        {
          name: "publisherId",
          type: "number",
          description: "Parameter: publisherId",
          required: true,
        },
      ],
    },
    {
      name: "generatePublisherRegistrationToken",
      description: "Action for generatePublisherRegistrationToken",
      parameters: [
        {
          name: "publisherId",
          type: "number",
          description: "Parameter: publisherId",
          required: true,
        },
      ],
    },
    {
      name: "getAlertConfig",
      description: "Action for getAlertConfig",
      parameters: [],
    },
    {
      name: "updateAlertConfig",
      description: "Action for updateAlertConfig",
      parameters: [
        {
          name: "adminUsers",
          type: "string array",
          description: "Array of admin user emails to receive notifications",
          required: true,
        },
        {
          name: "eventTypes",
          type: "string array",
          description: "Array of event types to monitor",
          required: true,
        },
        {
          name: "selectedUsers",
          type: "string",
          description: "Additional users to receive notifications",
          required: true,
        },
      ],
    },
    {
      name: "listLocalBrokers",
      description: "Action for listLocalBrokers",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Parameter: fields",
          required: false,
        },
      ],
    },
    {
      name: "createLocalBroker",
      description: "Action for createLocalBroker",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name for the new local broker instance",
          required: true,
        },
      ],
    },
    {
      name: "getLocalBroker",
      description: "Action for getLocalBroker",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "updateLocalBroker",
      description: "Action for updateLocalBroker",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the local broker",
          required: true,
        },
      ],
    },
    {
      name: "deleteLocalBroker",
      description: "Action for deleteLocalBroker",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "getLocalBrokerConfig",
      description: "Action for getLocalBrokerConfig",
      parameters: [],
    },
    {
      name: "updateLocalBrokerConfig",
      description: "Action for updateLocalBrokerConfig",
      parameters: [
        {
          name: "hostname",
          type: "string",
          description:
            "Global hostname configuration affecting all broker instances",
          required: true,
        },
      ],
    },
    {
      name: "generateLocalBrokerRegistrationToken",
      description: "Action for generateLocalBrokerRegistrationToken",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "createPolicyRule",
      description: "Action for createPolicyRule",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to take when rule conditions match",
          required: true,
        },
        {
          name: "conditions",
          type: "object array",
          description: "Array of conditions that must be met",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Optional description of the rule's purpose",
          required: false,
        },
        {
          name: "enabled",
          type: "boolean",
          description: "Whether the rule is active",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the policy rule",
          required: true,
        },
        {
          name: "policy_group_id",
          type: "number",
          description: "ID of the policy group this rule belongs to",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Rule evaluation priority (lower numbers evaluated first)",
          required: true,
        },
      ],
    },
    {
      name: "updatePolicyRule",
      description: "Action for updatePolicyRule",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to take when rule conditions match",
          required: true,
        },
        {
          name: "conditions",
          type: "object array",
          description: "Array of conditions that must be met",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Optional description of the rule's purpose",
          required: false,
        },
        {
          name: "enabled",
          type: "boolean",
          description: "Whether the rule is active",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "Unique identifier of the policy rule to update",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the policy rule",
          required: true,
        },
        {
          name: "policy_group_id",
          type: "number",
          description: "ID of the policy group this rule belongs to",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description:
            "Rule evaluation priority (lower numbers evaluated first)",
          required: true,
        },
      ],
    },
    {
      name: "deletePolicyRule",
      description: "Action for deletePolicyRule",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Unique identifier of the policy rule",
          required: true,
        },
      ],
    },
    {
      name: "getPolicyRule",
      description: "Action for getPolicyRule",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Unique identifier of the policy rule",
          required: true,
        },
      ],
    },
    {
      name: "listPolicyRules",
      description: "Action for listPolicyRules",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of rules to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of rules to skip",
          required: false,
        },
        {
          name: "sortby",
          type: "string",
          description: "Field to sort by",
          required: false,
        },
        {
          name: "sortorder",
          type: "string",
          description: "Sort order (asc/desc)",
          required: false,
        },
      ],
    },
    {
      name: "createPrivateApp",
      description: "Action for createPrivateApp",
      parameters: [
        {
          name: "allow_unauthenticated_cors",
          type: "boolean",
          description: "Optional CORS settings",
          required: false,
        },
        {
          name: "allow_uri_bypass",
          type: "boolean",
          description: "Optional URI bypass",
          required: false,
        },
        {
          name: "app_name",
          type: "string",
          description: "Name of the private application",
          required: true,
        },
        {
          name: "app_option",
          type: "object",
          description: "Additional options",
          required: false,
        },
        {
          name: "bypass_uris",
          type: "string array",
          description: "Optional bypass URIs",
          required: false,
        },
        {
          name: "clientless_access",
          type: "boolean",
          description: "Enable clientless access",
          required: true,
        },
        {
          name: "host",
          type: "string",
          description: "Host address of the application",
          required: true,
        },
        {
          name: "is_user_portal_app",
          type: "boolean",
          description: "Show in user portal",
          required: true,
        },
        {
          name: "protocols",
          type: "object array",
          description: "Network protocols configuration",
          required: true,
        },
        {
          name: "publisher_tags",
          type: "object array",
          description: "Optional publisher tags",
          required: false,
        },
        {
          name: "publishers",
          type: "object array",
          description: "Associated publishers",
          required: true,
        },
        {
          name: "real_host",
          type: "string",
          description: "Optional real host",
          required: false,
        },
        {
          name: "trust_self_signed_certs",
          type: "boolean",
          description: "Trust self-signed certificates",
          required: true,
        },
        {
          name: "use_publisher_dns",
          type: "boolean",
          description: "Use publisher DNS",
          required: true,
        },
      ],
    },
    {
      name: "updatePrivateApp",
      description: "Action for updatePrivateApp",
      parameters: [
        {
          name: "allow_unauthenticated_cors",
          type: "boolean",
          description: "Optional CORS settings",
          required: false,
        },
        {
          name: "allow_uri_bypass",
          type: "boolean",
          description: "Optional URI bypass",
          required: false,
        },
        {
          name: "app_name",
          type: "string",
          description: "Name of the private application",
          required: true,
        },
        {
          name: "app_option",
          type: "object",
          description: "Additional options",
          required: false,
        },
        {
          name: "bypass_uris",
          type: "string array",
          description: "Optional bypass URIs",
          required: false,
        },
        {
          name: "clientless_access",
          type: "boolean",
          description: "Enable clientless access",
          required: true,
        },
        {
          name: "host",
          type: "string",
          description: "Host address of the application",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "Unique identifier of the private application to update",
          required: true,
        },
        {
          name: "is_user_portal_app",
          type: "boolean",
          description: "Show in user portal",
          required: true,
        },
        {
          name: "protocols",
          type: "object array",
          description: "Network protocols configuration",
          required: true,
        },
        {
          name: "publisher_tags",
          type: "object array",
          description: "Optional publisher tags",
          required: false,
        },
        {
          name: "publishers",
          type: "object array",
          description: "Associated publishers",
          required: true,
        },
        {
          name: "real_host",
          type: "string",
          description: "Optional real host",
          required: false,
        },
        {
          name: "trust_self_signed_certs",
          type: "boolean",
          description: "Trust self-signed certificates",
          required: true,
        },
        {
          name: "use_publisher_dns",
          type: "boolean",
          description: "Use publisher DNS",
          required: true,
        },
      ],
    },
    {
      name: "deletePrivateApp",
      description: "Action for deletePrivateApp",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Unique identifier of the private app",
          required: true,
        },
      ],
    },
    {
      name: "getPrivateApp",
      description: "Action for getPrivateApp",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Unique identifier of the private app",
          required: true,
        },
      ],
    },
    {
      name: "listPrivateApps",
      description: "Action for listPrivateApps",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "Filter expression",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of apps to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of apps to skip",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: false,
        },
      ],
    },
    {
      name: "listPrivateAppTags",
      description: "Action for listPrivateAppTags",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tags to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of tags to skip",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query for tags",
          required: false,
        },
      ],
    },
    {
      name: "createPrivateAppTags",
      description: "Action for createPrivateAppTags",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Private app ID",
          required: true,
        },
        {
          name: "tags",
          type: "object array",
          description: "Array of tags to create",
          required: true,
        },
      ],
    },
    {
      name: "updatePrivateAppTags",
      description: "Action for updatePrivateAppTags",
      parameters: [
        {
          name: "ids",
          type: "string array",
          description: "Array of private app IDs",
          required: true,
        },
        {
          name: "tags",
          type: "object array",
          description: "Array of tags to update",
          required: true,
        },
      ],
    },
    {
      name: "updatePrivateAppPublishers",
      description: "Action for updatePrivateAppPublishers",
      parameters: [
        {
          name: "private_app_ids",
          type: "string array",
          description: "Array of private app IDs",
          required: true,
        },
        {
          name: "publisher_ids",
          type: "string array",
          description: "Array of publisher IDs",
          required: true,
        },
      ],
    },
    {
      name: "removePrivateAppPublishers",
      description: "Action for removePrivateAppPublishers",
      parameters: [
        {
          name: "private_app_ids",
          type: "string array",
          description: "Array of private app IDs",
          required: true,
        },
        {
          name: "publisher_ids",
          type: "string array",
          description: "Array of publisher IDs",
          required: true,
        },
      ],
    },
    {
      name: "getDiscoverySettings",
      description: "Action for getDiscoverySettings",
      parameters: [],
    },
    {
      name: "getPolicyInUse",
      description: "Action for getPolicyInUse",
      parameters: [
        {
          name: "ids",
          type: "string array",
          description: "Array of private app IDs",
          required: true,
        },
      ],
    },
    {
      name: "getUserDiagnostics",
      description: "Action for getUserDiagnostics",
      parameters: [],
    },
    {
      name: "getDeviceDiagnostics",
      description: "Action for getDeviceDiagnostics",
      parameters: [
        {
          name: "deviceId",
          type: "string",
          description: "Device identifier",
          required: true,
        },
        {
          name: "privateAppId",
          type: "string",
          description: "Private application identifier",
          required: true,
        },
      ],
    },
    {
      name: "updatePublisherAssociation",
      description: "Action for updatePublisherAssociation",
      parameters: [
        {
          name: "private_app_ids",
          type: "string array",
          description: "Array of private application IDs",
          required: true,
        },
        {
          name: "publisher_ids",
          type: "string array",
          description: "Array of publisher IDs",
          required: true,
        },
      ],
    },
    {
      name: "deletePublisherAssociation",
      description: "Action for deletePublisherAssociation",
      parameters: [
        {
          name: "private_app_ids",
          type: "string array",
          description: "Array of private application IDs",
          required: true,
        },
        {
          name: "publisher_ids",
          type: "string array",
          description: "Array of publisher IDs",
          required: true,
        },
      ],
    },
    {
      name: "validateName",
      description: "Action for validateName",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "resourceType",
          type: "string",
          description: "Types of resources that can be validated",
          required: true,
        },
        {
          name: "tagType",
          type: "string",
          description: "Types of resources that can be tagged",
          required: false,
        },
      ],
    },
    {
      name: "validateResource",
      description: "Action for validateResource",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Request to validate a resource name",
          required: true,
        },
        {
          name: "resourceType",
          type: "string",
          description: "Types of resources that can be validated",
          required: true,
        },
      ],
    },
    {
      name: "searchResources",
      description: "Action for searchResources",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of results to skip",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: true,
        },
        {
          name: "resourceType",
          type: "string",
          description: "Type of resource to search",
          required: true,
        },
      ],
    },
    {
      name: "listUpgradeProfiles",
      description: "Action for listUpgradeProfiles",
      parameters: [],
    },
    {
      name: "getUpgradeProfile",
      description: "Action for getUpgradeProfile",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "createUpgradeProfile",
      description: "Action for createUpgradeProfile",
      parameters: [
        {
          name: "docker_tag",
          type: "string",
          description: "Parameter: docker_tag",
          required: true,
        },
        {
          name: "enabled",
          type: "boolean",
          description: "Parameter: enabled",
          required: true,
        },
        {
          name: "frequency",
          type: "string",
          description: "Parameter: frequency",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "release_type",
          type: "string",
          description: "Types of publisher releases available for upgrades",
          required: true,
        },
        {
          name: "timezone",
          type: "string",
          description: "Available timezones for scheduling upgrades",
          required: true,
        },
      ],
    },
    {
      name: "updateUpgradeProfile",
      description: "Action for updateUpgradeProfile",
      parameters: [
        {
          name: "docker_tag",
          type: "string",
          description: "Parameter: docker_tag",
          required: true,
        },
        {
          name: "enabled",
          type: "boolean",
          description: "Parameter: enabled",
          required: true,
        },
        {
          name: "frequency",
          type: "string",
          description: "Parameter: frequency",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "release_type",
          type: "string",
          description: "Types of publisher releases available for upgrades",
          required: true,
        },
        {
          name: "timezone",
          type: "string",
          description: "Available timezones for scheduling upgrades",
          required: true,
        },
      ],
    },
    {
      name: "deleteUpgradeProfile",
      description: "Action for deleteUpgradeProfile",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "upgradeProfileSchedule",
      description: "Action for upgradeProfileSchedule",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Profile identifier",
          required: true,
        },
        {
          name: "schedule",
          type: "string",
          description: "New schedule in human-readable format or cron format",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/johnneerdael/netskope-mcp",
  _varName: "netskopeMcpServerPlugin",
};

const toolkitMcpServerPlugin: Plugin = {
  id: "wl3y2xyi4u",
  name: "Toolkit MCP Server",
  description:
    "A Model Context Protocol server that provides LLM Agents with a comprehensive toolset for IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation.",
  image: "https://github.com/cyanheads.png",
  actions: [
    {
      name: "getCurrentTime",
      description: "Get current time formatted with Intl.DateTimeFormat",
      parameters: [
        {
          name: "locale",
          type: "string",
          description: "Locale for formatting (e.g., en-US)",
          required: false,
        },
        {
          name: "timeZone",
          type: "string",
          description: "Time zone (e.g., America/New_York)",
          required: false,
        },
      ],
    },
    {
      name: "getSystemInfo",
      description: "Get system information using Node.js os module",
      parameters: [],
    },
    {
      name: "getLoadAverage",
      description: "Get system load average for 1, 5, and 15 minutes",
      parameters: [],
    },
    {
      name: "getNetworkInterfaces",
      description: "Get network interface information",
      parameters: [],
    },
    {
      name: "checkConnectivity",
      description: "Test TCP connectivity to a host and port",
      parameters: [
        {
          name: "host",
          type: "string",
          description: "Target host",
          required: true,
        },
        {
          name: "port",
          type: "number",
          description: "Target port",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Connection timeout in milliseconds",
          required: false,
        },
      ],
    },
    {
      name: "getPublicIP",
      description: "Get public IP address using ip-api.com",
      parameters: [],
    },
    {
      name: "pingHost",
      description: "Ping a host using system ping command",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of ping requests",
          required: false,
        },
        {
          name: "host",
          type: "string",
          description: "Target host to ping",
          required: true,
        },
      ],
    },
    {
      name: "traceroute",
      description: "Perform traceroute to a host",
      parameters: [
        {
          name: "host",
          type: "string",
          description: "Target host",
          required: true,
        },
      ],
    },
    {
      name: "geolocate",
      description: "Get geolocation information for an IP address or domain",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "IP address or domain to lookup",
          required: true,
        },
      ],
    },
    {
      name: "clearGeoCache",
      description: "Clear the geolocation cache",
      parameters: [],
    },
    {
      name: "generateUUID",
      description: "Generate a random UUID using crypto.randomUUID()",
      parameters: [],
    },
    {
      name: "generateQRCode",
      description: "Generate a QR code from input data",
      parameters: [
        {
          name: "data",
          type: "string",
          description: "Data to encode in QR code",
          required: true,
        },
        {
          name: "errorCorrectionLevel",
          type: "string",
          description: "Error correction level",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Output type (terminal, svg, or base64)",
          required: false,
        },
      ],
    },
    {
      name: "convertTimezone",
      description: "Convert date/time between timezones using Luxon",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Date/time string to convert (ISO 8601 format)",
          required: true,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (full, date, time, iso)",
          required: false,
        },
        {
          name: "fromTZ",
          type: "string",
          description: "Source timezone (IANA timezone identifier)",
          required: true,
        },
        {
          name: "toTZ",
          type: "string",
          description: "Target timezone (IANA timezone identifier)",
          required: true,
        },
      ],
    },
    {
      name: "listTimezones",
      description: "List all available IANA timezones",
      parameters: [
        {
          name: "region",
          type: "string",
          description: "Filter timezones by region (e.g., America, Europe)",
          required: false,
        },
      ],
    },
    {
      name: "hashData",
      description: "Hash input data using Node.js crypto module",
      parameters: [
        {
          name: "algorithm",
          type: "string",
          description: "Hash algorithm to use",
          required: false,
        },
        {
          name: "encoding",
          type: "string",
          description: "Output encoding",
          required: false,
        },
        {
          name: "input",
          type: "string",
          description: "Data to hash",
          required: true,
        },
      ],
    },
    {
      name: "compareHashes",
      description: "Compare two hashes in constant time",
      parameters: [
        {
          name: "hash1",
          type: "string",
          description: "First hash to compare",
          required: true,
        },
        {
          name: "hash2",
          type: "string",
          description: "Second hash to compare",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cyanheads/toolkit-mcp-server",
  _varName: "toolkitMcpServerPlugin",
};

const mcppyodidePlugin: Plugin = {
  id: "pxls43joly",
  name: "mcp-pyodide",
  description:
    "A Pyodide server for executing Python code by Large Language Models (LLMs) via the Model Context Protocol (MCP).",
  image: "https://github.com/yonaka15.png",
  actions: [
    {
      name: "execute-python",
      description:
        "Execute Python code using Pyodide with output capture. When generating images, they will be automatically saved to the output directory instead of being displayed. Images can be accessed from the saved file paths that will be included in the output.",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Python code to execute",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Execution timeout in milliseconds (default: 5000)",
          required: false,
        },
      ],
    },
    {
      name: "install-python-packages",
      description: "Install Python packages using Pyodide",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Python package to install",
          required: true,
        },
      ],
    },
    {
      name: "get-mount-points",
      description: "List mounted directories",
      parameters: [],
    },
    {
      name: "list-mounted-directory",
      description: "List contents of a mounted directory",
      parameters: [
        {
          name: "mountName",
          type: "string",
          description: "Name of the mount point",
          required: true,
        },
      ],
    },
    {
      name: "read-image",
      description: "Read an image from a mounted directory",
      parameters: [
        {
          name: "imagePath",
          type: "string",
          description: "Path of the image file",
          required: true,
        },
        {
          name: "mountName",
          type: "string",
          description: "Name of the mount point",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/yonaka15/mcp-pyodide",
  _varName: "mcppyodidePlugin",
};

const koboldMcpServerPlugin: Plugin = {
  id: "a2xd4hoij7",
  name: "Kobold MCP Server",
  description:
    "A server enabling integration between KoboldAI's text generation capabilities and MCP-compatible applications, with features like chat completion, Stable Diffusion, and OpenAI-compatible API endpoints.",
  image: "https://github.com/PhialsBasement.png",
  actions: [
    {
      name: "kobold_max_context_length",
      description: "Get current max context length setting",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_max_length",
      description: "Get current max length setting",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_generate",
      description: "Generate text with KoboldAI",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "max_context_length",
          type: "number",
          description: "Parameter: max_context_length",
          required: false,
        },
        {
          name: "max_length",
          type: "number",
          description: "Parameter: max_length",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "repetition_penalty",
          type: "number",
          description: "Parameter: repetition_penalty",
          required: false,
        },
        {
          name: "seed",
          type: "number",
          description: "Parameter: seed",
          required: false,
        },
        {
          name: "stop_sequence",
          type: "string array",
          description: "Parameter: stop_sequence",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
        {
          name: "top_k",
          type: "number",
          description: "Parameter: top_k",
          required: false,
        },
        {
          name: "top_p",
          type: "number",
          description: "Parameter: top_p",
          required: false,
        },
      ],
    },
    {
      name: "kobold_model_info",
      description: "Get current model information",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_version",
      description: "Get KoboldAI version information",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_perf_info",
      description: "Get performance information",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_token_count",
      description: "Count tokens in text",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
      ],
    },
    {
      name: "kobold_detokenize",
      description: "Convert token IDs to text",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "tokens",
          type: "number array",
          description: "Parameter: tokens",
          required: true,
        },
      ],
    },
    {
      name: "kobold_transcribe",
      description: "Transcribe audio using Whisper",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "audio",
          type: "string",
          description: "Parameter: audio",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
      ],
    },
    {
      name: "kobold_web_search",
      description: "Search the web via DuckDuckGo",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "kobold_tts",
      description: "Generate text-to-speech audio",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "speed",
          type: "number",
          description: "Parameter: speed",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
        {
          name: "voice",
          type: "string",
          description: "Parameter: voice",
          required: false,
        },
      ],
    },
    {
      name: "kobold_abort",
      description: "Abort the currently ongoing generation",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_last_logprobs",
      description: "Get token logprobs from the last request",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_sd_models",
      description: "List available Stable Diffusion models",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_sd_samplers",
      description: "List available Stable Diffusion samplers",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
      ],
    },
    {
      name: "kobold_txt2img",
      description: "Generate image from text prompt",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "cfg_scale",
          type: "number",
          description: "Parameter: cfg_scale",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Parameter: height",
          required: false,
        },
        {
          name: "negative_prompt",
          type: "string",
          description: "Parameter: negative_prompt",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "sampler_name",
          type: "string",
          description: "Parameter: sampler_name",
          required: false,
        },
        {
          name: "seed",
          type: "number",
          description: "Parameter: seed",
          required: false,
        },
        {
          name: "steps",
          type: "number",
          description: "Parameter: steps",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Parameter: width",
          required: false,
        },
      ],
    },
    {
      name: "kobold_img2img",
      description: "Transform existing image using prompt",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "cfg_scale",
          type: "number",
          description: "Parameter: cfg_scale",
          required: false,
        },
        {
          name: "denoising_strength",
          type: "number",
          description: "Parameter: denoising_strength",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Parameter: height",
          required: false,
        },
        {
          name: "init_images",
          type: "string array",
          description: "Parameter: init_images",
          required: true,
        },
        {
          name: "negative_prompt",
          type: "string",
          description: "Parameter: negative_prompt",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "sampler_name",
          type: "string",
          description: "Parameter: sampler_name",
          required: false,
        },
        {
          name: "seed",
          type: "number",
          description: "Parameter: seed",
          required: false,
        },
        {
          name: "steps",
          type: "number",
          description: "Parameter: steps",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Parameter: width",
          required: false,
        },
      ],
    },
    {
      name: "kobold_interrogate",
      description: "Generate caption for image",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "image",
          type: "string",
          description: "Parameter: image",
          required: true,
        },
      ],
    },
    {
      name: "kobold_chat",
      description: "Chat completion (OpenAI-compatible)",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "max_tokens",
          type: "number",
          description: "Parameter: max_tokens",
          required: false,
        },
        {
          name: "messages",
          type: "object array",
          description: "Parameter: messages",
          required: true,
        },
        {
          name: "stop",
          type: "string array",
          description: "Parameter: stop",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
        {
          name: "top_p",
          type: "number",
          description: "Parameter: top_p",
          required: false,
        },
      ],
    },
    {
      name: "kobold_complete",
      description: "Text completion (OpenAI-compatible)",
      parameters: [
        {
          name: "apiUrl",
          type: "string",
          description: "Parameter: apiUrl",
          required: false,
        },
        {
          name: "max_tokens",
          type: "number",
          description: "Parameter: max_tokens",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "stop",
          type: "string array",
          description: "Parameter: stop",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
        {
          name: "top_p",
          type: "number",
          description: "Parameter: top_p",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PhialsBasement/KoboldCPP-MCP-Server",
  _varName: "koboldMcpServerPlugin",
};

const netskopeNpaMcpServerPlugin: Plugin = {
  id: "u010q8xb0f",
  name: "Netskope NPA MCP Server",
  description:
    "Provides an interface to manage publishers, upgrade profiles, access policies, and steering for Netskope's Network Private Access (NPA) API.",
  image: "https://github.com/johnneerdael.png",
  actions: [],
  githubUrl: "https://github.com/johnneerdael/netskope-npa-mcp",
  _varName: "netskopeNpaMcpServerPlugin",
};

const fastmcpPlugin: Plugin = {
  id: "fq2v67gbx1",
  name: "FastMCP",
  description:
    "FastMCP is a comprehensive MCP server allowing secure and standardized data and functionality exposure to LLM applications, offering resources, tools, and prompt management for efficient LLM interactions.",
  image: "https://github.com/wanderingnature.png",
  actions: [],
  githubUrl: "https://github.com/wanderingnature/mcp-typed-prompts",
  _varName: "fastmcpPlugin",
};

const togetherAiImageMcpServerPlugin: Plugin = {
  id: "2cwphjnpgw",
  name: "Together AI Image MCP Server",
  description:
    "Enables the generation of images using Together AI's models through an MCP server, supporting customizable parameters such as model selection, image dimensions, and output directory.",
  image: "https://github.com/stefanskiasan.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image using Together AI",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Output format for the generated images",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Image height in pixels",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "Model to use for generation",
          required: false,
        },
        {
          name: "n",
          type: "number",
          description: "Number of images to generate",
          required: false,
        },
        {
          name: "outputDir",
          type: "string",
          description:
            "Full absolute path where images will be saved (e.g., /Users/username/Projects/myapp/src/assets)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Text description of the image to generate",
          required: true,
        },
        {
          name: "steps",
          type: "number",
          description: "Number of inference steps",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Image width in pixels",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stefanskiasan/togetherai-image-mcp-server",
  _varName: "togetherAiImageMcpServerPlugin",
};

const mcpChromeGoogleSearchPlugin: Plugin = {
  id: "qomavmghwi",
  name: "MCP Chrome Google Search",
  description:
    "Enables Google search and webpage content extraction via Chrome for macOS, allowing access to both unauthenticated and authenticated content, and integrates with Claude for secure and automated browsing tasks.",
  image: "https://github.com/cmann50.png",
  actions: [
    {
      name: "web-search",
      description:
        "Search webpages and get a specific page of results (each page has ~10 results). Optionally filter by site and timeframe.",
      parameters: [
        {
          name: "pageNumber",
          type: "number",
          description:
            "Which page of results to fetch (1-5). Each page contains ~10 results",
          required: false,
        },
        {
          name: "query_text",
          type: "string",
          description:
            "Plain text to search for (no Google operators plain text only - use other parameters for site/date filtering)",
          required: true,
        },
        {
          name: "site",
          type: "string",
          description:
            "Limit search to specific domain (e.g. 'github.com' or 'docs.python.org')",
          required: false,
        },
        {
          name: "timeframe",
          type: "string",
          description:
            "Time range filter (h=hour, d=day, w=week, m=month, y=year)",
          required: false,
        },
      ],
    },
    {
      name: "web_fetch",
      description:
        "Extract readable text content from a webpage using Chrome browser automation.\n\nKey Features:\n- Returns main content text and optionally links",
      parameters: [
        {
          name: "includeLinks",
          type: "boolean",
          description: "Whether to include extracted links in the output",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description:
            "Webpage URL to fetch (must include http:// or https://)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cmann50/mcp-chrome-google-search",
  _varName: "mcpChromeGoogleSearchPlugin",
};

const mcpVarianceLogPlugin: Plugin = {
  id: "acqq8twrk6",
  name: "MCP Variance Log",
  description:
    "Agentic tool that looks for statistical variations in conversation structure and logs unusual events to a SQLite database. Built using the Model Context Protocol (MCP), this system is designed to be used with Claude Desktop or other MCP-compatible clients.",
  image: "https://github.com/truaxki.png",
  actions: [
    {
      name: "log-query",
      description:
        "\n                Conversation Variation analysis\n                Continuously monitor our conversation and automatically log unusual or noteworthy interactions based on the following criteria:\n\n                1. Probability Classifications:\n                HIGH (Not Logged):\n                - Common questions and responses\n                - Standard technical inquiries\n                - Regular clarifications\n                - Normal conversation flow\n\n                MEDIUM (Logged):\n                - Unexpected but plausible technical issues\n                - Unusual patterns in user behavior\n                - Noteworthy insights or connections\n                - Edge cases in normal usage\n                - Uncommon but valid use cases\n\n                LOW (Logged with Priority):\n                - Highly unusual technical phenomena\n                - Potentially problematic patterns\n                - Critical edge cases\n                - Unexpected system behaviors\n                - Novel or unique use cases\n            ",
      parameters: [
        {
          name: "context_summary",
          type: "string",
          description: "Summary of interaction context",
          required: true,
        },
        {
          name: "interaction_type",
          type: "string",
          description: "Type of interaction being monitored",
          required: true,
        },
        {
          name: "message_content",
          type: "string",
          description: "The user's message content",
          required: true,
        },
        {
          name: "probability_class",
          type: "string",
          description: "Classification of interaction probability",
          required: true,
        },
        {
          name: "reasoning",
          type: "string",
          description: "Explanation for the probability classification",
          required: true,
        },
        {
          name: "response_content",
          type: "string",
          description: "The system's response content",
          required: true,
        },
        {
          name: "session_id",
          type: "string",
          description:
            "Unique identifier for the chat session.\n                            Format: <date>_<user>_<sequence>\n                            Example: 20240124_u1_001\n\n                            Components:\n                            - date: YYYYMMDD\n                            - user: 'u' + user number\n                            - sequence: 3-digit sequential number\n\n                            Valid examples:\n                            - 20240124_u1_001\n                            - 20240124_u1_002\n                            - 20240125_u2_001",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "Identifier for the user",
          required: true,
        },
      ],
    },
    {
      name: "read-logs",
      description: "Retrieve logged conversation variations from the database.",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description:
            "Filter logs before this date (ISO format YYYY-MM-DDTHH:MM:SS)",
          required: false,
        },
        {
          name: "full_details",
          type: "boolean",
          description:
            "If true, show all fields; if false, show only context summaries",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of logs to retrieve",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description:
            "Filter logs after this date (ISO format YYYY-MM-DDTHH:MM:SS)",
          required: false,
        },
      ],
    },
    {
      name: "read_query",
      description:
        "Execute a SELECT query on the SQLite database\n\n                Schema Reference:\n                Table: chat_monitoring\n                Fields:\n                - log_id (INTEGER PRIMARY KEY)\n                - timestamp (DATETIME)\n                - session_id (TEXT)\n                - user_id (TEXT)\n                - interaction_type (TEXT)\n                - probability_class (TEXT: HIGH, MEDIUM, LOW)\n                - message_content (TEXT)\n                - response_content (TEXT)\n                - context_summary (TEXT)\n                - reasoning (TEXT)\n\n                Example:\n                SELECT timestamp, probability_class, context_summary \n                FROM chat_monitoring \n                WHERE probability_class = 'LOW'\n                LIMIT 5;\n                ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SELECT SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "write_query",
      description: "Execute an INSERT, UPDATE, or DELETE query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Non-SELECT SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "create_table",
      description: "Create a new table in the SQLite database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "CREATE TABLE SQL statement",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "List all tables in the database",
      parameters: [],
    },
    {
      name: "describe_table",
      description: "Show structure of a specific table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the table to describe",
          required: true,
        },
      ],
    },
    {
      name: "append_insight",
      description: "Add a business insight to the memo",
      parameters: [
        {
          name: "insight",
          type: "string",
          description: "Business insight discovered from data analysis",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/truaxki/mcp-variance-log",
  _varName: "mcpVarianceLogPlugin",
};

const mcpBrowserUseServerPlugin: Plugin = {
  id: "tjea5rgnbv",
  name: "MCP Browser Use Server",
  description:
    "Enables AI agents to interact with web browsers using natural language, featuring automated browsing, form filling, vision-based element detection, and structured JSON responses for systematic browser control.",
  image: "https://github.com/JovaniPink.png",
  actions: [
    {
      name: "run_browser_agent",
      description: "Handle run-browser-agent tool calls.",
      parameters: [
        {
          name: "add_infos",
          type: "string",
          description: "Parameter: add_infos",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "Parameter: task",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JovaniPink/mcp-browser-use",
  _varName: "mcpBrowserUseServerPlugin",
};

const mcpserveraxiomjsPlugin: Plugin = {
  id: "8hxxw8uenu",
  name: "mcp-server-axiom-js",
  description: "An npx-compatible port of @Axiom's mcp-server-axiom",
  image: "https://github.com/ThetaBird.png",
  actions: [
    {
      name: "queryApl",
      description:
        "# Instructions\n1. Query Axiom datasets using Axiom Processing Language (APL). The query must be a valid APL query string.\n2. ALWAYS get the schema of the dataset before running queries rather than guessing.\n    You can do this by getting a single event and projecting all fields.\n3. Keep in mind that there's a maximum row limit of 65000 rows per query.\n4. Prefer aggregations over non aggregating queries when possible to reduce the amount of data returned.\n5. Be selective in what you project in each query (unless otherwise needed, like for discovering the schema).\n    It's expensive to project all fields.\n6. ALWAYS restrict the time range of the query to the smallest possible range that\n    meets your needs. This will reduce the amount of data scanned and improve query performance.\n7. NEVER guess the schema of the dataset. If you don't where something is, use search first to find in which fields\n    it appears.\n\n# Examples\nBasic:\n- Filter: ['logs'] | where ['severity'] == \"error\" or ['duration'] > 500ms\n- Time range: ['logs'] | where ['_time'] > ago(2h) and ['_time'] < now()\n- Project rename: ['logs'] | project-rename responseTime=['duration'], path=['url']\n\nAggregations:\n- Count by: ['logs'] | summarize count() by bin(['_time'], 5m), ['status']\n- Multiple aggs: ['logs'] | summarize count(), avg(['duration']), max(['duration']), p95=percentile(['duration'], 95) by ['endpoint']\n- Dimensional: ['logs'] | summarize dimensional_analysis(['isError'], pack_array(['endpoint'], ['status']))\n- Histograms: ['logs'] | summarize histogram(['responseTime'], 100) by ['endpoint']\n- Distinct: ['logs'] | summarize dcount(['userId']) by bin_auto(['_time'])\n\nSearch & Parse:\n- Search all: search \"error\" or \"exception\"\n- Parse logs: ['logs'] | parse-kv ['message'] as (duration:long, error:string) with (pair_delimiter=\",\")\n- Regex extract: ['logs'] | extend errorCode = extract(\"error code ([0-9]+)\", 1, ['message'])\n- Contains ops: ['logs'] | where ['message'] contains_cs \"ERROR\" or ['message'] startswith \"FATAL\"\n\nData Shaping:\n- Extend & Calculate: ['logs'] | extend duration_s = ['duration']/1000, success = ['status'] < 400\n- Dynamic: ['logs'] | extend props = parse_json(['properties']) | where ['props.level'] == \"error\"\n- Pack/Unpack: ['logs'] | extend fields = pack(\"status\", ['status'], \"duration\", ['duration'])\n- Arrays: ['logs'] | where ['url'] in (\"login\", \"logout\", \"home\") | where array_length(['tags']) > 0\n\nAdvanced:\n- Make series: ['metrics'] | make-series avg(['cpu']) default=0 on ['_time'] step 1m by ['host']\n- Join: ['errors'] | join kind=inner (['users'] | project ['userId'], ['email']) on ['userId']\n- Union: union ['logs-app*'] | where ['severity'] == \"error\"\n- Fork: ['logs'] | fork (where ['status'] >= 500 | as errors) (where ['status'] < 300 | as success)\n- Case: ['logs'] | extend level = case(['status'] >= 500, \"error\", ['status'] >= 400, \"warn\", \"info\")\n\nTime Operations:\n- Bin & Range: ['logs'] | where ['_time'] between(datetime(2024-01-01)..now())\n- Multiple time bins: ['logs'] | summarize count() by bin(['_time'], 1h), bin(['_time'], 1d)\n- Time shifts: ['logs'] | extend prev_hour = ['_time'] - 1h\n\nString Operations:\n- String funcs: ['logs'] | extend domain = tolower(extract(\"://([^/]+)\", 1, ['url']))\n- Concat: ['logs'] | extend full_msg = strcat(['level'], \": \", ['message'])\n- Replace: ['logs'] | extend clean_msg = replace_regex(\"(password=)[^&]*\", \"\\1***\", ['message'])\n\nCommon Patterns:\n- Error analysis: ['logs'] | where ['severity'] == \"error\" | summarize error_count=count() by ['error_code'], ['service']\n- Status codes: ['logs'] | summarize requests=count() by ['status'], bin_auto(['_time']) | where ['status'] >= 500\n- Latency tracking: ['logs'] | summarize p50=percentile(['duration'], 50), p90=percentile(['duration'], 90) by ['endpoint']\n- User activity: ['logs'] | summarize user_actions=count() by ['userId'], ['action'], bin(['_time'], 1h)",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The APL query to run",
          required: true,
        },
      ],
    },
    {
      name: "listDatasets",
      description: "List all available Axiom datasets",
      parameters: [],
    },
    {
      name: "getDatasetInfoAndSchema",
      description: "Get dataset info and schema",
      parameters: [
        {
          name: "dataset",
          type: "string",
          description: "The dataset to get info and schema for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ThetaBird/mcp-server-axiom-js",
  _varName: "mcpserveraxiomjsPlugin",
};

const mcpsequentialthinkingtoolsPlugin: Plugin = {
  id: "zl990kfusy",
  name: "mcp-sequentialthinking-tools",
  description:
    "An adaptation of the MCP Sequential Thinking Server designed to guide tool usage in problem-solving. This server helps break down complex problems into manageable steps and provides recommendations for which MCP tools would be most effective at each stage.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "sequentialthinking_tools",
      description:
        'A detailed tool for dynamic and reflective problem-solving through thoughts.\nThis tool helps analyze problems through a flexible thinking process that can adapt and evolve.\nEach thought can build on, question, or revise previous insights as understanding deepens.\n\nIMPORTANT: When initializing this tool, you must pass all available tools that you want the sequential thinking process to be able to use. The tool will analyze these tools and provide recommendations for their use.\n\nWhen to use this tool:\n- Breaking down complex problems into steps\n- Planning and design with room for revision\n- Analysis that might need course correction\n- Problems where the full scope might not be clear initially\n- Problems that require a multi-step solution\n- Tasks that need to maintain context over multiple steps\n- Situations where irrelevant information needs to be filtered out\n- When you need guidance on which tools to use and in what order\n\nKey features:\n- You can adjust total_thoughts up or down as you progress\n- You can question or revise previous thoughts\n- You can add more thoughts even after reaching what seemed like the end\n- You can express uncertainty and explore alternative approaches\n- Not every thought needs to build linearly - you can branch or backtrack\n- Generates a solution hypothesis\n- Verifies the hypothesis based on the Chain of Thought steps\n- Recommends appropriate tools for each step\n- Provides rationale for tool recommendations\n- Suggests tool execution order and parameters\n- Tracks previous recommendations and remaining steps\n\nParameters explained:\n- thought: Your current thinking step, which can include:\n* Regular analytical steps\n* Revisions of previous thoughts\n* Questions about previous decisions\n* Realizations about needing more analysis\n* Changes in approach\n* Hypothesis generation\n* Hypothesis verification\n* Tool recommendations and rationale\n- next_thought_needed: True if you need more thinking, even if at what seemed like the end\n- thought_number: Current number in sequence (can go beyond initial total if needed)\n- total_thoughts: Current estimate of thoughts needed (can be adjusted up/down)\n- is_revision: A boolean indicating if this thought revises previous thinking\n- revises_thought: If is_revision is true, which thought number is being reconsidered\n- branch_from_thought: If branching, which thought number is the branching point\n- branch_id: Identifier for the current branch (if any)\n- needs_more_thoughts: If reaching end but realizing more thoughts needed\n- current_step: Current step recommendation, including:\n* step_description: What needs to be done\n* recommended_tools: Tools recommended for this step\n* expected_outcome: What to expect from this step\n* next_step_conditions: Conditions to consider for the next step\n- previous_steps: Steps already recommended\n- remaining_steps: High-level descriptions of upcoming steps\n\nYou should:\n1. Start with an initial estimate of needed thoughts, but be ready to adjust\n2. Feel free to question or revise previous thoughts\n3. Don\'t hesitate to add more thoughts if needed, even at the "end"\n4. Express uncertainty when present\n5. Mark thoughts that revise previous thinking or branch into new paths\n6. Ignore information that is irrelevant to the current step\n7. Generate a solution hypothesis when appropriate\n8. Verify the hypothesis based on the Chain of Thought steps\n9. Consider available tools that could help with the current step\n10. Provide clear rationale for tool recommendations\n11. Suggest specific tool parameters when appropriate\n12. Consider alternative tools for each step\n13. Track progress through the recommended steps\n14. Provide a single, ideally correct answer as the final output\n15. Only set next_thought_needed to false when truly done and a satisfactory answer is reached',
      parameters: [
        {
          name: "branch_from_thought",
          type: "integer",
          description: "Branching point thought number",
          required: false,
        },
        {
          name: "branch_id",
          type: "string",
          description: "Branch identifier",
          required: false,
        },
        {
          name: "current_step",
          type: "object",
          description: "Current step recommendation",
          required: false,
        },
        {
          name: "is_revision",
          type: "boolean",
          description: "Whether this revises previous thinking",
          required: false,
        },
        {
          name: "needs_more_thoughts",
          type: "boolean",
          description: "If more thoughts are needed",
          required: false,
        },
        {
          name: "next_thought_needed",
          type: "boolean",
          description: "Whether another thought step is needed",
          required: true,
        },
        {
          name: "previous_steps",
          type: "object array",
          description: "Steps already recommended",
          required: false,
        },
        {
          name: "remaining_steps",
          type: "string array",
          description: "High-level descriptions of upcoming steps",
          required: false,
        },
        {
          name: "revises_thought",
          type: "integer",
          description: "Which thought is being reconsidered",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Your current thinking step",
          required: true,
        },
        {
          name: "thought_number",
          type: "integer",
          description: "Current thought number",
          required: true,
        },
        {
          name: "total_thoughts",
          type: "integer",
          description: "Estimated total thoughts needed",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-sequentialthinking-tools",
  _varName: "mcpsequentialthinkingtoolsPlugin",
};

const juliaDocumentationMcpServerPlugin: Plugin = {
  id: "7xy80o4wdp",
  name: "Julia Documentation MCP Server",
  description:
    "The server facilitates access to Julia documentation and source code through Claude Desktop, allowing users to retrieve information on Julia packages, modules, types, functions, and methods.",
  image: "https://github.com/jonathanfischer97.png",
  actions: [
    {
      name: "get-doc",
      description:
        "Get Julia documentation for a package, module, type, function, or method",
      parameters: [
        {
          name: "detail_level",
          type: "string",
          description:
            "Level of documentation detail: concise (just signatures), full (standard docs), or all (including internals)",
          required: false,
        },
        {
          name: "include_unexported",
          type: "boolean",
          description: "Whether to include unexported symbols",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Path to Julia object (e.g., 'Base.sort', 'AbstractArray')",
          required: true,
        },
      ],
    },
    {
      name: "list-package",
      description: "List available symbols in a Julia package or module",
      parameters: [
        {
          name: "include_unexported",
          type: "boolean",
          description: "Whether to include unexported symbols",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Package or module name",
          required: true,
        },
      ],
    },
    {
      name: "explore-project",
      description: "Explore a Julia project's structure and dependencies",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to Julia project",
          required: true,
        },
      ],
    },
    {
      name: "get-source",
      description: "Get Julia source code for a function, type, or method",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to Julia object (e.g., 'Base.sort', 'AbstractArray')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jonathanfischer97/juliadoc-mcp",
  _varName: "juliaDocumentationMcpServerPlugin",
};

const linearMcpServer6Plugin: Plugin = {
  id: "83wkbjoqvn",
  name: "Linear MCP Server",
  description:
    "Provides a Model Context Protocol interface for accessing Linear's issue tracking system, enabling users to query and search issues with TypeScript type safety and robust error handling.",
  image: "https://github.com/cosmix.png",
  actions: [
    {
      name: "create_issue",
      description:
        'Create a new Linear issue with optional parent linking. Supports self-assignment using "me" as assigneeId.',
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description:
            'ID of the user to assign the issue to. Use "me" to assign to the current authenticated user, or a specific user ID.',
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the issue (markdown supported)",
          required: false,
        },
        {
          name: "labelIds",
          type: "string array",
          description: "Array of label IDs to attach to the issue",
          required: false,
        },
        {
          name: "parentId",
          type: "string",
          description:
            "ID of the parent issue. If provided, creates a subissue.",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Priority of the issue (0-4)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Status of the issue",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description:
            "ID of the team to create the issue in. Required unless parentId is provided.",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the issue",
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description:
        'Update an existing Linear issue. Supports self-assignment using "me" as assigneeId.',
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description:
            'ID of the new assignee. Use "me" to assign to the current authenticated user, or a specific user ID.',
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description for the issue (markdown supported)",
          required: false,
        },
        {
          name: "issueId",
          type: "string",
          description: "ID or key of the issue to update",
          required: true,
        },
        {
          name: "labelIds",
          type: "string array",
          description: "New array of label IDs",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "New priority for the issue (0-4)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New status for the issue",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title for the issue",
          required: false,
        },
      ],
    },
    {
      name: "get_issue",
      description:
        "Get detailed information about a specific Linear issue including optional relationships and cleaned content",
      parameters: [
        {
          name: "includeRelationships",
          type: "boolean",
          description:
            "Include comments, parent/sub-issues, and related issues. Also extracts mentions from content.",
          required: false,
        },
        {
          name: "issueId",
          type: "string",
          description: "The ID or key of the Linear issue",
          required: true,
        },
      ],
    },
    {
      name: "search_issues",
      description:
        'Search for Linear issues using a query string and advanced filters. Supports filtering by assignee, creator, and project. Examples: 1. Find your assigned issues: {query: "", filter: {assignedTo: "me"}}, 2. Find issues you created: {query: "", filter: {createdBy: "me"}}, 3. Find issues assigned to specific user: {query: "", filter: {assignedTo: "user-id-123"}}, 4. Find issues in a specific project: {query: "bug", projectId: "project-123"}, 5. Find issues by project name: {query: "feature", projectName: "Website Redesign"}',
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Optional filters to narrow down search results",
          required: false,
        },
        {
          name: "includeRelationships",
          type: "boolean",
          description:
            "Include additional metadata like team and labels in search results",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description:
            "Filter issues by project ID. Takes precedence over projectName if both are provided.",
          required: false,
        },
        {
          name: "projectName",
          type: "string",
          description:
            "Filter issues by project name. Will be used to find matching projects if projectId is not provided.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Text to search in issue titles and descriptions. Can be empty string if only using filters.",
          required: true,
        },
      ],
    },
    {
      name: "get_teams",
      description:
        "Get a list of Linear teams with optional name/key filtering",
      parameters: [
        {
          name: "nameFilter",
          type: "string",
          description: "Optional filter to search by team name or key",
          required: false,
        },
      ],
    },
    {
      name: "create_comment",
      description: "Create a new comment on a Linear issue",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Content of the comment (markdown supported)",
          required: true,
        },
        {
          name: "issueId",
          type: "string",
          description: "ID or key of the issue to comment on",
          required: true,
        },
      ],
    },
    {
      name: "delete_issue",
      description: "Delete an existing Linear issue",
      parameters: [
        {
          name: "issueId",
          type: "string",
          description: "ID or key of the issue to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_projects",
      description:
        "Get a list of Linear projects with optional name filtering and pagination",
      parameters: [
        {
          name: "after",
          type: "string",
          description:
            "Cursor for pagination. Use the endCursor from a previous response to fetch the next page",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of items to return (default: 50, max: 100)",
          required: false,
        },
        {
          name: "includeArchived",
          type: "boolean",
          description: "Whether to include archived projects (default: true)",
          required: false,
        },
        {
          name: "nameFilter",
          type: "string",
          description: "Optional filter to search by project name",
          required: false,
        },
      ],
    },
    {
      name: "get_project_updates",
      description:
        "Get project updates for a given project ID with optional filtering parameters",
      parameters: [
        {
          name: "after",
          type: "string",
          description:
            "Cursor for pagination. Use the endCursor from a previous response to fetch the next page",
          required: false,
        },
        {
          name: "createdAfter",
          type: "string",
          description:
            "ISO date string. Only return updates created after this date",
          required: false,
        },
        {
          name: "createdBefore",
          type: "string",
          description:
            "ISO date string. Only return updates created before this date",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of items to return (default: 50, max: 100)",
          required: false,
        },
        {
          name: "health",
          type: "string",
          description:
            'Filter updates by health status (e.g., "onTrack", "atRisk", "offTrack")',
          required: false,
        },
        {
          name: "includeArchived",
          type: "boolean",
          description: "Whether to include archived updates (default: true)",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "ID of the project to get updates for",
          required: true,
        },
        {
          name: "userId",
          type: "string",
          description:
            'Filter updates by creator. Use "me" to find updates created by the current user, or a specific user ID',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cosmix/linear-mcp",
  _varName: "linearMcpServer6Plugin",
};

const esaMcpServerPlugin: Plugin = {
  id: "undwqgwbtd",
  name: "ESA MCP Server",
  description:
    "Enables interaction with esa.io's API through the Model Context Protocol, supporting article search and retrieval with a compliant MCP interface.",
  image: "https://github.com/d-kimuson.png",
  actions: [
    {
      name: "search_esa_posts",
      description:
        "Search posts in esa.io. Response is paginated. For efficient search, you can use customized queries like the following: keyword for partial match, \"keyword\" for exact match, keyword1 keyword2 for AND match, keyword1 OR keyword2 for OR match, -keyword for excluding keywords, title:keyword for title match, wip:true or wip:false for WIP posts, kind:stock or kind:flow for kind match, category:category_name for partial match with category name, in:category_name for prefix match with category name, on:category_name for exact match with category name, body:keyword for body match, tag:tag_name or tag:tag_name case_sensitive:true for tag match, user:screen_name for post author's screen name, updated_by:screen_name for post updater's screen name, comment:keyword for partial match with comments, starred:true or starred:false for starred posts, watched:true or watched:false for watched posts, watched_by:screen_name for screen name of members watching the post, sharing:true or sharing:false for shared posts, stars:>3 for posts with more than 3 stars, watches:>3 for posts with more than 3 watches, comments:>3 for posts with more than 3 comments, done:>=3 for posts with 3 or more done items, undone:>=3 for posts with 3 or more undone items, created:>YYYY-MM-DD for filtering by creation date, updated:>YYYY-MM-DD for filtering by update date",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Parameter: perPage",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
        {
          name: "teamName",
          type: "string",
          description: "Parameter: teamName",
          required: false,
        },
      ],
    },
    {
      name: "read_esa_post",
      description: "Read a post in esa.io.",
      parameters: [
        {
          name: "postNumber",
          type: "number",
          description: "Parameter: postNumber",
          required: true,
        },
        {
          name: "teamName",
          type: "string",
          description: "Parameter: teamName",
          required: false,
        },
      ],
    },
    {
      name: "read_esa_multiple_posts",
      description: "Read multiple posts in esa.io.",
      parameters: [
        {
          name: "postNumbers",
          type: "number array",
          description: "Parameter: postNumbers",
          required: true,
        },
        {
          name: "teamName",
          type: "string",
          description: "Parameter: teamName",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/d-kimuson/esa-mcp-server",
  _varName: "esaMcpServerPlugin",
};

const obsidianMcpServerPlugin: Plugin = {
  id: "syuh40cxyk",
  name: "Obsidian MCP Server",
  description:
    "Enables interaction between LLMs and Obsidian vaults through the Model Context Protocol, supporting secure file operations, content management, and advanced search capabilities.",
  image: "https://github.com/cyanheads.png",
  actions: [
    {
      name: "obsidian_list_files_in_vault",
      description:
        "Lists all files and directories in the root directory of your Obsidian vault. Returns a hierarchical structure of files and folders, including metadata like file type.",
      parameters: [],
    },
    {
      name: "obsidian_list_files_in_dir",
      description:
        "Lists all files and directories that exist in a specific Obsidian directory. Returns a hierarchical structure showing files, folders, and their relationships. Useful for exploring vault organization and finding specific files.",
      parameters: [
        {
          name: "dirpath",
          type: "string",
          description:
            "Path to list files from (relative to your vault root). Note that empty directories will not be returned.",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_get_file_contents",
      description:
        "Return the content of a single file in your vault. Supports markdown files, text files, and other readable formats. Returns the raw content including any YAML frontmatter.",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description:
            "Path to the relevant file (relative to your vault root).",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_find_in_file",
      description:
        "Full-text search across all files in the vault. Returns matching files with surrounding context for each match. Useful for finding specific content, references, or patterns across notes.",
      parameters: [
        {
          name: "contextLength",
          type: "integer",
          description:
            "Number of characters to include before and after each match for context (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Text pattern to search for. Can include tags, keywords, or phrases.",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_append_content",
      description: "Append content to a new or existing file in the vault.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to append to the file",
          required: true,
        },
        {
          name: "filepath",
          type: "string",
          description: "Path to the file (relative to vault root)",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_patch_content",
      description:
        "Update the entire content of an existing note or create a new one.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "New content for the note (replaces existing content)",
          required: true,
        },
        {
          name: "filepath",
          type: "string",
          description: "Path to the file (relative to vault root)",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_complex_search",
      description:
        "Advanced search functionality using JsonLogic queries. Enables complex file filtering based on paths, metadata, modification times, and content patterns. Supports logical operations, date comparisons, and pattern matching.",
      parameters: [
        {
          name: "query",
          type: "object",
          description:
            'JsonLogic query object. Example: {"glob": ["*.md", {"var": "path"}]} matches all markdown files',
          required: true,
        },
      ],
    },
    {
      name: "obsidian_get_properties",
      description:
        "Get properties (title, tags, status, etc.) from an Obsidian note's YAML frontmatter. Returns all available properties including custom fields.",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Path to the note file (relative to vault root)",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_update_properties",
      description:
        "Update properties in an Obsidian note's YAML frontmatter. Intelligently merges arrays (tags, type, status), handles custom fields, and automatically manages timestamps (created by Obsidian, modified by MCP server). Existing properties not included in the update are preserved.",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Path to the note file (relative to vault root)",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Properties to update",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cyanheads/obsidian-mcp-server",
  _varName: "obsidianMcpServerPlugin",
};

const mcpconfluencePlugin: Plugin = {
  id: "qkapsouyfx",
  name: "mcp-confluence",
  description:
    "A model context server that provides prompts that can be used as slash commands for clients like Zed Editor, in order to add page contents as context to the AI assistant.",
  image: "https://github.com/mouhamadalmounayar.png",
  actions: [],
  githubUrl: "https://github.com/mouhamadalmounayar/mcp-confluence",
  _varName: "mcpconfluencePlugin",
};

const jinaaiGroundingMcpServerPlugin: Plugin = {
  id: "urkuhet67l",
  name: "Jina.ai Grounding MCP Server",
  description:
    "Integrates Jina.ai's Grounding API with LLMs for real-time, fact-based web content grounding and analysis, enhancing LLM responses with precise, verified information.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "ground_statement",
      description:
        "Ground a statement using real-time web search results to check factuality. When providing URLs via the references parameter, ensure they are publicly accessible and contain relevant information about the statement. If the URLs do not contain the necessary information, try removing the URL restrictions to search the entire web.",
      parameters: [
        {
          name: "no_cache",
          type: "boolean",
          description: "Whether to bypass cache for fresh results",
          required: false,
        },
        {
          name: "references",
          type: "string array",
          description:
            "Optional list of URLs to restrict search to. Only provide URLs that are publicly accessible and contain information relevant to the statement. If the URLs do not contain the necessary information, the grounding will fail. For best results, either provide URLs you are certain contain the information, or omit this parameter to search the entire web.",
          required: false,
        },
        {
          name: "statement",
          type: "string",
          description: "Statement to be grounded",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-jinaai-grounding",
  _varName: "jinaaiGroundingMcpServerPlugin",
};

const eolMcpServerPlugin: Plugin = {
  id: "5392xs0e78",
  name: "EOL MCP Server",
  description:
    "Enables AI assistants to check software end-of-life dates and support status using the endoflife.date API, providing accurate information on software lifecycle, security status, and upgrade recommendations in real-time.",
  image: "https://github.com/ducthinh993.png",
  actions: [
    {
      name: "check_version",
      description:
        "Check EOL status and support information for software versions",
      parameters: [
        {
          name: "product",
          type: "string",
          description: "Software product name (e.g., python, nodejs, ubuntu)",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Specific version to check (e.g., 3.8, 16, 20.04)",
          required: false,
        },
      ],
    },
    {
      name: "check_cve",
      description: "Scan for known security vulnerabilities and support status",
      parameters: [
        {
          name: "product",
          type: "string",
          description: "Software product name",
          required: true,
        },
        {
          name: "vendor",
          type: "string",
          description: "Software vendor (optional)",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Version to check for vulnerabilities",
          required: true,
        },
      ],
    },
    {
      name: "list_products",
      description: "Browse or search available software products",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "Optional search term to filter products",
          required: false,
        },
      ],
    },
    {
      name: "compare_versions",
      description: "Compare versions and get detailed upgrade analysis",
      parameters: [
        {
          name: "product",
          type: "string",
          description: "Software product name (e.g., python, nodejs)",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Current version being used",
          required: true,
        },
      ],
    },
    {
      name: "get_all_details",
      description:
        "Get comprehensive lifecycle details for all versions of a product",
      parameters: [
        {
          name: "product",
          type: "string",
          description: "Software product name (e.g., python, nodejs)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ducthinh993/mcp-server-endoflife",
  _varName: "eolMcpServerPlugin",
};

const azureDevopsMcpServerForClinePlugin: Plugin = {
  id: "jw1m3bd8lw",
  name: "Azure DevOps MCP Server for Cline",
  description:
    "Integrates Cline with Azure DevOps services, enabling access to work items, repositories, and pull requests through configurable MCP tools.",
  image: "https://github.com/stefanskiasan.png",
  actions: [
    {
      name: "get_work_item",
      description: "Get work items by IDs",
      parameters: [
        {
          name: "$expand",
          type: "number",
          description:
            "Expand options (None=0, Relations=1, Fields=2, Links=3, All=4)",
          required: false,
        },
        {
          name: "asOf",
          type: "string",
          description: "As of a specific date (ISO 8601)",
          required: false,
        },
        {
          name: "errorPolicy",
          type: "number",
          description: "Error policy (Fail=1, Omit=2)",
          required: false,
        },
        {
          name: "fields",
          type: "string array",
          description:
            'Fields to include (e.g., "System.Title", "System.State")',
          required: false,
        },
        {
          name: "ids",
          type: "number array",
          description: "Work item IDs",
          required: true,
        },
      ],
    },
    {
      name: "list_work_items",
      description: "List work items from a board",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "WIQL query to filter work items",
          required: true,
        },
      ],
    },
    {
      name: "create_work_item",
      description: "Create a new work item using JSON patch operations",
      parameters: [
        {
          name: "document",
          type: "object array",
          description: "Array of JSON patch operations to apply",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: 'Work item type (e.g., "Bug", "Task", "User Story")',
          required: true,
        },
      ],
    },
    {
      name: "update_work_item",
      description: "Update an existing work item using JSON patch operations",
      parameters: [
        {
          name: "document",
          type: "object array",
          description: "Array of JSON patch operations to apply",
          required: true,
        },
        {
          name: "id",
          type: "number",
          description: "ID of the work item to update",
          required: true,
        },
      ],
    },
    {
      name: "get_boards",
      description: "List available boards in the project",
      parameters: [
        {
          name: "team",
          type: "string",
          description: "Team name (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_wikis",
      description: "List all wikis in the project",
      parameters: [],
    },
    {
      name: "get_wiki_page",
      description: "Get a wiki page by path",
      parameters: [
        {
          name: "includeContent",
          type: "boolean",
          description: "Include page content (optional, defaults to true)",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Page path",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Version (optional, defaults to main)",
          required: false,
        },
        {
          name: "wikiIdentifier",
          type: "string",
          description: "Wiki identifier",
          required: true,
        },
      ],
    },
    {
      name: "create_wiki",
      description: "Create a new wiki",
      parameters: [
        {
          name: "mappedPath",
          type: "string",
          description: "Mapped path (optional, defaults to /)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Wiki name",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project ID (optional, defaults to current project)",
          required: false,
        },
      ],
    },
    {
      name: "update_wiki_page",
      description: "Create or update a wiki page",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment for the update (optional)",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Page content in markdown format",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Page path",
          required: true,
        },
        {
          name: "wikiIdentifier",
          type: "string",
          description: "Wiki identifier",
          required: true,
        },
      ],
    },
    {
      name: "list_projects",
      description: "List all projects in the Azure DevOps organization",
      parameters: [],
    },
    {
      name: "list_pipelines",
      description: "List all pipelines in the project",
      parameters: [
        {
          name: "folder",
          type: "string",
          description: "Filter pipelines by folder path (optional)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Filter pipelines by name (optional)",
          required: false,
        },
      ],
    },
    {
      name: "trigger_pipeline",
      description: "Trigger a pipeline run",
      parameters: [
        {
          name: "branch",
          type: "string",
          description:
            "Branch to run the pipeline on (optional, defaults to default branch)",
          required: false,
        },
        {
          name: "pipelineId",
          type: "number",
          description: "Pipeline ID to trigger",
          required: true,
        },
        {
          name: "variables",
          type: "object",
          description: "Pipeline variables to override (optional)",
          required: false,
        },
      ],
    },
    {
      name: "list_pull_requests",
      description: "List all pull requests in the project",
      parameters: [
        {
          name: "creatorId",
          type: "string",
          description: "Filter by creator ID (optional)",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "Filter by repository ID (optional)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by PR status (active, completed, abandoned)",
          required: false,
        },
      ],
    },
    {
      name: "create_pull_request",
      description: "Create a new pull request",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Pull request description",
          required: false,
        },
        {
          name: "repositoryId",
          type: "string",
          description: "Repository ID",
          required: true,
        },
        {
          name: "reviewers",
          type: "string array",
          description: "List of reviewer IDs (optional)",
          required: false,
        },
        {
          name: "sourceRefName",
          type: "string",
          description: "Source branch name (e.g. refs/heads/feature)",
          required: true,
        },
        {
          name: "targetRefName",
          type: "string",
          description: "Target branch name (e.g. refs/heads/main)",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Pull request title",
          required: true,
        },
      ],
    },
    {
      name: "update_pull_request",
      description: "Update an existing pull request",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New description (optional)",
          required: false,
        },
        {
          name: "mergeStrategy",
          type: "string",
          description: "Merge strategy (optional)",
          required: false,
        },
        {
          name: "pullRequestId",
          type: "number",
          description: "Pull Request ID",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "New status (active, abandoned, completed)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title (optional)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/stefanskiasan/azure-devops-mcp-server",
  _varName: "azureDevopsMcpServerForClinePlugin",
};

const mcpJinaaiSearchServerPlugin: Plugin = {
  id: "u6603w196t",
  name: "MCP JinaAI Search Server",
  description:
    "Enables efficient web search integration with Jina.ai's Search API, offering clean, LLM-optimized content retrieval with support for various content types and configurable caching.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "search",
      description:
        "Search the web and get clean, LLM-friendly content using Jina.ai Reader. Returns top 5 results with URLs and clean content.",
      parameters: [
        {
          name: "browser_locale",
          type: "string",
          description: "Browser locale for rendering content",
          required: false,
        },
        {
          name: "enable_iframe",
          type: "boolean",
          description: "Extract content from iframes",
          required: false,
        },
        {
          name: "enable_shadow_dom",
          type: "boolean",
          description: "Extract content from shadow DOM",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Response format (json or text)",
          required: false,
        },
        {
          name: "gather_images",
          type: "boolean",
          description: "Gather all images at the end of the response",
          required: false,
        },
        {
          name: "gather_links",
          type: "boolean",
          description: "Gather all links at the end of the response",
          required: false,
        },
        {
          name: "image_caption",
          type: "boolean",
          description: "Caption images in the content",
          required: false,
        },
        {
          name: "no_cache",
          type: "boolean",
          description: "Bypass cache for fresh results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "resolve_redirects",
          type: "boolean",
          description: "Follow redirect chains to final URL",
          required: false,
        },
        {
          name: "stream",
          type: "boolean",
          description: "Enable stream mode for large pages",
          required: false,
        },
        {
          name: "token_budget",
          type: "number",
          description: "Maximum number of tokens for this request",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-jinaai-search",
  _varName: "mcpJinaaiSearchServerPlugin",
};

const mcpPuppeteerLinuxServerPlugin: Plugin = {
  id: "dhm3zekwh9",
  name: "MCP Puppeteer Linux Server",
  description:
    "Enables browser automation for LLMs on Linux display servers, supporting web interaction, screenshots, and JavaScript execution in a real browser.",
  image: "https://github.com/PhialsBasement.png",
  actions: [
    {
      name: "puppeteer_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "puppeteer_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_fill",
      description: "Fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_select",
      description: "Select an element on the page with Select tag",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_hover",
      description: "Hover an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PhialsBasement/MCP-Puppeteer-Linux",
  _varName: "mcpPuppeteerLinuxServerPlugin",
};

const mcpwslexecPlugin: Plugin = {
  id: "wv6df94kb8",
  name: "mcp-wsl-exec",
  description:
    "A secure MCP server for Windows Subsystem for Linux environments, facilitating safe command execution with extensive validation and protection against vulnerabilities like shell injection and dangerous commands.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "execute_command",
      description: "Execute a command in WSL",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Timeout in milliseconds",
          required: false,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory for command execution",
          required: false,
        },
      ],
    },
    {
      name: "confirm_command",
      description: "Confirm execution of a dangerous command",
      parameters: [
        {
          name: "confirm",
          type: "boolean",
          description: "Whether to proceed with the command execution",
          required: true,
        },
        {
          name: "confirmation_id",
          type: "string",
          description: "Confirmation ID received from execute_command",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-wsl-exec",
  _varName: "mcpwslexecPlugin",
};

const difyMcpServerPlugin: Plugin = {
  id: "2plkeyc272",
  name: "Dify MCP Server",
  description:
    "Enables the conversion of Dify applications into Model Context Protocol tools, supporting streaming responses and configured via YAML.",
  image: "https://github.com/faiz-gear.png",
  actions: [],
  githubUrl: "https://github.com/faiz-gear/dify-mcp-server-ts",
  _varName: "difyMcpServerPlugin",
};

const sillytavernMcpServerPlugin: Plugin = {
  id: "pg6z0acepi",
  name: "SillyTavern MCP Server",
  description:
    "Enables external tool registration and execution through WebSocket-based communication, providing a unified interface for real-time tool management within SillyTavern.",
  image: "https://github.com/CG-Labs.png",
  actions: [],
  githubUrl: "https://github.com/CG-Labs/SillyTavern-MCP-Extension",
  _varName: "sillytavernMcpServerPlugin",
};

const mcpeunomiaPlugin: Plugin = {
  id: "k3gaenwd21",
  name: "mcp-eunomia",
  description:
    "Eunomia MCP Server is an extension of the Eunomiaframework that connects Eunomia instruments with servers.\n\nIt provides a simple way to orchestrate data governance policies (like PII detection or user access control) and seamlessly integrate them with external serve",
  image: "https://github.com/whataboutyou-ai.png",
  actions: [],
  githubUrl: "https://github.com/whataboutyou-ai/eunomia-mcp-server",
  _varName: "mcpeunomiaPlugin",
};

const mcpDuckduckgoSearchServerPlugin: Plugin = {
  id: "v99lwtriyk",
  name: "MCP DuckDuckGo Search Server",
  description:
    "Enables integration with DuckDuckGo search capabilities for LLMs, supporting comprehensive web search, regional filtering, result types, and safe browsing with caching and customizable search parameters.",
  image: "https://github.com/spences10.png",
  actions: [],
  githubUrl: "https://github.com/spences10/mcp-duckduckgo-search",
  _varName: "mcpDuckduckgoSearchServerPlugin",
};

const apptweakMcpServer1Plugin: Plugin = {
  id: "ym377qzb03",
  name: "AppTweak MCP Server",
  description:
    "Enables app store analytics and competitor analysis through AppTweak API, with tools for keyword research, download estimates, and user review insights.",
  image: "https://github.com/robertredbox.png",
  actions: [
    {
      name: "search_app",
      description: "Search for an app by name and platform (ios/android)",
      parameters: [
        {
          name: "country",
          type: "string",
          description: "Two-letter country code (e.g., US, GB)",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Two-letter language code (e.g., en, fr)",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Platform to search on (ios/android)",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "App name to search for",
          required: true,
        },
      ],
    },
    {
      name: "get_app_details",
      description: "Get detailed information about an app by ID",
      parameters: [
        {
          name: "appId",
          type: "string",
          description:
            "App ID (e.g., com.example.app for Android or 123456789 for iOS)",
          required: true,
        },
        {
          name: "country",
          type: "string",
          description: "Two-letter country code (e.g., US, GB)",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Two-letter language code (e.g., en, fr)",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Platform (ios/android)",
          required: true,
        },
      ],
    },
    {
      name: "analyze_top_keywords",
      description:
        "Get keyword suggestions sorted by score (keyword quality), volume (search popularity), or rank (ranking difficulty)",
      parameters: [
        {
          name: "appIds",
          type: "string array",
          description: "Array of app IDs to analyze",
          required: true,
        },
        {
          name: "country",
          type: "string",
          description: "Two-letter country code (e.g., US, GB)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of keywords to analyze per app (max 20)",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Platform (ios/android)",
          required: true,
        },
        {
          name: "sortBy",
          type: "string",
          description:
            "How to sort keyword suggestions: score (keyword quality), volume (search popularity), rank (ranking difficulty)",
          required: false,
        },
      ],
    },
    {
      name: "analyze_reviews",
      description:
        "Analyze app reviews and ratings to extract user satisfaction insights",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "App ID to analyze reviews for",
          required: true,
        },
        {
          name: "country",
          type: "string",
          description: "Two-letter country code (e.g., US, GB)",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Filter reviews by language (e.g., en, es)",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Platform (ios/android)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/robertredbox/apptweak-mcp",
  _varName: "apptweakMcpServer1Plugin",
};

const mcpWebcamServerPlugin: Plugin = {
  id: "plbefh6h9w",
  name: "MCP Webcam Server",
  description:
    "Enables users to send live webcam images to Claude Desktop or other MCP clients, facilitating interaction through capturing images, screenshots, and providing a webcam view for visual input.",
  image: "https://github.com/evalstate.png",
  actions: [
    {
      name: "capture",
      description:
        "Gets the latest picture from the webcam. You can use this  if the human asks questions about their immediate environment,  if you want to see the human or to examine an object they may be referring to or showing you.",
      parameters: [],
    },
    {
      name: "screenshot",
      description: "Gets a screenshot of the current screen or window",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/evalstate/mcp-webcam",
  _varName: "mcpWebcamServerPlugin",
};

const mcpPerplexitySearchPlugin: Plugin = {
  id: "zlqdizpsr9",
  name: "MCP Perplexity Search",
  description:
    "Enables integration of Perplexity's AI API with LLMs, delivering advanced chat completion by utilizing specialized prompt templates for tasks like technical documentation, code review, and API documentation.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "chat_completion",
      description: "Generate chat completions using the Perplexity API",
      parameters: [
        {
          name: "custom_template",
          type: "object",
          description:
            "Custom prompt template. If provided, overrides prompt_template.",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description:
            "Response format. Use json for structured data, markdown for formatted text with code blocks. Overrides template format if provided.",
          required: false,
        },
        {
          name: "include_sources",
          type: "boolean",
          description:
            "Include source URLs in the response. Overrides template setting if provided.",
          required: false,
        },
        {
          name: "max_tokens",
          type: "number",
          description:
            "The maximum number of tokens to generate in the response. One token is roughly 4 characters for English text.",
          required: false,
        },
        {
          name: "messages",
          type: "object array",
          description: "Parameter: messages",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description:
            "Model to use for completion. Note: llama-3.1 models will be deprecated after 2/22/2025",
          required: false,
        },
        {
          name: "prompt_template",
          type: "string",
          description:
            "Predefined prompt template to use for common use cases. Available templates:\n- technical_docs: Technical documentation with code examples and source references\n- security_practices: Security best practices and implementation guidelines with references\n- code_review: Code analysis focusing on best practices and improvements\n- api_docs: API documentation in structured JSON format with examples",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description:
            "Controls randomness in the output. Higher values (e.g. 0.8) make the output more random, while lower values (e.g. 0.2) make it more focused and deterministic.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-perplexity-search",
  _varName: "mcpPerplexitySearchPlugin",
};

const mcpLanguageServerPlugin: Plugin = {
  id: "217llrqnne",
  name: "MCP Language Server",
  description:
    "Runs a language server and provides tools for communicating with it. Language servers excel at tasks that LLMs often struggle with, such as precisely understanding types, understanding relationships, and providing accurate symbol references.",
  image: "https://github.com/isaacphi.png",
  actions: [],
  githubUrl: "https://github.com/isaacphi/mcp-language-server",
  _varName: "mcpLanguageServerPlugin",
};

const vilniusTransportMcpServerPlugin: Plugin = {
  id: "ns9bycn485",
  name: "Vilnius Transport MCP Server",
  description:
    "Enables Large Language Models to access real-time data on Vilnius public transport stops and routes through the Model Context Protocol.",
  image: "https://github.com/sarunasdaujotis.png",
  actions: [
    {
      name: "find_stops",
      description: "Search for public transport stops by name",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Full or partial name of the stop to search for",
          required: true,
        },
      ],
    },
    {
      name: "find_closest_stop",
      description:
        "Find the closest public transport stop to given coordinates",
      parameters: [
        {
          name: "coordinates",
          type: "string",
          description:
            "Coordinates as 'latitude, longitude' (e.g., '54.687157, 25.279652')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sarunasdaujotis/vilnius-transport-mcp-server",
  _varName: "vilniusTransportMcpServerPlugin",
};

const deepseekMcpServer3Plugin: Plugin = {
  id: "asht4rqltn",
  name: "DeepSeek MCP Server",
  description:
    "Enables integration of DeepSeek's language models with MCP-compatible applications, offering features like chat completion, custom model selection, and parameter control for enhancing language-based interactions.",
  image: "https://github.com/DMontgomery40.png",
  actions: [
    {
      name: "chat_completion",
      description: "Action for chat_completion",
      parameters: [
        {
          name: "frequency_penalty",
          type: "number",
          description: "Parameter: frequency_penalty",
          required: false,
        },
        {
          name: "max_tokens",
          type: "integer",
          description: "Parameter: max_tokens",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: false,
        },
        {
          name: "messages",
          type: "object array",
          description: "Parameter: messages",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "Parameter: model",
          required: false,
        },
        {
          name: "presence_penalty",
          type: "number",
          description: "Parameter: presence_penalty",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
        {
          name: "top_p",
          type: "number",
          description: "Parameter: top_p",
          required: false,
        },
      ],
    },
    {
      name: "multi_turn_chat",
      description: "Action for multi_turn_chat",
      parameters: [
        {
          name: "frequency_penalty",
          type: "number",
          description: "Parameter: frequency_penalty",
          required: false,
        },
        {
          name: "max_tokens",
          type: "integer",
          description: "Parameter: max_tokens",
          required: false,
        },
        {
          name: "messages",
          type: "string",
          description: "Parameter: messages",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "Parameter: model",
          required: false,
        },
        {
          name: "presence_penalty",
          type: "number",
          description: "Parameter: presence_penalty",
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
        {
          name: "top_p",
          type: "number",
          description: "Parameter: top_p",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DMontgomery40/deepseek-mcp-server",
  _varName: "deepseekMcpServer3Plugin",
};

const starknetMcpServerPlugin: Plugin = {
  id: "kfj96s92mg",
  name: "Starknet MCP Server",
  description:
    "Facilitates interaction with Starknet blockchain via MCP by exposing various RPC methods, allowing users to query chain states, transaction details, and block information using natural language queries.",
  image: "https://github.com/milancermak.png",
  actions: [
    {
      name: "get_block",
      description: "Get a block from the Starknet blockchain",
      parameters: [
        {
          name: "blockNumber",
          type: "number",
          description: "The block number to get",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/milancermak/starknet-mcp",
  _varName: "starknetMcpServerPlugin",
};

const actorsmcpserverPlugin: Plugin = {
  id: "0sr3j8xoat",
  name: "actors-mcp-server",
  description:
    "Use 3,000+ pre-built cloud tools from Apify, known as Actors, to extract data from websites, e-commerce, social media, search engines, maps, and more",
  image: "https://github.com/apify.png",
  actions: [],
  githubUrl: "https://github.com/apify/actors-mcp-server",
  _varName: "actorsmcpserverPlugin",
};

const tavilysearchmcpserverPlugin: Plugin = {
  id: "0kmdibf9t1",
  name: "tavily-search-mcp-server",
  description:
    "An MCP server implementation that integrates the Tavily Search API, providing optimized search capabilities for LLMs.",
  image: "https://github.com/apappascs.png",
  actions: [
    {
      name: "tavily_search",
      description:
        "Performs a web search using the Tavily Search API, optimized for LLMs. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports search depth, topic selection, time range filtering, and domain inclusion/exclusion.",
      parameters: [
        {
          name: "days",
          type: "number",
          description:
            "The number of days back from the current date to include in the search results (for news topic).",
          required: false,
        },
        {
          name: "exclude_domains",
          type: "string array",
          description:
            "A list of domains to specifically exclude from the search results.",
          required: false,
        },
        {
          name: "include_answer",
          type: "boolean",
          description:
            "Include a short answer to original query, generated by an LLM based on Tavily's search results.",
          required: false,
        },
        {
          name: "include_domains",
          type: "string array",
          description:
            "A list of domains to specifically include in the search results.",
          required: false,
        },
        {
          name: "include_image_descriptions",
          type: "boolean",
          description:
            "When include_images is set to True, this option adds descriptive text for each image.",
          required: false,
        },
        {
          name: "include_images",
          type: "boolean",
          description:
            "Include a list of query-related images in the response.",
          required: false,
        },
        {
          name: "include_raw_content",
          type: "boolean",
          description:
            "Include the cleaned and parsed HTML content of each search result.",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "The maximum number of search results to return.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query.",
          required: true,
        },
        {
          name: "search_depth",
          type: "string",
          description:
            'The depth of the search. It can be "basic" or "advanced".',
          required: false,
        },
        {
          name: "time_range",
          type: "string",
          description:
            'The time range back from the current date to include in the search results. Accepted values include "day","week","month","year" or "d","w","m","y".',
          required: false,
        },
        {
          name: "topic",
          type: "string",
          description:
            'The category of the search. Currently: only "general" and "news" are supported.',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/apappascs/tavily-search-mcp-server",
  _varName: "tavilysearchmcpserverPlugin",
};

const mcptungshingPlugin: Plugin = {
  id: "vylgy8vab2",
  name: "mcp-tung-shing",
  description:
    "A Model Context Protocol plugin for Chinese Tung Shing (黄历/通勝/通胜) almanac calculations",
  image: "https://github.com/baranwang.png",
  actions: [
    {
      name: "get-tung-shing",
      description: "Get the daily almanac from Tung Shing",
      parameters: [
        {
          name: "days",
          type: "string",
          description: "The number of consecutive days to retrieve",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: 'The start date as a string in the format "YYYY-MM-DD"',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/baranwang/mcp-tung-shing",
  _varName: "mcptungshingPlugin",
};

const discordMcpServerPlugin: Plugin = {
  id: "ppamx796eb",
  name: "Discord MCP Server",
  description:
    "Enables LLMs to interact with Discord channels by sending and reading messages through Discord's API, with a focus on maintaining user control and security.",
  image: "https://github.com/v-3.png",
  actions: [],
  githubUrl: "https://github.com/v-3/discordmcp",
  _varName: "discordMcpServerPlugin",
};

const mcpServerFetchTypescriptPlugin: Plugin = {
  id: "iyfpvfkgyx",
  name: "MCP Server Fetch TypeScript",
  description:
    "A Model Context Protocol server that provides web content fetching and conversion capabilities.",
  image: "https://github.com/tatn.png",
  actions: [
    {
      name: "get_raw_text",
      description:
        "Retrieves raw text content directly from a URL without browser rendering. Ideal for structured data formats like JSON, XML, CSV, TSV, or plain text files. Best used when fast, direct access to the source content is needed without processing dynamic elements.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "URL of the target resource containing raw text content (JSON, XML, CSV, TSV, plain text, etc.).",
          required: true,
        },
      ],
    },
    {
      name: "get_rendered_html",
      description:
        "Fetches fully rendered HTML content using a headless browser, including JavaScript-generated content. Essential for modern web applications, single-page applications (SPAs), or any content that requires client-side rendering to be complete.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "URL of the target web page that requires JavaScript execution or dynamic content rendering.",
          required: true,
        },
      ],
    },
    {
      name: "get_markdown",
      description:
        "Converts web page content to well-formatted Markdown, preserving structural elements like tables and definition lists. Recommended as the default tool for web content extraction when a clean, readable text format is needed while maintaining document structure.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "URL of the web page to convert to Markdown format, supporting various HTML elements and structures.",
          required: true,
        },
      ],
    },
    {
      name: "get_markdown_summary",
      description:
        "Extracts and converts the main content area of a web page to Markdown format, automatically removing navigation menus, headers, footers, and other peripheral content. Perfect for capturing the core content of articles, blog posts, or documentation pages.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "URL of the web page whose main content should be extracted and converted to Markdown.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tatn/mcp-server-fetch-typescript",
  _varName: "mcpServerFetchTypescriptPlugin",
};

const mcpServerFetchPythonPlugin: Plugin = {
  id: "8d0zm2o56d",
  name: "MCP Server Fetch Python",
  description:
    "An MCP server for fetching and transforming web content into various formats.",
  image: "https://github.com/tatn.png",
  actions: [
    {
      name: "get-raw-text",
      description:
        "Extracts raw text content directly from URLs without browser rendering. Ideal for structured data formats like JSON, XML, CSV, TSV, or plain text files. Best used when fast, direct access to the source content is needed without processing dynamic elements.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "URL of the target web page (text, JSON, XML, csv, tsv, etc.).",
          required: true,
        },
      ],
    },
    {
      name: "get-rendered-html",
      description:
        "Fetches fully rendered HTML content using a headless browser, including JavaScript-generated content. Essential for modern web applications, single-page applications (SPAs), or any content that requires client-side rendering to be complete.",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "URL of the target web page (ordinary HTML including JavaScript, etc.).",
          required: true,
        },
      ],
    },
    {
      name: "get-markdown",
      description:
        "Converts web page content to well-formatted Markdown, preserving structural elements like tables and definition lists. Recommended as the default tool for web content extraction when a clean, readable text format is needed while maintaining document structure.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the target web page (ordinary HTML, etc.).",
          required: true,
        },
      ],
    },
    {
      name: "get-markdown-from-media",
      description:
        "Performs AI-powered content extraction from media files (images and videos) and converts the results to Markdown format. Specialized tool for visual content analysis that utilizes computer vision and OCR capabilities to generate descriptive text from media sources.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the target web page (images, videos, etc.).",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tatn/mcp-server-fetch-python",
  _varName: "mcpServerFetchPythonPlugin",
};

const penroseMcpServerPlugin: Plugin = {
  id: "bc2re1p5ho",
  name: "Penrose MCP Server",
  description:
    "Facilitates the creation of mathematical diagrams using natural language through Penrose's domain-specific languages, allowing for the definition of mathematical types, relationships, and visual representation rules.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "create_domain",
      description: "Create domain-specific language (DSL) definitions",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Domain name",
          required: true,
        },
        {
          name: "types",
          type: "object array",
          description: "Parameter: types",
          required: true,
        },
      ],
    },
    {
      name: "create_substance",
      description: "Define mathematical objects and relationships",
      parameters: [
        {
          name: "declarations",
          type: "object array",
          description: "Parameter: declarations",
          required: true,
        },
        {
          name: "domain",
          type: "string",
          description: "Reference to domain",
          required: true,
        },
        {
          name: "statements",
          type: "object array",
          description: "Parameter: statements",
          required: true,
        },
      ],
    },
    {
      name: "create_style",
      description: "Define visual representation rules",
      parameters: [
        {
          name: "canvas",
          type: "object",
          description: "Parameter: canvas",
          required: true,
        },
        {
          name: "rules",
          type: "object array",
          description: "Parameter: rules",
          required: true,
        },
      ],
    },
    {
      name: "generate_diagram",
      description: "Generate diagram from domain/substance/style",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Parameter: domain",
          required: true,
        },
        {
          name: "style",
          type: "string",
          description: "Parameter: style",
          required: true,
        },
        {
          name: "substance",
          type: "string",
          description: "Parameter: substance",
          required: true,
        },
        {
          name: "variation",
          type: "string",
          description: "Parameter: variation",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bmorphism/penrose-mcp",
  _varName: "penroseMcpServerPlugin",
};

const mcpTitanMemoryServerPlugin: Plugin = {
  id: "br39lme092",
  name: "MCP Titan Memory Server",
  description:
    "A neural memory system that learns and predicts sequences, maintaining state via memory vectors for enhanced code generation and understanding.",
  image: "https://github.com/synthience.png",
  actions: [],
  githubUrl: "https://github.com/synthience/mcp-titan-cognitive-memory",
  _varName: "mcpTitanMemoryServerPlugin",
};

const brevPlugin: Plugin = {
  id: "xhcynxcx29",
  name: "Brev",
  description: "Run, build, train, and deploy ML models on the cloud.",
  image: "https://github.com/brevdev.png",
  actions: [
    {
      name: "get_instance_types",
      description: "Get available instances types for a cloud provider",
      parameters: [
        {
          name: "cloud_provider",
          type: "string",
          description: "The cloud provider to get instance types for",
          required: true,
        },
      ],
    },
    {
      name: "create_workspace",
      description:
        "Create a workspace from an instance type and cloud provider",
      parameters: [
        {
          name: "cloud_provider",
          type: "string",
          description: "The cloud provider for the workspace",
          required: true,
        },
        {
          name: "instance_type",
          type: "string",
          description: "The instance type of the workspace",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The name of the workspace",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/brevdev/brev-mcp",
  _varName: "brevPlugin",
};

const hidePlugin: Plugin = {
  id: "9pawsmth6v",
  name: "Hide",
  description: "A MCP server for Hide – headless IDE for coding agents.",
  image: "https://github.com/hide-org.png",
  actions: [],
  githubUrl: "https://github.com/hide-org/hide-mcp",
  _varName: "hidePlugin",
};

const axiomPlugin: Plugin = {
  id: "jgcuwjmkxk",
  name: "Axiom",
  description:
    "A Model Context Protocol server implementation for Axiom that enables AI agents to query your data using Axiom Processing Language (APL).",
  image: "https://github.com/axiomhq.png",
  actions: [],
  githubUrl: "https://github.com/axiomhq/mcp-server-axiom",
  _varName: "axiomPlugin",
};

const steelMcpServerPlugin: Plugin = {
  id: "tbd32geble",
  name: "Steel MCP Server",
  description:
    "Enables LLMs like Claude to navigate the web through Puppeteer-based tools and Steel. Based on the Web Voyager framework, it provides tools for all the standard web actions click clicking/scrolling/typing/etc and taking screenshots.",
  image: "https://github.com/steel-dev.png",
  actions: [
    {
      name: "navigate",
      description: "Navigate to a specified URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL to navigate to",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description:
        "Perform a Google search by navigating to https://www.google.com/search?q=encodedQuery using the provided query text.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The text to search for on Google",
          required: true,
        },
      ],
    },
    {
      name: "click",
      description:
        "Click an element on the page specified by its numbered label from the annotated screenshot",
      parameters: [
        {
          name: "label",
          type: "number",
          description:
            "The label of the element to click, as shown in the annotated screenshot",
          required: true,
        },
      ],
    },
    {
      name: "type",
      description:
        "Type text into an input field specified by its numbered label from the annotated screenshot. Optionally replace existing text first.",
      parameters: [
        {
          name: "label",
          type: "number",
          description: "The label of the input field",
          required: true,
        },
        {
          name: "replaceText",
          type: "boolean",
          description:
            "If true, clears any existing text in the input field before typing the new text.",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "The text to type into the input field",
          required: true,
        },
      ],
    },
    {
      name: "scroll_down",
      description:
        "Scroll down the page by a pixel amount - if no pixels are specified, scrolls down one page",
      parameters: [
        {
          name: "pixels",
          type: "integer",
          description:
            "The number of pixels to scroll down. If not specified, scrolls down one page.",
          required: false,
        },
      ],
    },
    {
      name: "scroll_up",
      description:
        "Scroll up the page by a pixel amount - if no pixels are specified, scrolls up one page",
      parameters: [
        {
          name: "pixels",
          type: "integer",
          description:
            "The number of pixels to scroll up. If not specified, scrolls up one page.",
          required: false,
        },
      ],
    },
    {
      name: "go_back",
      description: "Go back to the previous page in the browser history",
      parameters: [],
    },
    {
      name: "wait",
      description:
        "Use this tool when a page appears to be loading or not fully rendered. Common scenarios include: when elements are missing from a screenshot that should be there, when a page looks incomplete or broken, when dynamic content is still loading, or when a previous action (like clicking a button) hasn't fully processed yet. Waits for a specified number of seconds (up to 10) to allow the page to finish loading or rendering.",
      parameters: [
        {
          name: "seconds",
          type: "number",
          description:
            "Number of seconds to wait (max 10). Start with a smaller value (2-3 seconds) and increase if needed.",
          required: true,
        },
      ],
    },
    {
      name: "save_unmarked_screenshot",
      description:
        "Capture a screenshot without bounding boxes and store it as a resource. Provide a resourceName to identify the screenshot. It's useful for when you want to view a page unobstructed by annotations or the user asks for a screenshot of the page.",
      parameters: [
        {
          name: "resourceName",
          type: "string",
          description:
            "The name under which the unmarked screenshot will be saved as a resource (e.g. 'before_login'). If not provided, one will be generated.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/steel-dev/steel-mcp-server",
  _varName: "steelMcpServerPlugin",
};

const llamacloudMcpServerPlugin: Plugin = {
  id: "o4fcj7x2cg",
  name: "LlamaCloud MCP Server",
  description:
    "A MCP server connecting to a managed index on LlamaCloud. This is a TypeScript-based MCP server that implements a connection to a managed index on LlamaCloud.",
  image: "https://github.com/run-llama.png",
  actions: [
    {
      name: "get_information",
      description:
        "Get information from your knowledge base to answer questions.",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The query used to get information about your knowledge base.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/run-llama/mcp-server-llamacloud",
  _varName: "llamacloudMcpServerPlugin",
};

const folderrPlugin: Plugin = {
  id: "7gp8g03usf",
  name: "Folderr",
  description:
    "A Model Context Protocol (MCP) server that provides tools to interact with Folderr's API, specifically for managing and communicating with Folderr Assistants.",
  image: "https://github.com/folderr-tech.png",
  actions: [
    {
      name: "set_api_token",
      description: "Set an API token for authentication (alternative to login)",
      parameters: [
        {
          name: "token",
          type: "string",
          description: "API token generated from Folderr developers section",
          required: true,
        },
      ],
    },
    {
      name: "login",
      description: "Login to Folderr with email and password",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "User email",
          required: true,
        },
        {
          name: "password",
          type: "string",
          description: "User password",
          required: true,
        },
      ],
    },
    {
      name: "list_assistants",
      description: "List all available assistants",
      parameters: [],
    },
    {
      name: "ask_assistant",
      description: "Ask a question to a specific assistant",
      parameters: [
        {
          name: "assistant_id",
          type: "string",
          description: "ID of the assistant to ask",
          required: true,
        },
        {
          name: "question",
          type: "string",
          description: "Question to ask the assistant",
          required: true,
        },
      ],
    },
    {
      name: "list_workflows",
      description: "List all available workflows",
      parameters: [],
    },
    {
      name: "get_workflow_inputs",
      description: "Get the required inputs for a workflow",
      parameters: [
        {
          name: "workflow_id",
          type: "string",
          description: "ID of the workflow",
          required: true,
        },
      ],
    },
    {
      name: "execute_workflow",
      description: "Execute a workflow with the required inputs",
      parameters: [
        {
          name: "inputs",
          type: "object",
          description: "Input values required by the workflow",
          required: true,
        },
        {
          name: "workflow_id",
          type: "string",
          description: "ID of the workflow",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/folderr-tech/folderr-mcp-server",
  _varName: "folderrPlugin",
};

const postgrestPlugin: Plugin = {
  id: "b4wipgdgar",
  name: "PostgREST",
  description:
    "This is an MCP server for PostgREST. It allows LLMs perform database queries and operations on Postgres databases via PostgREST. This server works with both Supabase projects (which use PostgREST) and standalone PostgREST servers.",
  image: "https://github.com/supabase-community.png",
  actions: [],
  githubUrl: "https://github.com/supabase-community/mcp-supabase",
  _varName: "postgrestPlugin",
};

const eyevinnOpenSourceCloudMcpServerPlugin: Plugin = {
  id: "ku9s6ow21e",
  name: "Eyevinn Open Source Cloud MCP Server",
  description:
    "MCP Server for Eyevinn Open Source Cloud API, enabling creation of solutions based on open web services. Web services based on open source where the creator gets a share of the revenue the platform generates.",
  image: "https://github.com/EyevinnOSC.png",
  actions: [
    {
      name: "osc_create_db",
      description:
        "Create a new database instance in Eyevinn Open Source Cloud",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the database",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of database [SQL, NoSQL, MemoryDb]",
          required: true,
        },
      ],
    },
    {
      name: "osc_create_bucket",
      description:
        "Create an S3 compatible bucket in Eyevinn Open Source Cloud",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the bucket",
          required: true,
        },
      ],
    },
    {
      name: "osc_create_vod",
      description:
        "Create a VOD package using a VOD pipeline in Eyevinn Open Source Cloud",
      parameters: [
        {
          name: "pipeline",
          type: "string",
          description: "Name of the pipeline",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Source video URL",
          required: true,
        },
      ],
    },
    {
      name: "osc_create_vod_pipeline",
      description: "Create a VOD pipeline in Eyevinn Open Source Cloud",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the pipeline",
          required: true,
        },
      ],
    },
    {
      name: "osc_remove_vod_pipeline",
      description: "Remove a VOD pipeline in Eyevinn Open Source Cloud",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the pipeline",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/EyevinnOSC/mcp-server",
  _varName: "eyevinnOpenSourceCloudMcpServerPlugin",
};

const upstashMcpServerPlugin: Plugin = {
  id: "4slca1893i",
  name: "Upstash MCP Server",
  description:
    "Model Context Protocol (MCP) is a new, standardized protocol for managing context between large language models (LLMs) and external systems. In this repository, we provide an installer as well as an MCP Server for Upstash Developer API's.",
  image: "https://github.com/upstash.png",
  actions: [
    {
      name: "redis_database_create_new",
      description:
        "Create a new Upstash redis database. \nNOTE: Ask user for the region and name of the database.\nNOTE: Don't show the database ID from the response to the user unless explicitly asked or needed.\n",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the database.",
          required: true,
        },
        {
          name: "primary_region",
          type: "string",
          description: "Primary Region of the Global Database.",
          required: true,
        },
        {
          name: "read_regions",
          type: "string array",
          description: "Array of read regions of the db",
          required: false,
        },
      ],
    },
    {
      name: "redis_database_delete",
      description: "Delete an Upstash redis database.",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to delete.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_list_databases",
      description:
        "List all Upstash redis databases. Only their names and ids.\nNOTE: Don't show the database ID from the response to the user unless explicitly asked or needed.\n",
      parameters: [],
    },
    {
      name: "redis_database_get_details",
      description:
        "Get further details of a specific Upstash redis database. Includes all details of the database including usage statistics.\ndb_disk_threshold: Total disk usage limit.\ndb_memory_threshold: Maximum memory usage.\ndb_daily_bandwidth_limit: Maximum daily network bandwidth usage.\ndb_request_limit: Total number of commands allowed.\nAll sizes are in bytes\n\nNOTE: Don't show the database ID from the response to the user unless explicitly asked or needed.\n\n      ",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to get details for.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_update_regions",
      description: "Update the read regions of an Upstash redis database.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of your database.",
          required: true,
        },
        {
          name: "read_regions",
          type: "string array",
          description:
            "Array of the new read regions of the database. This will replace the old regions array. Available regions: us-east-1, us-west-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, sa-east-1",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_reset_password",
      description: "Reset the password of an Upstash redis database.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of your database.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_get_usage_last_5_days",
      description:
        "Get PRECISE command count and bandwidth usage statistics of an Upstash redis database over the last 5 days. This is a precise stat, not an average.\nNOTE: Ask user first if they want to see stats for each database seperately or just for one.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of your database.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_get_stats",
      description:
        "Get SAMPLED usage statistics of an Upstash redis database over a period of time (1h, 3h, 12h, 1d, 3d, 7d). Use this to check for peak usages and latency problems.\nIncludes: read_latency_mean, write_latency_mean, keyspace, throughput (cmds/sec), diskusage\nNOTE: If the user does not specify which stat to get, use throughput as default.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The ID of your database.",
          required: true,
        },
        {
          name: "period",
          type: "string",
          description: "The period of the stats.",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "The type of stat to get",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_create_backup",
      description:
        "Create a backup of a specific Upstash redis database.\nNOTE: Ask user to choose a name for the backup",
      parameters: [
        {
          name: "backup_name",
          type: "string",
          description: "A name for the backup.",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to create a backup for.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_delete_backup",
      description: "Delete a backup of a specific Upstash redis database.",
      parameters: [
        {
          name: "backup_id",
          type: "string",
          description: "The ID of the backup to delete.",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to delete a backup from.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_restore_backup",
      description:
        "Restore a backup of a specific Upstash redis database. A backup can only be restored to the same database it was created from.",
      parameters: [
        {
          name: "backup_id",
          type: "string",
          description: "The ID of the backup to restore.",
          required: true,
        },
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to restore a backup to.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_list_backups",
      description: "List all backups of a specific Upstash redis database.",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description: "The ID of the database to list backups for.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_set_daily_backup",
      description:
        "Enable or disable daily backups for a specific Upstash redis database.",
      parameters: [
        {
          name: "database_id",
          type: "string",
          description:
            "The ID of the database to enable or disable daily backups for.",
          required: true,
        },
        {
          name: "enable",
          type: "boolean",
          description: "Whether to enable or disable daily backups.",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_run_single_redis_command",
      description:
        "Run a single Redis command on a specific Upstash redis database.\nNOTE: For discovery, use SCAN over KEYS. Use TYPE to get the type of a key.\nNOTE: SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]",
      parameters: [
        {
          name: "command",
          type: "string array",
          description:
            "The Redis command to run. Example: ['SET', 'foo', 'bar', 'EX', 100]",
          required: true,
        },
        {
          name: "database_rest_token",
          type: "string",
          description: "The REST token of the database.",
          required: true,
        },
        {
          name: "database_rest_url",
          type: "string",
          description:
            "The REST URL of the database. Example: https://***.upstash.io",
          required: true,
        },
      ],
    },
    {
      name: "redis_database_run_multiple_redis_commands",
      description:
        "Run multiple Redis commands on a specific Upstash redis database",
      parameters: [
        {
          name: "commands",
          type: "array array",
          description:
            "The Redis commands to run. Example: [['SET', 'foo', 'bar'], ['GET', 'foo']]",
          required: true,
        },
        {
          name: "database_rest_token",
          type: "string",
          description: "The REST token of the database.",
          required: true,
        },
        {
          name: "database_rest_url",
          type: "string",
          description:
            "The REST URL of the database. Example: https://***.upstash.io",
          required: true,
        },
      ],
    },
    {
      name: "timestamps_to_date",
      description:
        "Use this tool to convert a timestamp to a human-readable date",
      parameters: [
        {
          name: "timestamps",
          type: "number array",
          description: "Array of timestamps to convert",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/upstash/mcp-server",
  _varName: "upstashMcpServerPlugin",
};

const genkitMcpPlugin: Plugin = {
  id: "m6x141u6rd",
  name: "Genkit MCP",
  description:
    "Provides integration between Genkit and the Model Context Protocol (MCP).",
  image: "https://github.com/firebase.png",
  actions: [
    {
      name: "echo",
      description: "Echoes back the input",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Message to echo",
          required: true,
        },
      ],
    },
    {
      name: "add",
      description: "Adds two numbers",
      parameters: [
        {
          name: "a",
          type: "number",
          description: "First number",
          required: true,
        },
        {
          name: "b",
          type: "number",
          description: "Second number",
          required: true,
        },
      ],
    },
    {
      name: "printEnv",
      description:
        "Prints all environment variables, helpful for debugging MCP server configuration",
      parameters: [],
    },
    {
      name: "longRunningOperation",
      description:
        "Demonstrates a long running operation with progress updates",
      parameters: [
        {
          name: "duration",
          type: "number",
          description: "Duration of the operation in seconds",
          required: false,
        },
        {
          name: "steps",
          type: "number",
          description: "Number of steps in the operation",
          required: false,
        },
      ],
    },
    {
      name: "sampleLLM",
      description: "Samples from an LLM using MCP's sampling feature",
      parameters: [
        {
          name: "maxTokens",
          type: "number",
          description: "Maximum number of tokens to generate",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "The prompt to send to the LLM",
          required: true,
        },
      ],
    },
    {
      name: "getTinyImage",
      description: "Returns the MCP_TINY_IMAGE",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/firebase/genkit",
  _varName: "genkitMcpPlugin",
};

const mcpservermotherduckPlugin: Plugin = {
  id: "15mdwrzibz",
  name: "mcp-server-motherduck",
  description: "An MCP server for MotherDuck and local DuckDB.",
  image: "https://github.com/motherduckdb.png",
  actions: [
    {
      name: "initialize-connection",
      description:
        "Create a connection to either a local DuckDB or MotherDuck and retrieve available databases",
      parameters: [
        {
          name: "type",
          type: "string",
          description: "Type of the database, either 'DuckDB' or 'MotherDuck'",
          required: true,
        },
      ],
    },
    {
      name: "read-schemas",
      description:
        "Get table schemas from a specific DuckDB/MotherDuck database",
      parameters: [
        {
          name: "type",
          type: "string",
          description: "name of the database",
          required: false,
        },
      ],
    },
    {
      name: "execute-query",
      description: "Execute a query on the MotherDuck (DuckDB) database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SQL query to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/motherduckdb/mcp-server-motherduck",
  _varName: "mcpservermotherduckPlugin",
};

const mcpTitanMemoryServer1Plugin: Plugin = {
  id: "iasz64qj43",
  name: "MCP - Titan Memory Server",
  description:
    "Enables neural memory sequence learning with a memory-augmented model for improved code understanding and generation, featuring state management, novelty detection, and model persistence.",
  image: "https://github.com/synthience.png",
  actions: [],
  githubUrl: "https://github.com/synthience/mcp-titan-cognitive-memory",
  _varName: "mcpTitanMemoryServer1Plugin",
};

const memoryStoreMcpServerPlugin: Plugin = {
  id: "5qv6zrdx12",
  name: "Memory Store MCP Server",
  description:
    "A lightweight, stateless MCP server utilizing Puppeteer for web searches, returning structured JSON results, easily integratable with other MCP-enabled systems.",
  image: "https://github.com/divslingerx.png",
  actions: [
    {
      name: "search_web",
      description: "Search the web using Google",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/divslingerx/mcp-server",
  _varName: "memoryStoreMcpServerPlugin",
};

const daytonaMcpPythonInterpreterPlugin: Plugin = {
  id: "hj7jlxkxpk",
  name: "Daytona MCP Python Interpreter",
  description:
    "A Model Context Protocol server that allows execution of Python code within Daytona workspaces, providing a secure and isolated environment for executing and managing Python scripts.",
  image: "https://github.com/nkkko.png",
  actions: [
    {
      name: "python_interpreter",
      description: "Execute Python code in a Daytona workspace",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Python code to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nkkko/daytona-mcp-interpreter",
  _varName: "daytonaMcpPythonInterpreterPlugin",
};

const mcpSvelteDocsServerPlugin: Plugin = {
  id: "wu4hy1xtjb",
  name: "MCP Svelte Docs Server",
  description:
    "Enables vector similarity search and serving of Svelte documentation via the MCP protocol, with support for local caching and multiple llms.txt documentation formats.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "search_docs",
      description:
        'Search Svelte documentation using specific technical terms and concepts. Returns relevant documentation sections with context.\n\nQuery Guidelines:\n- Use technical terms found in documentation (e.g., "route parameters", "state management", "lifecycle hooks")\n- Search for specific features or concepts rather than asking questions\n- Include relevant package names for targeted results (e.g., "sveltekit", "stores")\n\nExample Queries by Category:\n\n1. Svelte 5 Runes:\n- "state management runes"          (finds $state and state management docs)\n- "derived state calculation"       (locates $derived documentation)\n- "effect lifecycle runes"          (finds $effect usage patterns)\n- "bindable props svelte"          (shows $bindable property usage)\n\n2. Component Patterns:\n- "component lifecycle"             (finds lifecycle documentation)\n- "event handling svelte5"          (shows new event handling patterns)\n- "component state management"      (locates state management docs)\n- "props typescript definition"     (finds prop typing information)\n\n3. SvelteKit Features:\n- "route parameters sveltekit"      (finds routing documentation)\n- "server routes api"               (locates API route docs)\n- "page data loading"              (shows data loading patterns)\n- "form actions sveltekit"         (finds form handling docs)\n\n4. Error Documentation:\n- "missing export error"           (finds specific error docs)\n- "binding validation errors"      (locates validation error info)\n- "lifecycle hook errors"          (shows lifecycle-related errors)\n- "typescript prop errors"         (finds prop typing errors)\n\nQuery Pattern Examples:\n❌ "How do I manage state?" → ✅ "state management runes"\n❌ "What are lifecycle hooks?" → ✅ "component lifecycle"\n❌ "How do I handle events?" → ✅ "event handling svelte5"\n❌ "How do I create dynamic routes?" → ✅ "route parameters sveltekit"',
      parameters: [
        {
          name: "context",
          type: "number",
          description: "Number of surrounding paragraphs",
          required: false,
        },
        {
          name: "doc_type",
          type: "string",
          description: "Filter by documentation type",
          required: false,
        },
        {
          name: "include_hierarchy",
          type: "boolean",
          description: "Include section hierarchy",
          required: false,
        },
        {
          name: "package",
          type: "string",
          description: "Filter by package",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search keywords or natural language query",
          required: true,
        },
      ],
    },
    {
      name: "get_next_chunk",
      description: "Retrieve subsequent chunks of large documents",
      parameters: [
        {
          name: "chunk_number",
          type: "number",
          description: "Chunk number to retrieve (1-based)",
          required: true,
        },
        {
          name: "uri",
          type: "string",
          description: "Document URI",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-svelte-docs",
  _varName: "mcpSvelteDocsServerPlugin",
};

const googleCustomSearchEngineMcpServerPlugin: Plugin = {
  id: "mieczol4lv",
  name: "Google Custom Search Engine MCP Server",
  description:
    "Enables search capabilities using a Google Custom Search Engine, allowing users to input a search term and retrieve search result titles, links, and snippets, while facilitating integration with other tools for content extraction and advanced search strategies.",
  image: "https://github.com/Richard-Weiss.png",
  actions: [
    {
      name: "google_search",
      description:
        'Search the custom search engine using the search term. Regular query arguments can also be used, like appending site:reddit.com or after:2024-04-30. If available and/or requested, the links of the search results should be used in a follow-up request using a different tool to get the full content. Example: "claude.ai features site:reddit.com after:2024-04-30"',
      parameters: [
        {
          name: "search_term",
          type: "string",
          description: "Parameter: search_term",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Richard-Weiss/mcp-google-cse",
  _varName: "googleCustomSearchEngineMcpServerPlugin",
};

const mcpServerDiffTypescriptPlugin: Plugin = {
  id: "3sbmp65pce",
  name: "MCP Server Diff TypeScript",
  description:
    "This server provides a tool to generate unified diffs between two text strings, facilitating text comparison and analysis.",
  image: "https://github.com/tatn.png",
  actions: [
    {
      name: "get-unified-diff",
      description:
        "Get the difference between two text articles in Unified diff format.",
      parameters: [
        {
          name: "newString",
          type: "string",
          description: "new string to compare",
          required: true,
        },
        {
          name: "oldString",
          type: "string",
          description: "old string to compare",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tatn/mcp-server-diff-typescript",
  _varName: "mcpServerDiffTypescriptPlugin",
};

const bitbucketServerMcpPlugin: Plugin = {
  id: "jskr5c1zq3",
  name: "Bitbucket Server MCP",
  description:
    "Facilitates interaction with Bitbucket Server for pull request management using the MCP protocol, supporting operations such as creating, merging, commenting, and reviewing pull requests.",
  image: "https://github.com/garc33.png",
  actions: [
    {
      name: "create_pull_request",
      description: "Create a new pull request",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "PR description",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
        {
          name: "reviewers",
          type: "string array",
          description: "List of reviewer usernames",
          required: false,
        },
        {
          name: "sourceBranch",
          type: "string",
          description: "Source branch name",
          required: true,
        },
        {
          name: "targetBranch",
          type: "string",
          description: "Target branch name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "PR title",
          required: true,
        },
      ],
    },
    {
      name: "get_pull_request",
      description: "Get pull request details",
      parameters: [
        {
          name: "prId",
          type: "number",
          description: "Pull request ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
      ],
    },
    {
      name: "merge_pull_request",
      description: "Merge a pull request",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Merge commit message",
          required: false,
        },
        {
          name: "prId",
          type: "number",
          description: "Pull request ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
        {
          name: "strategy",
          type: "string",
          description: "Merge strategy to use",
          required: false,
        },
      ],
    },
    {
      name: "decline_pull_request",
      description: "Decline a pull request",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Reason for declining",
          required: false,
        },
        {
          name: "prId",
          type: "number",
          description: "Pull request ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
      ],
    },
    {
      name: "add_comment",
      description: "Add a comment to a pull request",
      parameters: [
        {
          name: "parentId",
          type: "number",
          description: "Parent comment ID for replies",
          required: false,
        },
        {
          name: "prId",
          type: "number",
          description: "Pull request ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Comment text",
          required: true,
        },
      ],
    },
    {
      name: "get_diff",
      description: "Get pull request diff",
      parameters: [
        {
          name: "contextLines",
          type: "number",
          description: "Number of context lines",
          required: false,
        },
        {
          name: "prId",
          type: "number",
          description: "Pull request ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
      ],
    },
    {
      name: "get_reviews",
      description: "Get pull request reviews",
      parameters: [
        {
          name: "prId",
          type: "number",
          description: "Pull request ID",
          required: true,
        },
        {
          name: "project",
          type: "string",
          description: "Bitbucket project key",
          required: false,
        },
        {
          name: "repository",
          type: "string",
          description: "Repository slug",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/garc33/bitbucket-server-mcp-server",
  _varName: "bitbucketServerMcpPlugin",
};

const mcpServerDiffPythonPlugin: Plugin = {
  id: "qbwsx2g4vd",
  name: "MCP Server Diff Python",
  description:
    "This MCP server provides unified diffs of two text inputs using Python's standard library difflib.",
  image: "https://github.com/tatn.png",
  actions: [
    {
      name: "get-unified-diff",
      description:
        "Get the difference between two text articles in Unified diff format. Use this when you want to extract the difference between texts.",
      parameters: [
        {
          name: "string_a",
          type: "string",
          description: "Parameter: string_a",
          required: true,
        },
        {
          name: "string_b",
          type: "string",
          description: "Parameter: string_b",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tatn/mcp-server-diff-python",
  _varName: "mcpServerDiffPythonPlugin",
};

const projectHandoffsMcpServerPlugin: Plugin = {
  id: "3bjpgw8p74",
  name: "Project Handoffs MCP Server",
  description:
    "Facilitates AI session handoffs and next steps tracking through project-based organization, supporting task prioritization and seamless workflow management.",
  image: "https://github.com/davidorex.png",
  actions: [
    {
      name: "list_templates",
      description:
        "List available templates for next steps, working sessions, and handoffs",
      parameters: [],
    },
    {
      name: "create_project",
      description: "Create a new project for tracking AI session handoffs",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Project description",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Project name",
          required: true,
        },
      ],
    },
    {
      name: "delete_project",
      description: "Delete a project and all its data",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
      ],
    },
    {
      name: "create_next_step",
      description: "Create a new next step in a project",
      parameters: [
        {
          name: "dependencies",
          type: "string array",
          description: "IDs of steps that must be completed first",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed description of work",
          required: true,
        },
        {
          name: "parentStepId",
          type: "string",
          description: "ID of parent step if this is a substep",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "Implementation priority level",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Brief title of the next step",
          required: true,
        },
      ],
    },
    {
      name: "start_working_session",
      description: "Start working on a next step",
      parameters: [
        {
          name: "nextStepId",
          type: "string",
          description: "ID of the next step to work on",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
      ],
    },
    {
      name: "create_handoff",
      description: "Complete a working session with handoff details",
      parameters: [
        {
          name: "codeState",
          type: "string",
          description: "Current state of codebase",
          required: true,
        },
        {
          name: "completedWork",
          type: "string",
          description: "Summary of completed work",
          required: true,
        },
        {
          name: "environmentState",
          type: "string",
          description: "Development environment state",
          required: true,
        },
        {
          name: "newNextSteps",
          type: "string array",
          description: "List of new next steps identified",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
        {
          name: "sessionId",
          type: "string",
          description: "Working session ID",
          required: true,
        },
        {
          name: "unresolvedIssues",
          type: "string array",
          description: "List of unresolved issues",
          required: false,
        },
      ],
    },
    {
      name: "get_latest_next_steps",
      description: "Get open next steps ordered by priority",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
      ],
    },
    {
      name: "get_next_step_history",
      description:
        "Get complete history of a next step including session and handoff",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Project identifier",
          required: true,
        },
        {
          name: "stepId",
          type: "string",
          description: "Next step ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/davidorex/project-handoffs",
  _varName: "projectHandoffsMcpServerPlugin",
};

const bearMcpServer1Plugin: Plugin = {
  id: "9w45dta9ir",
  name: "Bear MCP Server",
  description: "Allows the AI to read from your Bear Notes",
  image: "https://github.com/akseyh.png",
  actions: [],
  githubUrl: "https://github.com/akseyh/bear-mcp-server",
  _varName: "bearMcpServer1Plugin",
};

const markdownifyMcpServerPlugin: Plugin = {
  id: "bn5q4b0ett",
  name: "Markdownify MCP Server",
  description:
    "Converts various file types and web content to Markdown format. It provides a set of tools to transform PDFs, images, audio files, web pages, and more into easily readable and shareable Markdown text.",
  image: "https://github.com/zcaceres.png",
  actions: [
    {
      name: "audio-to-markdown",
      description:
        "Convert an audio file to markdown, including transcription if possible",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the audio file to convert",
          required: true,
        },
      ],
    },
    {
      name: "bing-search-to-markdown",
      description: "Convert a Bing search results page to markdown",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the Bing search results page",
          required: true,
        },
      ],
    },
    {
      name: "docx-to-markdown",
      description: "Convert a DOCX file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the DOCX file to convert",
          required: true,
        },
      ],
    },
    {
      name: "get-markdown-file",
      description: "Get a markdown file by absolute file path",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path to file of markdown'd text",
          required: true,
        },
      ],
    },
    {
      name: "image-to-markdown",
      description:
        "Convert an image to markdown, including metadata and description",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the image file to convert",
          required: true,
        },
      ],
    },
    {
      name: "pdf-to-markdown",
      description: "Convert a PDF file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the PDF file to convert",
          required: true,
        },
      ],
    },
    {
      name: "pptx-to-markdown",
      description: "Convert a PPTX file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the PPTX file to convert",
          required: true,
        },
      ],
    },
    {
      name: "webpage-to-markdown",
      description: "Convert a webpage to markdown",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the webpage to convert",
          required: true,
        },
      ],
    },
    {
      name: "xlsx-to-markdown",
      description: "Convert an XLSX file to markdown",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description: "Absolute path of the XLSX file to convert",
          required: true,
        },
      ],
    },
    {
      name: "youtube-to-markdown",
      description:
        "Convert a YouTube video to markdown, including transcript if available",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the YouTube video",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zcaceres/markdownify-mcp",
  _varName: "markdownifyMcpServerPlugin",
};

const googleTasksMcpServer1Plugin: Plugin = {
  id: "1tqi5yij3g",
  name: "Google Tasks MCP Server",
  description:
    "Integrates with Google Tasks to allow listing, reading, searching, creating, updating, and deleting tasks.",
  image: "https://github.com/zcaceres.png",
  actions: [],
  githubUrl: "https://github.com/zcaceres/gtasks-mcp",
  _varName: "googleTasksMcpServer1Plugin",
};

const fetchMcpServer1Plugin: Plugin = {
  id: "nu09wf23ao",
  name: "Fetch MCP Server",
  description:
    "Provides functionality to fetch web content in various formats, including HTML, JSON, plain text, and Markdown.",
  image: "https://github.com/zcaceres.png",
  actions: [
    {
      name: "fetch_html",
      description: "Fetch a website and return the content as HTML",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch_markdown",
      description: "Fetch a website and return the content as Markdown",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch_txt",
      description:
        "Fetch a website, return the content as plain text (no HTML)",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch_json",
      description: "Fetch a JSON file from a URL",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the JSON to fetch",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zcaceres/fetch-mcp",
  _varName: "fetchMcpServer1Plugin",
};

const superWindowsCliMcpServerPlugin: Plugin = {
  id: "5we0twy3bi",
  name: "Super Windows CLI MCP Server",
  description:
    "An enhanced Windows CLI MCP server providing unrestricted system access capabilities, designed for trusted environments with full system access requirements.",
  image: "https://github.com/delorenj.png",
  actions: [
    {
      name: "execute_command",
      description:
        'Execute a command in the specified shell (powershell, cmd, or gitbash)\n\nExample usage (PowerShell):\n```json\n{\n  "shell": "powershell",\n  "command": "Get-Process | Select-Object -First 5",\n  "workingDir": "C:\\Users\\username"\n}\n```\n\nExample usage (CMD):\n```json\n{\n  "shell": "cmd",\n  "command": "dir /b",\n  "workingDir": "C:\\Projects"\n}\n```\n\nExample usage (Git Bash):\n```json\n{\n  "shell": "gitbash",\n  "command": "ls -la",\n  "workingDir": "/c/Users/username"\n}\n```',
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "shell",
          type: "string",
          description: "Shell to use for command execution",
          required: true,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for command execution (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_command_history",
      description:
        'Get the history of executed commands\n\nExample usage:\n```json\n{\n  "limit": 5\n}\n```\n\nExample response:\n```json\n[\n  {\n    "command": "Get-Process",\n    "output": "...",\n    "timestamp": "2024-03-20T10:30:00Z",\n    "exitCode": 0\n  }\n]\n```',
      parameters: [
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of history entries to return (default: 10, max: 1000)",
          required: false,
        },
      ],
    },
    {
      name: "ssh_execute",
      description:
        'Execute a command on a remote host via SSH\n\nExample usage:\n```json\n{\n  "connectionId": "raspberry-pi",\n  "command": "uname -a"\n}\n```\n\nConfiguration required in config.json:\n```json\n{\n  "ssh": {\n    "enabled": true,\n    "connections": {\n      "raspberry-pi": {\n        "host": "raspberrypi.local",\n        "port": 22,\n        "username": "pi",\n        "password": "raspberry"\n      }\n    }\n  }\n}\n```',
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection to use",
          required: true,
        },
      ],
    },
    {
      name: "ssh_disconnect",
      description:
        'Disconnect from an SSH server\n\nExample usage:\n```json\n{\n  "connectionId": "raspberry-pi"\n}\n```\n\nUse this to cleanly close SSH connections when they\'re no longer needed.',
      parameters: [
        {
          name: "connectionId",
          type: "string",
          description: "ID of the SSH connection to disconnect",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/delorenj/super-win-cli-mcp-server",
  _varName: "superWindowsCliMcpServerPlugin",
};

const protolinkaiMcpServerPlugin: Plugin = {
  id: "w62mk3d1mn",
  name: "ProtoLinkAI MCP Server",
  description:
    "This server provides a standardized framework using the Model Context Protocol (MCP) to seamlessly integrate and manage diverse tools, enabling features like Twitter automation, cryptocurrency updates, and ElizaOS interaction.",
  image: "https://github.com/StevenROyola.png",
  actions: [],
  githubUrl: "https://github.com/StevenROyola/ProtoLink",
  _varName: "protolinkaiMcpServerPlugin",
};

const mcpServerStarter2Plugin: Plugin = {
  id: "n087wjbtlk",
  name: "MCP Server Starter",
  description:
    "A production-ready template for creating Model Context Protocol servers with TypeScript, providing tools for efficient testing, development, and deployment.",
  image: "https://github.com/StevenStavrakis.png",
  actions: [
    {
      name: "hello_tool",
      description: "Hello tool",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the person to greet",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/StevenStavrakis/mcp-starter-template",
  _varName: "mcpServerStarter2Plugin",
};

const mistralCodestralMcpServerPlugin: Plugin = {
  id: "p0l4p3h2s2",
  name: "Mistral Codestral MCP Server",
  description:
    "Provides code completion, bug fixing, and test generation for multiple programming languages, integrating with the Mistral Codestral API to enhance code development processes.",
  image: "https://github.com/bsmi021.png",
  actions: [],
  githubUrl: "https://github.com/bsmi021/mcp-mistral-codestral",
  _varName: "mistralCodestralMcpServerPlugin",
};

const switchbotMcpServerPlugin: Plugin = {
  id: "k8m7mttrur",
  name: "SwitchBot MCP Server",
  description:
    "Enables AI assistants to control SwitchBot devices, providing functionalities like device management, scene execution, and sensor information monitoring through the SwitchBot API.",
  image: "https://github.com/genm.png",
  actions: [
    {
      name: "list_devices",
      description: "デバイス一覧を取得します",
      parameters: [],
    },
    {
      name: "get_device_status",
      description: "デバイスのステータスを取得します",
      parameters: [
        {
          name: "deviceId",
          type: "string",
          description: "デバイスID",
          required: true,
        },
      ],
    },
    {
      name: "control_device",
      description: "デバイスを制御します",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "コマンド（turnOn, turnOff）",
          required: true,
        },
        {
          name: "deviceId",
          type: "string",
          description: "デバイスID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/genm/switchbot-mcp",
  _varName: "switchbotMcpServerPlugin",
};

const mcpJinaaiReaderServerPlugin: Plugin = {
  id: "a75afsx9cx",
  name: "MCP JinaAI Reader Server",
  description:
    "Integrates Jina.ai's Reader API with LLMs for efficient and structured web content extraction, optimized for documentation and web content analysis.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "read_url",
      description: "Convert any URL to LLM-friendly text using Jina.ai Reader",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Response format (json or stream)",
          required: false,
        },
        {
          name: "no_cache",
          type: "boolean",
          description: "Bypass cache for fresh results",
          required: false,
        },
        {
          name: "remove_selector",
          type: "string",
          description: "CSS selector to exclude specific elements",
          required: false,
        },
        {
          name: "target_selector",
          type: "string",
          description: "CSS selector to focus on specific elements",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Maximum time in seconds to wait for webpage load",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to process",
          required: true,
        },
        {
          name: "wait_for_selector",
          type: "string",
          description: "CSS selector to wait for specific elements",
          required: false,
        },
        {
          name: "with_generated_alt",
          type: "boolean",
          description: "Add alt text to images lacking captions",
          required: false,
        },
        {
          name: "with_iframe",
          type: "boolean",
          description: "Include iframe content in response",
          required: false,
        },
        {
          name: "with_images_summary",
          type: "boolean",
          description: "Gather all images at the end of response",
          required: false,
        },
        {
          name: "with_links_summary",
          type: "boolean",
          description: "Gather all links at the end of response",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-jinaai-reader",
  _varName: "mcpJinaaiReaderServerPlugin",
};

const difyMcpServer1Plugin: Plugin = {
  id: "2yy6kotoxb",
  name: "Dify MCP Server",
  description:
    "Integrates Dify AI API to provide code generation for Ant Design components, supporting both text and image inputs with stream processing capabilities.",
  image: "https://github.com/AI-FE.png",
  actions: [
    {
      name: "antd-component-codegen-mcp-tool",
      description:
        "Send a message to Dify chat API for generating antd biz components code",
      parameters: [
        {
          name: "imageFilePath",
          type: "string",
          description: "The image file absolute path to send",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The message to send",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AI-FE/dify-mcp-server",
  _varName: "difyMcpServer1Plugin",
};

const claudeusWordpressMcpPlugin: Plugin = {
  id: "wrpd2x7eei",
  name: "Claudeus WordPress MCP",
  description:
    "A server enabling seamless interaction between AI models and WordPress sites with secure, standardized communication using the WordPress REST API for comprehensive site management.",
  image: "https://github.com/deus-h.png",
  actions: [],
  githubUrl: "https://github.com/deus-h/claudeus-wp-mcp",
  _varName: "claudeusWordpressMcpPlugin",
};

const datadogPlugin: Plugin = {
  id: "j72e1m6bqk",
  name: "datadog",
  description: "provide access to monitor and cluster logs from datadog",
  image: "https://github.com/didlawowo.png",
  actions: [],
  githubUrl: "https://github.com/didlawowo/mcp-collection",
  _varName: "datadogPlugin",
};

const testRunnerMcpPlugin: Plugin = {
  id: "q001c11ec3",
  name: "Test Runner MCP",
  description:
    "Facilitates unified execution and result parsing for various testing frameworks, including Bats, Pytest, Flutter, Jest, and Go, through a Model Context Protocol interface.",
  image: "https://github.com/privsim.png",
  actions: [
    {
      name: "run_tests",
      description: "Run tests and capture output",
      parameters: [
        {
          name: "command",
          type: "string",
          description: 'Test command to execute (e.g., "bats tests/*.bats")',
          required: true,
        },
        {
          name: "env",
          type: "object",
          description: "Environment variables for test execution",
          required: false,
        },
        {
          name: "framework",
          type: "string",
          description: "Testing framework being used",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory to store test results",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description:
            "Test execution timeout in milliseconds (default: 300000)",
          required: false,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for test execution",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/privsim/mcp-test-runner",
  _varName: "testRunnerMcpPlugin",
};

const xanoMcpServer1Plugin: Plugin = {
  id: "fygsnfzjkv",
  name: "Xano MCP Server",
  description:
    "Enables interaction with the Xano API through a Model Context Protocol (MCP) interface, providing secure and type-safe management of Xano database operations.",
  image: "https://github.com/SarimSiddd.png",
  actions: [
    {
      name: "get_workspaces",
      description: "Get all available workspaces",
      parameters: [],
    },
    {
      name: "create_table",
      description: "Create a new table in a workspace",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Optional description for the table",
          required: false,
        },
        {
          name: "docs",
          type: "string",
          description: "Optional documentation for the table",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the table to create",
          required: true,
        },
        {
          name: "workspaceId",
          type: "number",
          description: "ID of the workspace to create the table in",
          required: true,
        },
      ],
    },
    {
      name: "get_table_content",
      description: "Get content from a table",
      parameters: [
        {
          name: "pagination",
          type: "object",
          description: "Parameter: pagination",
          required: false,
        },
        {
          name: "tableId",
          type: "string",
          description: "ID of the table",
          required: true,
        },
      ],
    },
    {
      name: "add_table_content",
      description: "Add content to a table",
      parameters: [
        {
          name: "content",
          type: "object",
          description: "Content to add to the table",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "ID of the table",
          required: true,
        },
      ],
    },
    {
      name: "update_table_content",
      description: "Update content in a table",
      parameters: [
        {
          name: "content",
          type: "object",
          description: "Updated content data",
          required: true,
        },
        {
          name: "contentId",
          type: "string",
          description: "ID of the content to update",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "ID of the table",
          required: true,
        },
      ],
    },
    {
      name: "get_all_tables",
      description: "Get all tables in a workspace",
      parameters: [
        {
          name: "workspaceId",
          type: "number",
          description: "ID of the workspace",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/SarimSiddd/xano_mcp",
  _varName: "xanoMcpServer1Plugin",
};

const devhubMcpServerPlugin: Plugin = {
  id: "wwhg10zzc3",
  name: "DevHub MCP Server",
  description:
    "Enables management of development projects with GitHub integration, facilitating project tracking, repository linking, and metadata maintenance within the Model Context Protocol.",
  image: "https://github.com/peterparker57.png",
  actions: [],
  githubUrl: "https://github.com/peterparker57/devhub-mcp-server",
  _varName: "devhubMcpServerPlugin",
};

const browseruseMcpServer1Plugin: Plugin = {
  id: "dz6dy5hw59",
  name: "Browser-Use MCP Server",
  description:
    "Facilitates browser automation with custom capabilities and agent-based interactions, integrated through the browser-use library.",
  image: "https://github.com/Saik0s.png",
  actions: [
    {
      name: "run_browser_agent",
      description: "Handle run-browser-agent tool calls.",
      parameters: [
        {
          name: "add_infos",
          type: "string",
          description: "Parameter: add_infos",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "Parameter: task",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Saik0s/mcp-browser-use",
  _varName: "browseruseMcpServer1Plugin",
};

const mcpServerForTicketmasterEventsPlugin: Plugin = {
  id: "u91gv8f3on",
  name: "MCP Server for Ticketmaster Events",
  description:
    "Provides tools for discovering events at Madison Square Garden via the Ticketmaster API, returning structured data with event details like name, date, price, and ticket purchase links.",
  image: "https://github.com/delorenj.png",
  actions: [
    {
      name: "search_ticketmaster",
      description: "Search for events, venues, or attractions on Ticketmaster",
      parameters: [
        {
          name: "attractionId",
          type: "string",
          description: "Specific attraction ID to search",
          required: false,
        },
        {
          name: "city",
          type: "string",
          description: "City name",
          required: false,
        },
        {
          name: "classificationName",
          type: "string",
          description:
            'Event classification/category (e.g., "Sports", "Music")',
          required: false,
        },
        {
          name: "countryCode",
          type: "string",
          description: "Country code (e.g., US, CA)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description: "End date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description: "Output format (defaults to json)",
          required: false,
        },
        {
          name: "keyword",
          type: "string",
          description: "Search keyword or term",
          required: false,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "stateCode",
          type: "string",
          description: "State code (e.g., NY, CA)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of search to perform",
          required: true,
        },
        {
          name: "venueId",
          type: "string",
          description: "Specific venue ID to search",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/delorenj/mcp-server-ticketmaster",
  _varName: "mcpServerForTicketmasterEventsPlugin",
};

const mcpTavilySearchServerPlugin: Plugin = {
  id: "1jcttrux58",
  name: "MCP Tavily Search Server",
  description:
    "Integrates Tavily's search API with LLMs to provide advanced web search capabilities, including intelligent result summaries, domain filtering for quality control, and configurable search parameters.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "tavily_search",
      description:
        "Search the web using Tavily Search API, optimized for high-quality, factual results",
      parameters: [
        {
          name: "cache_ttl",
          type: "number",
          description: "Cache time-to-live in seconds",
          required: false,
        },
        {
          name: "exclude_domains",
          type: "string array",
          description: "List of domains to exclude from search",
          required: false,
        },
        {
          name: "force_refresh",
          type: "boolean",
          description: "Force fresh results ignoring cache",
          required: false,
        },
        {
          name: "include_answer",
          type: "boolean",
          description: "Include an AI-generated answer based on search results",
          required: false,
        },
        {
          name: "include_domains",
          type: "string array",
          description: "List of trusted domains to include in search",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "min_score",
          type: "number",
          description: "Minimum relevancy score for results (0-1)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "response_format",
          type: "string",
          description: "Format of the search results",
          required: false,
        },
        {
          name: "search_depth",
          type: "string",
          description:
            'The depth of the search ("basic" for faster results, "advanced" for more thorough search)',
          required: false,
        },
      ],
    },
    {
      name: "tavily_get_search_context",
      description: "Generate context for RAG applications using Tavily search",
      parameters: [
        {
          name: "max_tokens",
          type: "number",
          description: "Maximum length of generated context",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query for context generation",
          required: true,
        },
        {
          name: "response_format",
          type: "string",
          description: "Format of the context response",
          required: false,
        },
      ],
    },
    {
      name: "tavily_qna_search",
      description: "Get direct answers to questions using Tavily search",
      parameters: [
        {
          name: "include_sources",
          type: "boolean",
          description: "Include source citations in the answer",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Question to be answered",
          required: true,
        },
        {
          name: "response_format",
          type: "string",
          description: "Format of the answer response",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-tavily-search",
  _varName: "mcpTavilySearchServerPlugin",
};

const mcpWindowsWebsiteDownloaderServerPlugin: Plugin = {
  id: "5jmjuexe0d",
  name: "MCP Windows Website Downloader Server",
  description:
    "This server enables users to download entire websites and their assets for offline access, supporting configurable depth and concurrency settings.",
  image: "https://github.com/angrysky56.png",
  actions: [
    {
      name: "download",
      description: "Download documentation website for RAG indexing",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Documentation site URL",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/angrysky56/mcp-windows-website-downloader",
  _varName: "mcpWindowsWebsiteDownloaderServerPlugin",
};

const mslucidiavoicegatewaymcpPlugin: Plugin = {
  id: "vtxakkcnxi",
  name: "MS-Lucidia-Voice-Gateway-MCP",
  description:
    "A server providing text-to-speech and speech-to-text functionalities using Windows' native speech services without external dependencies.",
  image: "https://github.com/ExpressionsBot.png",
  actions: [],
  githubUrl: "https://github.com/ExpressionsBot/MS-Lucidia-Voice-Gateway-MCP",
  _varName: "mslucidiavoicegatewaymcpPlugin",
};

const cooperhewittmcpPlugin: Plugin = {
  id: "hwkfkqvpq7",
  name: "cooper-hewitt-mcp",
  description: "Interact with the Cooper Hewitt API with MCP.",
  image: "https://github.com/behole.png",
  actions: [
    {
      name: "search-objects",
      description: "Search for objects in the Cooper Hewitt collection",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number (optional)",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Results per page (optional)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "get-object",
      description: "Get detailed information about a specific object",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Object ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/behole/cooper-hewitt-mcp",
  _varName: "cooperhewittmcpPlugin",
};

const polymarketMcpServerPlugin: Plugin = {
  id: "c255m147fd",
  name: "PolyMarket MCP Server",
  description:
    "Enables interaction with the PolyMarket API to fetch prediction market data such as market information, prices, and historical data, with robust error handling and rate limit management.",
  image: "https://github.com/berlinbra.png",
  actions: [
    {
      name: "get-market-info",
      description:
        "Get detailed information about a specific prediction market",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market ID or slug",
          required: true,
        },
      ],
    },
    {
      name: "list-markets",
      description: "Get a list of prediction markets with optional filters",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of markets to return (default: 10)",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Number of markets to skip (for pagination)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by market status (e.g., open, closed, resolved)",
          required: false,
        },
      ],
    },
    {
      name: "get-market-prices",
      description: "Get current prices and trading information for a market",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market ID or slug",
          required: true,
        },
      ],
    },
    {
      name: "get-market-history",
      description: "Get historical price and volume data for a market",
      parameters: [
        {
          name: "market_id",
          type: "string",
          description: "Market ID or slug",
          required: true,
        },
        {
          name: "timeframe",
          type: "string",
          description: "Time period for historical data",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/berlinbra/polymarket-mcp",
  _varName: "polymarketMcpServerPlugin",
};

const ospMarketingToolsMcpServerPlugin: Plugin = {
  id: "6b2sa6wk5d",
  name: "OSP Marketing Tools MCP Server",
  description:
    "Enables seamless integration with any LLM client supporting MCP for creating and optimizing technical content and product positioning using Open Strategy Partners' methodologies.",
  image: "https://github.com/open-strategy-partners.png",
  actions: [],
  githubUrl: "https://github.com/open-strategy-partners/osp_marketing_tools",
  _varName: "ospMarketingToolsMcpServerPlugin",
};

const textwellMcpServerPlugin: Plugin = {
  id: "hek0rsjhcv",
  name: "Textwell MCP Server",
  description:
    "Integrates Textwell with the Model Context Protocol for facilitating text operations such as writing and appending text through a GitHub Pages bridge.",
  image: "https://github.com/worldnine.png",
  actions: [
    {
      name: "write-text",
      description: "Write text to Textwell application",
      parameters: [
        {
          name: "mode",
          type: "string",
          description: "replace: overwrite all, insert: at cursor, add: at end",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Content to write to Textwell",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/worldnine/textwell-mcp",
  _varName: "textwellMcpServerPlugin",
};

const branchThinkingMcpServerPlugin: Plugin = {
  id: "x9ovk2l35q",
  name: "Branch Thinking MCP Server",
  description:
    "A server that facilitates branch-based navigation of thoughts, enabling users to manage multiple thought branches, generate insights, and track branch priorities through a structured thinking process.",
  image: "https://github.com/m-siles.png",
  actions: [
    {
      name: "branch-thinking",
      description:
        "A tool for managing multiple branches of thought with insights and cross-references.\n  \nEach thought can:\n- Belong to a specific branch\n- Generate insights\n- Create cross-references to other branches\n- Include confidence scores and key points\n\nThe system tracks:\n- Branch priorities and states\n- Relationships between thoughts\n- Accumulated insights\n- Cross-branch connections\n\nCommands:\n- list: Show all branches and their status\n- focus [branchId]: Switch focus to a specific branch\n- history [branchId?]: Show the history of thoughts in a branch (uses active branch if none specified)",
      parameters: [
        {
          name: "branchId",
          type: "string",
          description: "Optional: ID of the branch (generated if not provided)",
          required: false,
        },
        {
          name: "command",
          type: "object",
          description: "Optional: Navigation command",
          required: false,
        },
        {
          name: "confidence",
          type: "number",
          description: "Optional: Confidence score (0-1)",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "The thought content",
          required: false,
        },
        {
          name: "crossRefs",
          type: "object array",
          description: "Optional: Cross-references to other branches",
          required: false,
        },
        {
          name: "keyPoints",
          type: "string array",
          description: "Optional: Key points identified in the thought",
          required: false,
        },
        {
          name: "parentBranchId",
          type: "string",
          description: "Optional: ID of the parent branch",
          required: false,
        },
        {
          name: "relatedInsights",
          type: "string array",
          description: "Optional: IDs of related insights",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of thought (e.g., 'analysis', 'hypothesis', 'observation')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/m-siles/branch-thinking",
  _varName: "branchThinkingMcpServerPlugin",
};

const reaperMcpServerPlugin: Plugin = {
  id: "v618ezz9d6",
  name: "Reaper MCP Server",
  description:
    "Connects Reaper projects to an MCP client like Claude Desktop, allowing users to ask questions and retrieve parsed information about the projects using natural language.",
  image: "https://github.com/dschuler36.png",
  actions: [],
  githubUrl: "https://github.com/dschuler36/reaper-mcp-server",
  _varName: "reaperMcpServerPlugin",
};

const branchThinkingMcpServer1Plugin: Plugin = {
  id: "i9a4t5f68z",
  name: "Branch Thinking MCP Server",
  description:
    "An MCP server for navigating thought processes using branches, supporting thought cross-references and priority tracking to enhance insight generation and structured idea exploration.",
  image: "https://github.com/m-siles.png",
  actions: [
    {
      name: "branch-thinking",
      description:
        "A tool for managing multiple branches of thought with insights and cross-references.\n  \nEach thought can:\n- Belong to a specific branch\n- Generate insights\n- Create cross-references to other branches\n- Include confidence scores and key points\n\nThe system tracks:\n- Branch priorities and states\n- Relationships between thoughts\n- Accumulated insights\n- Cross-branch connections\n\nCommands:\n- list: Show all branches and their status\n- focus [branchId]: Switch focus to a specific branch\n- history [branchId?]: Show the history of thoughts in a branch (uses active branch if none specified)",
      parameters: [
        {
          name: "branchId",
          type: "string",
          description: "Optional: ID of the branch (generated if not provided)",
          required: false,
        },
        {
          name: "command",
          type: "object",
          description: "Optional: Navigation command",
          required: false,
        },
        {
          name: "confidence",
          type: "number",
          description: "Optional: Confidence score (0-1)",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "The thought content",
          required: false,
        },
        {
          name: "crossRefs",
          type: "object array",
          description: "Optional: Cross-references to other branches",
          required: false,
        },
        {
          name: "keyPoints",
          type: "string array",
          description: "Optional: Key points identified in the thought",
          required: false,
        },
        {
          name: "parentBranchId",
          type: "string",
          description: "Optional: ID of the parent branch",
          required: false,
        },
        {
          name: "relatedInsights",
          type: "string array",
          description: "Optional: IDs of related insights",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of thought (e.g., 'analysis', 'hypothesis', 'observation')",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/m-siles/branch-thinking",
  _varName: "branchThinkingMcpServer1Plugin",
};

const iapticMcpServerPlugin: Plugin = {
  id: "u2l6kenhz6",
  name: "Iaptic MCP Server",
  description:
    "A server for interacting with the Iaptic API, allowing AI models like Claude to query customer, purchase, and transaction data, as well as retrieve statistical insights.",
  image: "https://github.com/iaptic.png",
  actions: [
    {
      name: "customer_list",
      description:
        "List customers from your Iaptic account.\n- Returns a paginated list of customers with their purchase status\n- Each customer includes:\n  - Application username\n  - Last purchase information\n  - Subscription status (active/lapsed)\n  - Renewal intent\n  - Trial/introductory period status\n- Use limit and offset for pagination (default: 100 customers per page)\n- Results are ordered by creation date (newest first)",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of customers to return (default: 100)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of customers to skip for pagination",
          required: false,
        },
      ],
    },
    {
      name: "customer_get",
      description:
        "Get detailed information about a specific customer.\n- Returns complete customer profile including:\n  - Application username\n  - Purchase history\n  - Active and expired subscriptions\n  - Last purchase details\n  - Subscription renewal status\n  - Trial and introductory period information\n- Required: customerId parameter",
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Unique identifier of the customer",
          required: true,
        },
      ],
    },
    {
      name: "customer_add_purchase",
      description:
        'Manually associate a customer with a purchase.\n- Links a purchase to a specific customer\n- Takes priority over receipt validation links\n- Useful for manual purchase management\n- Purchase format should be "platform:purchaseId", for example apple:123109519983\n- Required: customerId and purchaseId',
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Application username of the customer",
          required: true,
        },
        {
          name: "purchaseId",
          type: "string",
          description: "ID of the purchase to associate",
          required: true,
        },
      ],
    },
    {
      name: "customer_subscription",
      description:
        "Get customer's subscription status.\n- Returns active subscription details if any\n- Includes:\n  - Subscription status and expiry\n  - Payment and renewal information\n  - Trial/introductory period status\n- Simpler alternative to customer_get for subscription-only apps",
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Application username of the customer",
          required: true,
        },
      ],
    },
    {
      name: "customer_transactions",
      description:
        "Get customer's transaction history.\n- Returns list of all transactions\n- Includes:\n  - Payment details\n  - Transaction status\n  - Associated purchases\n  - Timestamps",
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Application username of the customer",
          required: true,
        },
      ],
    },
    {
      name: "purchase_list",
      description:
        "List purchases from your Iaptic account.\n- Returns a paginated list of purchases\n- Use limit and offset for pagination (default: 100 per page)\n- Filter by date range using startdate and enddate (ISO format)\n- Filter by customerId to see purchases from a specific customer\n- Results include purchase status, product info, and transaction details\n- Results are ordered by purchase date (newest first)",
      parameters: [
        {
          name: "customerId",
          type: "string",
          description: "Filter purchases by customer ID",
          required: false,
        },
        {
          name: "enddate",
          type: "string",
          description:
            "Filter purchases before this date (ISO format, e.g. 2024-12-31)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of purchases to return (default: 100, max: 1000)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of purchases to skip for pagination",
          required: false,
        },
        {
          name: "startdate",
          type: "string",
          description:
            "Filter purchases after this date (ISO format, e.g. 2024-01-01)",
          required: false,
        },
      ],
    },
    {
      name: "purchase_get",
      description:
        "Get detailed information about a specific purchase.\n- Returns complete purchase details including:\n  - Product information\n  - Purchase status\n  - Associated transactions\n  - Customer information\n  - Subscription details (if applicable)\n- Required: purchaseId parameter",
      parameters: [
        {
          name: "purchaseId",
          type: "string",
          description: "Unique identifier of the purchase",
          required: true,
        },
      ],
    },
    {
      name: "transaction_list",
      description:
        "List financial transactions from your Iaptic account.\n- Returns a paginated list of transactions\n- Use limit and offset for pagination (default: 100 per page)\n- Filter by date range using startdate and enddate (ISO format)\n- Filter by purchaseId to see transactions for a specific purchase\n- Results include transaction status, amount, currency, and payment details\n- Results are ordered by transaction date (newest first)\n- Important: Use date filtering to avoid retrieving too many records",
      parameters: [
        {
          name: "enddate",
          type: "string",
          description:
            "Filter transactions before this date (ISO format, e.g. 2024-12-31)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of transactions to return (default: 100, max: 1000)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of transactions to skip for pagination",
          required: false,
        },
        {
          name: "purchaseId",
          type: "string",
          description: "Filter transactions by purchase ID",
          required: false,
        },
        {
          name: "startdate",
          type: "string",
          description:
            "Filter transactions after this date (ISO format, e.g. 2024-01-01)",
          required: false,
        },
      ],
    },
    {
      name: "transaction_get",
      description:
        "Get detailed information about a specific transaction.\n- Returns complete transaction details including:\n  - Transaction status\n  - Amount and currency\n  - Payment method details\n  - Associated purchase information\n  - Customer information\n  - Timestamps and audit data\n- Required: transactionId parameter",
      parameters: [
        {
          name: "transactionId",
          type: "string",
          description: "Unique identifier of the transaction",
          required: true,
        },
      ],
    },
    {
      name: "stats_get",
      description:
        "Get general transactions, revenue and usage statistics from your Iaptic account.\n- Returns aggregated metrics including:\n  - Total revenue\n  - Number of active subscriptions\n  - Customer growth metrics\n  - Transaction success rates\n  - Revenue by product type\n- Data is aggregated across all your applications",
      parameters: [],
    },
    {
      name: "stats_app",
      description:
        "Get statistics specific to your application.\n- Returns app-specific metrics including:\n  - App revenue and growth\n  - Active subscriptions for this app\n  - Customer metrics for this app\n  - Product performance statistics\n  - Transaction metrics\n- Uses the app name provided during server initialization",
      parameters: [],
    },
    {
      name: "stripe_prices",
      description:
        "Get available Stripe products and prices.\n- Returns list of products with their associated prices\n- Each product includes:\n  - Product ID and display name\n  - Description and metadata\n  - Available pricing offers\n  - Subscription terms if applicable\n- Results are cached for 5 minutes",
      parameters: [],
    },
    {
      name: "event_list",
      description:
        "List recent events from your Iaptic account.\n- Returns a paginated list of system events\n- Events include:\n  - Receipt validations\n  - Platform notifications (Apple/Google/etc)\n  - Webhook deliveries\n  - Purchase status changes\n  - Subscription renewals\n- Use limit and offset for pagination\n- Results ordered by date (newest first)",
      parameters: [
        {
          name: "enddate",
          type: "string",
          description:
            "Filter events before this date (ISO format, e.g. 2024-12-31)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of events to return (default: 100)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of events to skip for pagination",
          required: false,
        },
        {
          name: "startdate",
          type: "string",
          description:
            "Filter events after this date (ISO format, e.g. 2024-01-01)",
          required: false,
        },
      ],
    },
    {
      name: "iaptic_switch_app",
      description:
        "Switch to a different Iaptic app.\n- Allows temporarily using a different app's credentials\n- All subsequent API calls will use the new app name and API key\n- If using a master key, only the app name needs to be changed\n- Useful for managing multiple apps in the same session\n- Required: appName parameter (apiKey required only if not using master key)",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "API key for the app (not required if using master key)",
          required: false,
        },
        {
          name: "appName",
          type: "string",
          description: "Name of the app to switch to",
          required: true,
        },
      ],
    },
    {
      name: "iaptic_reset_app",
      description:
        "Reset to the default Iaptic app.\n- Reverts to the original app credentials provided during server initialization\n- All subsequent API calls will use the default app name and API key\n- Use this after using iaptic_switch_app to return to the default app",
      parameters: [],
    },
    {
      name: "iaptic_current_app",
      description:
        "Get information about the currently active Iaptic app.\n- Returns the current app name\n- Indicates whether using default or custom credentials\n- Shows if using a master key for authentication",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/iaptic/mcp-server-iaptic",
  _varName: "iapticMcpServerPlugin",
};

const coinFlipMcpServerPlugin: Plugin = {
  id: "f57ohq0c54",
  name: "Coin Flip MCP Server",
  description:
    "Enables interaction with a tool for generating true random coin flips via random.org's API, supporting multiple custom side configurations and illustrating the Model Context Protocol.",
  image: "https://github.com/TeglonLabs.png",
  actions: [
    {
      name: "flip_coin",
      description:
        "Flip a coin with n sides using true randomness from random.org. For 3-sided coins, try creative side names like:\n- past/present/future (temporal analysis)\n- true/unknown/false (epistemic states)\n- win/draw/lose (outcome evaluation)\n- rock/paper/scissors (cyclic relationships)\n- less/same/more (abstraction levels)\n- below/within/above (hierarchical positioning)\n- predecessor/current/successor (ordinal progression)\n\nMeta-usage patterns:\n1. Use less/same/more to guide abstraction level of discourse\n2. Use past/present/future to determine temporal focus\n3. Chain multiple flips to create decision trees\n4. Use predecessor/current/successor for ordinal analysis\n\nOrdinal Meta-patterns:\n- Use predecessor to refine previous concepts\n- Use current to stabilize existing patterns\n- Use successor to evolve into new forms\n\nDefault ternary values are -/0/+",
      parameters: [
        {
          name: "sideNames",
          type: "string array",
          description:
            "Optional custom names for sides (must match number of sides)",
          required: false,
        },
        {
          name: "sides",
          type: "number",
          description: "Number of sides (default: 3)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/TeglonLabs/coin-flip-mcp",
  _varName: "coinFlipMcpServerPlugin",
};

const githuboauthMcpServerPlugin: Plugin = {
  id: "4f78zjhwvl",
  name: "Github-Oauth MCP Server",
  description:
    "Facilitates authentication with GitHub using OAuth protocol, allowing secure access and interaction with GitHub repositories and services.",
  image: "https://github.com/Nikhil-Patil-RI.png",
  actions: [],
  githubUrl: "https://github.com/Nikhil-Patil-RI/MCP-Github-Oauth",
  _varName: "githuboauthMcpServerPlugin",
};

const mcpStarterServerPlugin: Plugin = {
  id: "z0fby9t6i1",
  name: "MCP Starter Server",
  description:
    "This server provides a minimal template for creating AI assistant tools using the ModelContextProtocol, featuring a simple 'hello world' tool example and development setups for building custom MCP tools.",
  image: "https://github.com/MatthewDailey.png",
  actions: [
    {
      name: "hello_tool",
      description: "Hello tool",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "The name of the person to greet",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MatthewDailey/mcp-starter",
  _varName: "mcpStarterServerPlugin",
};

const xcodeMcpServer1Plugin: Plugin = {
  id: "mmxuwmm7sc",
  name: "Xcode MCP Server",
  description:
    "Bridges Claude AI with Xcode, enabling AI-powered code assistance, project management, and automated development tasks securely on your local machine.",
  image: "https://github.com/r-huijts.png",
  actions: [
    {
      name: "set_projects_base_dir",
      description: "Set the base directory where Xcode projects are stored",
      parameters: [
        {
          name: "baseDir",
          type: "string",
          description:
            "Absolute path to the directory containing Xcode projects",
          required: true,
        },
      ],
    },
    {
      name: "set_project_path",
      description: "Explicitly set the path to the Xcode project to work with",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the .xcodeproj directory",
          required: true,
        },
      ],
    },
    {
      name: "get_active_project",
      description: "Get information about the currently active Xcode project",
      parameters: [],
    },
    {
      name: "read_file",
      description: "Read contents of a file in the Xcode project",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the file within the project",
          required: true,
        },
      ],
    },
    {
      name: "write_file",
      description: "Write or update contents of a file in the Xcode project",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "createIfMissing",
          type: "boolean",
          description: "Whether to create the file if it doesn't exist",
          required: false,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the file within the project",
          required: true,
        },
      ],
    },
    {
      name: "list_project_files",
      description: "List all files in an Xcode project",
      parameters: [
        {
          name: "fileType",
          type: "string",
          description: "Filter by file extension (e.g., 'swift', 'm')",
          required: false,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the .xcodeproj directory",
          required: true,
        },
      ],
    },
    {
      name: "analyze_file",
      description: "Analyze source file for issues and suggestions",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the source file",
          required: true,
        },
      ],
    },
    {
      name: "build_project",
      description: "Build the current Xcode project",
      parameters: [
        {
          name: "configuration",
          type: "string",
          description: "Build configuration (Debug/Release)",
          required: true,
        },
        {
          name: "scheme",
          type: "string",
          description: "Build scheme name",
          required: true,
        },
      ],
    },
    {
      name: "run_tests",
      description: "Run tests for the current Xcode project",
      parameters: [
        {
          name: "testPlan",
          type: "string",
          description: "Name of the test plan to run",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/r-huijts/xcode-mcp-server",
  _varName: "xcodeMcpServer1Plugin",
};

const mcpjirapythonServerPlugin: Plugin = {
  id: "fz0h97h9u8",
  name: "MCP-JIRA-Python Server",
  description:
    "A Python-based server allowing seamless integration with JIRA for managing and interacting with projects through custom APIs.",
  image: "https://github.com/Kallows.png",
  actions: [],
  githubUrl: "https://github.com/Kallows/mcp-jira-python",
  _varName: "mcpjirapythonServerPlugin",
};

const antibullshitMcpServerPlugin: Plugin = {
  id: "isszli7z1y",
  name: "Anti-Bullshit MCP Server",
  description:
    "Enables analysis of claims, validation of sources, and detection of manipulation using multiple epistemological frameworks to ensure credible and ethical information.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "analyze_claim",
      description:
        "Analyze a claim using multiple epistemological frameworks and suggest validation steps",
      parameters: [
        {
          name: "framework",
          type: "string",
          description:
            "Validation framework to use (empirical, responsible, harmonic, or pluralistic)",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Claim to analyze",
          required: true,
        },
      ],
    },
    {
      name: "validate_sources",
      description: "Validate sources and evidence using configured framework",
      parameters: [
        {
          name: "framework",
          type: "string",
          description: "Validation framework to use",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Text containing claims and sources to validate",
          required: true,
        },
      ],
    },
    {
      name: "check_manipulation",
      description:
        "Check for manipulation tactics across different cultural contexts",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Text to analyze for manipulation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bmorphism/anti-bullshit-mcp-server",
  _varName: "antibullshitMcpServerPlugin",
};

const systempromptMcpNotionServerPlugin: Plugin = {
  id: "xe6grtrr0k",
  name: "SystemPrompt MCP Notion Server",
  description:
    "A high-performance MCP server that integrates Notion into AI workflows, enabling interaction with Notion pages, databases, and comments through a standardized protocol.",
  image: "https://github.com/Ejb503.png",
  actions: [
    {
      name: "systemprompt_list_notion_pages",
      description:
        "Lists all accessible Notion pages in your workspace, sorted by last edited time. Returns key metadata including title, URL, and last edited timestamp.",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "Maximum number of pages to return in the response. Defaults to 50 if not specified.",
          required: false,
        },
      ],
    },
    {
      name: "systemprompt_list_notion_databases",
      description:
        "Lists all accessible Notion databases in your workspace, sorted by last edited time. Returns key metadata including database title, schema, and last edited timestamp.",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "Maximum number of databases to return in the response. Defaults to 50 if not specified.",
          required: false,
        },
      ],
    },
    {
      name: "systemprompt_search_notion_pages",
      description:
        "Performs a full-text search across all accessible Notion pages using the provided query. Searches through titles, content, and metadata to find relevant matches.",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "Maximum number of search results to return. Defaults to 10 if not specified.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Search query to find relevant Notion pages. Can include keywords, phrases, or partial matches.",
          required: true,
        },
      ],
    },
    {
      name: "systemprompt_search_notion_pages_by_title",
      description:
        "Searches specifically for Notion pages with titles matching the provided query. Useful for finding exact or similar title matches when you know the page name.",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "Maximum number of matching pages to return. Defaults to 10 if not specified.",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description:
            "Title text to search for. Can be exact or partial match.",
          required: true,
        },
      ],
    },
    {
      name: "systemprompt_get_notion_page",
      description:
        "Retrieves comprehensive details of a specific Notion page, including its content, properties, and metadata. Returns the complete page structure and all nested content blocks.",
      parameters: [
        {
          name: "pageId",
          type: "string",
          description:
            "The unique identifier of the Notion page to retrieve. Must be a valid Notion page ID.",
          required: true,
        },
      ],
    },
    {
      name: "systemprompt_create_notion_page",
      description:
        "Creates a rich, comprehensive Notion page that expands upon basic user inputs. Takes simple instructions and content, then generates a detailed, well-structured page with appropriate sections, formatting, and supplementary content.",
      parameters: [
        {
          name: "databaseId",
          type: "string",
          description: "The ID of the database to create the page in",
          required: true,
        },
        {
          name: "userInstructions",
          type: "string",
          description:
            "Basic instructions or outline for the page content. These will be expanded into a comprehensive structure with appropriate sections, formatting, and enhanced detail. Can include desired title, key points, or general direction.",
          required: true,
        },
      ],
    },
    {
      name: "systemprompt_update_notion_page",
      description:
        "Updates an existing Notion page with rich, comprehensive content based on user instructions. Takes simple inputs and transforms them into well-structured, detailed page content while preserving existing information. Can enhance, reorganize, or expand the current content while maintaining page integrity.",
      parameters: [
        {
          name: "pageId",
          type: "string",
          description:
            "The unique identifier of the Notion page to update. Must be a valid Notion page ID.",
          required: true,
        },
        {
          name: "userInstructions",
          type: "string",
          description:
            "Natural language instructions for updating the page. These will be expanded into comprehensive changes, potentially including new sections, enhanced formatting, additional context, and improved structure while respecting existing content. Can include specific changes, content additions, or general directions for improvement.",
          required: true,
        },
      ],
    },
    {
      name: "systemprompt_delete_notion_page",
      description:
        "Permanently deletes a specified Notion page and all its contents. This action cannot be undone, so use with caution.",
      parameters: [
        {
          name: "pageId",
          type: "string",
          description:
            "The unique identifier of the Notion page to delete. Must be a valid Notion page ID. Warning: deletion is permanent.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Ejb503/systemprompt-mcp-notion",
  _varName: "systempromptMcpNotionServerPlugin",
};

const iacrMcpServerPlugin: Plugin = {
  id: "e2oh3a96de",
  name: "IACR MCP Server",
  description:
    "Enables programmatic access to the IACR Cryptology ePrint Archive, facilitating the search and retrieval of cryptographic research papers and metadata via a secure interface.",
  image: "https://github.com/doomdagadiggiedahdah.png",
  actions: [
    {
      name: "search_papers",
      description: "Search for papers in the IACR Cryptology ePrint Archive",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Parameter: category",
          required: false,
        },
        {
          name: "max_results",
          type: "number",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "year",
          type: "number",
          description: "Parameter: year",
          required: false,
        },
      ],
    },
    {
      name: "get_paper_details",
      description: "Retrieve details of a specific paper by its ID",
      parameters: [
        {
          name: "paper_id",
          type: "string",
          description: "Parameter: paper_id",
          required: true,
        },
      ],
    },
    {
      name: "download_paper",
      description: "Download a paper in PDF or TXT format",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "paper_id",
          type: "string",
          description: "Parameter: paper_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/doomdagadiggiedahdah/iacr-mcp-server",
  _varName: "iacrMcpServerPlugin",
};

const mcpRemoteServerPlugin: Plugin = {
  id: "2q6b1i9jpz",
  name: "MCP Remote Server",
  description:
    "A configurable MCP server that dynamically loads capabilities from a remote configuration to bridge MCP clients with remote APIs for executing actions, accessing resources, and utilizing prompt templates.",
  image: "https://github.com/sirmews.png",
  actions: [],
  githubUrl: "https://github.com/sirmews/mcp-remote-server",
  _varName: "mcpRemoteServerPlugin",
};

const linearMcpServer7Plugin: Plugin = {
  id: "71fqw0uqmx",
  name: "Linear MCP Server",
  description:
    "Enables AI agents to manage issues, projects, and teams on the Linear platform programmatically.",
  image: "https://github.com/ibraheem4.png",
  actions: [
    {
      name: "create_issue",
      description: "Create a new issue in Linear",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Assignee user ID (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description (markdown supported)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Label IDs to apply (optional)",
          required: false,
        },
        {
          name: "priority",
          type: "number",
          description: "Priority (0-4, optional)",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Team ID",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "list_issues",
      description: "List issues with optional filters",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "Filter by assignee ID (optional)",
          required: false,
        },
        {
          name: "first",
          type: "number",
          description: "Number of issues to return (default: 50)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by status (optional)",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Filter by team ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing issue",
      parameters: [
        {
          name: "assigneeId",
          type: "string",
          description: "New assignee ID (optional)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description (optional)",
          required: false,
        },
        {
          name: "issueId",
          type: "string",
          description: "Issue ID",
          required: true,
        },
        {
          name: "priority",
          type: "number",
          description: "New priority (0-4, optional)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "New status (optional)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title (optional)",
          required: false,
        },
      ],
    },
    {
      name: "list_teams",
      description: "List all teams in the workspace",
      parameters: [],
    },
    {
      name: "list_projects",
      description: "List all projects",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Number of projects to return (default: 50)",
          required: false,
        },
        {
          name: "teamId",
          type: "string",
          description: "Filter by team ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "search_issues",
      description: "Search for issues using a text query",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "Number of results to return (default: 50)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query text",
          required: true,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Get detailed information about a specific issue",
      parameters: [
        {
          name: "issueId",
          type: "string",
          description: "Issue ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ibraheem4/linear-mcp",
  _varName: "linearMcpServer7Plugin",
};

const gmailMcpServer5Plugin: Plugin = {
  id: "trp34c3ec6",
  name: "Gmail MCP Server",
  description:
    "Integrates with Gmail to enable sending, reading, drafting, and managing emails via the Model Context Protocol (MCP), allowing users to interact with email tasks through automated client prompts.",
  image: "https://github.com/jmonsellier.png",
  actions: [],
  githubUrl: "https://github.com/jmonsellier/gmail-mcp-server",
  _varName: "gmailMcpServer5Plugin",
};

const mcpmemorylibsqlPlugin: Plugin = {
  id: "22lg4lq768",
  name: "mcp-memory-libsql",
  description:
    "A high-performance MCP server utilizing libSQL for persistent memory and vector search capabilities, enabling efficient entity management and semantic knowledge storage.",
  image: "https://github.com/spences10.png",
  actions: [
    {
      name: "create_entities",
      description:
        "Create new entities with observations and optional embeddings",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "search_nodes",
      description:
        "Search for entities and their relations using text or vector similarity",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Get recent entities and their relations",
      parameters: [],
    },
    {
      name: "create_relations",
      description: "Create relations between entities",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entity",
      description:
        "Delete an entity and all its associated data (observations and relations)",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the entity to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_relation",
      description: "Delete a specific relation between entities",
      parameters: [
        {
          name: "source",
          type: "string",
          description: "Source entity name",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description: "Target entity name",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of relation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/spences10/mcp-memory-libsql",
  _varName: "mcpmemorylibsqlPlugin",
};

const n8nWorkflowBuilderMcpServerPlugin: Plugin = {
  id: "fhoynrlnpp",
  name: "n8n Workflow Builder MCP Server",
  description:
    "A server for programmatically creating and managing n8n workflows with a REST API interface, supporting workflow creation, validation, and export.",
  image: "https://github.com/makafeli.png",
  actions: [
    {
      name: "list_workflows",
      description: "List all workflows from n8n",
      parameters: [],
    },
    {
      name: "create_workflow",
      description: "Create a new workflow in n8n",
      parameters: [
        {
          name: "connections",
          type: "object array",
          description: "Parameter: connections",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "nodes",
          type: "object array",
          description: "Parameter: nodes",
          required: true,
        },
      ],
    },
    {
      name: "get_workflow",
      description: "Get a workflow by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "update_workflow",
      description: "Update an existing workflow",
      parameters: [
        {
          name: "connections",
          type: "array",
          description: "Parameter: connections",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "nodes",
          type: "array",
          description: "Parameter: nodes",
          required: true,
        },
      ],
    },
    {
      name: "delete_workflow",
      description: "Delete a workflow by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "activate_workflow",
      description: "Activate a workflow by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "deactivate_workflow",
      description: "Deactivate a workflow by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "list_executions",
      description: "List all executions from n8n with optional filters",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Parameter: cursor",
          required: false,
        },
        {
          name: "includeData",
          type: "boolean",
          description: "Parameter: includeData",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Parameter: projectId",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Parameter: status",
          required: false,
        },
        {
          name: "workflowId",
          type: "string",
          description: "Parameter: workflowId",
          required: false,
        },
      ],
    },
    {
      name: "get_execution",
      description: "Get details of a specific execution by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "includeData",
          type: "boolean",
          description: "Parameter: includeData",
          required: false,
        },
      ],
    },
    {
      name: "delete_execution",
      description: "Delete an execution by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/makafeli/n8n-workflow-builder",
  _varName: "n8nWorkflowBuilderMcpServerPlugin",
};

const mcpgooglePlugin: Plugin = {
  id: "0ixu86x2zs",
  name: "mcp-google",
  description:
    "A specialized Model Context Protocol (MCP) server that integrates Google services (Gmail, Calendar, etc.) into your AI workflows. This server enables seamless access to Google services through MCP, allowing AI agents to interact with Gmail, Google Calendar, and other Google services.",
  image: "https://github.com/Ejb503.png",
  actions: [],
  githubUrl: "https://github.com/Ejb503/systemprompt-mcp-google",
  _varName: "mcpgooglePlugin",
};

const integrationAppMcpServerPlugin: Plugin = {
  id: "16ah76p6hs",
  name: "Integration App MCP Server",
  description:
    "This MCP server implementation allows users to manage and expose actions as tools from their Integration App workspace through the Model Context Protocol.",
  image: "https://github.com/integration-app.png",
  actions: [],
  githubUrl: "https://github.com/integration-app/mcp-server",
  _varName: "integrationAppMcpServerPlugin",
};

const supabaseMemoryMcpServerPlugin: Plugin = {
  id: "paetqyb3l6",
  name: "Supabase Memory MCP Server",
  description:
    "Provides memory/knowledge graph storage capabilities using Supabase, enabling multiple Claude instances to safely share and maintain a knowledge graph with features like entity storage, concurrent access safety, and full text search.",
  image: "https://github.com/gtrusler.png",
  actions: [],
  githubUrl: "https://github.com/gtrusler/mcp-brain",
  _varName: "supabaseMemoryMcpServerPlugin",
};

const mcplogicPlugin: Plugin = {
  id: "ok2nojolqg",
  name: "MCP-Logic",
  description:
    "MCP-Logic is a server that provides AI systems with automated reasoning capabilities, enabling logical theorem proving and model verification using Prover9/Mace4 through a clean MCP interface.",
  image: "https://github.com/angrysky56.png",
  actions: [],
  githubUrl: "https://github.com/angrysky56/mcp-logic",
  _varName: "mcplogicPlugin",
};

const supabaseMemoryMcpServer1Plugin: Plugin = {
  id: "sbeh7k6ixi",
  name: "Supabase Memory MCP Server",
  description:
    "An MCP server utilizing Supabase to provide memory and knowledge graph storage, enabling multiple Claude instances to share and manage data with database-level locking for safe concurrent access.",
  image: "https://github.com/gtrusler.png",
  actions: [],
  githubUrl: "https://github.com/gtrusler/supabase-memory-mcp",
  _varName: "supabaseMemoryMcpServer1Plugin",
};

const mcpJavascriptServerPlugin: Plugin = {
  id: "m5mvzetwv7",
  name: "MCP JavaScript Server",
  description:
    "An unofficial JavaScript SDK to create customized servers for the Model Context Protocol, allowing definition of prompts, resources, and tools for tailored interactions.",
  image: "https://github.com/davlgd.png",
  actions: [],
  githubUrl: "https://github.com/davlgd/mcp-js-server",
  _varName: "mcpJavascriptServerPlugin",
};

const mcpServer5Plugin: Plugin = {
  id: "hjz6uuyca7",
  name: "MCP Server",
  description:
    "MCP Server provides a simpler API to interact with the Model Context Protocol by allowing users to define custom tools and services to streamline workflows and processes.",
  image: "https://github.com/agentico-dev.png",
  actions: [],
  githubUrl: "https://github.com/agentico-dev/mcp-server",
  _varName: "mcpServer5Plugin",
};

const notionApiMcpServerPlugin: Plugin = {
  id: "s5mm9e0sr5",
  name: "Notion API MCP Server",
  description:
    "Enables advanced todo list management and content organization using Notion's API, supporting features like creating databases, dynamic filtering, and collaborative task tracking.",
  image: "https://github.com/pbohannon.png",
  actions: [],
  githubUrl: "https://github.com/pbohannon/notion-api-mcp",
  _varName: "notionApiMcpServerPlugin",
};

const jiraPlugin: Plugin = {
  id: "oj02kilws4",
  name: "Jira",
  description: "MCP to Connect JIRA by NodeJs",
  image: "https://github.com/vurtnec.png",
  actions: [],
  githubUrl: "https://github.com/vurtnec/mcp-jira",
  _varName: "jiraPlugin",
};

const mcpWebResearchServerPlugin: Plugin = {
  id: "5afpizjl6x",
  name: "MCP Web Research Server",
  description:
    "The MCP Web Research Server enables real-time web research with Claude by integrating Google search, capturing webpage content and screenshots, and tracking research sessions.",
  image: "https://github.com/qpd-v.png",
  actions: [
    {
      name: "deep_research",
      description:
        "Perform deep research on a topic with content extraction and analysis",
      parameters: [
        {
          name: "maxBranching",
          type: "number",
          description: "Maximum number of related paths to explore",
          required: false,
        },
        {
          name: "maxDepth",
          type: "number",
          description: "Maximum depth of related content exploration",
          required: false,
        },
        {
          name: "minRelevanceScore",
          type: "number",
          description: "Minimum relevance score for including content",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Research timeout in milliseconds",
          required: false,
        },
        {
          name: "topic",
          type: "string",
          description: "Research topic or question",
          required: true,
        },
      ],
    },
    {
      name: "parallel_search",
      description: "Perform multiple Google searches in parallel",
      parameters: [
        {
          name: "maxParallel",
          type: "number",
          description: "Maximum number of parallel searches",
          required: false,
        },
        {
          name: "queries",
          type: "string array",
          description: "Array of search queries to execute in parallel",
          required: true,
        },
      ],
    },
    {
      name: "visit_page",
      description: "Visit a webpage and extract its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to visit",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qpd-v/mcp-DEEPwebresearch",
  _varName: "mcpWebResearchServerPlugin",
};

const searxngmcpserverPlugin: Plugin = {
  id: "jqzm4nkvhx",
  name: "searxng-mcp-server",
  description:
    "A TypeScript-based MCP server for SearXNG that allows users to create and summarize text notes using simple URIs and metadata, facilitating natural language interaction with stored content.",
  image: "https://github.com/maccam912.png",
  actions: [],
  githubUrl: "https://github.com/maccam912/searxng-mcp-server",
  _varName: "searxngmcpserverPlugin",
};

const holaspiritMcpServerPlugin: Plugin = {
  id: "7tn35lri9w",
  name: "Holaspirit MCP Server",
  description:
    "Provides MCP-compatible access to Holaspirit's API, allowing AI assistants to interact with organizational data such as tasks, circles, roles, and meetings through a standardized interface.",
  image: "https://github.com/syucream.png",
  actions: [
    {
      name: "list_tasks",
      description: "List all tasks in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "list_metrics",
      description: "List all metrics in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "list_circles",
      description: "List all circles in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "get_circle",
      description: "Get details of a specific circle",
      parameters: [
        {
          name: "circleId",
          type: "string",
          description: "Parameter: circleId",
          required: true,
        },
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "list_roles",
      description: "List all roles in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "get_role",
      description: "Get details of a specific role",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
        {
          name: "roleId",
          type: "string",
          description: "Parameter: roleId",
          required: true,
        },
      ],
    },
    {
      name: "list_domains",
      description: "List all domains in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "list_policies",
      description: "List all policies in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "list_meetings",
      description: "List all meetings in the organization",
      parameters: [
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
    {
      name: "get_meeting",
      description: "Get details of a specific meeting",
      parameters: [
        {
          name: "meetingId",
          type: "string",
          description: "Parameter: meetingId",
          required: true,
        },
        {
          name: "organizationId",
          type: "string",
          description: "Parameter: organizationId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/syucream/holaspirit-mcp-server",
  _varName: "holaspiritMcpServerPlugin",
};

const placidMcpServerPlugin: Plugin = {
  id: "xeklsydon0",
  name: "Placid MCP Server",
  description:
    "A server for integrating with Placid.app's API, enabling listing templates and generating creatives using the Model Context Protocol with secure API token management.",
  image: "https://github.com/felores.png",
  actions: [
    {
      name: "placid_list_templates",
      description:
        "Get a list of available Placid templates with optional filtering. Each template includes its title, ID, preview image URL, available layers, and tags.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Optional: Filter templates by collection ID",
          required: false,
        },
        {
          name: "custom_data",
          type: "string",
          description: "Optional: Filter by custom reference data",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Optional: Filter templates by tags",
          required: false,
        },
      ],
    },
    {
      name: "placid_generate_image",
      description: "Generate an image using a template and provided assets",
      parameters: [
        {
          name: "layers",
          type: "object",
          description:
            "Key-value pairs for dynamic content. Keys must match template layer names.",
          required: true,
        },
        {
          name: "template_id",
          type: "string",
          description: "UUID of the template to use",
          required: true,
        },
      ],
    },
    {
      name: "placid_generate_video",
      description:
        "Generate a video using one or more templates and provided assets. Every 10 seconds of video uses 10 credits.",
      parameters: [
        {
          name: "audio",
          type: "string",
          description: "URL of mp3 audio file for this video",
          required: false,
        },
        {
          name: "audio_duration",
          type: "string",
          description: "Set to 'auto' to trim audio to video length",
          required: false,
        },
        {
          name: "audio_trim_end",
          type: "string",
          description:
            "Timestamp of the trim end point (e.g. '00:00:55' or '00:00:55.25')",
          required: false,
        },
        {
          name: "audio_trim_start",
          type: "string",
          description:
            "Timestamp of the trim start point (e.g. '00:00:45' or '00:00:45.25')",
          required: false,
        },
        {
          name: "layers",
          type: "object",
          description:
            "Key-value pairs for dynamic content. Keys must match template layer names.",
          required: true,
        },
        {
          name: "template_id",
          type: "string",
          description: "UUID of the template to use",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/felores/placid-mcp-server",
  _varName: "placidMcpServerPlugin",
};

const mcpNotesServerPlugin: Plugin = {
  id: "tg4ugmp8jr",
  name: "MCP Notes Server",
  description:
    "An MCP server for managing and persisting notes, offering CRUD operations, note summarization, and resource-based access via a note:// URI scheme.",
  image: "https://github.com/truaxki.png",
  actions: [
    {
      name: "add-note",
      description: "Create a new note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "list-all-notes",
      description: "Read all stored notes",
      parameters: [],
    },
    {
      name: "update-note",
      description: "Update an existing note",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "delete-note",
      description: "Delete an existing note",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/truaxki/mcp-notes",
  _varName: "mcpNotesServerPlugin",
};

const jiraMcpServer2Plugin: Plugin = {
  id: "6n4k16puwl",
  name: "Jira MCP Server",
  description:
    "Enables AI models to interact with Jira using a standardized protocol, offering full Jira REST API integration with features like optimal performance through connection pooling, error handling, and request monitoring.",
  image: "https://github.com/uddeshya-23.png",
  actions: [],
  githubUrl: "https://github.com/uddeshya-23/mcp-server-JIRA",
  _varName: "jiraMcpServer2Plugin",
};

const scrapboxCosenseMcpServerPlugin: Plugin = {
  id: "8huixkwpe2",
  name: "Scrapbox Cosense MCP Server",
  description:
    "This server facilitates interaction with cosense/Scrapbox projects, enabling users to retrieve, list, search, and create pages while supporting various query operations and secure access to private projects.",
  image: "https://github.com/worldnine.png",
  actions: [
    {
      name: "create_page",
      description:
        "\n        Create a new page in my-research-notes project on cosense (scrapbox)\n        \n        Creates a new page with the specified title and optional body text.\n        The page will be opened in your default browser.\n        ",
      parameters: [
        {
          name: "body",
          type: "string",
          description:
            "Content in markdown format that will be converted to Scrapbox format. Supports standard markdown syntax including links, code blocks, lists, and emphasis.",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the new page",
          required: true,
        },
      ],
    },
    {
      name: "get_page",
      description:
        "\n        Get a page from my-research-notes project on cosense (scrapbox)\n        Returns page content and its linked pages.\n        Page content includes title and description in plain text format.\n        ",
      parameters: [
        {
          name: "pageTitle",
          type: "string",
          description: "Title of the page",
          required: true,
        },
      ],
    },
    {
      name: "list_pages",
      description:
        "\n        List pages from my-research-notes project on cosense (scrapbox) with flexible sorting options.\n        \n        Available sorting methods:\n        - updated: Sort by last update time\n        - created: Sort by creation time\n        - accessed: Sort by access time\n        - linked: Sort by number of incoming links\n        - views: Sort by view count\n        - title: Sort by page title\n        ",
      parameters: [
        {
          name: "excludePinned",
          type: "boolean",
          description: "Whether to exclude pinned pages from the results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of pages to return (1-1000)",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of pages to skip",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort method for the page list",
          required: false,
        },
      ],
    },
    {
      name: "search_pages",
      description:
        '\n        Search pages in my-research-notes project on cosense (scrapbox)\n        \n        Supports various search features:\n        - Basic search: "keyword"\n        - Multiple keywords: "word1 word2" (AND search)\n        - Exclude words: "word1 -word2"\n        - Exact phrase: "\\"exact phrase\\""\n        ',
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/worldnine/scrapbox-cosense-mcp",
  _varName: "scrapboxCosenseMcpServerPlugin",
};

const keboolaExplorerMcpServerPlugin: Plugin = {
  id: "72mwt1x862",
  name: "Keboola Explorer MCP Server",
  description:
    "This server facilitates interaction with Keboola's Storage API, enabling users to browse and manage project buckets, tables, and components efficiently through Claude Desktop.",
  image: "https://github.com/keboola.png",
  actions: [
    {
      name: "get_bucket_info",
      description:
        "Get detailed information about a specific bucket\n    \n    Args:\n        bucket_id: ID of the bucket to get info for\n    ",
      parameters: [
        {
          name: "bucket_id",
          type: "string",
          description: "Parameter: bucket_id",
          required: true,
        },
      ],
    },
    {
      name: "get_table_preview",
      description:
        "Get a preview of data from a specific table as CSV\n    \n    Args:\n        table_id: ID of the table to preview\n        limit: Maximum number of rows to return (default: 100)\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "table_id",
          type: "string",
          description: "Parameter: table_id",
          required: true,
        },
      ],
    },
    {
      name: "get_table_info",
      description:
        "Get detailed information about a specific table\n    \n    Args:\n        table_id: ID of the table to get info for\n    ",
      parameters: [
        {
          name: "table_id",
          type: "string",
          description: "Parameter: table_id",
          required: true,
        },
      ],
    },
    {
      name: "list_component_configs",
      description:
        "List all configurations for a specific component\n    \n    Args:\n        component_id: ID of the component to list configurations for\n    ",
      parameters: [
        {
          name: "component_id",
          type: "string",
          description: "Parameter: component_id",
          required: true,
        },
      ],
    },
    {
      name: "list_all_buckets",
      description:
        "List all buckets in the project with their basic information",
      parameters: [],
    },
    {
      name: "list_bucket_tables_tool",
      description:
        "List all tables in a specific bucket with their basic information\n    \n    Args:\n        bucket_id: ID of the bucket to list tables from\n    ",
      parameters: [
        {
          name: "bucket_id",
          type: "string",
          description: "Parameter: bucket_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/keboola/keboola-mcp-server",
  _varName: "keboolaExplorerMcpServerPlugin",
};

const modelContextProtocolMcpServerPlugin: Plugin = {
  id: "0t8oxsctbq",
  name: "Model Context Protocol (MCP) Server",
  description:
    "This server facilitates the invocation of AI models from providers like Anthropic, OpenAI, and Groq, enabling users to manage and configure large language model interactions seamlessly.",
  image: "https://github.com/hideya.png",
  actions: [],
  githubUrl: "https://github.com/hideya/mcp-client-langchain-py",
  _varName: "modelContextProtocolMcpServerPlugin",
};

const postgresqlMcpServer2Plugin: Plugin = {
  id: "ps6a2rofzo",
  name: "PostgreSQL MCP Server",
  description:
    "A Model Context Protocol server providing LLMs read-only access to PostgreSQL databases for inspecting schemas and executing queries.",
  image: "https://github.com/vignesh-codes.png",
  actions: [],
  githubUrl: "https://github.com/vignesh-codes/ai-agents-mcp-pg",
  _varName: "postgresqlMcpServer2Plugin",
};

const mcpServerEnhancedSshPlugin: Plugin = {
  id: "en0lm47n1n",
  name: "MCP Server Enhanced SSH",
  description:
    "A robust SSH server facilitating secure remote command execution with TMUX session management, multi-window support, and smart session recovery for improved AI-human interaction.",
  image: "https://github.com/8bit-wraith.png",
  actions: [],
  githubUrl: "https://github.com/8bit-wraith/mcp",
  _varName: "mcpServerEnhancedSshPlugin",
};

const mcpServer6Plugin: Plugin = {
  id: "nfvsflhblv",
  name: "MCP Server",
  description:
    "This TypeScript-based MCP server allows users to manage a simple notes system through creating and summarizing text notes using Model Context Protocol (MCP).",
  image: "https://github.com/seonglae.png",
  actions: [],
  githubUrl: "https://github.com/seonglae/mcp-notion",
  _varName: "mcpServer6Plugin",
};

const mcpTerminalServer1Plugin: Plugin = {
  id: "xw5mtbhi5g",
  name: "MCP Terminal Server",
  description:
    "A secure server for executing terminal commands within predefined paths, allowing safe interaction by Large Language Models with operating system environments.",
  image: "https://github.com/dillip285.png",
  actions: [
    {
      name: "execute_command",
      description: "Execute a command in the local system",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "Command arguments",
          required: false,
        },
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "cwd",
          type: "string",
          description: "Working directory for command execution",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dillip285/mcp-terminal",
  _varName: "mcpTerminalServer1Plugin",
};

const mcpshellserverPlugin: Plugin = {
  id: "rt2d4pbn22",
  name: "mcp-shell-server",
  description:
    "A secure shell command execution server implementing the Model Context Protocol (MCP). This server allows remote execution of whitelisted shell commands with support for stdin input.",
  image: "https://github.com/tumf.png",
  actions: [
    {
      name: "shell_execute",
      description:
        "Execute a shell command\nAllowed commands: grep, find, echo, cat, ls",
      parameters: [
        {
          name: "command",
          type: "string array",
          description: "Command and its arguments as array",
          required: true,
        },
        {
          name: "directory",
          type: "string",
          description: "Working directory where the command will be executed",
          required: true,
        },
        {
          name: "stdin",
          type: "string",
          description: "Input to be passed to the command via stdin",
          required: false,
        },
        {
          name: "timeout",
          type: "integer",
          description: "Maximum execution time in seconds",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tumf/mcp-shell-server",
  _varName: "mcpshellserverPlugin",
};

const mcpWebBrowserServerPlugin: Plugin = {
  id: "lwqlaw6k6d",
  name: "MCP Web Browser Server",
  description:
    "An advanced web browsing server enabling headless browser interactions via a secure API, providing features like navigation, content extraction, element interaction, and screenshot capture.",
  image: "https://github.com/random-robbie.png",
  actions: [
    {
      name: "browse_to",
      description:
        "\n    Navigate to a specific URL and return the page's HTML content.\n    \n    Args:\n        url: The full URL to navigate to\n        context: Optional context object for logging (ignored)\n    \n    Returns:\n        The full HTML content of the page\n    ",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Parameter: context",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "extract_text_content",
      description:
        "\n    Extract text content from the current page, optionally using a CSS selector.\n    \n    Args:\n        selector: Optional CSS selector to target specific elements\n        context: Optional context object for logging (ignored)\n    \n    Returns:\n        Extracted text content\n    ",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Parameter: context",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "Parameter: selector",
          required: false,
        },
      ],
    },
    {
      name: "click_element",
      description:
        "\n    Click an element on the current page.\n    \n    Args:\n        selector: CSS selector for the element to click\n        context: Optional context object for logging (ignored)\n    \n    Returns:\n        Confirmation message or error details\n    ",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Parameter: context",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "Parameter: selector",
          required: true,
        },
      ],
    },
    {
      name: "get_page_screenshots",
      description:
        "\n    Capture screenshot of the current page.\n    \n    Args:\n        full_page: Whether to capture the entire page or just the viewport\n        selector: Optional CSS selector to screenshot a specific element\n        context: Optional context object for logging (ignored)\n    \n    Returns:\n        Base64 encoded screenshot image\n    ",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Parameter: context",
          required: false,
        },
        {
          name: "full_page",
          type: "boolean",
          description: "Parameter: full_page",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "Parameter: selector",
          required: false,
        },
      ],
    },
    {
      name: "get_page_links",
      description:
        "\n    Extract all links from the current page.\n    \n    Args:\n        context: Optional context object for logging (ignored)\n    \n    Returns:\n        List of links found on the page\n    ",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Parameter: context",
          required: false,
        },
      ],
    },
    {
      name: "input_text",
      description:
        "\n    Input text into a specific element on the page.\n    \n    Args:\n        selector: CSS selector for the input element\n        text: Text to input\n        context: Optional context object for logging (ignored)\n    \n    Returns:\n        Confirmation message\n    ",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Parameter: context",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "Parameter: selector",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/random-robbie/mcp-web-browser",
  _varName: "mcpWebBrowserServerPlugin",
};

const claudeDevServerPlugin: Plugin = {
  id: "7nxtlpap5d",
  name: "Claude Dev Server",
  description:
    "The Claude Dev Server enables direct interaction with the file system within a specified workspace, allowing users to perform file and directory operations and implement code artifacts in software development using natural language commands.",
  image: "https://github.com/arben-adm.png",
  actions: [],
  githubUrl: "https://github.com/arben-adm/mcp-claude-dev",
  _varName: "claudeDevServerPlugin",
};

const findFlightsMcpServerPlugin: Plugin = {
  id: "k87cjyhkxy",
  name: "Find Flights MCP Server",
  description:
    "Enables searching and retrieving detailed flight information using the Duffel API, supporting various flight types and flexible search parameters for efficient travel planning.",
  image: "https://github.com/ravinahp.png",
  actions: [],
  githubUrl: "https://github.com/ravinahp/flights-mcp",
  _varName: "findFlightsMcpServerPlugin",
};

const projectContentServerPlugin: Plugin = {
  id: "qmqbqlz2c4",
  name: "Project Content Server",
  description:
    "An MCP server that provides access to project files and their contents, allowing users to retrieve file data from specified project directories with error handling and configuration options.",
  image: "https://github.com/MaheshDoiphode.png",
  actions: [
    {
      name: "latest_project_data",
      description: "Get latest project data including file names and contents",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project directory",
          required: true,
        },
      ],
    },
  ],
  githubUrl:
    "https://github.com/MaheshDoiphode/mcp-cline-project-content-server",
  _varName: "projectContentServerPlugin",
};

const mcptenkiPlugin: Plugin = {
  id: "jbl3sfsi9r",
  name: "mcp-tenki",
  description: "Get weather of Japan",
  image: "https://github.com/acxelerator.png",
  actions: [],
  githubUrl: "https://github.com/acxelerator/mcp-tenki",
  _varName: "mcptenkiPlugin",
};

const transistorMcpServerPlugin: Plugin = {
  id: "xyvobqi3am",
  name: "Transistor MCP Server",
  description:
    "Facilitates interaction with the Transistor.fm API, offering capabilities to manage podcasts, episodes, and access analytics efficiently.",
  image: "https://github.com/gxjansen.png",
  actions: [],
  githubUrl: "https://github.com/gxjansen/Transistor-MCP",
  _varName: "transistorMcpServerPlugin",
};

const duckDuckMcpPlugin: Plugin = {
  id: "c0qz8cvfpi",
  name: "Duck Duck MCP",
  description:
    "This MCP server utilizes DuckDuckGo for web searches, providing structured search results with metadata and features like smart content classification and language detection, facilitating easy integration with AI clients supporting the MCP protocol.",
  image: "https://github.com/qwang07.png",
  actions: [
    {
      name: "search",
      description: "Search the web using DuckDuckGo",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qwang07/duck-duck-mcp",
  _varName: "duckDuckMcpPlugin",
};

const mcpRandPlugin: Plugin = {
  id: "ccd6b0hni8",
  name: "MCP Rand",
  description:
    "Provides random number generation utilities, including a secure UUID generator powered by Node's crypto module.",
  image: "https://github.com/turlockmike.png",
  actions: [
    {
      name: "generate_uuid",
      description: "Generate a random UUID v4",
      parameters: [],
    },
    {
      name: "generate_random_number",
      description: "Generate a random number within a specified range",
      parameters: [
        {
          name: "max",
          type: "number",
          description: "Maximum value (inclusive). Defaults to 100.",
          required: false,
        },
        {
          name: "min",
          type: "number",
          description: "Minimum value (inclusive). Defaults to 0.",
          required: false,
        },
      ],
    },
    {
      name: "generate_gaussian",
      description:
        "Generate a random number following a Gaussian (normal) distribution between 0 and 1",
      parameters: [],
    },
    {
      name: "generate_string",
      description:
        "Generate a random string with specified length and character set",
      parameters: [
        {
          name: "charset",
          type: "string",
          description:
            "Character set to use (alphanumeric, numeric, lowercase, uppercase, special). Defaults to alphanumeric.",
          required: false,
        },
        {
          name: "length",
          type: "number",
          description: "Length of the string to generate. Defaults to 10.",
          required: false,
        },
      ],
    },
    {
      name: "generate_password",
      description:
        "Generate a strong password with a mix of character types. WARNING: While this password is generated locally on your machine, it is recommended to use a dedicated password manager for generating and storing passwords securely.",
      parameters: [
        {
          name: "length",
          type: "number",
          description: "Password length (minimum 8, default 16)",
          required: false,
        },
      ],
    },
    {
      name: "roll_dice",
      description:
        'Roll a set of dice using standard dice notation (e.g., "2d6" for two six-sided dice, "3d6+5" for three six-sided dice plus 5)',
      parameters: [
        {
          name: "dice",
          type: "string array",
          description: "Array of dice to roll",
          required: true,
        },
      ],
    },
    {
      name: "draw_cards",
      description: "Draw cards from a standard deck of playing cards",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of cards to draw",
          required: true,
        },
        {
          name: "deckState",
          type: "string",
          description:
            "Optional base64 encoded string representing the current deck state",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/turlockmike/mcp-rand",
  _varName: "mcpRandPlugin",
};

const googleDriveMcpServer1Plugin: Plugin = {
  id: "lgoestmwtn",
  name: "Google Drive MCP Server",
  description:
    "Enables integration with Google Drive for listing, reading, and searching over files, supporting various file types with automatic export for Google Workspace files.",
  image: "https://github.com/felores.png",
  actions: [],
  githubUrl: "https://github.com/felores/gdrive-mcp-server",
  _varName: "googleDriveMcpServer1Plugin",
};

const mcp2bravePlugin: Plugin = {
  id: "vcwtdnw42n",
  name: "MCP2Brave",
  description:
    "A server based on the MCP protocol that uses the Brave API for web search functionality.",
  image: "https://github.com/mcp2everything.png",
  actions: [
    {
      name: "search_brave_with_summary",
      description: "Search the web using Brave Search API ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "brave_search_summary",
      description: "使用Brave搜索引擎搜索网络信息",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_url_content_direct",
      description:
        "Get webpage content directly using HTTP request\n    \n    Args:\n        url (str): The URL to fetch content from\n        \n    Returns:\n        str: The webpage content and metadata\n    ",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "url_content",
      description:
        "直接获取网页内容\n    \n    参数:\n        url (str): 目标网页地址\n        \n    返回:\n        str: 网页内容和元数据\n    ",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "search_news",
      description:
        "Search news using Brave News API\n    \n    Args:\n        query (str): The search query for news\n        \n    Returns:\n        str: News search results including titles, sources, dates and descriptions\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "search_news_info",
      description:
        "使用Brave新闻API搜索新闻\n    \n    参数:\n        query (str): 新闻搜索关键词\n        \n    返回:\n        str: 新闻搜索结果，包含标题、来源、日期和描述\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mcp2everything/mcp2brave",
  _varName: "mcp2bravePlugin",
};

const mcpTodoChecklistServerPlugin: Plugin = {
  id: "z3gwefnnwr",
  name: "MCP TODO Checklist Server",
  description:
    "A server that implements a checklist management system with features like task creation, progress tracking, data persistence, and item comments.",
  image: "https://github.com/hevener10.png",
  actions: [
    {
      name: "todo_show",
      description: "Mostra os detalhes de uma lista específica",
      parameters: [
        {
          name: "listTitle",
          type: "string",
          description: "Título da lista",
          required: true,
        },
      ],
    },
    {
      name: "todo_complete",
      description: "Marca uma tarefa como concluída",
      parameters: [
        {
          name: "listTitle",
          type: "string",
          description: "Título da lista",
          required: true,
        },
        {
          name: "taskTitle",
          type: "string",
          description: "Título da tarefa",
          required: true,
        },
      ],
    },
    {
      name: "todo_create",
      description: "Cria uma nova lista de tarefas",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Descrição da lista (opcional)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Título da lista",
          required: true,
        },
      ],
    },
    {
      name: "todo_add",
      description: "Adiciona uma nova tarefa à lista",
      parameters: [
        {
          name: "dueDate",
          type: "string",
          description: "Data de vencimento (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "listTitle",
          type: "string",
          description: "Título da lista",
          required: true,
        },
        {
          name: "priority",
          type: "string",
          description: "Prioridade da tarefa",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags da tarefa",
          required: false,
        },
        {
          name: "taskTitle",
          type: "string",
          description: "Título da tarefa",
          required: true,
        },
      ],
    },
    {
      name: "todo_list",
      description: "Lista todas as listas de tarefas",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/hevener10/mcp-todo-checklist",
  _varName: "mcpTodoChecklistServerPlugin",
};

const sandboxMcpServerPlugin: Plugin = {
  id: "t3aw07q2a3",
  name: "Sandbox MCP Server",
  description:
    "Provides isolated Docker environments for code execution, enabling users to create and manage containers, execute multi-language code, save and reproduce development environments, ensuring security and isolation.",
  image: "https://github.com/Tsuchijo.png",
  actions: [],
  githubUrl: "https://github.com/Tsuchijo/sandbox-mcp",
  _varName: "sandboxMcpServerPlugin",
};

const usescraperMcpServerPlugin: Plugin = {
  id: "oqq8he02cy",
  name: "UseScraper MCP Server",
  description:
    "A TypeScript-based MCP server utilizing the UseScraper API to provide web scraping capabilities, allowing users to extract content from webpages in various formats.",
  image: "https://github.com/tanevanwifferen.png",
  actions: [
    {
      name: "scrape",
      description: "Scrape content from a webpage using UseScraper API",
      parameters: [
        {
          name: "advanced_proxy",
          type: "boolean",
          description:
            "Use advanced proxy to circumvent bot detection (default: false)",
          required: false,
        },
        {
          name: "extract_object",
          type: "object",
          description: "Optional object specifying data to extract",
          required: false,
        },
        {
          name: "format",
          type: "string",
          description:
            "Format to save crawled page content. Strongly recommended to keep as markdown for optimal AI processing (default: markdown)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to scrape",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tanevanwifferen/usescraper-mcp-server",
  _varName: "usescraperMcpServerPlugin",
};

const jiraMcpServer3Plugin: Plugin = {
  id: "q659niazed",
  name: "JIRA MCP Server",
  description:
    "Provides an interface to access and manage JIRA data through the Model Context Protocol, offering features like relationship tracking, data cleaning, and contextual insights for AI applications.",
  image: "https://github.com/cosmix.png",
  actions: [],
  githubUrl: "https://github.com/cosmix/jira-mcp",
  _varName: "jiraMcpServer3Plugin",
};

const finnhubMcpServerPlugin: Plugin = {
  id: "p2fn8f0ihn",
  name: "Finnhub MCP Server",
  description:
    "This server provides an interface with the Finnhub API, enabling users to obtain the latest market news, stock market data, basic financials, and recommendation trends for specific stocks.",
  image: "https://github.com/catherinedparnell.png",
  actions: [],
  githubUrl: "https://github.com/catherinedparnell/mcp-finnhub",
  _varName: "finnhubMcpServerPlugin",
};

const itermMcpServerPlugin: Plugin = {
  id: "h89lr05ty6",
  name: "iTerm MCP Server",
  description:
    "This MCP server enables users to execute shell commands in the current iTerm2 session through integration with Claude Desktop, facilitating seamless command execution via the Model Context Protocol.",
  image: "https://github.com/ferrislucas.png",
  actions: [
    {
      name: "write_to_terminal",
      description:
        "Writes text to the active iTerm terminal - often used to run a command in the terminal",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "The command to run or text to write to the terminal",
          required: true,
        },
      ],
    },
    {
      name: "read_terminal_output",
      description: "Reads the output from the active iTerm terminal",
      parameters: [
        {
          name: "linesOfOutput",
          type: "number",
          description: "The number of lines of output to read.",
          required: true,
        },
      ],
    },
    {
      name: "send_control_character",
      description:
        "Sends a control character to the active iTerm terminal (e.g., Control-C)",
      parameters: [
        {
          name: "letter",
          type: "string",
          description:
            "The letter corresponding to the control character (e.g., 'C' for Control-C)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ferrislucas/iterm-mcp",
  _varName: "itermMcpServerPlugin",
};

const googleHomeMcpServerPlugin: Plugin = {
  id: "8gner2riks",
  name: "Google Home MCP Server",
  description:
    "Enables users to control Google Home smart plugs using the Smart Home API with OAuth2 authentication, offering real-time device state management and control operations.",
  image: "https://github.com/jmagar.png",
  actions: [],
  githubUrl: "https://github.com/jmagar/ghome-mcp-server",
  _varName: "googleHomeMcpServerPlugin",
};

const codeSnippetServerPlugin: Plugin = {
  id: "qt4j367mfk",
  name: "Code Snippet Server",
  description:
    "A MCP server for managing and storing code snippets in various programming languages, allowing users to create, list, and delete snippets via a standardized interface.",
  image: "https://github.com/ngeojiajun.png",
  actions: [
    {
      name: "create_snippet",
      description: "Create a snippet (specify title, language, and code)",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Code snippet",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description: "Programming language",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Snippet tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Snippet title",
          required: true,
        },
      ],
    },
    {
      name: "list_snippets",
      description: "List snippets (can filter by language or tags)",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Filter by specific language",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "Filter by specific tag",
          required: false,
        },
      ],
    },
    {
      name: "delete_snippet",
      description: "Delete a snippet (specify ID)",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of snippet to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ngeojiajun/mcp-code-snippets",
  _varName: "codeSnippetServerPlugin",
};

const matlabMcpServer1Plugin: Plugin = {
  id: "tf2154y420",
  name: "MATLAB MCP Server",
  description:
    "Allows interaction with MATLAB by creating and executing scripts and functions through Claude or other MCP clients, supporting script management and execution result retrieval with environment configuration capabilities.",
  image: "https://github.com/Tsuchijo.png",
  actions: [],
  githubUrl: "https://github.com/Tsuchijo/matlab-mcp",
  _varName: "matlabMcpServer1Plugin",
};

const twitterMcpServer3Plugin: Plugin = {
  id: "qlfiuj6xn6",
  name: "Twitter MCP Server",
  description:
    "Enables interaction with Twitter through a Model Context Protocol, allowing large language models to post tweets, search for tweets, and reply to tweets.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "postTweet",
      description: "Post a tweet to Twitter",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The text of the tweet",
          required: true,
        },
      ],
    },
    {
      name: "postTweetWithMedia",
      description: "Post a tweet with media attachment to Twitter",
      parameters: [
        {
          name: "altText",
          type: "string",
          description: "Alternative text for the media (accessibility)",
          required: false,
        },
        {
          name: "mediaPath",
          type: "string",
          description: "Local file path to the media to upload",
          required: true,
        },
        {
          name: "mediaType",
          type: "string",
          description: "MIME type of the media file",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The text of the tweet",
          required: true,
        },
      ],
    },
    {
      name: "likeTweet",
      description: "Like a tweet by its ID",
      parameters: [
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to like",
          required: true,
        },
      ],
    },
    {
      name: "unlikeTweet",
      description: "Unlike a previously liked tweet",
      parameters: [
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to unlike",
          required: true,
        },
      ],
    },
    {
      name: "getLikedTweets",
      description: "Get a list of tweets liked by a user",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "The maximum number of results to return (default: 100, max: 100)",
          required: false,
        },
        {
          name: "tweetFields",
          type: "string array",
          description: "Additional tweet fields to include in the response",
          required: false,
        },
        {
          name: "userId",
          type: "string",
          description: "The ID of the user whose likes to fetch",
          required: true,
        },
      ],
    },
    {
      name: "searchTweets",
      description: "Search for tweets using a query string",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
        {
          name: "tweetFields",
          type: "string array",
          description: "Fields to include in the tweet objects",
          required: false,
        },
      ],
    },
    {
      name: "replyToTweet",
      description: "Reply to a tweet",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The text of the reply",
          required: true,
        },
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to reply to",
          required: true,
        },
      ],
    },
    {
      name: "getUserTimeline",
      description: "Get recent tweets from a user timeline",
      parameters: [
        {
          name: "expansions",
          type: "string array",
          description: "Additional fields to expand in the response",
          required: false,
        },
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "tweetFields",
          type: "string array",
          description: "Fields to include in the tweet objects",
          required: false,
        },
        {
          name: "userFields",
          type: "string array",
          description: "User fields to include in the response",
          required: false,
        },
        {
          name: "userId",
          type: "string",
          description: "The ID of the user",
          required: true,
        },
      ],
    },
    {
      name: "getTweetById",
      description: "Get a tweet by its ID",
      parameters: [
        {
          name: "tweetFields",
          type: "string array",
          description: "Fields to include in the tweet object",
          required: false,
        },
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet",
          required: true,
        },
      ],
    },
    {
      name: "getUserInfo",
      description: "Get information about a Twitter user",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "The username of the user",
          required: true,
        },
      ],
    },
    {
      name: "getTweetsByIds",
      description: "Get multiple tweets by their IDs",
      parameters: [
        {
          name: "tweetFields",
          type: "string array",
          description: "Additional tweet fields to include in the response",
          required: false,
        },
        {
          name: "tweetIds",
          type: "string array",
          description: "Array of tweet IDs to fetch",
          required: true,
        },
      ],
    },
    {
      name: "retweet",
      description: "Retweet a tweet by its ID",
      parameters: [
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to retweet",
          required: true,
        },
      ],
    },
    {
      name: "undoRetweet",
      description: "Undo a retweet by its ID",
      parameters: [
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to un-retweet",
          required: true,
        },
      ],
    },
    {
      name: "getRetweets",
      description: "Get a list of retweets of a tweet",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "The maximum number of results to return (default: 100, max: 100)",
          required: false,
        },
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to get retweets for",
          required: true,
        },
        {
          name: "userFields",
          type: "string array",
          description: "Additional user fields to include in the response",
          required: false,
        },
      ],
    },
    {
      name: "followUser",
      description: "Follow a user by their username",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "The username of the user to follow",
          required: true,
        },
      ],
    },
    {
      name: "unfollowUser",
      description: "Unfollow a user by their username",
      parameters: [
        {
          name: "username",
          type: "string",
          description: "The username of the user to unfollow",
          required: true,
        },
      ],
    },
    {
      name: "getFollowers",
      description: "Get followers of a user",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of followers to return",
          required: false,
        },
        {
          name: "userFields",
          type: "string array",
          description: "Fields to include in the user objects",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "The username of the account",
          required: true,
        },
      ],
    },
    {
      name: "getFollowing",
      description: "Get a list of users that a user is following",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description:
            "The maximum number of results to return (default: 100, max: 1000)",
          required: false,
        },
        {
          name: "userFields",
          type: "string array",
          description: "Additional user fields to include in the response",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "The username of the user whose following list to fetch",
          required: true,
        },
      ],
    },
    {
      name: "createList",
      description: "Create a new Twitter list",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "A description of the list",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The name of the list",
          required: true,
        },
        {
          name: "private",
          type: "boolean",
          description: "Whether the list should be private",
          required: false,
        },
      ],
    },
    {
      name: "addUserToList",
      description: "Add a user to a Twitter list",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "The ID of the list",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "The username of the user to add",
          required: true,
        },
      ],
    },
    {
      name: "removeUserFromList",
      description: "Remove a user from a Twitter list",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "The ID of the list",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "The username of the user to remove",
          required: true,
        },
      ],
    },
    {
      name: "getListMembers",
      description: "Get members of a Twitter list",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "The ID of the list",
          required: true,
        },
        {
          name: "maxResults",
          type: "number",
          description:
            "The maximum number of results to return (default: 100, max: 100)",
          required: false,
        },
        {
          name: "userFields",
          type: "string array",
          description: "Additional user fields to include in the response",
          required: false,
        },
      ],
    },
    {
      name: "getUserLists",
      description: "Get lists owned by a user",
      parameters: [
        {
          name: "listFields",
          type: "string array",
          description: "Additional list fields to include in the response",
          required: false,
        },
        {
          name: "maxResults",
          type: "number",
          description:
            "The maximum number of results to return (default: 100, max: 100)",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "The username of the user whose lists to fetch",
          required: true,
        },
      ],
    },
    {
      name: "getHashtagAnalytics",
      description: "Get analytics for a specific hashtag",
      parameters: [
        {
          name: "endTime",
          type: "string",
          description: "End time for the analysis (ISO 8601)",
          required: false,
        },
        {
          name: "hashtag",
          type: "string",
          description: "The hashtag to analyze (with or without #)",
          required: true,
        },
        {
          name: "startTime",
          type: "string",
          description: "Start time for the analysis (ISO 8601)",
          required: false,
        },
      ],
    },
    {
      name: "deleteTweet",
      description: "Delete a tweet by its ID",
      parameters: [
        {
          name: "tweetId",
          type: "string",
          description: "The ID of the tweet to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-twitter-server",
  _varName: "twitterMcpServer3Plugin",
};

const metalMcpServerPlugin: Plugin = {
  id: "1qadqxjnu6",
  name: "Metal MCP Server",
  description:
    "Enables interaction with the Metal Framework by providing documentation search and code generation capabilities using natural language queries.",
  image: "https://github.com/aldrin-labs.png",
  actions: [
    {
      name: "search_metal_docs",
      description:
        "Search Metal Framework documentation and code examples using natural language queries",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Natural language query about Metal Framework",
          required: true,
        },
      ],
    },
    {
      name: "generate_metal_code",
      description: "Generate Metal Framework code for common tasks",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Programming language (objective-c, swift, or metal)",
          required: false,
        },
        {
          name: "task",
          type: "string",
          description: "Description of the Metal task to generate code for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aldrin-labs/metal-mcp-server",
  _varName: "metalMcpServerPlugin",
};

const secondOpinionMcpServerPlugin: Plugin = {
  id: "klbxlpz1vu",
  name: "Second Opinion MCP Server",
  description:
    "Provides AI-powered assistance for coding problems using Google's Gemini AI, combined with Perplexity insights and Stack Overflow references, facilitating contextual analysis and automatic response archiving for improved troubleshooting.",
  image: "https://github.com/PoliTwit1984.png",
  actions: [],
  githubUrl: "https://github.com/PoliTwit1984/second-opinion-mcp-server",
  _varName: "secondOpinionMcpServerPlugin",
};

const sequentialThinkingMcpServerPlugin: Plugin = {
  id: "m83dfy8feg",
  name: "Sequential Thinking MCP Server",
  description:
    "This server facilitates structured problem-solving by breaking down complex issues into sequential steps, supporting revisions, and enabling multiple solution paths through full MCP integration.",
  image: "https://github.com/arben-adm.png",
  actions: [
    {
      name: "sequential_thinking",
      description:
        '\n        An advanced tool for dynamic and reflective problem-solving through structured thoughts.\n        \n        Args:\n            thought: The content of the current thought\n            thought_number: Current position in the sequence\n            total_thoughts: Expected total number of thoughts\n            next_thought_needed: Whether another thought should follow\n            stage: Current thinking stage (e.g., "Problem Definition", "Analysis")\n            is_revision: Whether this revises a previous thought\n            revises_thought: Number of thought being revised\n            branch_from_thought: Starting point for a new thought branch\n            branch_id: Identifier for the current branch\n            needs_more_thoughts: Whether additional thoughts are needed\n            score: Quality score (0.0 to 1.0)\n            tags: Categories or labels for the thought\n            \n        Returns:\n            JSON string containing thought analysis and metadata\n        ',
      parameters: [
        {
          name: "branch_from_thought",
          type: "string",
          description: "Parameter: branch_from_thought",
          required: false,
        },
        {
          name: "branch_id",
          type: "string",
          description: "Parameter: branch_id",
          required: false,
        },
        {
          name: "is_revision",
          type: "string",
          description: "Parameter: is_revision",
          required: false,
        },
        {
          name: "needs_more_thoughts",
          type: "string",
          description: "Parameter: needs_more_thoughts",
          required: false,
        },
        {
          name: "next_thought_needed",
          type: "boolean",
          description: "Parameter: next_thought_needed",
          required: true,
        },
        {
          name: "revises_thought",
          type: "string",
          description: "Parameter: revises_thought",
          required: false,
        },
        {
          name: "score",
          type: "string",
          description: "Parameter: score",
          required: false,
        },
        {
          name: "stage",
          type: "string",
          description: "Parameter: stage",
          required: true,
        },
        {
          name: "tags",
          type: "string",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Parameter: thought",
          required: true,
        },
        {
          name: "thought_number",
          type: "integer",
          description: "Parameter: thought_number",
          required: true,
        },
        {
          name: "total_thoughts",
          type: "integer",
          description: "Parameter: total_thoughts",
          required: true,
        },
      ],
    },
    {
      name: "get_thinking_summary",
      description:
        "\n        Generate a comprehensive summary of the entire thinking process.\n        \n        Returns:\n            JSON string containing analysis of thought history\n        ",
      parameters: [],
    },
    {
      name: "clear_thinking_history",
      description:
        "\n        Clear all recorded thoughts and reset the server state.\n        \n        Returns:\n            Confirmation message\n        ",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/arben-adm/mcp-sequential-thinking",
  _varName: "sequentialThinkingMcpServerPlugin",
};

const elasticsearchMcpServer1Plugin: Plugin = {
  id: "b3po3delex",
  name: "Elasticsearch MCP Server",
  description:
    "Facilitates interaction with Elasticsearch clusters by allowing users to perform index operations, document searches, and cluster management via a Model Context Protocol server and natural language commands.",
  image: "https://github.com/cr7258.png",
  actions: [
    {
      name: "list_indices",
      description: "List all indices in the Elasticsearch cluster",
      parameters: [],
    },
    {
      name: "get_mapping",
      description: "Get index mapping",
      parameters: [
        {
          name: "index",
          type: "string",
          description: "Parameter: index",
          required: true,
        },
      ],
    },
    {
      name: "get_settings",
      description: "Get index settings",
      parameters: [
        {
          name: "index",
          type: "string",
          description: "Parameter: index",
          required: true,
        },
      ],
    },
    {
      name: "search_documents",
      description: "Search documents in an index with a custom query",
      parameters: [
        {
          name: "body",
          type: "object",
          description: "Parameter: body",
          required: true,
        },
        {
          name: "index",
          type: "string",
          description: "Parameter: index",
          required: true,
        },
      ],
    },
    {
      name: "get_cluster_health",
      description: "Get cluster health status",
      parameters: [],
    },
    {
      name: "get_cluster_stats",
      description: "Get cluster statistics",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/cr7258/elasticsearch-mcp-server",
  _varName: "elasticsearchMcpServer1Plugin",
};

const zigMcpServerPlugin: Plugin = {
  id: "oxiw2bsb15",
  name: "Zig MCP Server",
  description:
    "Provides Zig language tooling and code analysis, enhancing AI capabilities with Zig-specific functions like code optimization, compute unit estimation, code generation, and recommendations for best practices.",
  image: "https://github.com/openSVM.png",
  actions: [
    {
      name: "optimize_code",
      description: "Optimize Zig code for better performance",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Zig code to optimize",
          required: true,
        },
        {
          name: "optimizationLevel",
          type: "string",
          description: "Optimization level to target",
          required: false,
        },
      ],
    },
    {
      name: "estimate_compute_units",
      description: "Estimate computational complexity and resource usage",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Zig code to analyze",
          required: true,
        },
      ],
    },
    {
      name: "generate_code",
      description: "Generate Zig code from natural language description",
      parameters: [
        {
          name: "context",
          type: "string",
          description: "Additional context or requirements",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Natural language description of desired code",
          required: true,
        },
      ],
    },
    {
      name: "get_recommendations",
      description: "Get code improvement recommendations and best practices",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Zig code to analyze",
          required: true,
        },
        {
          name: "prompt",
          type: "string",
          description: "Natural language query for specific recommendations",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/openSVM/zig-mcp-server",
  _varName: "zigMcpServerPlugin",
};

const mcpTraderServerPlugin: Plugin = {
  id: "q72cuft5gh",
  name: "MCP Trader Server",
  description:
    "The MCP Trader Server conducts comprehensive technical analysis on stocks, offering insights into trends, momentum indicators, volatility metrics, and volume analysis to support stock trading decisions.",
  image: "https://github.com/wshobson.png",
  actions: [],
  githubUrl: "https://github.com/wshobson/mcp-trader",
  _varName: "mcpTraderServerPlugin",
};

const mcpflowisePlugin: Plugin = {
  id: "h3cdir1w9a",
  name: "mcp-flowise",
  description:
    "The Flowise MCP Server enables clients to list chatflows and call predictions, integrating seamlessly with DIY Flowise or Flowise Cloud accounts. It provides a simple interface for executing chatflows/assistants predictions with existing Flowise configurations.",
  image: "https://github.com/matthewhand.png",
  actions: [],
  githubUrl: "https://github.com/matthewhand/mcp-flowise",
  _varName: "mcpflowisePlugin",
};

const mcpserverchatsumPlugin: Plugin = {
  id: "acahzjtv6h",
  name: "mcp-server-chatsum",
  description: "Summarizes your chat messages.",
  image: "https://github.com/chatmcp.png",
  actions: [
    {
      name: "query_chat_messages",
      description: "query chat messages with given parameters",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "chat messages limit",
          required: false,
        },
        {
          name: "room_names",
          type: "string array",
          description: "chat room names",
          required: false,
        },
        {
          name: "talker_names",
          type: "string array",
          description: "talker names",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/chatmcp/mcp-server-chatsum",
  _varName: "mcpserverchatsumPlugin",
};

const mcpservercollectorPlugin: Plugin = {
  id: "akyjs073rw",
  name: "mcp-server-collector",
  description: "A MCP Server used to collect MCP Servers over the internet.",
  image: "https://github.com/chatmcp.png",
  actions: [
    {
      name: "extract-mcp-servers-from-url",
      description: "Extract MCP Servers from a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "extract-mcp-servers-from-content",
      description: "Extract MCP Servers from given content",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "content containing mcp servers",
          required: true,
        },
      ],
    },
    {
      name: "submit-mcp-server",
      description: "Submit MCP Server to MCP Servers Directory like mcp.so",
      parameters: [
        {
          name: "avatar_url",
          type: "string",
          description: "avatar URL of the MCP Server to submit",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the MCP Server to submit",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/chatmcp/mcp-server-collector",
  _varName: "mcpservercollectorPlugin",
};

const confluenceMcpServerPlugin: Plugin = {
  id: "mp9zjz01wb",
  name: "Confluence MCP Server",
  description:
    "Enables AI assistants to interact with Confluence Cloud for managing spaces, pages, and content via the Model Context Protocol (MCP).",
  image: "https://github.com/aaronsb.png",
  actions: [],
  githubUrl: "https://github.com/aaronsb/confluence-cloud-mcp",
  _varName: "confluenceMcpServerPlugin",
};

const loxoMcpServerPlugin: Plugin = {
  id: "rj00ooup46",
  name: "Loxo MCP Server",
  description:
    "Enables interaction with the Loxo recruitment platform API, facilitating tasks such as candidate and job management, activity logging, and call queue management through AI assistants.",
  image: "https://github.com/tbensonwest.png",
  actions: [
    {
      name: "get-activity-types",
      description: "Get a list of activity types from Loxo",
      parameters: [],
    },
    {
      name: "spark-search-activity-types",
      description: "Get a list of activity types from Spark Search",
      parameters: [],
    },
    {
      name: "get-todays-tasks",
      description: "Get all tasks and scheduled activities for today",
      parameters: [],
    },
    {
      name: "get-call-queue",
      description: "Get the current call queue",
      parameters: [],
    },
    {
      name: "add-to-call-queue",
      description: "Add a candidate or contact to the call queue",
      parameters: [
        {
          name: "entity_id",
          type: "string",
          description: "ID of the candidate or contact",
          required: true,
        },
        {
          name: "entity_type",
          type: "string",
          description: "Type of entity (candidate or contact)",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "Notes about why this call is needed",
          required: false,
        },
        {
          name: "priority",
          type: "string",
          description: "Priority level for the call",
          required: false,
        },
      ],
    },
    {
      name: "schedule-activity",
      description: "Schedule a future activity (like a call or meeting)",
      parameters: [
        {
          name: "activity_type_id",
          type: "string",
          description: "ID of the activity type",
          required: true,
        },
        {
          name: "entity_id",
          type: "string",
          description: "ID of the entity",
          required: true,
        },
        {
          name: "entity_type",
          type: "string",
          description: "Type of entity (candidate, contact, job)",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "Notes about the scheduled activity",
          required: false,
        },
        {
          name: "scheduled_for",
          type: "string",
          description: "ISO datetime when the activity should occur",
          required: true,
        },
      ],
    },
    {
      name: "search-candidates",
      description: "Search for candidates in Loxo with specific criteria",
      parameters: [
        {
          name: "company",
          type: "string",
          description: "Company name to search for (optional)",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number for pagination",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "General search query (optional)",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Job title to search for (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get-candidate",
      description: "Get detailed information about a specific candidate",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Candidate ID",
          required: true,
        },
      ],
    },
    {
      name: "search-jobs",
      description: "Search for jobs in Loxo",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number for pagination",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query for jobs",
          required: true,
        },
      ],
    },
    {
      name: "get-job",
      description: "Get detailed information about a specific job",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Job ID",
          required: true,
        },
      ],
    },
    {
      name: "add-note",
      description: "Add a note to a candidate or job",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content of the note",
          required: true,
        },
        {
          name: "entity_id",
          type: "string",
          description: "ID of the entity",
          required: true,
        },
        {
          name: "entity_type",
          type: "string",
          description: "Type of entity (candidate or job)",
          required: true,
        },
      ],
    },
    {
      name: "log-activity",
      description: "Log an activity for a candidate or job",
      parameters: [
        {
          name: "activity_type_id",
          type: "string",
          description: "ID of the activity type",
          required: true,
        },
        {
          name: "entity_id",
          type: "string",
          description: "ID of the entity",
          required: true,
        },
        {
          name: "entity_type",
          type: "string",
          description: "Type of entity (candidate or job)",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "Notes about the activity",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tbensonwest/loxo-mcp-server",
  _varName: "loxoMcpServerPlugin",
};

const mcpNmapServerPlugin: Plugin = {
  id: "4yj1if5lxy",
  name: "MCP NMAP Server",
  description:
    "Enables AI assistants to perform network scanning operations using NMAP, offering a standardized interface for network analysis and security assessments through AI conversations.",
  image: "https://github.com/PhialsBasement.png",
  actions: [],
  githubUrl: "https://github.com/PhialsBasement/nmap-mcp-server",
  _varName: "mcpNmapServerPlugin",
};

const emailCheckerMcpServerPlugin: Plugin = {
  id: "6gnoi1heh5",
  name: "Email Checker MCP Server",
  description:
    "Enables users to validate the existence of email addresses through a simple FastMCP tool, offering JSON responses without requiring an API key.",
  image: "https://github.com/ravinahp.png",
  actions: [
    {
      name: "verify_email",
      description:
        '\n    Verify an email address using the 2ip.me API.\n\n    Args:\n        email (str): The email address to verify\n\n    Returns:\n        str: "true" or "false" indicating if the email is valid\n    ',
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Parameter: email",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ravinahp/email-checker-mcp",
  _varName: "emailCheckerMcpServerPlugin",
};

const mcpWebscanServerPlugin: Plugin = {
  id: "u0tna3hemh",
  name: "MCP Webscan Server",
  description:
    "Enables web content scanning and analysis by fetching, analyzing, and extracting information from web pages using tools like page fetching, link extraction, site crawling, and more.",
  image: "https://github.com/bsmi021.png",
  actions: [
    {
      name: "extract-links",
      description:
        "Extract and analyze all hyperlinks from a web page, organizing them into a structured format with URLs, anchor text, and contextual information. Performance-optimized with stream processing and worker threads for efficient handling of large pages. Works with either a direct URL or raw HTML content. Handles relative and absolute URLs properly by supporting an optional base URL parameter. Results can be limited to prevent overwhelming output for link-dense pages. Returns a comprehensive link inventory that includes destination URLs, link text, titles (if available), and whether links are internal or external to the source domain. Useful for site mapping, content analysis, broken link checking, SEO analysis, and as a preparatory step for targeted crawling operations.",
      parameters: [
        {
          name: "baseUrl",
          type: "string",
          description: "Parameter: baseUrl",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "crawl-site",
      description: "Crawl a website and return a list of all the URLs found",
      parameters: [
        {
          name: "maxDepth",
          type: "number",
          description: "Parameter: maxDepth",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "check-links",
      description: "Check for broken links on a page",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "fetch-page",
      description: "Fetch a web page and convert it to Markdown",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "Parameter: selector",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "find-patterns",
      description: "Find all links that match a given pattern",
      parameters: [
        {
          name: "pattern",
          type: "string",
          description: "Parameter: pattern",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "generate-site-map",
      description: "Generate a sitemap for a website",
      parameters: [
        {
          name: "baseUrl",
          type: "string",
          description: "Parameter: baseUrl",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bsmi021/mcp-server-webscan",
  _varName: "mcpWebscanServerPlugin",
};

const systempromptMcpServerPlugin: Plugin = {
  id: "a0sgtzm6d1",
  name: "SystemPrompt MCP Server",
  description:
    "This TypeScript-based server implements a simple notes system, allowing users to create and manage text notes and generate summaries, showcasing core MCP concepts.",
  image: "https://github.com/Ejb503.png",
  actions: [],
  githubUrl: "https://github.com/Ejb503/systemprompt-mcp-core",
  _varName: "systempromptMcpServerPlugin",
};

const gleanMcpServerPlugin: Plugin = {
  id: "rpon0kf2gg",
  name: "Glean MCP Server",
  description:
    "An MCP server that integrates the Glean API to provide search results and chatbot interaction.",
  image: "https://github.com/longyi1207.png",
  actions: [],
  githubUrl: "https://github.com/longyi1207/glean-mcp-server",
  _varName: "gleanMcpServerPlugin",
};

const aiddMcpServerPlugin: Plugin = {
  id: "mpixtij6se",
  name: "AiDD MCP Server",
  description:
    "AiDD MCP Server provides a secure interface for AI agents to perform file system operations and code analysis, enhancing AI-assisted development workflows across multiple programming languages.",
  image: "https://github.com/skydeckai.png",
  actions: [
    {
      name: "get_allowed_directory",
      description:
        "Get the current working directory that this server is allowed to access.",
      parameters: [],
    },
    {
      name: "write_file",
      description:
        "Create a new file or overwrite an existing file with new content. Use this to save changes, create new files, or update existing ones. Use with caution as it will overwrite existing files without warning. Path must be relative to the allowed directory. Creates parent directories if needed. Example: Path='notes.txt', Content='Meeting notes for project X'",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path where to write the file",
          required: true,
        },
      ],
    },
    {
      name: "update_allowed_directory",
      description:
        "Change the working directory that this server is allowed to access. Use this to switch between different projects.",
      parameters: [
        {
          name: "directory",
          type: "string",
          description:
            "Directory to allow access to. Must be an absolute path. Use ~ to refer to the user's home directory.",
          required: true,
        },
      ],
    },
    {
      name: "create_directory",
      description:
        "Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Useful for setting up project structure or organizing files. Only works within the allowed directory. Example: Enter 'src/components' to create nested directories.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path of the directory to create",
          required: true,
        },
      ],
    },
    {
      name: "edit_file",
      description:
        "Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within the allowed directory. Always use dryRun first to preview changes before applying them.",
      parameters: [
        {
          name: "dryRun",
          type: "boolean",
          description: "Preview changes without applying",
          required: false,
        },
        {
          name: "edits",
          type: "object array",
          description: "List of edit operations",
          required: true,
        },
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "File to edit",
          required: true,
        },
      ],
    },
    {
      name: "list_directory",
      description:
        "Get a detailed listing of files and directories in the specified path. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within the allowed directory. Example: Enter 'src' to list contents of the src directory, or '.' for current directory.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path of the directory to list",
          required: true,
        },
      ],
    },
    {
      name: "read_file",
      description:
        "Read the complete contents of a file from the file system. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Only works within the allowed directory.Example: Enter 'src/main.py' to read a Python file.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the file to read",
          required: true,
        },
      ],
    },
    {
      name: "read_multiple_files",
      description:
        "Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within the allowed directory.Example: Enter ['src/main.py', 'README.md'] to read both files.",
      parameters: [
        {
          name: "paths",
          type: "string array",
          description: "List of file paths to read",
          required: true,
        },
      ],
    },
    {
      name: "move_file",
      description:
        "Move or rename a file or directory to a new location. This tool can be used to reorganize files and directories. Both source and destination must be within the allowed directory. If the destination already exists, the operation will fail. Parent directories of the destination will be created if they don't exist. Example: source='old.txt', destination='new/path/new.txt'",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Destination path where to move the file or directory",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Source path of the file or directory to move",
          required: true,
        },
      ],
    },
    {
      name: "search_files",
      description:
        "Search for files and directories matching a pattern. The search is recursive and case-insensitive. Only searches within the allowed directory. Returns paths relative to the allowed directory. Searches in file and directory names, not content. For searching within file contents, use the tree_sitter_map tool which can locate specific code elements like functions and classes. Example: pattern='.py' finds all Python files, pattern='test' finds all items with 'test' in the name.",
      parameters: [
        {
          name: "include_hidden",
          type: "boolean",
          description:
            "Whether to include hidden files and directories (defaults to false)",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "Starting directory for the search (defaults to allowed directory)",
          required: false,
        },
        {
          name: "pattern",
          type: "string",
          description: "Pattern to search for in file and directory names",
          required: true,
        },
      ],
    },
    {
      name: "delete_file",
      description:
        "Delete a file or empty directory from the file system. Use with caution as this operation cannot be undone. For safety, this tool will not delete non-empty directories. Only works within the allowed directory. Example: path='old_file.txt' removes the specified file.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the file or empty directory to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_file_info",
      description:
        "Get detailed information about a file or directory. Returns size, creation time, modification time, access time, type (file/directory), and permissions. All times are in ISO 8601 format. This tool is perfect for understanding file characteristics without reading the actual content. Only works within the allowed directory. Example: path='src/main.py' returns details about main.py",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Path to the file or directory",
          required: true,
        },
      ],
    },
    {
      name: "directory_tree",
      description:
        "Get a recursive tree view of files and directories in the specified path as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within the allowed directory. Useful for understanding project structure. Example: Enter '.' for current directory, or 'src' for a specific directory.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Root directory to analyze",
          required: true,
        },
      ],
    },
    {
      name: "execute_code",
      description:
        "Execute arbitrary code in various programming languages on the user's local machine within the current working directory. Supported languages: python, javascript, ruby, php, go, rust. Always review the code carefully before execution to prevent unintended consequences. You MUST explicitly show the user the code that will be executed and get his confirmation before using this tool. Examples: - Python: code='print(sum(range(10)))'. - JavaScript: code='console.log(Array.from({length: 5}, (_, i) => i*2))'. - Ruby: code='puts (1..5).reduce(:+)'. ",
      parameters: [
        {
          name: "code",
          type: "string",
          description:
            "Code to execute on the user's local machine in the current working directory",
          required: true,
        },
        {
          name: "language",
          type: "string",
          description: "Programming language to use",
          required: true,
        },
        {
          name: "timeout",
          type: "integer",
          description: "Maximum execution time in seconds",
          required: false,
        },
      ],
    },
    {
      name: "execute_shell_script",
      description:
        "Execute a shell script (bash/sh) on the user's local machine within the current working directory. This tool can execute shell commands and scripts for system automation and management tasks. It is designed to perform tasks on the user's local environment, such as opening applications, installing packages and more. Always review the script carefully before execution to prevent unintended consequences. You MUST explicitly show the user the script that will be executed and get his confirmation before using this tool. Examples: - script='echo \"Current directory:\" && pwd'. - script='for i in {1..5}; do echo $i; done'. ",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "Shell script to execute on the user's local machine",
          required: true,
        },
        {
          name: "timeout",
          type: "integer",
          description:
            "Maximum execution time in seconds (default: 300, max: 600)",
          required: false,
        },
      ],
    },
    {
      name: "tree_sitter_map",
      description:
        "Build a tree-sitter based structural map of source code files. This tool analyzes code structure to identify classes, functions, and methods. Only analyzes files within the allowed directory. Useful for code analysis and understanding project structure. Example: Enter '.' to analyze all source files in current directory, or 'src' to analyze all files in the src directory.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Root directory to analyze",
          required: true,
        },
      ],
    },
    {
      name: "git_init",
      description:
        "Initialize a new Git repository. Creates a new Git repository in the specified directory. If the directory doesn't exist, it will be created. Directory must be within the allowed directory.",
      parameters: [
        {
          name: "initial_branch",
          type: "string",
          description: "Name of the initial branch (defaults to 'main')",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path where to initialize the repository",
          required: true,
        },
      ],
    },
    {
      name: "git_status",
      description:
        "Shows the working tree status of a git repository. Returns information about staged, unstaged, and untracked files. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_diff_unstaged",
      description:
        "Shows changes in working directory not yet staged for commit. Returns a unified diff format of all unstaged changes. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_diff_staged",
      description:
        "Shows changes staged for commit. Returns a unified diff format of all staged changes. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_diff",
      description:
        "Shows differences between branches or commits. Returns a unified diff format comparing current state with target. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description: "Target branch or commit to compare with",
          required: true,
        },
      ],
    },
    {
      name: "git_commit",
      description:
        "Records changes to the repository. Commits all staged changes with the provided message. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_add",
      description:
        "Adds file contents to the staging area. Stages specified files for the next commit. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "files",
          type: "string array",
          description: "List of file paths to stage",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_reset",
      description:
        "Unstages all staged changes. Removes all files from the staging area. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_log",
      description:
        "Shows the commit logs. Returns information about recent commits including hash, author, date, and message. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "max_count",
          type: "integer",
          description: "Maximum number of commits to show",
          required: false,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_create_branch",
      description:
        "Creates a new branch. Creates a new branch from the specified base branch or current HEAD. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "base_branch",
          type: "string",
          description: "Starting point for the new branch (optional)",
          required: false,
        },
        {
          name: "branch_name",
          type: "string",
          description: "Name of the new branch",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_checkout",
      description:
        "Switches branches. Checks out the specified branch. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "branch_name",
          type: "string",
          description: "Name of branch to checkout",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
      ],
    },
    {
      name: "git_show",
      description:
        "Shows the contents of a commit. Returns detailed information about a specific commit including the changes it introduced. Repository must be within the allowed directory.",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Path to git repository",
          required: true,
        },
        {
          name: "revision",
          type: "string",
          description: "The revision (commit hash, branch name, tag) to show",
          required: true,
        },
      ],
    },
    {
      name: "get_system_info",
      description:
        "Get detailed system information including OS, CPU, memory, disk, and network details (such as WiFi network name). This tool provides comprehensive information about the system environment. Also returns the current working directory (allowed directory) of the AiDD MCP server. Useful for system analysis, debugging, environment verification, and workspace management.",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/skydeckai/mcp-server-aidd",
  _varName: "aiddMcpServerPlugin",
};

const mcpclickhousePlugin: Plugin = {
  id: "yvjy4csvo1",
  name: "mcp-clickhouse",
  description:
    "ClickHouse database integration with schema inspection and query capabilities",
  image: "https://github.com/ClickHouse.png",
  actions: [
    {
      name: "list_databases",
      description: "Action for list_databases",
      parameters: [],
    },
    {
      name: "list_tables",
      description: "Action for list_tables",
      parameters: [
        {
          name: "database",
          type: "string",
          description: "Parameter: database",
          required: true,
        },
        {
          name: "like",
          type: "string",
          description: "Parameter: like",
          required: false,
        },
      ],
    },
    {
      name: "run_select_query",
      description: "Action for run_select_query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ClickHouse/mcp-clickhouse",
  _varName: "mcpclickhousePlugin",
};

const replicateMcpServerPlugin: Plugin = {
  id: "q60hq1hwtr",
  name: "Replicate MCP Server",
  description:
    "Enables users to access and manage Replicate's AI models and predictions via the Model Context Protocol, offering tools for creating, canceling, and retrieving model predictions and parameters.",
  image: "https://github.com/deepfates.png",
  actions: [
    {
      name: "search_models",
      description: "Search for models using semantic search",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "list_models",
      description: "List available models with optional filtering",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Filter by model owner",
          required: false,
        },
      ],
    },
    {
      name: "list_collections",
      description: "List available model collections",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "get_collection",
      description: "Get details of a specific collection",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Collection slug",
          required: true,
        },
      ],
    },
    {
      name: "create_prediction",
      description:
        "Create a new prediction using either a model version (for community models) or model name (for official models)",
      parameters: [
        {
          name: "input",
          type: "object",
          description: "Input parameters for the model",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "Model name to use (for official models)",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Model version ID to use (for community models)",
          required: false,
        },
        {
          name: "webhook_url",
          type: "string",
          description: "Optional webhook URL for notifications",
          required: false,
        },
      ],
    },
    {
      name: "cancel_prediction",
      description: "Cancel a running prediction",
      parameters: [
        {
          name: "prediction_id",
          type: "string",
          description: "ID of the prediction to cancel",
          required: true,
        },
      ],
    },
    {
      name: "get_prediction",
      description: "Get details about a specific prediction",
      parameters: [
        {
          name: "prediction_id",
          type: "string",
          description: "ID of the prediction to get details for",
          required: true,
        },
      ],
    },
    {
      name: "list_predictions",
      description: "List recent predictions",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of predictions to return",
          required: false,
        },
      ],
    },
    {
      name: "get_model",
      description:
        "Get details of a specific model including available versions",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Model name",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Model owner",
          required: true,
        },
      ],
    },
    {
      name: "view_image",
      description: "Display an image in the system's default web browser",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the image to display",
          required: true,
        },
      ],
    },
    {
      name: "clear_image_cache",
      description: "Clear the image viewer cache",
      parameters: [],
    },
    {
      name: "get_image_cache_stats",
      description: "Get statistics about the image cache",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/deepfates/mcp-replicate",
  _varName: "replicateMcpServerPlugin",
};

const mcplancedbPlugin: Plugin = {
  id: "o4jvc7co6v",
  name: "mcp-lancedb",
  description:
    "A Model Context Protocol (MCP) server that enables LLMs to interact directly the documents that they have on-disk through agentic RAG and hybrid search in LanceDB. Ask LLMs questions about the dataset as a whole or about specific documents.",
  image: "https://github.com/adiom-data.png",
  actions: [],
  githubUrl: "https://github.com/adiom-data/lance-mcp",
  _varName: "mcplancedbPlugin",
};

const cloudinaryMcpServerPlugin: Plugin = {
  id: "zjiw1ry8ly",
  name: "Cloudinary MCP Server",
  description:
    "This server provides tools for uploading images and videos directly to Cloudinary using Claude/Cline, facilitating resource management with customizable options like resource type and public ID.",
  image: "https://github.com/felores.png",
  actions: [
    {
      name: "upload",
      description:
        "Upload media (images/videos) to Cloudinary. For large files, the upload is processed in chunks and returns a streaming response. The uploaded asset will be available at:\n- HTTP: http://res.cloudinary.com/{cloud_name}/{resource_type}/upload/v1/{public_id}.{format}\n- HTTPS: https://res.cloudinary.com/{cloud_name}/{resource_type}/upload/v1/{public_id}.{format}\nwhere cloud_name='dadljfaoz', resource_type is 'image' or 'video', and format is determined by the file extension.",
      parameters: [
        {
          name: "file",
          type: "string",
          description: "Path to file, URL, or base64 data URI to upload",
          required: true,
        },
        {
          name: "overwrite",
          type: "boolean",
          description:
            "Whether to overwrite existing assets with the same public ID",
          required: false,
        },
        {
          name: "public_id",
          type: "string",
          description:
            "Public ID to assign to the uploaded asset. This will be used in the final URL. If not provided, Cloudinary will generate one.",
          required: false,
        },
        {
          name: "resource_type",
          type: "string",
          description:
            "Type of resource to upload. For videos, the upload will return a streaming response as it processes in chunks.",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags to assign to the uploaded asset",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/felores/cloudinary-mcp-server",
  _varName: "cloudinaryMcpServerPlugin",
};

const personalMcpServerPlugin: Plugin = {
  id: "iyfhc8k9fh",
  name: "Personal MCP Server",
  description:
    "A Model Context Protocol server for tracking personal health and well-being, offering tools for workout logging, nutrition management, and daily journaling with AI-assisted analysis integration.",
  image: "https://github.com/evangstav.png",
  actions: [],
  githubUrl: "https://github.com/evangstav/personal-mcp",
  _varName: "personalMcpServerPlugin",
};

const mcpBrowserTabsServerPlugin: Plugin = {
  id: "wze1kc6emp",
  name: "MCP Browser Tabs Server",
  description:
    "Enables interaction with Google Chrome tabs through the MCP protocol, allowing clients to retrieve information and control tabs on macOS using AppleScript.",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "get_tabs",
      description: "Get all open tabs from Google Chrome browser",
      parameters: [],
    },
    {
      name: "close_tab",
      description:
        "Close a specific tab in Google Chrome by window and tab index. When closing multiple tabs, start from the highest index numbers to avoid index shifting. After closing tabs, use get_tabs to confirm the changes.",
      parameters: [
        {
          name: "tabIndex",
          type: "integer",
          description: "Parameter: tabIndex",
          required: true,
        },
        {
          name: "windowIndex",
          type: "integer",
          description: "Parameter: windowIndex",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-browser-tabs",
  _varName: "mcpBrowserTabsServerPlugin",
};

const tavilySearchMcpAgentPlugin: Plugin = {
  id: "p0w4whs3l4",
  name: "Tavily Search MCP Agent",
  description:
    "This MCP server performs multi-topic searches in business, news, finance, and politics using the Tavily API, providing high-quality sources and intelligent summaries.",
  image: "https://github.com/arben-adm.png",
  actions: [
    {
      name: "comprehensive_search",
      description:
        "\n    Perform a comprehensive search across multiple topics using Tavily.\n    \n    Args:\n        query: The search query to research\n    ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/arben-adm/tavily-mcp-search",
  _varName: "tavilySearchMcpAgentPlugin",
};

const mcpExpertServerPlugin: Plugin = {
  id: "13bt2om5eq",
  name: "MCP Expert Server",
  description:
    "A Model Context Protocol server utilizing Claude AI for generating intelligent queries and offering documentation assistance based on API documentation analysis.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-expert-server",
  _varName: "mcpExpertServerPlugin",
};

const mcpServerForBinanceSpotTradingPlugin: Plugin = {
  id: "kbmjzs3g81",
  name: "MCP Server for Binance Spot Trading",
  description:
    "This server provides a robust interface for Binance spot trading operations, including secure management of API credentials, execution and management of spot orders, and monitoring of account balances and open orders.",
  image: "https://github.com/kydlikebtc.png",
  actions: [],
  githubUrl: "https://github.com/kydlikebtc/mcp-server-bn",
  _varName: "mcpServerForBinanceSpotTradingPlugin",
};

const dynamodbMcpServerPlugin: Plugin = {
  id: "3voqtftc3c",
  name: "DynamoDB MCP Server",
  description:
    "Enables management of DynamoDB resources through the Model Context Protocol, supporting table and index creation, capacity management, and data operations without delete functionality to prevent accidental data loss.",
  image: "https://github.com/imankamyabi.png",
  actions: [
    {
      name: "create_table",
      description: "Creates a new DynamoDB table with specified configuration",
      parameters: [
        {
          name: "partitionKey",
          type: "string",
          description: "Name of the partition key",
          required: true,
        },
        {
          name: "partitionKeyType",
          type: "string",
          description: "Type of partition key (S=String, N=Number, B=Binary)",
          required: true,
        },
        {
          name: "readCapacity",
          type: "number",
          description: "Provisioned read capacity units",
          required: true,
        },
        {
          name: "sortKey",
          type: "string",
          description: "Name of the sort key (optional)",
          required: false,
        },
        {
          name: "sortKeyType",
          type: "string",
          description: "Type of sort key (optional)",
          required: false,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table to create",
          required: true,
        },
        {
          name: "writeCapacity",
          type: "number",
          description: "Provisioned write capacity units",
          required: true,
        },
      ],
    },
    {
      name: "update_capacity",
      description: "Updates the provisioned capacity of a table",
      parameters: [
        {
          name: "readCapacity",
          type: "number",
          description: "New read capacity units",
          required: true,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
        {
          name: "writeCapacity",
          type: "number",
          description: "New write capacity units",
          required: true,
        },
      ],
    },
    {
      name: "put_item",
      description: "Inserts or replaces an item in a table",
      parameters: [
        {
          name: "item",
          type: "object",
          description: "Item to put into the table",
          required: true,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "get_item",
      description: "Retrieves an item from a table by its primary key",
      parameters: [
        {
          name: "key",
          type: "object",
          description: "Primary key of the item to retrieve",
          required: true,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "query_table",
      description: "Queries a table using key conditions and optional filters",
      parameters: [
        {
          name: "expressionAttributeNames",
          type: "object",
          description: "Attribute name mappings",
          required: false,
        },
        {
          name: "expressionAttributeValues",
          type: "object",
          description: "Values for the key condition expression",
          required: true,
        },
        {
          name: "filterExpression",
          type: "string",
          description: "Filter expression for results",
          required: false,
        },
        {
          name: "keyConditionExpression",
          type: "string",
          description: "Key condition expression",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of items to return",
          required: false,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "scan_table",
      description: "Scans an entire table with optional filters",
      parameters: [
        {
          name: "expressionAttributeNames",
          type: "object",
          description: "Attribute name mappings",
          required: false,
        },
        {
          name: "expressionAttributeValues",
          type: "object",
          description: "Values for the filter expression",
          required: false,
        },
        {
          name: "filterExpression",
          type: "string",
          description: "Filter expression",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of items to return",
          required: false,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
      ],
    },
    {
      name: "describe_table",
      description: "Gets detailed information about a DynamoDB table",
      parameters: [
        {
          name: "tableName",
          type: "string",
          description: "Name of the table to describe",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "Lists all DynamoDB tables in the account",
      parameters: [
        {
          name: "exclusiveStartTableName",
          type: "string",
          description:
            "Name of the table to start from for pagination (optional)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tables to return (optional)",
          required: false,
        },
      ],
    },
    {
      name: "create_gsi",
      description: "Creates a global secondary index on a table",
      parameters: [
        {
          name: "indexName",
          type: "string",
          description: "Name of the new index",
          required: true,
        },
        {
          name: "nonKeyAttributes",
          type: "string array",
          description: "Non-key attributes to project (optional)",
          required: false,
        },
        {
          name: "partitionKey",
          type: "string",
          description: "Partition key for the index",
          required: true,
        },
        {
          name: "partitionKeyType",
          type: "string",
          description: "Type of partition key",
          required: true,
        },
        {
          name: "projectionType",
          type: "string",
          description: "Type of projection",
          required: true,
        },
        {
          name: "readCapacity",
          type: "number",
          description: "Provisioned read capacity units",
          required: true,
        },
        {
          name: "sortKey",
          type: "string",
          description: "Sort key for the index (optional)",
          required: false,
        },
        {
          name: "sortKeyType",
          type: "string",
          description: "Type of sort key (optional)",
          required: false,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
        {
          name: "writeCapacity",
          type: "number",
          description: "Provisioned write capacity units",
          required: true,
        },
      ],
    },
    {
      name: "update_gsi",
      description:
        "Updates the provisioned capacity of a global secondary index",
      parameters: [
        {
          name: "indexName",
          type: "string",
          description: "Name of the index to update",
          required: true,
        },
        {
          name: "readCapacity",
          type: "number",
          description: "New read capacity units",
          required: true,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
        {
          name: "writeCapacity",
          type: "number",
          description: "New write capacity units",
          required: true,
        },
      ],
    },
    {
      name: "create_lsi",
      description:
        "Creates a local secondary index on a table (must be done during table creation)",
      parameters: [
        {
          name: "indexName",
          type: "string",
          description: "Name of the new index",
          required: true,
        },
        {
          name: "nonKeyAttributes",
          type: "string array",
          description: "Non-key attributes to project (optional)",
          required: false,
        },
        {
          name: "partitionKey",
          type: "string",
          description: "Partition key for the table",
          required: true,
        },
        {
          name: "partitionKeyType",
          type: "string",
          description: "Type of partition key",
          required: true,
        },
        {
          name: "projectionType",
          type: "string",
          description: "Type of projection",
          required: true,
        },
        {
          name: "readCapacity",
          type: "number",
          description: "Provisioned read capacity units (optional, default: 5)",
          required: false,
        },
        {
          name: "sortKey",
          type: "string",
          description: "Sort key for the index",
          required: true,
        },
        {
          name: "sortKeyType",
          type: "string",
          description: "Type of sort key",
          required: true,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
        {
          name: "writeCapacity",
          type: "number",
          description:
            "Provisioned write capacity units (optional, default: 5)",
          required: false,
        },
      ],
    },
    {
      name: "update_item",
      description: "Updates specific attributes of an item in a table",
      parameters: [
        {
          name: "conditionExpression",
          type: "string",
          description: "Condition for update (optional)",
          required: false,
        },
        {
          name: "expressionAttributeNames",
          type: "object",
          description: "Attribute name mappings",
          required: true,
        },
        {
          name: "expressionAttributeValues",
          type: "object",
          description: "Values for the update expression",
          required: true,
        },
        {
          name: "key",
          type: "object",
          description: "Primary key of the item to update",
          required: true,
        },
        {
          name: "returnValues",
          type: "string",
          description: "What values to return",
          required: false,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table",
          required: true,
        },
        {
          name: "updateExpression",
          type: "string",
          description: "Update expression (e.g., 'SET #n = :name')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/imankamyabi/dynamodb-mcp-server",
  _varName: "dynamodbMcpServerPlugin",
};

const mcplocaldevPlugin: Plugin = {
  id: "kjyamzm2rr",
  name: "mcp-local-dev",
  description:
    "Create sandboxed local development environments directly from Github and execute tests, see coverage and more! Supports Python, Node, Bun and many test runners.",
  image: "https://github.com/txbm.png",
  actions: [],
  githubUrl: "https://github.com/txbm/mcp-local-dev",
  _varName: "mcplocaldevPlugin",
};

const githubmanagerMcpServerPlugin: Plugin = {
  id: "61nu8bvtn5",
  name: "github-manager MCP Server",
  description:
    "This TypeScript-based MCP server enables users to manage a simple notes system with capabilities to create and summarize notes through structured prompts and resources.",
  image: "https://github.com/wheelhousedev.png",
  actions: [
    {
      name: "list_orgs",
      description:
        "List GitHub organizations the authenticated user belongs to",
      parameters: [],
    },
    {
      name: "list_repos",
      description: "List repositories in an organization",
      parameters: [
        {
          name: "org",
          type: "string",
          description: "Organization name",
          required: true,
        },
      ],
    },
    {
      name: "create_repo",
      description: "Create a new repository in an organization",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "org",
          type: "string",
          description: "Organization name",
          required: true,
        },
        {
          name: "private",
          type: "boolean",
          description: "Whether the repository should be private",
          required: false,
        },
      ],
    },
    {
      name: "add_collaborator",
      description: "Add a collaborator to a repository",
      parameters: [
        {
          name: "org",
          type: "string",
          description: "Organization name",
          required: true,
        },
        {
          name: "permission",
          type: "string",
          description: "Permission level (pull, push, admin)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "username",
          type: "string",
          description: "GitHub username to add",
          required: true,
        },
      ],
    },
    {
      name: "update_repo_settings",
      description: "Update repository settings",
      parameters: [
        {
          name: "org",
          type: "string",
          description: "Organization name",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "settings",
          type: "object",
          description: "Repository settings to update",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wheelhousedev/github-mcp",
  _varName: "githubmanagerMcpServerPlugin",
};

const zoteroMcpConnectorPlugin: Plugin = {
  id: "q5adqkd02d",
  name: "Zotero MCP Connector",
  description:
    "Integrates local Zotero libraries with Claude's Desktop interface, allowing users to access and manage their library collections via a local API.",
  image: "https://github.com/gyger.png",
  actions: [
    {
      name: "get_collections",
      description: "List all collections in the local Zotero library.",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: true,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "get_collection_items",
      description: "Gets all items in a specific Zotero collection.",
      parameters: [
        {
          name: "collection_key",
          type: "string",
          description: "Parameter: collection_key",
          required: true,
        },
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: true,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "get_item_details",
      description:
        "Get detailed information about a specific item in the library",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: true,
        },
        {
          name: "item_key",
          type: "string",
          description: "Parameter: item_key",
          required: true,
        },
      ],
    },
    {
      name: "get_tags",
      description: "Get tags used in the Zotero library",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: true,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "get_recent",
      description:
        "Get recently added items (e.g. papers or attachements) to your library",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: true,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
      ],
    },
    {
      name: "search_library",
      description: "Search the local Zotero library of the user.",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: true,
        },
        {
          name: "itemType",
          type: "string",
          description: "Parameter: itemType",
          required: false,
        },
        {
          name: "limit",
          type: "string",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "qmode",
          type: "string",
          description: "Parameter: qmode",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/gyger/mcp-pyzotero",
  _varName: "zoteroMcpConnectorPlugin",
};

const thingsMcpServer1Plugin: Plugin = {
  id: "t9cgixg2ah",
  name: "Things MCP Server",
  description:
    "Enables interaction with the Things app through Claude Desktop, allowing task creation, project analysis, and priority management using natural language commands.",
  image: "https://github.com/hald.png",
  actions: [
    {
      name: "get-areas",
      description: "Get all areas from Things",
      parameters: [
        {
          name: "include_items",
          type: "boolean",
          description: "Include projects and tasks within areas",
          required: false,
        },
      ],
    },
    {
      name: "get-inbox",
      description: "Get todos from Inbox",
      parameters: [],
    },
    {
      name: "get-today",
      description: "Get todos due today",
      parameters: [],
    },
    {
      name: "get-upcoming",
      description: "Get upcoming todos",
      parameters: [],
    },
    {
      name: "get-anytime",
      description: "Get todos from Anytime list",
      parameters: [],
    },
    {
      name: "get-someday",
      description: "Get todos from Someday list",
      parameters: [],
    },
    {
      name: "get-todos",
      description: "Get todos from Things, optionally filtered by project",
      parameters: [
        {
          name: "include_items",
          type: "boolean",
          description: "Include checklist items",
          required: false,
        },
        {
          name: "project_uuid",
          type: "string",
          description: "Optional UUID of a specific project to get todos from",
          required: false,
        },
      ],
    },
    {
      name: "get-projects",
      description: "Get all projects from Things",
      parameters: [
        {
          name: "include_items",
          type: "boolean",
          description: "Include tasks within projects",
          required: false,
        },
      ],
    },
    {
      name: "get-logbook",
      description: "Get completed todos from Logbook, defaults to last 7 days",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of entries to return. Defaults to 50",
          required: false,
        },
        {
          name: "period",
          type: "string",
          description:
            "Time period to look back (e.g., '3d', '1w', '2m', '1y'). Defaults to '7d'",
          required: false,
        },
      ],
    },
    {
      name: "get-trash",
      description: "Get trashed todos",
      parameters: [],
    },
    {
      name: "get-tags",
      description: "Get all tags",
      parameters: [
        {
          name: "include_items",
          type: "boolean",
          description: "Include items tagged with each tag",
          required: false,
        },
      ],
    },
    {
      name: "get-tagged-items",
      description: "Get items with a specific tag",
      parameters: [
        {
          name: "tag",
          type: "string",
          description: "Tag title to filter by",
          required: true,
        },
      ],
    },
    {
      name: "search-todos",
      description: "Search todos by title or notes",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search term to look for in todo titles and notes",
          required: true,
        },
      ],
    },
    {
      name: "search-advanced",
      description: "Advanced todo search with multiple filters",
      parameters: [
        {
          name: "area",
          type: "string",
          description: "Filter by area UUID",
          required: false,
        },
        {
          name: "deadline",
          type: "string",
          description: "Filter by deadline (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Filter by start date (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by todo status",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "Filter by tag",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Filter by item type",
          required: false,
        },
      ],
    },
    {
      name: "get-recent",
      description: "Get recently created items",
      parameters: [
        {
          name: "period",
          type: "string",
          description: "Time period (e.g., '3d', '1w', '2m', '1y')",
          required: true,
        },
      ],
    },
    {
      name: "add-todo",
      description: "Create a new todo in Things",
      parameters: [
        {
          name: "checklist_items",
          type: "string array",
          description: "Checklist items to add",
          required: false,
        },
        {
          name: "deadline",
          type: "string",
          description: "Deadline for the todo (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "heading",
          type: "string",
          description: "Heading to add under",
          required: false,
        },
        {
          name: "list_id",
          type: "string",
          description: "ID of project/area to add to",
          required: false,
        },
        {
          name: "list_title",
          type: "string",
          description: "Title of project/area to add to",
          required: false,
        },
        {
          name: "notes",
          type: "string",
          description: "Notes for the todo",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags to apply to the todo",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the todo",
          required: true,
        },
        {
          name: "when",
          type: "string",
          description:
            "When to schedule the todo (today, tomorrow, evening, anytime, someday, or YYYY-MM-DD)",
          required: false,
        },
      ],
    },
    {
      name: "add-project",
      description: "Create a new project in Things",
      parameters: [
        {
          name: "area_id",
          type: "string",
          description: "ID of area to add to",
          required: false,
        },
        {
          name: "area_title",
          type: "string",
          description: "Title of area to add to",
          required: false,
        },
        {
          name: "deadline",
          type: "string",
          description: "Deadline for the project",
          required: false,
        },
        {
          name: "notes",
          type: "string",
          description: "Notes for the project",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags to apply to the project",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the project",
          required: true,
        },
        {
          name: "todos",
          type: "string array",
          description: "Initial todos to create in the project",
          required: false,
        },
        {
          name: "when",
          type: "string",
          description: "When to schedule the project",
          required: false,
        },
      ],
    },
    {
      name: "update-todo",
      description: "Update an existing todo in Things",
      parameters: [
        {
          name: "canceled",
          type: "boolean",
          description: "Mark as canceled",
          required: false,
        },
        {
          name: "completed",
          type: "boolean",
          description: "Mark as completed",
          required: false,
        },
        {
          name: "deadline",
          type: "string",
          description: "New deadline",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID of the todo to update",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "New notes",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "New tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title",
          required: false,
        },
        {
          name: "when",
          type: "string",
          description: "New schedule",
          required: false,
        },
      ],
    },
    {
      name: "update-project",
      description: "Update an existing project in Things",
      parameters: [
        {
          name: "canceled",
          type: "boolean",
          description: "Mark as canceled",
          required: false,
        },
        {
          name: "completed",
          type: "boolean",
          description: "Mark as completed",
          required: false,
        },
        {
          name: "deadline",
          type: "string",
          description: "New deadline",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "ID of the project to update",
          required: true,
        },
        {
          name: "notes",
          type: "string",
          description: "New notes",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "New tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "New title",
          required: false,
        },
        {
          name: "when",
          type: "string",
          description: "New schedule",
          required: false,
        },
      ],
    },
    {
      name: "show-item",
      description: "Show a specific item or list in Things",
      parameters: [
        {
          name: "filter_tags",
          type: "string array",
          description: "Optional tags to filter by",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description:
            "ID of item to show, or one of: inbox, today, upcoming, anytime, someday, logbook",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Optional query to filter by",
          required: false,
        },
      ],
    },
    {
      name: "search-items",
      description: "Search for items in Things",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hald/things-mcp",
  _varName: "thingsMcpServer1Plugin",
};

const mcpServer7Plugin: Plugin = {
  id: "etvinsef99",
  name: "MCP Server",
  description:
    "MCP Server simplifies the implementation of the Model Context Protocol by providing a user-friendly API to create custom tools and manage server workflows efficiently.",
  image: "https://github.com/la-rebelion.png",
  actions: [],
  githubUrl: "https://github.com/la-rebelion/mcp-server",
  _varName: "mcpServer7Plugin",
};

const redmineMcpServerPlugin: Plugin = {
  id: "55eg9u36cg",
  name: "Redmine MCP Server",
  description:
    "A Model Context Protocol server for interacting with Redmine using its REST API, enabling the management of tickets, projects, and user data through integration with LLMs.",
  image: "https://github.com/yonaka15.png",
  actions: [
    {
      name: "list_issues",
      description:
        "List and search Redmine issues. Provides flexible filtering and sorting options. Supports filtering by custom fields using field IDs and patterns. Available since Redmine 1.0",
      parameters: [
        {
          name: "additionalProperties",
          type: "string",
          description: "Parameter: additionalProperties",
          required: false,
        },
        {
          name: "assigned_to_id",
          type: "string",
          description: "Filter by assignee. Use me for your assignments",
          required: false,
        },
        {
          name: "created_on",
          type: "string",
          description: "Filter by creation date like >=2024-01-01",
          required: false,
        },
        {
          name: "include",
          type: "string",
          description:
            "Additional data to include as comma separated values\n- attachments: file attachments\n- relations: issue relations",
          required: false,
        },
        {
          name: "issue_id",
          type: "string",
          description:
            "Filter by one or more issue IDs as comma separated list",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum issues to return, from 1 to 100",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of issues to skip",
          required: false,
        },
        {
          name: "parent_id",
          type: "number",
          description: "Filter by parent issue ID",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Filter by project ID as number or key as text",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description:
            "Sort field and direction like last.updated:desc or priority:asc",
          required: false,
        },
        {
          name: "status_id",
          type: "string",
          description:
            "Filter by open, closed, * for any, or specific status ID",
          required: false,
        },
        {
          name: "subproject_id",
          type: "string",
          description:
            "Control subproject inclusion. Use !* to exclude subprojects",
          required: false,
        },
        {
          name: "tracker_id",
          type: "number",
          description: "Filter by tracker ID",
          required: false,
        },
        {
          name: "updated_on",
          type: "string",
          description: "Filter by update date like >=2024-01-01T00:00:00Z",
          required: false,
        },
      ],
    },
    {
      name: "create_issue",
      description:
        "Create a new issue. Requires project ID and subject fields. Returns success or validation error status. Available since Redmine 1.0",
      parameters: [
        {
          name: "assigned_to_id",
          type: "number",
          description: "User ID to assign this issue to",
          required: false,
        },
        {
          name: "category_id",
          type: "number",
          description: "Issue category ID",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object array",
          description: "List of custom field values",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Detailed issue description",
          required: false,
        },
        {
          name: "due_date",
          type: "string",
          description: "Issue due date as YYYY-MM-DD",
          required: false,
        },
        {
          name: "estimated_hours",
          type: "number",
          description: "Estimated time in hours",
          required: false,
        },
        {
          name: "fixed_version_id",
          type: "number",
          description: "Target version or milestone ID",
          required: false,
        },
        {
          name: "is_private",
          type: "boolean",
          description: "Set true to make issue private",
          required: false,
        },
        {
          name: "parent_issue_id",
          type: "number",
          description: "Parent issue ID for subtasks",
          required: false,
        },
        {
          name: "priority_id",
          type: "number",
          description: "Priority level ID",
          required: false,
        },
        {
          name: "project_id",
          type: "number",
          description: "Project ID where issue will be created",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description: "Issue start date as YYYY-MM-DD",
          required: false,
        },
        {
          name: "status_id",
          type: "number",
          description: "Initial status ID for the issue",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Issue title or summary",
          required: true,
        },
        {
          name: "tracker_id",
          type: "number",
          description: "Type of issue determined by tracker ID",
          required: false,
        },
        {
          name: "watcher_user_ids",
          type: "number array",
          description: "List of user IDs to add as watchers",
          required: false,
        },
      ],
    },
    {
      name: "update_issue",
      description:
        "Update an existing issue. Modify any issue fields as needed. Returns success or validation error status. Available since Redmine 1.0",
      parameters: [
        {
          name: "assigned_to_id",
          type: "number",
          description: "Reassign issue to this user ID",
          required: false,
        },
        {
          name: "category_id",
          type: "number",
          description: "Change issue category",
          required: false,
        },
        {
          name: "custom_fields",
          type: "object array",
          description: "Update custom field values",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New issue description",
          required: false,
        },
        {
          name: "due_date",
          type: "string",
          description: "Change due date as YYYY-MM-DD",
          required: false,
        },
        {
          name: "estimated_hours",
          type: "number",
          description: "Update time estimate in hours",
          required: false,
        },
        {
          name: "fixed_version_id",
          type: "number",
          description: "Change target version or milestone",
          required: false,
        },
        {
          name: "id",
          type: "number",
          description: "ID of issue to update",
          required: true,
        },
        {
          name: "is_private",
          type: "boolean",
          description: "Change issue privacy setting",
          required: false,
        },
        {
          name: "notes",
          type: "string",
          description: "Add a note about the changes",
          required: false,
        },
        {
          name: "parent_issue_id",
          type: "number",
          description: "Move issue under this parent ID",
          required: false,
        },
        {
          name: "priority_id",
          type: "number",
          description: "Change priority level",
          required: false,
        },
        {
          name: "private_notes",
          type: "boolean",
          description: "Set true to make note private",
          required: false,
        },
        {
          name: "project_id",
          type: "number",
          description: "Move issue to this project ID",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description: "Change start date as YYYY-MM-DD",
          required: false,
        },
        {
          name: "status_id",
          type: "number",
          description: "Change status to this ID",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "New issue title or summary",
          required: false,
        },
        {
          name: "tracker_id",
          type: "number",
          description: "Change issue type to this tracker ID",
          required: false,
        },
      ],
    },
    {
      name: "delete_issue",
      description:
        "Delete an issue permanently. This action cannot be undone. Returns success status on completion. Available since Redmine 1.0",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "ID of issue to delete",
          required: true,
        },
      ],
    },
    {
      name: "add_issue_watcher",
      description:
        "Add a user as watcher to an issue. Enables user to receive issue updates. Available since Redmine 1.0",
      parameters: [
        {
          name: "issue_id",
          type: "number",
          description: "Issue ID to add watcher to",
          required: true,
        },
        {
          name: "user_id",
          type: "number",
          description: "User ID to add as watcher",
          required: true,
        },
      ],
    },
    {
      name: "remove_issue_watcher",
      description:
        "Remove a user from issue watchers. Stops issue update notifications. Available since Redmine 1.0",
      parameters: [
        {
          name: "issue_id",
          type: "number",
          description: "Issue ID to remove watcher from",
          required: true,
        },
        {
          name: "user_id",
          type: "number",
          description: "User ID to remove from watchers",
          required: true,
        },
      ],
    },
    {
      name: "list_projects",
      description:
        "List all accessible projects. Shows both public projects and authorized private projects. Includes trackers, categories, modules and custom fields. Available since Redmine 1.0",
      parameters: [
        {
          name: "include",
          type: "string",
          description:
            "Additional data to include as comma separated values\n- trackers: list project trackers\n- categories: list project categories\n- modules: list project modules. Since 2.6.0\n- time tracking: list time activities. Since 3.4.0",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum projects to return, from 1 to 100",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of projects to skip",
          required: false,
        },
        {
          name: "status",
          type: "number",
          description:
            "Filter projects by status\n- 1: active projects. Default\n- 5: archived projects\n- 9: closed projects",
          required: false,
        },
      ],
    },
    {
      name: "show_project",
      description:
        "Get detailed project information. Specify using project ID or key. Supports retrieving additional data. Available since Redmine 1.0",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Project ID as number or project key as text",
          required: true,
        },
        {
          name: "include",
          type: "string",
          description:
            "Additional data to include as comma separated values\n- trackers: list project trackers\n- categories: list project categories\n- modules: list project modules. Since 2.6.0\n- time tracking: list time activities. Since 3.4.0",
          required: false,
        },
      ],
    },
    {
      name: "create_project",
      description:
        "Create a new project. Provide name and key. Configure optional settings like modules and trackers. Available since Redmine 1.0",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Project description",
          required: false,
        },
        {
          name: "enabled_module_names",
          type: "string array",
          description: "List of enabled modules",
          required: false,
        },
        {
          name: "homepage",
          type: "string",
          description: "Project website URL",
          required: false,
        },
        {
          name: "identifier",
          type: "string",
          description: "Project key for URLs. Start with letter or number",
          required: true,
        },
        {
          name: "inherit_members",
          type: "boolean",
          description: "Set true to inherit parent members",
          required: false,
        },
        {
          name: "is_public",
          type: "boolean",
          description: "Set true to make project public",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the project",
          required: true,
        },
        {
          name: "parent_id",
          type: "number",
          description: "Create as subproject under this ID",
          required: false,
        },
        {
          name: "tracker_ids",
          type: "number array",
          description: "List of enabled tracker IDs",
          required: false,
        },
      ],
    },
    {
      name: "update_project",
      description:
        "Update project settings. Specify ID or key to identify project. Only specified fields will be changed. Available since Redmine 1.0",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New project description",
          required: false,
        },
        {
          name: "enabled_module_names",
          type: "string array",
          description: "New list of enabled modules",
          required: false,
        },
        {
          name: "homepage",
          type: "string",
          description: "New project website URL",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Project ID as number or key as text",
          required: true,
        },
        {
          name: "identifier",
          type: "string",
          description: "New project key for URLs. Start with letter or number",
          required: false,
        },
        {
          name: "inherit_members",
          type: "boolean",
          description: "Change member inheritance setting",
          required: false,
        },
        {
          name: "is_public",
          type: "boolean",
          description: "Change project visibility",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New project name",
          required: false,
        },
        {
          name: "parent_id",
          type: "number",
          description: "Move under new parent ID",
          required: false,
        },
        {
          name: "tracker_ids",
          type: "number array",
          description: "New list of enabled tracker IDs",
          required: false,
        },
      ],
    },
    {
      name: "archive_project",
      description:
        "Archive a project. Project becomes read only. Available since Redmine 5.0",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Project ID as number or key as text",
          required: true,
        },
      ],
    },
    {
      name: "unarchive_project",
      description:
        "Restore an archived project. Project becomes editable again. Available since Redmine 5.0",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Project ID as number or key as text",
          required: true,
        },
      ],
    },
    {
      name: "delete_project",
      description:
        "Delete project permanently. Deletes all project data and subprojects. This action cannot be undone. Available since Redmine 1.0",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Project ID as number or key as text",
          required: true,
        },
      ],
    },
    {
      name: "list_time_entries",
      description:
        "List and search logged time records. Filter by user, project and date range. Returns up to 100 entries per request. Available since Redmine 1.1",
      parameters: [
        {
          name: "from",
          type: "string",
          description: "Show entries from this date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum entries to return, from 1 to 100",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of entries to skip",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID as number or project key as text",
          required: false,
        },
        {
          name: "spent_on",
          type: "string",
          description: "Show entries for specific date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "to",
          type: "string",
          description: "Show entries until this date in YYYY-MM-DD format",
          required: false,
        },
        {
          name: "user_id",
          type: "number",
          description: "Filter by user. Use me to show your own entries",
          required: false,
        },
      ],
    },
    {
      name: "show_time_entry",
      description:
        "Get details of a time record. Returns complete information. Available since Redmine 1.1",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "ID of the time record to show",
          required: true,
        },
      ],
    },
    {
      name: "create_time_entry",
      description:
        "Record spent time on projects or issues. Hours and project or issue ID required. Activity type ID required if no default exists. Available since Redmine 1.1",
      parameters: [
        {
          name: "activity_id",
          type: "number",
          description: "Activity type ID. Required if no default exists",
          required: false,
        },
        {
          name: "comments",
          type: "string",
          description: "Optional comments up to 255 characters",
          required: false,
        },
        {
          name: "hours",
          type: "number",
          description: "Number of hours spent. Can use decimals",
          required: true,
        },
        {
          name: "issue_id",
          type: "number",
          description: "Issue ID to log time against",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID as number or project key as text",
          required: false,
        },
        {
          name: "spent_on",
          type: "string",
          description: "Date in YYYY-MM-DD format. Defaults to today",
          required: false,
        },
        {
          name: "user_id",
          type: "number",
          description: "Log time for this user ID. Requires admin rights",
          required: false,
        },
      ],
    },
    {
      name: "update_time_entry",
      description:
        "Update an existing time record. Modify hours, activity and comments. Cannot change project after creation. Available since Redmine 1.1",
      parameters: [
        {
          name: "activity_id",
          type: "number",
          description: "New activity type ID",
          required: false,
        },
        {
          name: "comments",
          type: "string",
          description: "New comments up to 255 characters",
          required: false,
        },
        {
          name: "hours",
          type: "number",
          description: "New number of hours. Can use decimals",
          required: false,
        },
        {
          name: "id",
          type: "number",
          description: "ID of time record to update",
          required: true,
        },
        {
          name: "issue_id",
          type: "number",
          description: "Change linked issue ID",
          required: false,
        },
        {
          name: "spent_on",
          type: "string",
          description: "New date in YYYY-MM-DD format",
          required: false,
        },
      ],
    },
    {
      name: "delete_time_entry",
      description:
        "Delete a time record permanently. This action cannot be undone. Available since Redmine 1.1",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "ID of time record to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_users",
      description:
        "List all users in the system. Shows active and locked accounts. Admin privileges required. Available since Redmine 1.1",
      parameters: [
        {
          name: "group_id",
          type: "number",
          description: "Show only users who belong to this group",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of users per page, from 1 to 100",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Filter by login, firstname, lastname and mail. When using space, matches firstname and lastname",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of users to skip",
          required: false,
        },
        {
          name: "status",
          type: "number",
          description:
            "Filter users by status\n- 1: Active users\n- 2: Registered users\n- 3: Locked users",
          required: false,
        },
      ],
    },
    {
      name: "show_user",
      description:
        "Get details of a specific user. Use 'current' to get your own info. Returned fields depend on privileges. Available since Redmine 1.1",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "User ID as number or 'current' for own details",
          required: true,
        },
        {
          name: "include",
          type: "string",
          description:
            "Additional data to include as comma separated values\n- memberships: list project memberships and roles\n- groups: list group memberships. Since 2.1",
          required: false,
        },
      ],
    },
    {
      name: "create_user",
      description:
        "Create a new user account. Admin privileges required. Returns success or validation error status. Available since Redmine 1.1",
      parameters: [
        {
          name: "auth_source_id",
          type: "number",
          description: "Authentication mode ID",
          required: false,
        },
        {
          name: "firstname",
          type: "string",
          description: "User first name",
          required: true,
        },
        {
          name: "generate_password",
          type: "boolean",
          description: "Generate random password",
          required: false,
        },
        {
          name: "lastname",
          type: "string",
          description: "User last name",
          required: true,
        },
        {
          name: "login",
          type: "string",
          description: "User login name",
          required: true,
        },
        {
          name: "mail",
          type: "string",
          description: "User email address",
          required: true,
        },
        {
          name: "mail_notification",
          type: "string",
          description: "Email notification preferences",
          required: false,
        },
        {
          name: "must_change_passwd",
          type: "boolean",
          description: "Force password change at next login",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description:
            "User password. Optional if generate password is enabled",
          required: false,
        },
        {
          name: "send_information",
          type: "boolean",
          description: "Send account information to the user",
          required: false,
        },
      ],
    },
    {
      name: "update_user",
      description:
        "Update an existing user. Admin privileges required. Returns success or validation error status. Available since Redmine 1.1",
      parameters: [
        {
          name: "admin",
          type: "boolean",
          description: "Grant admin privileges",
          required: false,
        },
        {
          name: "auth_source_id",
          type: "number",
          description: "Authentication mode ID",
          required: false,
        },
        {
          name: "firstname",
          type: "string",
          description: "User first name",
          required: false,
        },
        {
          name: "id",
          type: "number",
          description: "ID of user to update",
          required: true,
        },
        {
          name: "lastname",
          type: "string",
          description: "User last name",
          required: false,
        },
        {
          name: "login",
          type: "string",
          description: "User login name",
          required: false,
        },
        {
          name: "mail",
          type: "string",
          description: "User email address",
          required: false,
        },
        {
          name: "mail_notification",
          type: "string",
          description: "Email notification preferences",
          required: false,
        },
        {
          name: "must_change_passwd",
          type: "boolean",
          description: "Force password change at next login",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "New password",
          required: false,
        },
      ],
    },
    {
      name: "delete_user",
      description:
        "Delete a user permanently. Admin privileges required. This action cannot be undone. Available since Redmine 1.1",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "ID of user to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/yonaka15/mcp-server-redmine",
  _varName: "redmineMcpServerPlugin",
};

const mcpReasonerPlugin: Plugin = {
  id: "pz4pgwvn1c",
  name: "MCP Reasoner",
  description:
    "A systematic reasoning MCP server for Claude Desktop, featuring Beam Search and Monte Carlo Tree Search to facilitate complex problem-solving and decision-making processes.",
  image: "https://github.com/parmarjh.png",
  actions: [
    {
      name: "mcp-reasoner",
      description:
        "Advanced reasoning tool with multiple strategies including Beam Search and Monte Carlo Tree Search",
      parameters: [
        {
          name: "nextThoughtNeeded",
          type: "boolean",
          description: "Whether another step is needed",
          required: true,
        },
        {
          name: "strategyType",
          type: "string",
          description: "Reasoning strategy to use (beam_search or mcts)",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Current reasoning step",
          required: true,
        },
        {
          name: "thoughtNumber",
          type: "integer",
          description: "Current step number",
          required: true,
        },
        {
          name: "totalThoughts",
          type: "integer",
          description: "Total expected steps",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/parmarjh/mcp-reasoner",
  _varName: "mcpReasonerPlugin",
};

const penumbraMcpServerPlugin: Plugin = {
  id: "21fa1hhrxw",
  name: "Penumbra MCP Server",
  description:
    "Enables privacy-preserving interactions with the Penumbra blockchain, offering tools for transaction queries, validator set information, DEX state, and governance proposals.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "get_validator_set",
      description: "Get the current validator set information",
      parameters: [],
    },
    {
      name: "get_chain_status",
      description:
        "Get current chain status including block height and chain ID",
      parameters: [],
    },
    {
      name: "get_transaction",
      description: "Get details of a specific transaction",
      parameters: [
        {
          name: "hash",
          type: "string",
          description: "Transaction hash",
          required: true,
        },
      ],
    },
    {
      name: "get_dex_state",
      description:
        "Get current DEX state including latest batch auction results",
      parameters: [],
    },
    {
      name: "get_governance_proposals",
      description: "Get active governance proposals",
      parameters: [
        {
          name: "status",
          type: "string",
          description: "Filter proposals by status",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bmorphism/penumbra-mcp",
  _varName: "penumbraMcpServerPlugin",
};

const mcpJiraServerPlugin: Plugin = {
  id: "xjj0zi333v",
  name: "MCP JIRA Server",
  description:
    "Enables AI applications to manage JIRA issues, workflows, and tasks through a standardized MCP interface, facilitating real-time updates and seamless interaction with JIRA's API.",
  image: "https://github.com/Warzuponus.png",
  actions: [],
  githubUrl: "https://github.com/Warzuponus/mcp-jira",
  _varName: "mcpJiraServerPlugin",
};

const filloutioMcpServerPlugin: Plugin = {
  id: "ldhe1ctxfi",
  name: "Fillout.io MCP Server",
  description:
    "Enables form management, response handling, and analytics through the Fillout.io API for enhanced form interactions and insights.",
  image: "https://github.com/danielma-tic.png",
  actions: [],
  githubUrl: "https://github.com/danielma-tic/fillout-mcp-server",
  _varName: "filloutioMcpServerPlugin",
};

const puppeteerMcpServer2Plugin: Plugin = {
  id: "anvpl8ffa6",
  name: "Puppeteer MCP Server",
  description:
    "Enables LLMs to perform web browsing tasks, take screenshots, and execute JavaScript using Puppeteer for browser automation.",
  image: "https://github.com/jwaldor.png",
  actions: [
    {
      name: "puppeteer_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "puppeteer_page_history",
      description: "Get the history of visited URLs, most recent urls first",
      parameters: [],
    },
    {
      name: "make_http_request",
      description: "Make an HTTP request with curl",
      parameters: [
        {
          name: "body",
          type: "object",
          description: "Body to include in the request",
          required: true,
        },
        {
          name: "headers",
          type: "object",
          description: "Headers to include in the request",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of the request. GET, POST, PUT, DELETE",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "Url to make the request to",
          required: true,
        },
      ],
    },
    {
      name: "semantic_search_requests",
      description:
        "Semantically search for requests that occurred within a page URL. Returns the top 10 results.",
      parameters: [
        {
          name: "page_url",
          type: "string",
          description: "The page within which to search for requests",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description:
            "Your search request. Make this specific and detailed to get the best results",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jwaldor/mcp-scrape-copilot",
  _varName: "puppeteerMcpServer2Plugin",
};

const redisMcpServerPlugin: Plugin = {
  id: "cbn7lsbp7h",
  name: "Redis MCP Server",
  description:
    "Enables users to perform Redis database operations using the Model Context Protocol (MCP) tools, allowing for efficient data management through commands like setting, getting, and scanning hash fields.",
  image: "https://github.com/farhankaz.png",
  actions: [
    {
      name: "hmset",
      description: "Set multiple hash fields to multiple values",
      parameters: [
        {
          name: "fields",
          type: "object",
          description: "Field-value pairs to set",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Hash key",
          required: true,
        },
      ],
    },
    {
      name: "hget",
      description: "Get the value of a hash field",
      parameters: [
        {
          name: "field",
          type: "string",
          description: "Field to get",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Hash key",
          required: true,
        },
      ],
    },
    {
      name: "hgetall",
      description: "Get all the fields and values in a hash",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Hash key",
          required: true,
        },
      ],
    },
    {
      name: "scan",
      description: "Scan Redis keys matching a pattern",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of keys to return per iteration (optional)",
          required: false,
        },
        {
          name: "pattern",
          type: "string",
          description: 'Pattern to match (e.g., "user:*" or "schedule:*")',
          required: true,
        },
      ],
    },
    {
      name: "set",
      description:
        "Set string value with optional NX (only if not exists) and PX (expiry in milliseconds) options",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Key to set",
          required: true,
        },
        {
          name: "nx",
          type: "boolean",
          description: "Only set if key does not exist",
          required: false,
        },
        {
          name: "px",
          type: "number",
          description: "Set expiry in milliseconds",
          required: false,
        },
        {
          name: "value",
          type: "string",
          description: "Value to set",
          required: true,
        },
      ],
    },
    {
      name: "get",
      description: "Get string value",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Key to get",
          required: true,
        },
      ],
    },
    {
      name: "del",
      description: "Delete a key",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Key to delete",
          required: true,
        },
      ],
    },
    {
      name: "zadd",
      description: "Add one or more members to a sorted set",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Sorted set key",
          required: true,
        },
        {
          name: "members",
          type: "object array",
          description: "Array of score-value pairs to add",
          required: true,
        },
      ],
    },
    {
      name: "zrange",
      description: "Return a range of members from a sorted set by index",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Sorted set key",
          required: true,
        },
        {
          name: "start",
          type: "number",
          description: "Start index (0-based)",
          required: true,
        },
        {
          name: "stop",
          type: "number",
          description: "Stop index (inclusive)",
          required: true,
        },
        {
          name: "withScores",
          type: "boolean",
          description: "Include scores in output",
          required: false,
        },
      ],
    },
    {
      name: "zrangebyscore",
      description:
        "Return members from a sorted set with scores between min and max",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Sorted set key",
          required: true,
        },
        {
          name: "max",
          type: "number",
          description: "Maximum score",
          required: true,
        },
        {
          name: "min",
          type: "number",
          description: "Minimum score",
          required: true,
        },
        {
          name: "withScores",
          type: "boolean",
          description: "Include scores in output",
          required: false,
        },
      ],
    },
    {
      name: "zrem",
      description: "Remove one or more members from a sorted set",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Sorted set key",
          required: true,
        },
        {
          name: "members",
          type: "string array",
          description: "Array of members to remove",
          required: true,
        },
      ],
    },
    {
      name: "sadd",
      description: "Add one or more members to a set",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Set key",
          required: true,
        },
        {
          name: "members",
          type: "string array",
          description: "Members to add to the set",
          required: true,
        },
      ],
    },
    {
      name: "smembers",
      description: "Get all members in a set",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Set key",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/farhankaz/redis-mcp",
  _varName: "redisMcpServerPlugin",
};

const githubMcpServer3Plugin: Plugin = {
  id: "bnif4b1rh6",
  name: "GitHub MCP Server",
  description:
    "Enables interaction with GitHub through the GitHub API, supporting file operations, repository management, advanced search, and issue tracking with comprehensive error handling and automatic branch creation.",
  image: "https://github.com/asbloom-py.png",
  actions: [
    {
      name: "create_or_update_file",
      description: "Create or update a single file in a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to create/update the file in",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Content of the file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path where to create/update the file",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "sha",
          type: "string",
          description:
            "SHA of the file being replaced (required when updating existing files)",
          required: false,
        },
      ],
    },
    {
      name: "search_repositories",
      description: "Search for GitHub repositories",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Number of results per page (default: 30, max: 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (see GitHub search syntax)",
          required: true,
        },
      ],
    },
    {
      name: "create_repository",
      description: "Create a new GitHub repository in your account",
      parameters: [
        {
          name: "autoInit",
          type: "boolean",
          description: "Initialize with README.md",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "private",
          type: "boolean",
          description: "Whether the repository should be private",
          required: false,
        },
      ],
    },
    {
      name: "get_file_contents",
      description:
        "Get the contents of a file or directory from a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to get contents from",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the file or directory",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "push_files",
      description:
        "Push multiple files to a GitHub repository in a single commit",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to push to (e.g., 'main' or 'master')",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Array of files to push",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "Create a new issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Array of usernames to assign",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Issue body/description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of label names",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Milestone number to assign",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request",
      description: "Create a new pull request in a GitHub repository",
      parameters: [
        {
          name: "base",
          type: "string",
          description:
            "The name of the branch you want the changes pulled into",
          required: true,
        },
        {
          name: "body",
          type: "string",
          description: "Pull request body/description",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Whether to create the pull request as a draft",
          required: false,
        },
        {
          name: "head",
          type: "string",
          description:
            "The name of the branch where your changes are implemented",
          required: true,
        },
        {
          name: "maintainer_can_modify",
          type: "boolean",
          description: "Whether maintainers can modify the pull request",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Pull request title",
          required: true,
        },
      ],
    },
    {
      name: "fork_repository",
      description:
        "Fork a GitHub repository to your account or specified organization",
      parameters: [
        {
          name: "organization",
          type: "string",
          description:
            "Optional: organization to fork to (defaults to your personal account)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description: "Create a new branch in a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Name for the new branch",
          required: true,
        },
        {
          name: "from_branch",
          type: "string",
          description:
            "Optional: source branch to create from (defaults to the repository's default branch)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/asbloom-py/mcp-servers",
  _varName: "githubMcpServer3Plugin",
};

const mtsMcpServerPlugin: Plugin = {
  id: "aldk61tq79",
  name: "MTS MCP Server",
  description:
    "A comprehensive suite of Model Context Protocol servers designed to extend AI agent Claude's capabilities with integrations for knowledge management, reasoning, advanced search, news access, and workspace tools.",
  image: "https://github.com/CalvinMagezi.png",
  actions: [],
  githubUrl: "https://github.com/CalvinMagezi/mts-mcp",
  _varName: "mtsMcpServerPlugin",
};

const mcpServerReplicatePlugin: Plugin = {
  id: "r830bzsk7r",
  name: "MCP Server Replicate",
  description:
    "A FastMCP server implementation that facilitates resource-based access to AI model inference, focusing on image generation through the Replicate API, with features like real-time updates, webhook integration, and secure API key management.",
  image: "https://github.com/gerred.png",
  actions: [
    {
      name: "list_models",
      description:
        "List available models on Replicate with optional filtering by owner.",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: false,
        },
      ],
    },
    {
      name: "search_models",
      description: "Search for models using semantic search.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "list_collections",
      description: "List available model collections on Replicate.",
      parameters: [],
    },
    {
      name: "get_collection_details",
      description: "Get detailed information about a specific collection.",
      parameters: [
        {
          name: "collection_slug",
          type: "string",
          description: "Parameter: collection_slug",
          required: true,
        },
      ],
    },
    {
      name: "list_hardware",
      description: "List available hardware options for running models.",
      parameters: [],
    },
    {
      name: "list_templates",
      description: "List all available templates with their schemas.",
      parameters: [],
    },
    {
      name: "validate_template_parameters",
      description: "Validate parameters against a template schema.",
      parameters: [
        {
          name: "input",
          type: "object",
          description: "Parameter: input",
          required: true,
        },
      ],
    },
    {
      name: "create_prediction",
      description:
        "Create a new prediction using a specific model version on Replicate.\n\n        Args:\n            input: Model input parameters including version or model details\n            confirmed: Whether the user has explicitly confirmed the generation\n\n        Returns:\n            Prediction details if confirmed, or a confirmation request if not\n        ",
      parameters: [
        {
          name: "confirmed",
          type: "boolean",
          description: "Parameter: confirmed",
          required: false,
        },
        {
          name: "input",
          type: "object",
          description: "Parameter: input",
          required: true,
        },
      ],
    },
    {
      name: "get_prediction",
      description: "Get the status and results of a prediction.",
      parameters: [
        {
          name: "max_retries",
          type: "string",
          description: "Parameter: max_retries",
          required: false,
        },
        {
          name: "prediction_id",
          type: "string",
          description: "Parameter: prediction_id",
          required: true,
        },
        {
          name: "wait",
          type: "boolean",
          description: "Parameter: wait",
          required: false,
        },
      ],
    },
    {
      name: "cancel_prediction",
      description: "Cancel a running prediction.",
      parameters: [
        {
          name: "prediction_id",
          type: "string",
          description: "Parameter: prediction_id",
          required: true,
        },
      ],
    },
    {
      name: "get_webhook_secret",
      description: "Get the signing secret for verifying webhook requests.",
      parameters: [],
    },
    {
      name: "verify_webhook",
      description:
        "Verify that a webhook request came from Replicate using HMAC-SHA256.\n\n        Args:\n            payload: The webhook payload to verify\n            signature: The signature from the X-Replicate-Signature header\n            secret: The webhook signing secret from get_webhook_secret\n\n        Returns:\n            True if signature is valid, False otherwise\n        ",
      parameters: [
        {
          name: "payload",
          type: "string",
          description: "Parameter: payload",
          required: true,
        },
        {
          name: "secret",
          type: "string",
          description: "Parameter: secret",
          required: true,
        },
        {
          name: "signature",
          type: "string",
          description: "Parameter: signature",
          required: true,
        },
      ],
    },
    {
      name: "search_available_models",
      description:
        "Search for available models matching the query.\n\n        Args:\n            query: Search query describing the desired model\n            style: Optional style to filter by\n\n        Returns:\n            List of matching models with scores\n        ",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "style",
          type: "string",
          description: "Parameter: style",
          required: false,
        },
      ],
    },
    {
      name: "get_model_details",
      description:
        "Get detailed information about a specific model.\n\n        Args:\n            model_id: Model identifier in format owner/name\n\n        Returns:\n            Detailed model information\n        ",
      parameters: [
        {
          name: "model_id",
          type: "string",
          description: "Parameter: model_id",
          required: true,
        },
      ],
    },
    {
      name: "generate_image",
      description: "Generate an image using the specified parameters.",
      parameters: [
        {
          name: "height",
          type: "string",
          description: "Parameter: height",
          required: false,
        },
        {
          name: "num_outputs",
          type: "integer",
          description: "Parameter: num_outputs",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "quality",
          type: "string",
          description: "Parameter: quality",
          required: false,
        },
        {
          name: "seed",
          type: "string",
          description: "Parameter: seed",
          required: false,
        },
        {
          name: "style",
          type: "string",
          description: "Parameter: style",
          required: false,
        },
        {
          name: "width",
          type: "string",
          description: "Parameter: width",
          required: false,
        },
      ],
    },
    {
      name: "subscribe_to_generation",
      description: "Handle resource subscription requests.",
      parameters: [
        {
          name: "request",
          type: "string",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "unsubscribe_from_generation",
      description: "Handle resource unsubscribe requests.",
      parameters: [
        {
          name: "request",
          type: "string",
          description: "Parameter: request",
          required: true,
        },
      ],
    },
    {
      name: "open_image_with_system",
      description:
        "Open an image URL with the system's default application.\n\n        Args:\n            image_url: URL of the image to open\n\n        Returns:\n            Dict containing status of the operation\n        ",
      parameters: [
        {
          name: "image_url",
          type: "string",
          description: "Parameter: image_url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/gerred/mcp-server-replicate",
  _varName: "mcpServerReplicatePlugin",
};

const mysqlServerMcpServerPlugin: Plugin = {
  id: "328dnziprm",
  name: "MySQL Server MCP Server",
  description:
    "A TypeScript-based MCP server that facilitates SQL query execution and MySQL database connectivity using environment variables.",
  image: "https://github.com/xianzong85.png",
  actions: [],
  githubUrl: "https://github.com/xianzong85/mysql-server-MCP-Server",
  _varName: "mysqlServerMcpServerPlugin",
};

const iacMemoryMcpServer1Plugin: Plugin = {
  id: "0vzzy6ngc9",
  name: "IAC Memory MCP Server",
  description:
    "A custom Memory MCP Server that acts as a cache for Infrastructure-as-Code information, allowing users to store, summarize, and manage notes with a custom URI scheme and simple resource handling.",
  image: "https://github.com/AgentWong.png",
  actions: [
    {
      name: "get_terraform_provider_info",
      description:
        "Retrieve comprehensive information about a Terraform provider",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
      ],
    },
    {
      name: "list_terraform_providers",
      description: "List all cached Terraform providers with basic metadata",
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Optional filtering criteria",
          required: false,
        },
      ],
    },
    {
      name: "get_provider_version_history",
      description: "Retrieve version history for a specific Terraform provider",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
      ],
    },
    {
      name: "get_terraform_resource_info",
      description:
        "Retrieve comprehensive information about a Terraform resource including schema and documentation",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
        {
          name: "resource_name",
          type: "string",
          description: "Name of the resource",
          required: true,
        },
      ],
    },
    {
      name: "list_provider_resources",
      description:
        "List all resources associated with a specific Terraform provider",
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Optional filtering criteria",
          required: false,
        },
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
      ],
    },
    {
      name: "get_ansible_collection_info",
      description:
        "Retrieve comprehensive information about an Ansible collection",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
      ],
    },
    {
      name: "list_ansible_collections",
      description: "List all cached Ansible collections with basic metadata",
      parameters: [
        {
          name: "filter_criteria",
          type: "object",
          description: "Optional filtering criteria",
          required: false,
        },
      ],
    },
    {
      name: "get_collection_version_history",
      description: "Retrieve version history for a specific Ansible collection",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
      ],
    },
    {
      name: "get_ansible_module_info",
      description:
        "Retrieve comprehensive information about an Ansible module including schema and documentation",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
        {
          name: "module_name",
          type: "string",
          description: "Name of the module",
          required: true,
        },
      ],
    },
    {
      name: "get_resource_version_compatibility",
      description: "Check resource compatibility across provider versions",
      parameters: [
        {
          name: "provider_name",
          type: "string",
          description: "Name of the Terraform provider",
          required: true,
        },
        {
          name: "resource_name",
          type: "string",
          description: "Name of the resource to check",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Target provider version to check compatibility against",
          required: true,
        },
      ],
    },
    {
      name: "add_terraform_provider",
      description:
        "Add a new Terraform provider to the memory store with version and documentation information",
      parameters: [
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Provider name",
          required: true,
        },
        {
          name: "source_url",
          type: "string",
          description: "Source repository URL",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Provider version",
          required: true,
        },
      ],
    },
    {
      name: "update_provider_version",
      description:
        "Update an existing Terraform provider's version information and documentation links",
      parameters: [
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_source_url",
          type: "string",
          description: "New source URL",
          required: false,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: true,
        },
        {
          name: "provider_name",
          type: "string",
          description: "Name of the provider",
          required: true,
        },
      ],
    },
    {
      name: "add_terraform_resource",
      description:
        "Add a new Terraform resource definition with its schema and version information",
      parameters: [
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Resource name",
          required: true,
        },
        {
          name: "provider_id",
          type: "string",
          description: "Provider ID",
          required: false,
        },
        {
          name: "resource_type",
          type: "string",
          description: "Resource type",
          required: true,
        },
        {
          name: "schema",
          type: "string",
          description: "Resource schema",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Resource version",
          required: true,
        },
      ],
    },
    {
      name: "update_resource_schema",
      description:
        "Update an existing Terraform resource's schema and related information",
      parameters: [
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_schema",
          type: "string",
          description: "New schema",
          required: true,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: false,
        },
        {
          name: "resource_id",
          type: "string",
          description: "Resource ID",
          required: true,
        },
      ],
    },
    {
      name: "add_ansible_collection",
      description:
        "Add a new Ansible collection to the memory store with version and documentation information",
      parameters: [
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "source_url",
          type: "string",
          description: "Source repository URL",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Collection version",
          required: true,
        },
      ],
    },
    {
      name: "update_collection_version",
      description:
        "Update an existing Ansible collection's version information and documentation links",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_source_url",
          type: "string",
          description: "New source URL",
          required: false,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: true,
        },
      ],
    },
    {
      name: "add_ansible_module",
      description:
        "Add a new Ansible module definition with its schema and version information",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection ID or name",
          required: true,
        },
        {
          name: "doc_url",
          type: "string",
          description: "Documentation URL",
          required: true,
        },
        {
          name: "module_type",
          type: "string",
          description: "Module type",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Module name",
          required: true,
        },
        {
          name: "schema",
          type: "string",
          description: "Module schema",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Module version",
          required: true,
        },
      ],
    },
    {
      name: "update_module_version",
      description:
        "Update an existing Ansible module's schema and related information",
      parameters: [
        {
          name: "module_id",
          type: "string",
          description: "Module ID",
          required: true,
        },
        {
          name: "new_doc_url",
          type: "string",
          description: "New documentation URL",
          required: false,
        },
        {
          name: "new_schema",
          type: "string",
          description: "New schema",
          required: true,
        },
        {
          name: "new_version",
          type: "string",
          description: "New version",
          required: false,
        },
      ],
    },
    {
      name: "get_module_version_compatibility",
      description: "Check module compatibility across collection versions",
      parameters: [
        {
          name: "collection_name",
          type: "string",
          description: "Name of the Ansible collection",
          required: true,
        },
        {
          name: "module_name",
          type: "string",
          description: "Name of the module to check",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description:
            "Target collection version to check compatibility against",
          required: true,
        },
      ],
    },
    {
      name: "create_entity",
      description:
        "Create a new entity in the knowledge graph with optional initial observations",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Entity name",
          required: true,
        },
        {
          name: "observation",
          type: "string",
          description: "Initial observation",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Entity type",
          required: true,
        },
      ],
    },
    {
      name: "update_entity",
      description:
        "Update an existing entity's properties and add new observations",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Entity ID",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New name",
          required: false,
        },
        {
          name: "observation",
          type: "string",
          description: "New observation",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "New type",
          required: false,
        },
      ],
    },
    {
      name: "delete_entity",
      description:
        "Remove an entity and its relationships from the knowledge graph",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Entity ID",
          required: true,
        },
      ],
    },
    {
      name: "view_relationships",
      description:
        "Retrieve all relationships and observations for a specific entity",
      parameters: [
        {
          name: "entity_id",
          type: "string",
          description: "Entity ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AgentWong/iac-memory-mcp-server",
  _varName: "iacMemoryMcpServer1Plugin",
};

const mcpChatAnalysisServerPlugin: Plugin = {
  id: "3p9d8eod5v",
  name: "MCP Chat Analysis Server",
  description:
    "Facilitates semantic analysis of chat conversations through vector embeddings and knowledge graphs, offering tools for semantic search, concept extraction, and conversation pattern analysis.",
  image: "https://github.com/rebots-online.png",
  actions: [],
  githubUrl: "https://github.com/rebots-online/mcp-chat-analysis-server",
  _varName: "mcpChatAnalysisServerPlugin",
};

const discordRawApiMcpServerPlugin: Plugin = {
  id: "ct3fi5s557",
  name: "Discord Raw API MCP Server",
  description:
    "Enables direct interaction with the Discord API using both REST API calls and slash command syntax for bot management, server configuration, and message operations.",
  image: "https://github.com/hanweg.png",
  actions: [
    {
      name: "discord_api",
      description:
        "Execute raw Discord API commands. Supports both REST API calls and application commands.",
      parameters: [
        {
          name: "endpoint",
          type: "string",
          description:
            "Discord API endpoint (e.g., 'guilds/{guild.id}/roles' or command like '/role create')",
          required: true,
        },
        {
          name: "method",
          type: "string",
          description: "HTTP method (GET, POST, PUT, PATCH, DELETE)",
          required: true,
        },
        {
          name: "payload",
          type: "object",
          description: "Optional request payload/body",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hanweg/mcp-discord-raw",
  _varName: "discordRawApiMcpServerPlugin",
};

const mcpNeo4jServerPlugin: Plugin = {
  id: "qjpsxn4zlh",
  name: "MCP Neo4j Server",
  description:
    "This server enables interaction between Neo4j databases and Claude Desktop, allowing users to execute Cypher queries, create nodes, and establish relationships in the database.",
  image: "https://github.com/da-okazaki.png",
  actions: [
    {
      name: "execute_query",
      description: "Execute a Cypher query on Neo4j database",
      parameters: [
        {
          name: "params",
          type: "object",
          description: "Query parameters",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Cypher query to execute",
          required: true,
        },
      ],
    },
    {
      name: "create_node",
      description: "Create a new node in Neo4j",
      parameters: [
        {
          name: "label",
          type: "string",
          description: "Node label",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Node properties",
          required: true,
        },
      ],
    },
    {
      name: "create_relationship",
      description: "Create a relationship between two nodes",
      parameters: [
        {
          name: "fromNodeId",
          type: "number",
          description: "ID of the source node",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Relationship properties",
          required: false,
        },
        {
          name: "toNodeId",
          type: "number",
          description: "ID of the target node",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Relationship type",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/da-okazaki/mcp-neo4j-server",
  _varName: "mcpNeo4jServerPlugin",
};

const babashkaMcpServerPlugin: Plugin = {
  id: "5x0u155x1h",
  name: "Babashka MCP Server",
  description:
    "Enables execution and management of Babashka scripts using the Model Context Protocol, offering features like caching, command history access, and configurable timeouts for enhanced scripting workflows.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "execute",
      description: "Execute Babashka (bb) code",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Babashka code to execute",
          required: true,
        },
        {
          name: "timeout",
          type: "number",
          description: "Timeout in milliseconds (default: 30000)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bmorphism/babashka-mcp-server",
  _varName: "babashkaMcpServerPlugin",
};

const mcpFilesystemPythonPlugin: Plugin = {
  id: "pjawwhnuzf",
  name: "MCP Filesystem Python",
  description:
    "This server offers secure, read-only access to directory files via the MCP, supporting file searching, .gitignore compliance, path traversal protection, and MIME type detection using the 'file://' URI scheme.",
  image: "https://github.com/punkpeye.png",
  actions: [],
  githubUrl: "https://github.com/punkpeye/mcp-filesystem-python",
  _varName: "mcpFilesystemPythonPlugin",
};

const obsidianMcpServer1Plugin: Plugin = {
  id: "02n7aazeu1",
  name: "Obsidian MCP Server",
  description:
    "This TypeScript-based MCP server enables users to manage and summarize text notes, providing tools for note creation and summarization prompts.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "get_vault_contents",
      description: "Obsidian Vaultの内容を取得",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Vault内のパス（デフォルト: 空文字列でルートディレクトリを取得）",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/obsidian-mcp",
  _varName: "obsidianMcpServer1Plugin",
};

const geminiSearchMcpServerPlugin: Plugin = {
  id: "5ydkuk88c7",
  name: "Gemini Search MCP Server",
  description:
    "Utilizes Gemini API and Google Search to generate answers based on the latest information for user queries.",
  image: "https://github.com/Lorhlona.png",
  actions: [
    {
      name: "search",
      description:
        "Gemini 2.0とGoogle検索を使用して、最新の情報に基づいた回答を生成",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "検索クエリ",
          required: true,
        },
      ],
    },
    {
      name: "analyze_file",
      description:
        "Gemini 2.0のマルチモーダル機能を使用してファイル（画像、PDF）を分析",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "ファイルパス（画像またはPDF）",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "ファイルに対する質問や指示（オプション）",
          required: false,
        },
      ],
    },
    {
      name: "analyze_files",
      description: "複数のファイルを同時に分析し、内容の整合性を確認",
      parameters: [
        {
          name: "file_paths",
          type: "string array",
          description: "分析するファイルのパス一覧",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "ファイルに対する質問や指示（オプション）",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Lorhlona/geminiserchMCP",
  _varName: "geminiSearchMcpServerPlugin",
};

const clinePersonasMcpServerPlugin: Plugin = {
  id: "pwpxbeorz7",
  name: "Cline Personas MCP Server",
  description:
    "An MCP server for managing and activating persona templates and components by writing to .clinerules files, supporting version tracking and file-based storage.",
  image: "https://github.com/bradfair.png",
  actions: [],
  githubUrl: "https://github.com/bradfair/mcp-cline-personas",
  _varName: "clinePersonasMcpServerPlugin",
};

const videoEditorMcpServerPlugin: Plugin = {
  id: "ov0qov2xh1",
  name: "Video Editor MCP Server",
  description:
    "Enables video editing using natural language commands powered by FFmpeg, supporting operations like trimming, merging, format conversion, and more with real-time progress tracking and error handling.",
  image: "https://github.com/Kush36Agrawal.png",
  actions: [],
  githubUrl: "https://github.com/Kush36Agrawal/Video_Editor_MCP",
  _varName: "videoEditorMcpServerPlugin",
};

const playwrightServerMcpPlugin: Plugin = {
  id: "c50bsocgzb",
  name: "Playwright Server MCP",
  description:
    "The server provides tools for web automation using Playwright, allowing navigation, interaction, and JavaScript execution on web pages, and supports note storage with summarization capabilities.",
  image: "https://github.com/blackwhite084.png",
  actions: [
    {
      name: "playwright_navigate",
      description: "Navigate to a URL,thip op will auto create a session",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "playwright_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description:
            "CSS selector for element to screenshot,null is full page",
          required: false,
        },
      ],
    },
    {
      name: "playwright_click",
      description: "Click an element on the page using CSS selector",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_fill",
      description: "Fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "playwright_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
    {
      name: "playwright_click_text",
      description: "Click an element on the page by its text content",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Text content of the element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_get_text_content",
      description: "Get the text content of all elements",
      parameters: [],
    },
    {
      name: "playwright_get_html_content",
      description: "Get the HTML content of the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for the element",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/blackwhite084/playwright-plus-python-mcp",
  _varName: "playwrightServerMcpPlugin",
};

const claudeChunksPlugin: Plugin = {
  id: "w8yob2uc16",
  name: "Claude Chunks",
  description:
    "An MCP server that intelligently chunks large documents for Claude, enabling efficient context-aware processing and summary generation for enhanced document comprehension.",
  image: "https://github.com/vetlefo.png",
  actions: [],
  githubUrl: "https://github.com/vetlefo/claude-chunks",
  _varName: "claudeChunksPlugin",
};

const mcpFilesystemPython1Plugin: Plugin = {
  id: "admt9a4f34",
  name: "MCP Filesystem Python",
  description:
    "A secure MCP server enabling read-only access and file search capabilities within a specified directory, while respecting .gitignore patterns.",
  image: "https://github.com/mtunell.png",
  actions: [],
  githubUrl: "https://github.com/mtunell/mcp-filesystem-python",
  _varName: "mcpFilesystemPython1Plugin",
};

const metaplexMcpServerPlugin: Plugin = {
  id: "mk8rgl7f08",
  name: "Metaplex MCP Server",
  description:
    "The Metaplex MCP Server facilitates access to Metaplex documentation and repository details, enabling users to search and interact with various Metaplex resources through the MCP protocol.",
  image: "https://github.com/aldrin-labs.png",
  actions: [
    {
      name: "search_docs",
      description: "Search Metaplex documentation",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_repo",
      description: "Get Metaplaex repository details",
      parameters: [
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
    {
      name: "search_code",
      description: "Search code in Metaplaex repositories",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aldrin-labs/metaplex-mcp-server",
  _varName: "metaplexMcpServerPlugin",
};

const sayMcpServerPlugin: Plugin = {
  id: "lmmqoe15jp",
  name: "Say MCP Server",
  description:
    "Enables text-to-speech functionality on macOS using the say command, offering extensive control over speech parameters like voice, rate, volume, and pitch for a customizable auditory experience.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "speak",
      description: "Use macOS text-to-speech to speak text aloud",
      parameters: [
        {
          name: "background",
          type: "boolean",
          description:
            "Run speech in background to unblock further MCP interaction",
          required: false,
        },
        {
          name: "rate",
          type: "number",
          description: "Speaking rate (words per minute)",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Text to speak",
          required: true,
        },
        {
          name: "voice",
          type: "string",
          description: 'Voice to use (e.g., "Alex", "Victoria", "Daniel")',
          required: false,
        },
      ],
    },
    {
      name: "list_voices",
      description: "List available text-to-speech voices",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/bmorphism/say-mcp-server",
  _varName: "sayMcpServerPlugin",
};

const npmsearchmcpserverPlugin: Plugin = {
  id: "yeb3luefvf",
  name: "npm-search-mcp-server",
  description: "MCP server for searching npm packages",
  image: "https://github.com/btwiuse.png",
  actions: [
    {
      name: "search_npm_packages",
      description: "Search for npm packages",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/btwiuse/npm-search-mcp-server",
  _varName: "npmsearchmcpserverPlugin",
};

const unrealEngineCodeAnalyzerMcpServerPlugin: Plugin = {
  id: "z36022whws",
  name: "Unreal Engine Code Analyzer MCP Server",
  description:
    "Provides deep source code analysis for Unreal Engine codebases, allowing AI assistants to understand C++ class structures, search code, and analyze subsystems.",
  image: "https://github.com/ayeletstudioindia.png",
  actions: [],
  githubUrl: "https://github.com/ayeletstudioindia/unreal-analyzer-mcp",
  _varName: "unrealEngineCodeAnalyzerMcpServerPlugin",
};

const memgptMcpServerPlugin: Plugin = {
  id: "3cynbzxe8h",
  name: "MemGPT MCP Server",
  description:
    "A TypeScript-based server that provides a memory system for Large Language Models (LLMs), allowing users to interact with multiple LLM providers while maintaining conversation history and offering tools for managing providers and model configurations.",
  image: "https://github.com/Vic563.png",
  actions: [],
  githubUrl: "https://github.com/Vic563/Memgpt-MCP-Server",
  _varName: "memgptMcpServerPlugin",
};

const mcpServerTrelloPlugin: Plugin = {
  id: "klqkamy7wt",
  name: "MCP Server Trello",
  description:
    "Facilitates interaction with Trello boards via the Trello API, offering features like rate limiting, type safety, input validation, and error handling for seamless management of cards, lists, and board activities.",
  image: "https://github.com/delorenj.png",
  actions: [
    {
      name: "get_cards_by_list_id",
      description: "Fetch cards from a specific Trello list",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "ID of the Trello list",
          required: true,
        },
      ],
    },
    {
      name: "get_lists",
      description: "Retrieve all lists from the specified board",
      parameters: [],
    },
    {
      name: "get_recent_activity",
      description: "Fetch recent activity on the Trello board",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of activities to fetch (default: 10)",
          required: false,
        },
      ],
    },
    {
      name: "add_card_to_list",
      description: "Add a new card to a specified list",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Description of the card",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description: "Due date for the card (ISO 8601 format)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of label IDs to apply to the card",
          required: false,
        },
        {
          name: "listId",
          type: "string",
          description: "ID of the list to add the card to",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the card",
          required: true,
        },
      ],
    },
    {
      name: "update_card_details",
      description: "Update an existing card's details",
      parameters: [
        {
          name: "cardId",
          type: "string",
          description: "ID of the card to update",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "New description for the card",
          required: false,
        },
        {
          name: "dueDate",
          type: "string",
          description: "New due date for the card (ISO 8601 format)",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "New array of label IDs for the card",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New name for the card",
          required: false,
        },
      ],
    },
    {
      name: "archive_card",
      description: "Send a card to the archive",
      parameters: [
        {
          name: "cardId",
          type: "string",
          description: "ID of the card to archive",
          required: true,
        },
      ],
    },
    {
      name: "add_list_to_board",
      description: "Add a new list to the board",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the new list",
          required: true,
        },
      ],
    },
    {
      name: "archive_list",
      description: "Send a list to the archive",
      parameters: [
        {
          name: "listId",
          type: "string",
          description: "ID of the list to archive",
          required: true,
        },
      ],
    },
    {
      name: "get_my_cards",
      description: "Fetch all cards assigned to the current user",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/delorenj/mcp-server-trello",
  _varName: "mcpServerTrelloPlugin",
};

const solanamcpserverPlugin: Plugin = {
  id: "bp6d6p1sp3",
  name: "solana-mcp-server",
  description:
    "mcp server that allows to do actual actions related to solana\nfirst version adds knowledge about RPC methods and how to call them",
  image: "https://github.com/aldrin-labs.png",
  actions: [],
  githubUrl: "https://github.com/aldrin-labs/solana-mcp-server",
  _varName: "solanamcpserverPlugin",
};

const solanadocsmcpserverPlugin: Plugin = {
  id: "v2cs13njts",
  name: "solana-docs-mcp-server",
  description: "solan docs context",
  image: "https://github.com/aldrin-labs.png",
  actions: [
    {
      name: "get_latest_docs",
      description: "Get latest Solana documentation sections",
      parameters: [
        {
          name: "section",
          type: "string",
          description:
            'Documentation section to fetch (e.g., "developing", "running-validator", "economics")',
          required: true,
        },
      ],
    },
    {
      name: "search_docs",
      description: "Search through Solana documentation",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "get_api_reference",
      description: "Get Solana SDK API reference details",
      parameters: [
        {
          name: "item",
          type: "string",
          description:
            'API item to look up (e.g., "transaction", "pubkey", "system_instruction")',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aldrin-labs/solana-docs-mcp-server",
  _varName: "solanadocsmcpserverPlugin",
};

const mcpserverfirecrawlPlugin: Plugin = {
  id: "57mideuljt",
  name: "mcp-server-firecrawl",
  description:
    "A Model Context Protocol (MCP) server implementation that integrates with FireCrawl for advanced web scraping capabilities.",
  image: "https://github.com/mendableai.png",
  actions: [
    {
      name: "firecrawl_scrape",
      description:
        "Scrape a single webpage with advanced options for content extraction. Supports various formats including markdown, HTML, and screenshots. Can execute custom actions like clicking or scrolling before scraping.",
      parameters: [
        {
          name: "actions",
          type: "object array",
          description: "List of actions to perform before scraping",
          required: false,
        },
        {
          name: "excludeTags",
          type: "string array",
          description: "HTML tags to exclude from extraction",
          required: false,
        },
        {
          name: "extract",
          type: "object",
          description: "Configuration for structured data extraction",
          required: false,
        },
        {
          name: "formats",
          type: "string array",
          description: "Content formats to extract (default: ['markdown'])",
          required: false,
        },
        {
          name: "includeTags",
          type: "string array",
          description: "HTML tags to specifically include in extraction",
          required: false,
        },
        {
          name: "location",
          type: "object",
          description: "Location settings for scraping",
          required: false,
        },
        {
          name: "mobile",
          type: "boolean",
          description: "Use mobile viewport",
          required: false,
        },
        {
          name: "onlyMainContent",
          type: "boolean",
          description:
            "Extract only the main content, filtering out navigation, footers, etc.",
          required: false,
        },
        {
          name: "removeBase64Images",
          type: "boolean",
          description: "Remove base64 encoded images from output",
          required: false,
        },
        {
          name: "skipTlsVerification",
          type: "boolean",
          description: "Skip TLS certificate verification",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description:
            "Maximum time in milliseconds to wait for the page to load",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to scrape",
          required: true,
        },
        {
          name: "waitFor",
          type: "number",
          description:
            "Time in milliseconds to wait for dynamic content to load",
          required: false,
        },
      ],
    },
    {
      name: "firecrawl_map",
      description:
        "Discover URLs from a starting point. Can use both sitemap.xml and HTML link discovery.",
      parameters: [
        {
          name: "ignoreSitemap",
          type: "boolean",
          description: "Skip sitemap.xml discovery and only use HTML links",
          required: false,
        },
        {
          name: "includeSubdomains",
          type: "boolean",
          description: "Include URLs from subdomains in results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of URLs to return",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Optional search term to filter URLs",
          required: false,
        },
        {
          name: "sitemapOnly",
          type: "boolean",
          description: "Only use sitemap.xml for discovery, ignore HTML links",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Starting URL for URL discovery",
          required: true,
        },
      ],
    },
    {
      name: "firecrawl_crawl",
      description:
        "Start an asynchronous crawl of multiple pages from a starting URL. Supports depth control, path filtering, and webhook notifications.",
      parameters: [
        {
          name: "allowBackwardLinks",
          type: "boolean",
          description: "Allow crawling links that point to parent directories",
          required: false,
        },
        {
          name: "allowExternalLinks",
          type: "boolean",
          description: "Allow crawling links to external domains",
          required: false,
        },
        {
          name: "deduplicateSimilarURLs",
          type: "boolean",
          description: "Remove similar URLs during crawl",
          required: false,
        },
        {
          name: "excludePaths",
          type: "string array",
          description: "URL paths to exclude from crawling",
          required: false,
        },
        {
          name: "ignoreQueryParameters",
          type: "boolean",
          description: "Ignore query parameters when comparing URLs",
          required: false,
        },
        {
          name: "ignoreSitemap",
          type: "boolean",
          description: "Skip sitemap.xml discovery",
          required: false,
        },
        {
          name: "includePaths",
          type: "string array",
          description: "Only crawl these URL paths",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of pages to crawl",
          required: false,
        },
        {
          name: "maxDepth",
          type: "number",
          description: "Maximum link depth to crawl",
          required: false,
        },
        {
          name: "scrapeOptions",
          type: "object",
          description: "Options for scraping each page",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Starting URL for the crawl",
          required: true,
        },
        {
          name: "webhook",
          type: "string",
          description: "Parameter: webhook",
          required: false,
        },
      ],
    },
    {
      name: "firecrawl_batch_scrape",
      description:
        "Scrape multiple URLs in batch mode. Returns a job ID that can be used to check status.",
      parameters: [
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: false,
        },
        {
          name: "urls",
          type: "string array",
          description: "List of URLs to scrape",
          required: true,
        },
      ],
    },
    {
      name: "firecrawl_check_batch_status",
      description: "Check the status of a batch scraping job.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Batch job ID to check",
          required: true,
        },
      ],
    },
    {
      name: "firecrawl_check_crawl_status",
      description: "Check the status of a crawl job.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Crawl job ID to check",
          required: true,
        },
      ],
    },
    {
      name: "firecrawl_search",
      description:
        "Search and retrieve content from web pages with optional scraping. Returns SERP results by default (url, title, description) or full page content when scrapeOptions are provided.",
      parameters: [
        {
          name: "country",
          type: "string",
          description: "Country code for search results (default: us)",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Search filter",
          required: false,
        },
        {
          name: "lang",
          type: "string",
          description: "Language code for search results (default: en)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return (default: 5)",
          required: false,
        },
        {
          name: "location",
          type: "object",
          description: "Location settings for search",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query string",
          required: true,
        },
        {
          name: "scrapeOptions",
          type: "object",
          description: "Options for scraping search results",
          required: false,
        },
        {
          name: "tbs",
          type: "string",
          description: "Time-based search filter",
          required: false,
        },
      ],
    },
    {
      name: "firecrawl_extract",
      description:
        "Extract structured information from web pages using LLM. Supports both cloud AI and self-hosted LLM extraction.",
      parameters: [
        {
          name: "allowExternalLinks",
          type: "boolean",
          description: "Allow extraction from external links",
          required: false,
        },
        {
          name: "enableWebSearch",
          type: "boolean",
          description: "Enable web search for additional context",
          required: false,
        },
        {
          name: "includeSubdomains",
          type: "boolean",
          description: "Include subdomains in extraction",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Prompt for the LLM extraction",
          required: false,
        },
        {
          name: "schema",
          type: "object",
          description: "JSON schema for structured data extraction",
          required: false,
        },
        {
          name: "systemPrompt",
          type: "string",
          description: "System prompt for LLM extraction",
          required: false,
        },
        {
          name: "urls",
          type: "string array",
          description: "List of URLs to extract information from",
          required: true,
        },
      ],
    },
    {
      name: "firecrawl_deep_research",
      description:
        "Conduct deep research on a query using web crawling, search, and AI analysis.",
      parameters: [
        {
          name: "maxDepth",
          type: "number",
          description: "Maximum depth of research iterations (1-10)",
          required: false,
        },
        {
          name: "maxUrls",
          type: "number",
          description: "Maximum number of URLs to analyze (1-1000)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The query to research",
          required: true,
        },
        {
          name: "timeLimit",
          type: "number",
          description: "Time limit in seconds (30-300)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mendableai/firecrawl-mcp-server",
  _varName: "mcpserverfirecrawlPlugin",
};

const playwrightMcpServer1Plugin: Plugin = {
  id: "wtpg84vbx5",
  name: "Playwright MCP Server",
  description:
    "A server that enables browser automation using Playwright, allowing interaction with web pages, capturing screenshots, and executing JavaScript in a browser environment through LLMs.",
  image: "https://github.com/lebrodus.png",
  actions: [
    {
      name: "playwright_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "playwright_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "downloadsDir",
          type: "string",
          description:
            "Custom downloads directory path (default: user's Downloads folder)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "savePng",
          type: "boolean",
          description: "Save screenshot as PNG file (default: false)",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "storeBase64",
          type: "boolean",
          description: "Store screenshot in base64 format (default: true)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "playwright_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_fill",
      description: "fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "playwright_select",
      description: "Select an element on the page with Select tag",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "playwright_hover",
      description: "Hover an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "playwright_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
    {
      name: "playwright_get",
      description: "Perform an HTTP GET request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform GET operation",
          required: true,
        },
      ],
    },
    {
      name: "playwright_post",
      description: "Perform an HTTP POST request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform POST operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to post in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_put",
      description: "Perform an HTTP PUT request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PUT in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_patch",
      description: "Perform an HTTP PATCH request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PATCH in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_delete",
      description: "Perform an HTTP DELETE request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform DELETE operation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lebrodus/mcp-playwright",
  _varName: "playwrightMcpServer1Plugin",
};

const mcpPytestServerPlugin: Plugin = {
  id: "vrkz0o2puq",
  name: "MCP Pytest Server",
  description:
    "A Node.js server that integrates with pytest to facilitate the ModelContextProtocol (MCP) service tools, enabling test execution recording and environment tracking.",
  image: "https://github.com/kieranlal.png",
  actions: [],
  githubUrl: "https://github.com/kieranlal/mcp_pytest_service",
  _varName: "mcpPytestServerPlugin",
};

const wecomBotMcpServerPlugin: Plugin = {
  id: "amr2j23lbk",
  name: "WeCom Bot MCP Server",
  description:
    "A server for sending messages via WeCom bots using FastMCP, supporting asynchronous communication and message tracking through webhooks.",
  image: "https://github.com/loonghao.png",
  actions: [
    {
      name: "send_wecom_file",
      description:
        "Send file to WeCom.\n\n    Args:\n        file_path: Path to file\n        ctx: FastMCP context\n\n    Returns:\n        dict: Response containing status and message\n\n    Raises:\n        WeComError: If file is not found or API call fails\n\n    ",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: false,
        },
        {
          name: "file_path",
          type: "string",
          description: "Parameter: file_path",
          required: true,
        },
      ],
    },
    {
      name: "send_wecom_image",
      description:
        "Send image to WeCom.\n\n    Args:\n        image_path: Path to image file or URL\n        ctx: FastMCP context\n\n    Returns:\n        dict: Response containing status and message\n\n    Raises:\n        WeComError: If image is not found or API call fails.\n\n    ",
      parameters: [
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: false,
        },
        {
          name: "image_path",
          type: "string",
          description: "Parameter: image_path",
          required: true,
        },
      ],
    },
    {
      name: "send_message",
      description:
        "Send message to WeCom.\n\n    Args:\n        content: Message content\n        msg_type: Message type (text, markdown)\n        mentioned_list: List of mentioned users\n        mentioned_mobile_list: List of mentioned mobile numbers\n        ctx: FastMCP context\n\n    Returns:\n        dict: Response containing status and message\n\n    Raises:\n        WeComError: If message sending fails\n\n    ",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "ctx",
          type: "string",
          description: "Parameter: ctx",
          required: false,
        },
        {
          name: "mentioned_list",
          type: "string",
          description: "Parameter: mentioned_list",
          required: false,
        },
        {
          name: "mentioned_mobile_list",
          type: "string",
          description: "Parameter: mentioned_mobile_list",
          required: false,
        },
        {
          name: "msg_type",
          type: "string",
          description: "Parameter: msg_type",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/loonghao/wecom-bot-mcp-server",
  _varName: "wecomBotMcpServerPlugin",
};

const marginaliaMcpServerPlugin: Plugin = {
  id: "3weyx38n1h",
  name: "Marginalia MCP Server",
  description:
    "Provides access to Marginalia Search for discovering non-commercial and independent web content, returning unique sites with URLs, titles, and descriptions.",
  image: "https://github.com/bmorphism.png",
  actions: [
    {
      name: "search-marginalia",
      description: "Search the web using Marginalia Search",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of results to return",
          required: false,
        },
        {
          name: "index",
          type: "number",
          description: "Search index (corresponds to dropdown in main GUI)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bmorphism/marginalia-mcp-server",
  _varName: "marginaliaMcpServerPlugin",
};

const slowtimeMcpServerPlugin: Plugin = {
  id: "mq2tb24hk0",
  name: "Slowtime MCP Server",
  description:
    "A secure Model Context Protocol server that manages time-based operations using timing attack protection and timelock encryption, allowing for timed interval management and secure data storage.",
  image: "https://github.com/bmorphism.png",
  actions: [],
  githubUrl: "https://github.com/bmorphism/slowtime-mcp-server",
  _varName: "slowtimeMcpServerPlugin",
};

const optimizedMemoryMcpServerV2Plugin: Plugin = {
  id: "e9fy8seqww",
  name: "Optimized Memory MCP Server V2",
  description:
    "A Python-based server that implements the Model Context Protocol to interface with Claude Desktop as an MCP client, supporting interaction through efficient memory management.",
  image: "https://github.com/AgentWong.png",
  actions: [],
  githubUrl: "https://github.com/AgentWong/optimized-memory-mcp-serverv2",
  _varName: "optimizedMemoryMcpServerV2Plugin",
};

const wikimediaMcpServerPlugin: Plugin = {
  id: "l6ihu97mw7",
  name: "Wikimedia MCP Server",
  description:
    "Enables programmatic interaction with Wikimedia APIs, offering features like searching content, retrieving page information, and accessing historical events across multiple languages.",
  image: "https://github.com/privetin.png",
  actions: [
    {
      name: "search_content",
      description:
        "Full-text search across Wikimedia page content. Returns snippets matching the query. Parameters: query (required), limit (1-50), project (e.g., 'wikipedia'), language (e.g., 'en')",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_page",
      description:
        "Get Wikimedia page content, title, URL and last modified date. Parameters: title (required), project (e.g., 'wikipedia'), language (e.g., 'en')",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "search_titles",
      description:
        "Search Wikimedia page titles starting with the query. Returns suggestions with descriptions. Parameters: query (required), limit (1-100), project (e.g., 'wikipedia'), language (e.g., 'en')",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "get_languages",
      description:
        "Get versions of a Wikimedia page in other languages. Parameters: title (required), project (e.g., 'wikipedia'), language (e.g., 'en')",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "get_featured",
      description:
        "Get featured Wikimedia content for a date. Returns featured article, most read pages, and picture of the day. Parameters: date (YYYY/MM/DD, default today), project ('wikipedia' only), language (en/de/fr/es/ru/ja/zh)",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Parameter: date",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
      ],
    },
    {
      name: "get_on_this_day",
      description:
        "Get historical events from Wikimedia for a date. Parameters: date (MM/DD, default today), type (all/selected/births/deaths/holidays/events), project ('wikipedia' only), language (en/de/fr/es/ru/ja/zh)",
      parameters: [
        {
          name: "date",
          type: "string",
          description: "Parameter: date",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "project",
          type: "string",
          description: "Parameter: project",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/privetin/wikimedia",
  _varName: "wikimediaMcpServerPlugin",
};

const mpcTallyApiServerPlugin: Plugin = {
  id: "xqt9xzqlm6",
  name: "MPC Tally API Server",
  description:
    "A server that allows AI agents to interact with the Tally API to access DAO governance data, proposals, and metadata using Model Context Protocol (MCP), built with TypeScript and GraphQL.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "list-daos",
      description: "List DAOs on Tally sorted by specified criteria",
      parameters: [
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of DAOs to return (default: 20, max: 50)",
          required: false,
        },
        {
          name: "sortBy",
          type: "string",
          description:
            "How to sort the DAOs (default: popular). 'explore' prioritizes DAOs with live proposals",
          required: false,
        },
      ],
    },
    {
      name: "get-dao",
      description: "Get detailed information about a specific DAO",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "The DAO's slug (e.g., 'uniswap' or 'aave')",
          required: true,
        },
      ],
    },
    {
      name: "list-delegates",
      description:
        "List delegates for a specific organization with their metadata",
      parameters: [
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "hasDelegators",
          type: "boolean",
          description: "Filter for delegates with delegators",
          required: false,
        },
        {
          name: "hasVotes",
          type: "boolean",
          description: "Filter for delegates with votes",
          required: false,
        },
        {
          name: "isSeekingDelegation",
          type: "boolean",
          description: "Filter for delegates seeking delegation",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of delegates to return (default: 20, max: 50)",
          required: false,
        },
        {
          name: "organizationSlug",
          type: "string",
          description: "The organization's slug (e.g., 'arbitrum')",
          required: true,
        },
      ],
    },
    {
      name: "get-delegators",
      description: "Get list of delegators for a specific address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to get delegators for (0x format)",
          required: true,
        },
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "beforeCursor",
          type: "string",
          description: "Cursor for previous page pagination",
          required: false,
        },
        {
          name: "governorId",
          type: "string",
          description: "Filter by specific governor ID",
          required: false,
        },
        {
          name: "isDescending",
          type: "boolean",
          description: "Sort in descending order (default: true)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of delegators to return (default: 20, max: 50)",
          required: false,
        },
        {
          name: "organizationSlug",
          type: "string",
          description:
            "Filter by organization slug (e.g., 'uniswap'). Alternative to organizationId",
          required: true,
        },
        {
          name: "sortBy",
          type: "string",
          description: "How to sort the delegators (default: id)",
          required: false,
        },
      ],
    },
    {
      name: "list-proposals",
      description:
        "List proposals for a specific DAO or organization using its slug",
      parameters: [
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination (string ID)",
          required: false,
        },
        {
          name: "beforeCursor",
          type: "string",
          description: "Cursor for previous page pagination (string ID)",
          required: false,
        },
        {
          name: "includeArchived",
          type: "boolean",
          description: "Include archived proposals",
          required: false,
        },
        {
          name: "isDescending",
          type: "boolean",
          description: "Sort in descending order (default: true)",
          required: false,
        },
        {
          name: "isDraft",
          type: "boolean",
          description: "Filter for draft proposals",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of proposals to return (default: 50, max: 50)",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description: "The slug of the DAO (e.g., 'uniswap')",
          required: true,
        },
      ],
    },
    {
      name: "get-proposal",
      description:
        "Get detailed information about a specific proposal. You must provide either the Tally ID (globally unique) or both onchainId and governorId (unique within a governor).",
      parameters: [],
    },
    {
      name: "get-address-votes",
      description: "Get votes cast by an address for a specific organization",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The address to get votes for",
          required: true,
        },
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of votes to return (default: 20)",
          required: false,
        },
        {
          name: "organizationSlug",
          type: "string",
          description: "The organization slug to get votes from",
          required: true,
        },
      ],
    },
    {
      name: "get-address-created-proposals",
      description:
        "Get proposals created by an address for a specific organization",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to get created proposals for",
          required: true,
        },
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "beforeCursor",
          type: "string",
          description: "Cursor for previous page pagination",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of proposals to return (default: 20)",
          required: false,
        },
        {
          name: "organizationSlug",
          type: "string",
          description: "The organization slug to get proposals from",
          required: true,
        },
      ],
    },
    {
      name: "get-address-daos-proposals",
      description:
        "Returns proposals from DAOs where a given address has participated (voted, proposed, etc.)",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address",
          required: true,
        },
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of proposals to return (default: 20, max: 50)",
          required: false,
        },
        {
          name: "organizationSlug",
          type: "string",
          description: "The organization slug to get proposals from",
          required: true,
        },
      ],
    },
    {
      name: "get-address-received-delegations",
      description: "Returns delegations received by an address",
      parameters: [
        {
          name: "address",
          type: "string",
          description:
            "The Ethereum address to get received delegations for (0x format)",
          required: true,
        },
        {
          name: "isDescending",
          type: "boolean",
          description: "Sort in descending order",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of delegations to return (default: 20, max: 50)",
          required: false,
        },
        {
          name: "organizationSlug",
          type: "string",
          description: "Filter by organization slug",
          required: true,
        },
        {
          name: "sortBy",
          type: "string",
          description: "Field to sort by",
          required: false,
        },
      ],
    },
    {
      name: "get-delegate-statement",
      description:
        "Get a delegate's statement for a specific governor or organization",
      parameters: [],
    },
    {
      name: "get-address-governances",
      description:
        "Returns the list of governances (DAOs) an address has delegated to",
      parameters: [
        {
          name: "address",
          type: "string",
          description:
            "The Ethereum address to get governances for (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-proposal-timeline",
      description: "Get the timeline of events for a specific proposal",
      parameters: [
        {
          name: "proposalId",
          type: "string",
          description: "The ID of the proposal to get the timeline for",
          required: true,
        },
      ],
    },
    {
      name: "get-proposal-voters",
      description:
        "Get a list of all voters who have voted on a specific proposal",
      parameters: [
        {
          name: "afterCursor",
          type: "string",
          description: "Cursor for pagination",
          required: false,
        },
        {
          name: "beforeCursor",
          type: "string",
          description: "Cursor for previous page pagination",
          required: false,
        },
        {
          name: "isDescending",
          type: "boolean",
          description:
            "Sort in descending order (true shows most recent/largest first)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of voters to return (default: 20)",
          required: false,
        },
        {
          name: "proposalId",
          type: "string",
          description: "The ID of the proposal to get voters for",
          required: true,
        },
        {
          name: "sortBy",
          type: "string",
          description:
            "How to sort the voters ('id' sorts by date (default), 'amount' sorts by voting power)",
          required: false,
        },
      ],
    },
    {
      name: "get-address-metadata",
      description: "Get metadata information about a specific Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The Ethereum address to get metadata for (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-proposal-security-analysis",
      description:
        "Get security analysis for a specific proposal, including threat analysis and simulations",
      parameters: [
        {
          name: "proposalId",
          type: "string",
          description: "The ID of the proposal to get security analysis for",
          required: true,
        },
      ],
    },
    {
      name: "get-proposal-votes-cast",
      description:
        "Get vote statistics and formatted vote counts for a specific proposal",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "The proposal's ID",
          required: true,
        },
      ],
    },
    {
      name: "get-proposal-votes-cast-list",
      description:
        "Get a list of votes cast for a specific proposal, including formatted vote amounts",
      parameters: [
        {
          name: "id",
          type: "string",
          description:
            "The proposal's Tally ID (globally unique across all governors)",
          required: true,
        },
      ],
    },
    {
      name: "get-governance-proposals-stats",
      description:
        "Get statistics about passed and failed proposals for a specific DAO",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "The DAO's slug (e.g., 'uniswap' or 'aave')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mpc-tally-api-server",
  _varName: "mpcTallyApiServerPlugin",
};

const mcpWeatherServer1Plugin: Plugin = {
  id: "38044qgkou",
  name: "MCP Weather Server",
  description:
    "Provides hourly weather forecasts using the AccuWeather API, enabling users to access current weather conditions and detailed 12-hour forecasts tailored to specific locations.",
  image: "https://github.com/adhikasp.png",
  actions: [
    {
      name: "get_hourly_weather",
      description: "Get hourly weather forecast for a location.",
      parameters: [
        {
          name: "location",
          type: "string",
          description: "Parameter: location",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adhikasp/mcp-weather",
  _varName: "mcpWeatherServer1Plugin",
};

const mcpScholarlyServerPlugin: Plugin = {
  id: "aq05b2p0ql",
  name: "MCP Scholarly Server",
  description:
    "Enables users to search for academic articles on platforms like arXiv using specific keywords, with plans to integrate more scholarly databases in the future.",
  image: "https://github.com/adityak74.png",
  actions: [
    {
      name: "search-arxiv",
      description: "Search arxiv for articles related to the given keyword.",
      parameters: [
        {
          name: "keyword",
          type: "string",
          description: "Parameter: keyword",
          required: true,
        },
      ],
    },
    {
      name: "search-google-scholar",
      description:
        "Search google scholar for articles related to the given keyword.",
      parameters: [
        {
          name: "keyword",
          type: "string",
          description: "Parameter: keyword",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adityak74/mcp-scholarly",
  _varName: "mcpScholarlyServerPlugin",
};

const mcpEtherscanServer1Plugin: Plugin = {
  id: "mf5frh1039",
  name: "MCP Etherscan Server",
  description:
    "Facilitates interaction with Ethereum blockchain data via Etherscan's API, providing real-time access to balances, transactions, token transfers, contract ABIs, gas prices, and ENS name resolutions.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "check-balance",
      description: "Check the ETH balance of an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-transactions",
      description: "Get recent transactions for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transactions to return (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get-token-transfers",
      description: "Get ERC20 token transfers for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transfers to return (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get-contract-abi",
      description: "Get the ABI for a smart contract",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Contract address (0x format)",
          required: true,
        },
      ],
    },
    {
      name: "get-gas-prices",
      description: "Get current gas prices in Gwei",
      parameters: [],
    },
    {
      name: "get-ens-name",
      description: "Get the ENS name for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address (0x format)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-etherscan-server",
  _varName: "mcpEtherscanServer1Plugin",
};

const cursorMcpServer1Plugin: Plugin = {
  id: "4fg1gxbcex",
  name: "Cursor MCP Server",
  description:
    "Facilitates integration with the Cursor code editor by enabling real-time code indexing, analysis, and bi-directional communication with Claude, supporting concurrent sessions and automatic reconnection.",
  image: "https://github.com/Buga-luga.png",
  actions: [
    {
      name: "get-alerts",
      description: "Get weather alerts for a state",
      parameters: [
        {
          name: "state",
          type: "string",
          description: "Two-letter state code (e.g. CA, NY)",
          required: true,
        },
      ],
    },
    {
      name: "get-forecast",
      description: "Get weather forecast for a location",
      parameters: [
        {
          name: "latitude",
          type: "number",
          description: "Latitude of the location",
          required: true,
        },
        {
          name: "longitude",
          type: "number",
          description: "Longitude of the location",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Buga-luga/cursor-mcp",
  _varName: "cursorMcpServer1Plugin",
};

const postmanMcpServerPlugin: Plugin = {
  id: "qfx34b2s2v",
  name: "Postman MCP Server",
  description:
    "Enables running Postman collections using Newman for conducting API tests and obtaining detailed result analysis via a standardized interface.",
  image: "https://github.com/shannonlal.png",
  actions: [
    {
      name: "run-collection",
      description: "Run a Postman Collection using Newman",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Path or URL to the Postman collection",
          required: true,
        },
        {
          name: "environment",
          type: "string",
          description: "Optional path or URL to environment file",
          required: false,
        },
        {
          name: "globals",
          type: "string",
          description: "Optional path or URL to globals file",
          required: false,
        },
        {
          name: "iterationCount",
          type: "number",
          description: "Optional number of iterations to run",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/shannonlal/mcp-postman",
  _varName: "postmanMcpServerPlugin",
};

const neodbMcpServerPlugin: Plugin = {
  id: "1any3eeaza",
  name: "NeoDB MCP Server",
  description:
    "Enables interaction with NeoDB, a social book cataloging service, by providing tools to fetch user info, search books, and retrieve detailed book information through its API.",
  image: "https://github.com/xytangme.png",
  actions: [],
  githubUrl: "https://github.com/xytangme/neodb-mcp",
  _varName: "neodbMcpServerPlugin",
};

const mcpScreenshotServerPlugin: Plugin = {
  id: "hwx6nwjr0e",
  name: "MCP Screenshot Server",
  description:
    "Enables capturing screenshots of web pages and local HTML files through a simple MCP tool interface using Puppeteer with configurable options for dimensions and output paths.",
  image: "https://github.com/sethbang.png",
  actions: [
    {
      name: "take_screenshot",
      description: "Capture a screenshot of any web page or local GUI",
      parameters: [
        {
          name: "fullPage",
          type: "boolean",
          description: "Capture full scrollable page",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Viewport height in pixels",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Custom output path (optional)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to capture (can be http://, https://, or file:///)",
          required: true,
        },
        {
          name: "width",
          type: "number",
          description: "Viewport width in pixels",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sethbang/mcp-screenshot-server",
  _varName: "mcpScreenshotServerPlugin",
};

const mcpAgentsServerPlugin: Plugin = {
  id: "slss81hpp5",
  name: "MCP Agents Server",
  description:
    "Facilitates interaction and context sharing between AI models using the standardized Model Context Protocol (MCP) with features like interoperability, scalability, security, and flexibility across diverse AI systems.",
  image: "https://github.com/MCPAgents.png",
  actions: [],
  githubUrl: "https://github.com/MCPAgents/mcpagentsdk-fs",
  _varName: "mcpAgentsServerPlugin",
};

const boxMcpServerPlugin: Plugin = {
  id: "ssufe2n9eo",
  name: "Box MCP Server",
  description:
    "The Box MCP Server facilitates searching and reading PDF and Word files in Box using Developer Token authentication.",
  image: "https://github.com/hmk.png",
  actions: [],
  githubUrl: "https://github.com/hmk/box-mcp-server",
  _varName: "boxMcpServerPlugin",
};

const uiflowchartcreatorPlugin: Plugin = {
  id: "iv0jenp2hq",
  name: "UIFlowchartCreator",
  description:
    "Enables users to create UI flowcharts by generating visualizations of user interfaces and interactions through an easy-to-use API within MCP-compatible systems.",
  image: "https://github.com/umshere.png",
  actions: [
    {
      name: "generate_ui_flow",
      description:
        "Generate a UI flow diagram by analyzing React/Angular repositories. This tool scans the codebase to identify components, their relationships, and the overall UI structure.",
      parameters: [
        {
          name: "fileExtensions",
          type: "string array",
          description:
            "List of file extensions to analyze (e.g., ['js', 'jsx', 'ts', 'tsx'] for React, ['ts', 'html'] for Angular)",
          required: false,
        },
        {
          name: "isLocal",
          type: "boolean",
          description:
            "Whether to analyze a local repository (true) or GitHub repository (false)",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "GitHub repository owner (required if isLocal is false)",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "GitHub repository name (required if isLocal is false)",
          required: false,
        },
        {
          name: "repoPath",
          type: "string",
          description:
            "Path to local repository or empty string for GitHub repos",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/umshere/uiflowchartcreator",
  _varName: "uiflowchartcreatorPlugin",
};

const moondreamMcpServerPlugin: Plugin = {
  id: "fe8yb984ej",
  name: "Moondream MCP Server",
  description:
    "A powerful server that integrates the Moondream vision model to enable advanced image analysis, including captioning, object detection, and visual question answering, through the Model Context Protocol, compatible with AI assistants like Claude and Cline.",
  image: "https://github.com/NightTrek.png",
  actions: [],
  githubUrl: "https://github.com/NightTrek/moondream-mcp",
  _varName: "moondreamMcpServerPlugin",
};

const coingeckoMcpServerPlugin: Plugin = {
  id: "l0na8tkwaa",
  name: "CoinGecko MCP Server",
  description:
    "Enables interaction with the CoinGecko Pro API to access cryptocurrency data including price history and market metrics through both MCP and OpenAI function calling.",
  image: "https://github.com/crazyrabbitLTC.png",
  actions: [
    {
      name: "get-coins",
      description:
        "Get a paginated list of all supported coins on CoinGecko. Data up to March 9, 2025",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number (starts from 1, default: 1)",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description: "Results per page (default: 100, max: 1000)",
          required: false,
        },
      ],
    },
    {
      name: "find-coin-ids",
      description:
        "Find CoinGecko IDs for a list of coin names or symbols (case-insensitive). Data up to March 9, 2025",
      parameters: [
        {
          name: "coins",
          type: "string array",
          description:
            "Array of coin names or symbols to search for (e.g., ['BTC', 'ethereum', 'DOT'])",
          required: true,
        },
      ],
    },
    {
      name: "get-historical-data",
      description:
        "Get historical price, market cap, and volume data for a specific coin. Data up to March 9, 2025",
      parameters: [
        {
          name: "from_date",
          type: "string",
          description: "Start date in YYYY-MM-DD format (e.g., '2024-01-01')",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "CoinGecko coin ID (use find-coin-ids to lookup)",
          required: true,
        },
        {
          name: "interval",
          type: "string",
          description:
            "Data interval - affects maximum time range: 5m (up to 1 day), hourly (up to 90 days), daily (up to 365 days)",
          required: false,
        },
        {
          name: "to_date",
          type: "string",
          description: "End date in YYYY-MM-DD format (e.g., '2024-12-30')",
          required: true,
        },
        {
          name: "vs_currency",
          type: "string",
          description: "Target currency (e.g., 'usd', 'eur')",
          required: true,
        },
      ],
    },
    {
      name: "refresh-cache",
      description:
        "Manually update the local cache of CoinGecko coin data (automatically refreshed periodically, only needed if seeing stale data)",
      parameters: [],
    },
    {
      name: "get-ohlc-data",
      description:
        "Get OHLC (Open, High, Low, Close) data for a specific coin within a time range. Data up to March 9, 2025",
      parameters: [
        {
          name: "from_date",
          type: "string",
          description: "Start date in YYYY-MM-DD format (e.g., '2024-01-01')",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "CoinGecko coin ID (use find-coin-ids to lookup)",
          required: true,
        },
        {
          name: "interval",
          type: "string",
          description:
            "Data interval - daily (up to 180 days) or hourly (up to 31 days)",
          required: true,
        },
        {
          name: "to_date",
          type: "string",
          description: "End date in YYYY-MM-DD format (e.g., '2024-12-30')",
          required: true,
        },
        {
          name: "vs_currency",
          type: "string",
          description: "Target currency (e.g., 'usd', 'eur')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/crazyrabbitLTC/mcp-coingecko-server",
  _varName: "coingeckoMcpServerPlugin",
};

const supabaseNextjsMcpServerPlugin: Plugin = {
  id: "9i4b9xiqrc",
  name: "Supabase NextJS MCP Server",
  description:
    "A TypeScript-based MCP server for handling a simple notes system with NextJS that supports creating and summarizing text notes using MCP concepts.",
  image: "https://github.com/tengfone.png",
  actions: [
    {
      name: "query_data",
      description: "Query data from Supabase",
      parameters: [
        {
          name: "filters",
          type: "object",
          description: "Parameter: filters",
          required: false,
        },
        {
          name: "select",
          type: "string",
          description: "Parameter: select",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "insert_record",
      description: "Insert a record into Supabase",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Parameter: data",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "update_record",
      description: "Update a record in Supabase",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Parameter: data",
          required: true,
        },
        {
          name: "filters",
          type: "object",
          description: "Parameter: filters",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
    {
      name: "delete_record",
      description: "Delete a record from Supabase",
      parameters: [
        {
          name: "filters",
          type: "object",
          description: "Parameter: filters",
          required: true,
        },
        {
          name: "table",
          type: "string",
          description: "Parameter: table",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tengfone/supabase-nextjs-mcp-server",
  _varName: "supabaseNextjsMcpServerPlugin",
};

const remotemcpServerPlugin: Plugin = {
  id: "260gv0nzsp",
  name: "Remote-MCP Server",
  description:
    "Enables type-safe, bidirectional communication with Model Context Protocol services, allowing centralized management of model contexts over HTTP.",
  image: "https://github.com/ssut.png",
  actions: [],
  githubUrl: "https://github.com/ssut/Remote-MCP",
  _varName: "remotemcpServerPlugin",
};

const cosensemcpserverPlugin: Plugin = {
  id: "arzvlylcom",
  name: "cosense-mcp-server",
  description:
    "The cosense-mcp-server facilitates the integration with Claude Desktop by serving as a middleware command pipeline server, allowing for interaction with projects in cosense.",
  image: "https://github.com/yosider.png",
  actions: [],
  githubUrl: "https://github.com/yosider/cosense-mcp-server",
  _varName: "cosensemcpserverPlugin",
};

const youtubeMcpServer2Plugin: Plugin = {
  id: "mxb4k60vtw",
  name: "YouTube MCP Server",
  description:
    "This server allows AI language models to interact with YouTube content through a standardized interface, providing features such as video and channel information retrieval, transcript management, and playlist operations.",
  image: "https://github.com/ZubeidHendricks.png",
  actions: [],
  githubUrl: "https://github.com/ZubeidHendricks/youtube-mcp-server",
  _varName: "youtubeMcpServer2Plugin",
};

const mcpGithubIssueServerPlugin: Plugin = {
  id: "enk3b2bcjr",
  name: "MCP GitHub Issue Server",
  description:
    "Enables LLMs to interact with GitHub issues by providing details as tasks, allowing for seamless integration and task management through GitHub's platform.",
  image: "https://github.com/sammcj.png",
  actions: [
    {
      name: "get_issue_task",
      description: "Fetch GitHub issue details to use as a task",
      parameters: [
        {
          name: "url",
          type: "string",
          description:
            "GitHub issue URL (https://github.com/owner/repo/issues/number)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammcj/mcp-github-issue",
  _varName: "mcpGithubIssueServerPlugin",
};

const mcp2mqttPlugin: Plugin = {
  id: "bunlaxlfyz",
  name: "mcp2mqtt",
  description:
    "Links IoT devices to AI large models using the MCP and MQTT protocols, enabling natural language control, real-time AI responses, and complex instruction execution for interconnected IoT devices.",
  image: "https://github.com/mcp2everything.png",
  actions: [
    {
      name: "set_pwm",
      description: "设置PWM频率，范围0-100",
      parameters: [
        {
          name: "frequency",
          type: "integer",
          description: "PWM频率值(0-100)",
          required: true,
        },
      ],
    },
    {
      name: "get_pico_info",
      description: "获取Pico开发板信息",
      parameters: [],
    },
    {
      name: "led_control",
      description: "控制LED开关",
      parameters: [
        {
          name: "state",
          type: "string",
          description: "LED状态(on/off)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mcp2everything/mcp2mqtt",
  _varName: "mcp2mqttPlugin",
};

const openctiMcpServerPlugin: Plugin = {
  id: "ml61kiz1gm",
  name: "OpenCTI MCP Server",
  description:
    "A Model Context Protocol server that facilitates integration with OpenCTI, allowing users to query and retrieve cyber threat intelligence data via a standardized interface.",
  image: "https://github.com/Spathodea-Network.png",
  actions: [
    {
      name: "get_latest_reports",
      description: "獲取最新的OpenCTI報告",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "返回結果數量限制",
          required: false,
        },
      ],
    },
    {
      name: "get_report_by_id",
      description: "根據ID獲取OpenCTI報告",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "報告ID",
          required: true,
        },
      ],
    },
    {
      name: "search_indicators",
      description: "搜尋OpenCTI中的指標",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "返回結果數量限制",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "搜尋關鍵字",
          required: true,
        },
      ],
    },
    {
      name: "search_malware",
      description: "搜尋OpenCTI中的惡意程式",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "返回結果數量限制",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "搜尋關鍵字",
          required: true,
        },
      ],
    },
    {
      name: "search_threat_actors",
      description: "搜尋OpenCTI中的威脅行為者",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "返回結果數量限制",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "搜尋關鍵字",
          required: true,
        },
      ],
    },
    {
      name: "get_user_by_id",
      description: "根據ID獲取使用者資訊",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "使用者ID",
          required: true,
        },
      ],
    },
    {
      name: "list_users",
      description: "列出所有使用者",
      parameters: [],
    },
    {
      name: "list_groups",
      description: "列出所有群組",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "返回結果數量限制",
          required: false,
        },
      ],
    },
    {
      name: "list_attack_patterns",
      description: "列出所有攻擊模式",
      parameters: [
        {
          name: "first",
          type: "number",
          description: "返回結果數量限制",
          required: false,
        },
      ],
    },
    {
      name: "get_campaign_by_name",
      description: "根據名稱獲取行動資訊",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "行動名稱",
          required: true,
        },
      ],
    },
    {
      name: "list_connectors",
      description: "列出所有連接器",
      parameters: [],
    },
    {
      name: "list_status_templates",
      description: "列出所有狀態模板",
      parameters: [],
    },
    {
      name: "get_file_by_id",
      description: "根據ID獲取檔案資訊",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "檔案ID",
          required: true,
        },
      ],
    },
    {
      name: "list_files",
      description: "列出所有檔案",
      parameters: [],
    },
    {
      name: "list_marking_definitions",
      description: "列出所有標記定義",
      parameters: [],
    },
    {
      name: "list_labels",
      description: "列出所有標籤",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/Spathodea-Network/opencti-mcp",
  _varName: "openctiMcpServerPlugin",
};

const wordpressmcpserverPlugin: Plugin = {
  id: "2wpf4i6jie",
  name: "wordpress-mcp-server",
  description:
    "interact with your WordPress site (s) using this MCP WordPress Server\n\n100% created with Cline. If you use Cline you can have it evaluate the code by pointing it to the repository and asking if the code is safe to use.\n\nSee the READ.me for a detailed overview.\n\nEnjoy!",
  image: "https://github.com/stefans71.png",
  actions: [],
  githubUrl: "https://github.com/stefans71/wordpress-mcp-server",
  _varName: "wordpressmcpserverPlugin",
};

const mcpPackageDocsServerPlugin: Plugin = {
  id: "mrk7ul7nz7",
  name: "MCP Package Docs Server",
  description:
    "Facilitates LLMs to efficiently access and fetch structured documentation for packages in Go, Python, and NPM, enhancing software development with multi-language support and performance optimization.",
  image: "https://github.com/sammcj.png",
  actions: [
    {
      name: "search_package_docs",
      description: "Search for symbols or content within package documentation",
      parameters: [
        {
          name: "fuzzy",
          type: "boolean",
          description: "Enable fuzzy matching",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Package language/ecosystem",
          required: true,
        },
        {
          name: "package",
          type: "string",
          description: "Package name to search within",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "describe_go_package",
      description: "Get a brief description of a Go package",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Full package import path (e.g. encoding/json)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Optional symbol name to look up specific documentation",
          required: false,
        },
      ],
    },
    {
      name: "describe_python_package",
      description: "Get a brief description of a Python package",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Package name (e.g. requests)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Optional symbol name to look up specific documentation",
          required: false,
        },
      ],
    },
    {
      name: "describe_npm_package",
      description: "Get a brief description of an NPM package",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Package name (e.g. axios)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Optional package version",
          required: false,
        },
      ],
    },
    {
      name: "get_npm_package_doc",
      description: "Get full documentation for an NPM package",
      parameters: [
        {
          name: "maxLength",
          type: "number",
          description: "Optional maximum length of the returned documentation",
          required: false,
        },
        {
          name: "package",
          type: "string",
          description: "Package name (e.g. axios)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Optional search query to filter documentation content",
          required: false,
        },
        {
          name: "section",
          type: "string",
          description:
            "Optional section to retrieve (e.g. 'installation', 'api', 'examples')",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Optional package version",
          required: false,
        },
      ],
    },
    {
      name: "lookup_go_doc",
      description:
        "[DEPRECATED] Use describe_go_package instead. Get a brief description of a Go package",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Full package import path (e.g. encoding/json)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Optional symbol name to look up specific documentation",
          required: false,
        },
      ],
    },
    {
      name: "lookup_python_doc",
      description:
        "[DEPRECATED] Use describe_python_package instead. Get a brief description of a Python package",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Package name (e.g. requests)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Optional symbol name to look up specific documentation",
          required: false,
        },
      ],
    },
    {
      name: "lookup_npm_doc",
      description:
        "[DEPRECATED] Use describe_npm_package instead. Get a brief description of an NPM package",
      parameters: [
        {
          name: "package",
          type: "string",
          description: "Package name (e.g. axios)",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description:
            "Optional path to project directory for local .npmrc files",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Optional package version",
          required: false,
        },
      ],
    },
    {
      name: "get_hover",
      description:
        "Get hover information for a position in a document using Language Server Protocol",
      parameters: [
        {
          name: "character",
          type: "number",
          description: "Zero-based character offset for hover position",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "The current content of the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Absolute or relative path to the source file",
          required: true,
        },
        {
          name: "languageId",
          type: "string",
          description:
            "The language identifier (e.g., 'typescript', 'javascript')",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Zero-based line number for hover position",
          required: true,
        },
        {
          name: "projectRoot",
          type: "string",
          description:
            "Root directory of the project for resolving imports and node_modules",
          required: false,
        },
      ],
    },
    {
      name: "get_completions",
      description:
        "Get completion suggestions for a position in a document using Language Server Protocol",
      parameters: [
        {
          name: "character",
          type: "number",
          description: "Zero-based character offset for completion position",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "The current content of the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Absolute or relative path to the source file",
          required: true,
        },
        {
          name: "languageId",
          type: "string",
          description:
            "The language identifier (e.g., 'typescript', 'javascript')",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Zero-based line number for completion position",
          required: true,
        },
        {
          name: "projectRoot",
          type: "string",
          description:
            "Root directory of the project for resolving imports and node_modules",
          required: false,
        },
      ],
    },
    {
      name: "get_diagnostics",
      description:
        "Get diagnostic information for a document using Language Server Protocol",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The current content of the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Absolute or relative path to the source file",
          required: true,
        },
        {
          name: "languageId",
          type: "string",
          description:
            "The language identifier (e.g., 'typescript', 'javascript')",
          required: true,
        },
        {
          name: "projectRoot",
          type: "string",
          description:
            "Root directory of the project for resolving imports and node_modules",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammcj/mcp-package-docs",
  _varName: "mcpPackageDocsServerPlugin",
};

const claudeMcpServerForUsgsQuakesApiPlugin: Plugin = {
  id: "vhd9mjkxya",
  name: "Claude MCP Server for USGS Quakes API",
  description:
    "Provides access to the USGS Quakes API within Claude Desktop, enabling users to retrieve earthquake data and details through natural language queries.",
  image: "https://github.com/blake365.png",
  actions: [],
  githubUrl: "https://github.com/blake365/usgs-quakes-mcp",
  _varName: "claudeMcpServerForUsgsQuakesApiPlugin",
};

const mcpOrchestratorServerPlugin: Plugin = {
  id: "6hfxiaiuwg",
  name: "MCP Orchestrator Server",
  description:
    "A server for task orchestration and coordination, facilitating task management with dependencies, multi-instance collaboration, and persistent task tracking.",
  image: "https://github.com/mokafari.png",
  actions: [
    {
      name: "create_task",
      description: "Create a new task",
      parameters: [
        {
          name: "dependencies",
          type: "string array",
          description: "IDs of tasks that must be completed first",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the task",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Unique identifier for the task",
          required: true,
        },
      ],
    },
    {
      name: "update_task",
      description: "Update an existing pending task",
      parameters: [
        {
          name: "dependencies",
          type: "string array",
          description: "New list of dependency task IDs",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New description for the task",
          required: false,
        },
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to update",
          required: true,
        },
      ],
    },
    {
      name: "delete_task",
      description: "Delete a task if it has no dependents",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_next_task",
      description: "Get the next available task",
      parameters: [
        {
          name: "instance_id",
          type: "string",
          description: "ID of the instance requesting work",
          required: true,
        },
      ],
    },
    {
      name: "complete_task",
      description: "Mark a task as completed",
      parameters: [
        {
          name: "instance_id",
          type: "string",
          description: "ID of the instance completing the task",
          required: true,
        },
        {
          name: "result",
          type: "string",
          description: "Result or output from the task",
          required: true,
        },
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to complete",
          required: true,
        },
      ],
    },
    {
      name: "get_task_status",
      description: "Get status of all tasks",
      parameters: [],
    },
    {
      name: "get_task_details",
      description: "Get details of a specific task",
      parameters: [
        {
          name: "task_id",
          type: "string",
          description: "ID of the task to get details for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mokafari/orchestrator-server",
  _varName: "mcpOrchestratorServerPlugin",
};

const googleNewsMcpServerPlugin: Plugin = {
  id: "dbx6imq4ef",
  name: "Google News MCP Server",
  description:
    "This server enables users to perform Google News searches with automatic categorization and multi-language support via SerpAPI integration.",
  image: "https://github.com/ChanMeng666.png",
  actions: [
    {
      name: "google_news_search",
      description:
        "Search Google News for articles and news content. Results will be automatically categorized by topic.",
      parameters: [
        {
          name: "gl",
          type: "string",
          description: "Country code (e.g., us, uk)",
          required: false,
        },
        {
          name: "hl",
          type: "string",
          description: "Language code (e.g., en)",
          required: false,
        },
        {
          name: "publication_token",
          type: "string",
          description: "Publication token for specific publishers",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Search query",
          required: false,
        },
        {
          name: "section_token",
          type: "string",
          description: "Section token for specific sections",
          required: false,
        },
        {
          name: "story_token",
          type: "string",
          description: "Story token for full coverage of a story",
          required: false,
        },
        {
          name: "topic_token",
          type: "string",
          description: "Topic token for specific news topics",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ChanMeng666/server-google-news",
  _varName: "googleNewsMcpServerPlugin",
};

const mcphnPlugin: Plugin = {
  id: "e0rco8dfgt",
  name: "mcp-hn",
  description:
    "A Model Context Protocol (MCP) server that provides tools for searching and fetching information from Hacker News.",
  image: "https://github.com/erithwik.png",
  actions: [
    {
      name: "get_stories",
      description:
        "Get stories from Hacker News. The options are `top`, `new`, `ask_hn`, `show_hn` for types of stories. This doesn't include the comments. Use `get_story_info` to get the comments.",
      parameters: [
        {
          name: "num_stories",
          type: "integer",
          description: "Number of stories to get",
          required: false,
        },
        {
          name: "story_type",
          type: "string",
          description:
            "Type of stories to get, one of: `top`, `new`, `ask_hn`, `show_hn`",
          required: false,
        },
      ],
    },
    {
      name: "get_user_info",
      description:
        "Get user info from Hacker News, including the stories they've submitted",
      parameters: [
        {
          name: "num_stories",
          type: "integer",
          description: "Number of stories to get, defaults to 10",
          required: false,
        },
        {
          name: "user_name",
          type: "string",
          description: "Username of the user",
          required: true,
        },
      ],
    },
    {
      name: "search_stories",
      description:
        "Search stories from Hacker News. It is generally recommended to use simpler queries to get a broader set of results (less than 5 words). Very targetted queries may not return any results.",
      parameters: [
        {
          name: "num_results",
          type: "integer",
          description: "Number of results to get, defaults to 10",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "search_by_date",
          type: "boolean",
          description:
            "Search by date, defaults to False. If this is False, then we search by relevance, then points, then number of comments.",
          required: false,
        },
      ],
    },
    {
      name: "get_story_info",
      description:
        "Get detailed story info from Hacker News, including the comments",
      parameters: [
        {
          name: "story_id",
          type: "integer",
          description: "Story ID",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/erithwik/mcp-hn",
  _varName: "mcphnPlugin",
};

const figmaMcpServer3Plugin: Plugin = {
  id: "c916bccfu2",
  name: "Figma MCP Server",
  description:
    "Enables seamless interaction with Figma via the Model Context Protocol, allowing LLM applications to access, manipulate, and track Figma files, components, and variables.",
  image: "https://github.com/TimHolden.png",
  actions: [
    {
      name: "get-file",
      description: "Get details of a Figma file",
      parameters: [
        {
          name: "fileKey",
          type: "string",
          description: "The Figma file key",
          required: true,
        },
      ],
    },
    {
      name: "list-files",
      description: "List files in a Figma project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "The Figma project ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/TimHolden/figma-mcp-server",
  _varName: "figmaMcpServer3Plugin",
};

const mcpServerForArangodbPlugin: Plugin = {
  id: "soeqalh2v9",
  name: "MCP Server for ArangoDB",
  description:
    "A TypeScript-based server to interact with ArangoDB using the Model Context Protocol, enabling database operations and integration with tools like Claude and VSCode extensions for streamlined data management.",
  image: "https://github.com/ravenwits.png",
  actions: [
    {
      name: "arango_query",
      description: "Execute an AQL query",
      parameters: [
        {
          name: "bindVars",
          type: "object",
          description: "Query bind variables",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "AQL query string",
          required: true,
        },
      ],
    },
    {
      name: "arango_insert",
      description: "Insert a document into a collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "document",
          type: "object",
          description: "Document to insert",
          required: true,
        },
      ],
    },
    {
      name: "arango_update",
      description: "Update a document in a collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Document key",
          required: true,
        },
        {
          name: "update",
          type: "object",
          description: "Update object",
          required: true,
        },
      ],
    },
    {
      name: "arango_remove",
      description: "Remove a document from a collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "key",
          type: "string",
          description: "Document key",
          required: true,
        },
      ],
    },
    {
      name: "arango_backup",
      description: "Backup collections to JSON files.",
      parameters: [
        {
          name: "collection",
          type: "string",
          description:
            "Collection name to backup. If not provided, backs up all collections.",
          required: false,
        },
        {
          name: "docLimit",
          type: "integer",
          description:
            "Limit the number of documents to backup. If not provided, backs up all documents.",
          required: false,
        },
        {
          name: "outputDir",
          type: "string",
          description: "An absolute directory path to store backup files",
          required: true,
        },
      ],
    },
    {
      name: "arango_list_collections",
      description: "List all collections in the database",
      parameters: [],
    },
    {
      name: "arango_create_collection",
      description: "Create a new collection in the database",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the collection to create",
          required: true,
        },
        {
          name: "type",
          type: ["DOCUMENT_COLLECTION", "EDGE_COLLECTION"],
          description: "Type of collection to create",
          required: false,
        },
        {
          name: "waitForSync",
          type: "boolean",
          description:
            "If true, wait for data to be synchronized to disk before returning",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ravenwits/mcp-server-arangodb",
  _varName: "mcpServerForArangodbPlugin",
};

const mcpdiscordPlugin: Plugin = {
  id: "wvwjgcnppa",
  name: "mcp-discord",
  description:
    "Provides Discord integration capabilities to MCP clients like Claude Desktop.",
  image: "https://github.com/hanweg.png",
  actions: [
    {
      name: "remove_role",
      description: "Remove a role from a user",
      parameters: [
        {
          name: "role_id",
          type: "string",
          description: "Role ID to remove",
          required: true,
        },
        {
          name: "server_id",
          type: "string",
          description: "Discord server ID",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "User to remove role from",
          required: true,
        },
      ],
    },
    {
      name: "get_server_info",
      description: "Get information about a Discord server",
      parameters: [
        {
          name: "server_id",
          type: "string",
          description: "Discord server (guild) ID",
          required: true,
        },
      ],
    },
    {
      name: "list_members",
      description: "Get a list of members in a server",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of members to fetch",
          required: false,
        },
        {
          name: "server_id",
          type: "string",
          description: "Discord server (guild) ID",
          required: true,
        },
      ],
    },
    {
      name: "add_role",
      description: "Add a role to a user",
      parameters: [
        {
          name: "role_id",
          type: "string",
          description: "Role ID to add",
          required: true,
        },
        {
          name: "server_id",
          type: "string",
          description: "Discord server ID",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "User to add role to",
          required: true,
        },
      ],
    },
    {
      name: "create_text_channel",
      description: "Create a new text channel",
      parameters: [
        {
          name: "category_id",
          type: "string",
          description: "Optional category ID to place channel in",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Channel name",
          required: true,
        },
        {
          name: "server_id",
          type: "string",
          description: "Discord server ID",
          required: true,
        },
        {
          name: "topic",
          type: "string",
          description: "Optional channel topic",
          required: false,
        },
      ],
    },
    {
      name: "delete_channel",
      description: "Delete a channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "ID of channel to delete",
          required: true,
        },
        {
          name: "reason",
          type: "string",
          description: "Reason for deletion",
          required: false,
        },
      ],
    },
    {
      name: "add_reaction",
      description: "Add a reaction to a message",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "Channel containing the message",
          required: true,
        },
        {
          name: "emoji",
          type: "string",
          description: "Emoji to react with (Unicode or custom emoji ID)",
          required: true,
        },
        {
          name: "message_id",
          type: "string",
          description: "Message to react to",
          required: true,
        },
      ],
    },
    {
      name: "remove_reaction",
      description: "Remove a reaction from a message",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "Channel containing the message",
          required: true,
        },
        {
          name: "emoji",
          type: "string",
          description: "Emoji to remove (Unicode or custom emoji ID)",
          required: true,
        },
        {
          name: "message_id",
          type: "string",
          description: "Message to remove reaction from",
          required: true,
        },
      ],
    },
    {
      name: "send_message",
      description: "Send a message to a specific channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "Discord channel ID",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Message content",
          required: true,
        },
      ],
    },
    {
      name: "read_messages",
      description: "Read recent messages from a channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "Discord channel ID",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of messages to fetch (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "get_user_info",
      description: "Get information about a Discord user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "Discord user ID",
          required: true,
        },
      ],
    },
    {
      name: "moderate_message",
      description: "Delete a message and optionally timeout the user",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "Channel ID containing the message",
          required: true,
        },
        {
          name: "message_id",
          type: "string",
          description: "ID of message to moderate",
          required: true,
        },
        {
          name: "reason",
          type: "string",
          description: "Reason for moderation",
          required: true,
        },
        {
          name: "timeout_minutes",
          type: "number",
          description: "Optional timeout duration in minutes",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hanweg/mcp-discord",
  _varName: "mcpdiscordPlugin",
};

const homeAssistantMcp1Plugin: Plugin = {
  id: "e4g8l8fy1p",
  name: "Home Assistant MCP",
  description:
    "Expose all Home Assistant voice intents through a Model Context Protocol Server allowing home control.",
  image: "https://github.com/allenporter.png",
  actions: [],
  githubUrl: "https://github.com/allenporter/mcp-server-home-assistant",
  _varName: "homeAssistantMcp1Plugin",
};

const hackerNewsMcpPlugin: Plugin = {
  id: "oge85xl22f",
  name: "Hacker News MCP",
  description:
    "Parses the HTML content from news.ycombinator.com (Hacker News) and provides structured data for different types of stories (top, new, ask, show, jobs).",
  image: "https://github.com/pskill9.png",
  actions: [
    {
      name: "get_stories",
      description: "Get stories from Hacker News",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of stories to return (max 30)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of stories to fetch (top, new, ask, show, jobs)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/pskill9/hn-server",
  _varName: "hackerNewsMcpPlugin",
};

const paperlessngxMcpServerPlugin: Plugin = {
  id: "ng04du3voj",
  name: "Paperless-NGX MCP Server",
  description:
    "Enables interaction with Paperless-NGX API servers, supporting document management, tagging, and metadata operations through a natural language interface.",
  image: "https://github.com/nloui.png",
  actions: [
    {
      name: "bulk_edit_documents",
      description: "Perform bulk operations on documents",
      parameters: [
        {
          name: "add_tags",
          type: "number array",
          description: "Parameter: add_tags",
          required: false,
        },
        {
          name: "correspondent",
          type: "number",
          description: "Parameter: correspondent",
          required: false,
        },
        {
          name: "degrees",
          type: "number",
          description: "Parameter: degrees",
          required: false,
        },
        {
          name: "delete_originals",
          type: "boolean",
          description: "Parameter: delete_originals",
          required: false,
        },
        {
          name: "document_type",
          type: "number",
          description: "Parameter: document_type",
          required: false,
        },
        {
          name: "documents",
          type: "number array",
          description: "Parameter: documents",
          required: true,
        },
        {
          name: "metadata_document_id",
          type: "number",
          description: "Parameter: metadata_document_id",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "Parameter: method",
          required: true,
        },
        {
          name: "pages",
          type: "string",
          description: "Parameter: pages",
          required: false,
        },
        {
          name: "permissions",
          type: "object",
          description: "Parameter: permissions",
          required: false,
        },
        {
          name: "remove_tags",
          type: "number array",
          description: "Parameter: remove_tags",
          required: false,
        },
        {
          name: "storage_path",
          type: "number",
          description: "Parameter: storage_path",
          required: false,
        },
        {
          name: "tag",
          type: "number",
          description: "Parameter: tag",
          required: false,
        },
      ],
    },
    {
      name: "post_document",
      description: "Upload a new document to Paperless-NGX",
      parameters: [
        {
          name: "archive_serial_number",
          type: "string",
          description: "Parameter: archive_serial_number",
          required: false,
        },
        {
          name: "correspondent",
          type: "number",
          description: "Parameter: correspondent",
          required: false,
        },
        {
          name: "created",
          type: "string",
          description: "Parameter: created",
          required: false,
        },
        {
          name: "custom_fields",
          type: "number array",
          description: "Parameter: custom_fields",
          required: false,
        },
        {
          name: "document_type",
          type: "number",
          description: "Parameter: document_type",
          required: false,
        },
        {
          name: "file",
          type: "string",
          description: "Parameter: file",
          required: true,
        },
        {
          name: "filename",
          type: "string",
          description: "Parameter: filename",
          required: true,
        },
        {
          name: "storage_path",
          type: "number",
          description: "Parameter: storage_path",
          required: false,
        },
        {
          name: "tags",
          type: "number array",
          description: "Parameter: tags",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "list_documents",
      description: "List all documents",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "page_size",
          type: "number",
          description: "Parameter: page_size",
          required: false,
        },
      ],
    },
    {
      name: "get_document",
      description: "Get a specific document by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "search_documents",
      description: "Search documents using full-text query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "download_document",
      description: "Download a document by ID",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "original",
          type: "boolean",
          description: "Parameter: original",
          required: false,
        },
      ],
    },
    {
      name: "list_tags",
      description: "List all tags",
      parameters: [],
    },
    {
      name: "create_tag",
      description: "Create a new tag",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "match",
          type: "string",
          description: "Parameter: match",
          required: false,
        },
        {
          name: "matching_algorithm",
          type: "integer",
          description: "Parameter: matching_algorithm",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "update_tag",
      description: "Update an existing tag",
      parameters: [
        {
          name: "color",
          type: "string",
          description: "Parameter: color",
          required: false,
        },
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
        {
          name: "match",
          type: "string",
          description: "Parameter: match",
          required: false,
        },
        {
          name: "matching_algorithm",
          type: "integer",
          description: "Parameter: matching_algorithm",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "delete_tag",
      description: "Delete a tag",
      parameters: [
        {
          name: "id",
          type: "number",
          description: "Parameter: id",
          required: true,
        },
      ],
    },
    {
      name: "bulk_edit_tags",
      description: "Bulk edit tags (set permissions or delete)",
      parameters: [
        {
          name: "merge",
          type: "boolean",
          description: "Parameter: merge",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "owner",
          type: "number",
          description: "Parameter: owner",
          required: false,
        },
        {
          name: "permissions",
          type: "object",
          description: "Parameter: permissions",
          required: false,
        },
        {
          name: "tag_ids",
          type: "number array",
          description: "Parameter: tag_ids",
          required: true,
        },
      ],
    },
    {
      name: "list_correspondents",
      description: "List all correspondents",
      parameters: [],
    },
    {
      name: "create_correspondent",
      description: "Create a new correspondent",
      parameters: [
        {
          name: "match",
          type: "string",
          description: "Parameter: match",
          required: false,
        },
        {
          name: "matching_algorithm",
          type: "string",
          description: "Parameter: matching_algorithm",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "bulk_edit_correspondents",
      description: "Bulk edit correspondents (set permissions or delete)",
      parameters: [
        {
          name: "correspondent_ids",
          type: "number array",
          description: "Parameter: correspondent_ids",
          required: true,
        },
        {
          name: "merge",
          type: "boolean",
          description: "Parameter: merge",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "owner",
          type: "number",
          description: "Parameter: owner",
          required: false,
        },
        {
          name: "permissions",
          type: "object",
          description: "Parameter: permissions",
          required: false,
        },
      ],
    },
    {
      name: "list_document_types",
      description: "List all document types",
      parameters: [],
    },
    {
      name: "create_document_type",
      description: "Create a new document type",
      parameters: [
        {
          name: "match",
          type: "string",
          description: "Parameter: match",
          required: false,
        },
        {
          name: "matching_algorithm",
          type: "string",
          description: "Parameter: matching_algorithm",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "bulk_edit_document_types",
      description: "Bulk edit document types (set permissions or delete)",
      parameters: [
        {
          name: "document_type_ids",
          type: "number array",
          description: "Parameter: document_type_ids",
          required: true,
        },
        {
          name: "merge",
          type: "boolean",
          description: "Parameter: merge",
          required: false,
        },
        {
          name: "operation",
          type: "string",
          description: "Parameter: operation",
          required: true,
        },
        {
          name: "owner",
          type: "number",
          description: "Parameter: owner",
          required: false,
        },
        {
          name: "permissions",
          type: "object",
          description: "Parameter: permissions",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/nloui/paperless-mcp",
  _varName: "paperlessngxMcpServerPlugin",
};

const mcpBrowserAutomationServerPlugin: Plugin = {
  id: "hokppvk1dy",
  name: "MCP Browser Automation Server",
  description:
    "Enables automation of browser tasks using Playwright by interacting via Claude Desktop for executing user-defined prompts and operations.",
  image: "https://github.com/hrmeetsingh.png",
  actions: [
    {
      name: "playwright_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "playwright_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "downloadsDir",
          type: "string",
          description:
            "Custom downloads directory path (default: user's Downloads folder)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "savePng",
          type: "boolean",
          description: "Save screenshot as PNG file (default: false)",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "storeBase64",
          type: "boolean",
          description: "Store screenshot in base64 format (default: true)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "playwright_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_fill",
      description: "fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "playwright_select",
      description: "Select an element on the page with Select tag",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "playwright_hover",
      description: "Hover an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "playwright_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
    {
      name: "playwright_get",
      description: "Perform an HTTP GET request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform GET operation",
          required: true,
        },
      ],
    },
    {
      name: "playwright_post",
      description: "Perform an HTTP POST request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform POST operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to post in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_put",
      description: "Perform an HTTP PUT request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PUT in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_patch",
      description: "Perform an HTTP PATCH request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PATCH in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_delete",
      description: "Perform an HTTP DELETE request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform DELETE operation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hrmeetsingh/mcp-browser-automation",
  _varName: "mcpBrowserAutomationServerPlugin",
};

const perplexityMcpServer5Plugin: Plugin = {
  id: "oxchzx8c75",
  name: "Perplexity MCP Server",
  description:
    "Enables intelligent code analysis and debugging through the Perplexity AI's API, offering detailed error analysis, pattern detection, and comprehensive solutions, with integration support for the Claude desktop client.",
  image: "https://github.com/PoliTwit1984.png",
  actions: [
    {
      name: "search",
      description: "Search Perplexity for coding help",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Code snippet to analyze (optional)",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Programming language of the code snippet (optional)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The error or coding question to analyze",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PoliTwit1984/mcp-perplexity-server",
  _varName: "perplexityMcpServer5Plugin",
};

const mcpSqliteServerPlugin: Plugin = {
  id: "g0zgwpqegg",
  name: "MCP SQLite Server",
  description:
    "A Node.js implementation of the Model Context Protocol server using SQLite, providing a npx-based alternative for environments lacking Python's UVX runner.",
  image: "https://github.com/johnnyoshika.png",
  actions: [],
  githubUrl: "https://github.com/johnnyoshika/mcp-server-sqlite-npx",
  _varName: "mcpSqliteServerPlugin",
};

const onenoteMcpServerPlugin: Plugin = {
  id: "uggdlbejx0",
  name: "OneNote MCP Server",
  description:
    "Enables AI language models to interact with Microsoft OneNote via a standardized interface, supporting notebook and page management through natural language.",
  image: "https://github.com/ZubeidHendricks.png",
  actions: [],
  githubUrl: "https://github.com/ZubeidHendricks/azure-onenote-mcp-server",
  _varName: "onenoteMcpServerPlugin",
};

const kagiMcpServer1Plugin: Plugin = {
  id: "rl6yu8g58l",
  name: "Kagi MCP Server",
  description:
    "Allows the use of Kagi's API for web searching and content enrichment through methods like fastgpt, enrich/web, and enrich/news.",
  image: "https://github.com/apridachin.png",
  actions: [
    {
      name: "ask_fastgpt",
      description:
        "Ask fastgpt to search web and give an answer with references",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "enrich_web",
      description:
        "Enrich context with web content focused on general, non-commercial web content.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "enrich_news",
      description:
        "Enrich context with web content focused on non-commercial news and discussions.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/apridachin/kagi-search-mcp",
  _varName: "kagiMcpServer1Plugin",
};

const hubspotMcpServerPlugin: Plugin = {
  id: "vpoifk4jai",
  name: "HubSpot MCP Server",
  description:
    "Enables AI models to interact with HubSpot CRM data and operations through a standardized interface, supporting contact and company management.",
  image: "https://github.com/baryhuang.png",
  actions: [
    {
      name: "hubspot_get_contacts",
      description: "Get contacts from HubSpot",
      parameters: [],
    },
    {
      name: "hubspot_create_contact",
      description: "Create a new contact in HubSpot",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Contact's email address",
          required: false,
        },
        {
          name: "firstname",
          type: "string",
          description: "Contact's first name",
          required: true,
        },
        {
          name: "lastname",
          type: "string",
          description: "Contact's last name",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Additional contact properties",
          required: false,
        },
      ],
    },
    {
      name: "hubspot_get_companies",
      description: "Get companies from HubSpot",
      parameters: [],
    },
    {
      name: "hubspot_create_company",
      description: "Create a new company in HubSpot",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Company name",
          required: true,
        },
        {
          name: "properties",
          type: "object",
          description: "Additional company properties",
          required: false,
        },
      ],
    },
    {
      name: "hubspot_get_company_activity",
      description: "Get activity history for a specific company",
      parameters: [
        {
          name: "company_id",
          type: "string",
          description: "HubSpot company ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/baryhuang/mcp-hubspot",
  _varName: "hubspotMcpServerPlugin",
};

const googleOrtoolsServerPlugin: Plugin = {
  id: "2wcoht4ueg",
  name: "Google OR-Tools server",
  description:
    "MCP-ORTools integrates Google's OR-Tools constraint programming solver with Large Language Models through the MCP, enabling AI models to:\n\nSubmit and validate constraint models\nSet model parameters\nSolve constraint satisfaction and optimization problems\nRetrieve and analyze solution",
  image: "https://github.com/Jacck.png",
  actions: [],
  githubUrl: "https://github.com/Jacck/mcp-ortools",
  _varName: "googleOrtoolsServerPlugin",
};

const mcpCompassPlugin: Plugin = {
  id: "85uxmq6wx7",
  name: "MCP Compass",
  description:
    "MCP Compass is a discovery and recommendation service that assists AI assistants in finding and understanding Model Context Protocol servers through natural language queries.",
  image: "https://github.com/liuyoshio.png",
  actions: [
    {
      name: "recommend-mcp-servers",
      description:
        "\n          Use this tool when there is a need to findn external MCP tools.\n          It explores and recommends existing MCP servers from the \n          internet, based on the description of the MCP Server \n          needed. It returns a list of MCP servers with their IDs, \n          descriptions, GitHub URLs, and similarity scores.\n          ",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "\n                Description for the MCP Server needed. \n                It should be specific and actionable, e.g.:\n                GOOD:\n                - 'MCP Server for AWS Lambda Python3.9 deployment'\n                - 'MCP Server for United Airlines booking API'\n                - 'MCP Server for Stripe refund webhook handling'\n\n                BAD:\n                - 'MCP Server for cloud' (too vague)\n                - 'MCP Server for booking' (which booking system?)\n                - 'MCP Server for payment' (which payment provider?)\n\n                Query should explicitly specify:\n                1. Target platform/vendor (e.g. AWS, Stripe, MongoDB)\n                2. Exact operation/service (e.g. Lambda deployment, webhook handling)\n                3. Additional context if applicable (e.g. Python, refund events)\n                ",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/liuyoshio/mcp-compass",
  _varName: "mcpCompassPlugin",
};

const chromaMcpServer1Plugin: Plugin = {
  id: "zcn8z6syk4",
  name: "Chroma MCP Server",
  description:
    "Enables LLMs to perform semantic search and document management using ChromaDB, supporting natural language queries with intuitive similarity metrics for retrieval augmented generation applications.",
  image: "https://github.com/privetin.png",
  actions: [],
  githubUrl: "https://github.com/privetin/mcp-server-chroma",
  _varName: "chromaMcpServer1Plugin",
};

const kazuphmcpobsidianPlugin: Plugin = {
  id: "sed8z2tqq9",
  name: "@kazuph/mcp-obsidian",
  description:
    "Obsidian vault connector for Claude Desktop - enables reading and writing Markdown notes using Model Context Protocol (MCP)",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "obsidian_read_notes",
      description:
        "Read the contents of multiple notes. Each note's content is returned with its path as a reference. Failed reads for individual notes won't stop the entire operation. Reading too many at once may result in an error.",
      parameters: [
        {
          name: "paths",
          type: "string array",
          description: "Parameter: paths",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_search_notes",
      description:
        "Searches for a note by its name. The search is case-insensitive and matches partial names. Queries can also be a valid regex. Returns paths of the notes that match the query.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_read_notes_dir",
      description:
        "Lists only the directory structure under the specified path. Returns the relative paths of all directories without file contents.",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_write_note",
      description:
        "Creates a new note at the specified path. Before writing, check the directory structure using obsidian_read_notes_dir. If the target directory is unclear, the operation will be paused and you will be prompted to specify the correct directory.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Parameter: path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-obsidian",
  _varName: "kazuphmcpobsidianPlugin",
};

const kazuphmcpyoutubePlugin: Plugin = {
  id: "bdr6u8668a",
  name: "@kazuph/mcp-youtube",
  description: "A Model-Context Protocol Server for YouTube in Jp",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "get_youtube_transcript",
      description: "Download YouTube video transcript and metadata",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Parameter: language",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-youtube",
  _varName: "kazuphmcpyoutubePlugin",
};

const kazuphmcptaskmanagerPlugin: Plugin = {
  id: "bdjh7kx05h",
  name: "@kazuph/mcp-taskmanager",
  description:
    "Model Context Protocol server for Task Management. This allows Claude Desktop (or any MCP client) to manage and execute tasks in a queue-based system.",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "request_planning",
      description:
        "Register a new user request and plan its associated tasks. You must provide 'originalRequest' and 'tasks', and optionally 'splitDetails'.\n\nThis tool initiates a new workflow for handling a user's request. The workflow is as follows:\n1. Use 'request_planning' to register a request and its tasks.\n2. After adding tasks, you MUST use 'get_next_task' to retrieve the first task. A progress table will be displayed.\n3. Use 'get_next_task' to retrieve the next uncompleted task.\n4. **IMPORTANT:** After marking a task as done, the assistant MUST NOT proceed to another task without the user's approval. The user must explicitly approve the completed task using 'approve_task_completion'. A progress table will be displayed before each approval request.\n5. Once a task is approved, you can proceed to 'get_next_task' again to fetch the next pending task.\n6. Repeat this cycle until all tasks are done.\n7. After all tasks are completed (and approved), 'get_next_task' will indicate that all tasks are done and that the request awaits approval for full completion.\n8. The user must then approve the entire request's completion using 'approve_request_completion'. If the user does not approve and wants more tasks, you can again use 'request_planning' to add new tasks and continue the cycle.\n\nThe critical point is to always wait for user approval after completing each task and after all tasks are done, wait for request completion approval. Do not proceed automatically.",
      parameters: [
        {
          name: "originalRequest",
          type: "string",
          description: "Parameter: originalRequest",
          required: true,
        },
        {
          name: "splitDetails",
          type: "string",
          description: "Parameter: splitDetails",
          required: false,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Parameter: tasks",
          required: true,
        },
      ],
    },
    {
      name: "get_next_task",
      description:
        "Given a 'requestId', return the next pending task (not done yet). If all tasks are completed, it will indicate that no more tasks are left and that you must wait for the request completion approval.\n\nA progress table showing the current status of all tasks will be displayed with each response.\n\nIf the same task is returned again or if no new task is provided after a task was marked as done but not yet approved, you MUST NOT proceed. In such a scenario, you must prompt the user for approval via 'approve_task_completion' before calling 'get_next_task' again. Do not skip the user's approval step.\nIn other words:\n- After calling 'mark_task_done', do not call 'get_next_task' again until 'approve_task_completion' is called by the user.\n- If 'get_next_task' returns 'all_tasks_done', it means all tasks have been completed. At this point, you must not start a new request or do anything else until the user decides to 'approve_request_completion' or possibly add more tasks via 'request_planning'.",
      parameters: [
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
      ],
    },
    {
      name: "mark_task_done",
      description:
        "Mark a given task as done after you've completed it. Provide 'requestId' and 'taskId', and optionally 'completedDetails'.\n\nAfter marking a task as done, a progress table will be displayed showing the updated status of all tasks.\n\nAfter this, DO NOT proceed to 'get_next_task' again until the user has explicitly approved this completed task using 'approve_task_completion'.",
      parameters: [
        {
          name: "completedDetails",
          type: "string",
          description: "Parameter: completedDetails",
          required: false,
        },
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "approve_task_completion",
      description:
        "Once the assistant has marked a task as done using 'mark_task_done', the user must call this tool to approve that the task is genuinely completed. Only after this approval can you proceed to 'get_next_task' to move on.\n\nA progress table will be displayed before requesting approval, showing the current status of all tasks.\n\nIf the user does not approve, do not call 'get_next_task'. Instead, the user may request changes, or even re-plan tasks by using 'request_planning' again.",
      parameters: [
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "approve_request_completion",
      description:
        "After all tasks are done and approved, this tool finalizes the entire request. The user must call this to confirm that the request is fully completed.\n\nA progress table showing the final status of all tasks will be displayed before requesting final approval.\n\nIf not approved, the user can add new tasks using 'request_planning' and continue the process.",
      parameters: [
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
      ],
    },
    {
      name: "open_task_details",
      description:
        "Get details of a specific task by 'taskId'. This is for inspecting task information at any point.",
      parameters: [
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
    {
      name: "list_requests",
      description:
        "List all requests with their basic information and summary of tasks. This provides a quick overview of all requests in the system.",
      parameters: [],
    },
    {
      name: "add_tasks_to_request",
      description:
        "Add new tasks to an existing request. This allows extending a request with additional tasks.\n\nA progress table will be displayed showing all tasks including the newly added ones.",
      parameters: [
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
        {
          name: "tasks",
          type: "object array",
          description: "Parameter: tasks",
          required: true,
        },
      ],
    },
    {
      name: "update_task",
      description:
        "Update an existing task's title and/or description. Only uncompleted tasks can be updated.\n\nA progress table will be displayed showing the updated task information.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "delete_task",
      description:
        "Delete a specific task from a request. Only uncompleted tasks can be deleted.\n\nA progress table will be displayed showing the remaining tasks after deletion.",
      parameters: [
        {
          name: "requestId",
          type: "string",
          description: "Parameter: requestId",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Parameter: taskId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-taskmanager",
  _varName: "kazuphmcptaskmanagerPlugin",
};

const kazuphmcppocketPlugin: Plugin = {
  id: "1e2o9ooltu",
  name: "@kazuph/mcp-pocket",
  description:
    "🔗 Model Context Protocol (MCP) Server for retrieving saved articles from Pocket API and loading them into Claude",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "pocket_get_articles",
      description:
        "Fetches the latest unread articles from Pocket API. Returns up to 20 articles by default. You can specify the number of articles to fetch (1-20) using the count parameter. Returns the article ID, title, URL, and excerpt for each article.",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Parameter: count",
          required: false,
        },
      ],
    },
    {
      name: "pocket_mark_as_read",
      description:
        "Marks a specific Pocket article as read (archived) using its item ID.",
      parameters: [
        {
          name: "itemId",
          type: "string",
          description: "Parameter: itemId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-pocket",
  _varName: "kazuphmcppocketPlugin",
};

const perplexityMcpServer6Plugin: Plugin = {
  id: "ebg0za4hn9",
  name: "Perplexity MCP Server",
  description:
    "A server facilitating web search functionality by utilizing Perplexity AI's API, designed to integrate with the Claude desktop client for enhanced search queries.",
  image: "https://github.com/jsonallen.png",
  actions: [
    {
      name: "perplexity_search_web",
      description: "Search the web using Perplexity AI with recency filtering",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "recency",
          type: "string",
          description: "Parameter: recency",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/jsonallen/perplexity-mcp",
  _varName: "perplexityMcpServer6Plugin",
};

const trueragMcpServerPlugin: Plugin = {
  id: "v6ajeefo2v",
  name: "TrueRAG MCP Server",
  description:
    "Enables interaction with a TrueRAG system through a GraphQL API using the Model Context Protocol (MCP), facilitating access to policies with a Python SDK and GQL library integration.",
  image: "https://github.com/Ad-Veritas.png",
  actions: [],
  githubUrl: "https://github.com/Ad-Veritas/mcp-server-trueRAG",
  _varName: "trueragMcpServerPlugin",
};

const mcpToolServerPlugin: Plugin = {
  id: "cuhom1oc17",
  name: "MCP Tool Server",
  description:
    "Facilitates interaction with AWS Bedrock-enabled tools by implementing Anthropic's Model Context Protocol for seamless tool integration and communication.",
  image: "https://github.com/davidshtian.png",
  actions: [
    {
      name: "fetch",
      description: "Fetches a website and returns its content",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/davidshtian/MCP-on-AWS-Bedrock",
  _varName: "mcpToolServerPlugin",
};

const mcpMemoryServicePlugin: Plugin = {
  id: "bzvl3lz34o",
  name: "MCP Memory Service",
  description:
    "Provides semantic memory and persistent storage for Claude, leveraging ChromaDB and sentence transformers for enhanced search and retrieval capabilities.",
  image: "https://github.com/doobidoo.png",
  actions: [
    {
      name: "store_memory",
      description: "Store new information with optional tags",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Parameter: content",
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Parameter: metadata",
          required: false,
        },
      ],
    },
    {
      name: "retrieve_memory",
      description: "Find relevant memories based on query",
      parameters: [
        {
          name: "n_results",
          type: "number",
          description: "Parameter: n_results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "search_by_tag",
      description: "Search memories by tags",
      parameters: [
        {
          name: "tags",
          type: "string array",
          description: "Parameter: tags",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/doobidoo/mcp-memory-service",
  _varName: "mcpMemoryServicePlugin",
};

const mcpProxyServer1Plugin: Plugin = {
  id: "zcgl7bfx4e",
  name: "MCP Proxy Server",
  description:
    "Enables interaction with remote MCP servers using SSE transport instead of STDIO for enhanced communication capabilities.",
  image: "https://github.com/sparfenyuk.png",
  actions: [],
  githubUrl: "https://github.com/sparfenyuk/mcp-proxy",
  _varName: "mcpProxyServer1Plugin",
};

const glideApiMcpServerPlugin: Plugin = {
  id: "a5s2vwxii4",
  name: "Glide API MCP Server",
  description:
    "Facilitates secure and type-safe interactions with both v1 and v2 of the Glide API, allowing users to manage app data and perform CRUD operations on tables via a Model Context Protocol interface.",
  image: "https://github.com/knmurphy.png",
  actions: [
    {
      name: "set_api_version",
      description: "Set the Glide API version and authentication to use",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "API key for authentication",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "API version to use",
          required: true,
        },
      ],
    },
    {
      name: "get_app",
      description: "Get information about a Glide app",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "ID of the Glide app",
          required: true,
        },
      ],
    },
    {
      name: "get_tables",
      description: "Get tables for a Glide app",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "ID of the Glide app",
          required: true,
        },
      ],
    },
    {
      name: "get_table_rows",
      description: "Get rows from a table in a Glide app",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "ID of the Glide app",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of rows to return",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of rows to skip",
          required: false,
        },
        {
          name: "tableId",
          type: "string",
          description: "ID of the table",
          required: true,
        },
      ],
    },
    {
      name: "add_table_row",
      description: "Add a new row to a table in a Glide app",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "ID of the Glide app",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "ID of the table",
          required: true,
        },
        {
          name: "values",
          type: "object",
          description: "Column values for the new row",
          required: true,
        },
      ],
    },
    {
      name: "update_table_row",
      description: "Update an existing row in a table",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "ID of the Glide app",
          required: true,
        },
        {
          name: "rowId",
          type: "string",
          description: "ID of the row to update",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "ID of the table",
          required: true,
        },
        {
          name: "values",
          type: "object",
          description: "New column values for the row",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/knmurphy/glide-api-mcp-server",
  _varName: "glideApiMcpServerPlugin",
};

const veri5ightMcpServerPlugin: Plugin = {
  id: "en31vxf492",
  name: "Veri5ight MCP Server",
  description:
    "Enables Claude to interact with Ethereum nodes, allowing users to check ENS token balances, view smart contract code, and decode transactions through natural language.",
  image: "https://github.com/5ajaki.png",
  actions: [
    {
      name: "ethereum_getRecentTransactions",
      description: "Get recent transactions for an Ethereum address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address or ENS name",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of transactions to return (default: 3)",
          required: false,
        },
      ],
    },
    {
      name: "ethereum_getTokenBalance",
      description: "Get ERC20 token balance for an address",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address or ENS name",
          required: true,
        },
        {
          name: "token",
          type: "string",
          description: "Token contract address or ENS name",
          required: true,
        },
      ],
    },
    {
      name: "ethereum_getTokenDelegation",
      description: "Get delegation info for an ERC20 governance token",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Ethereum address or ENS name",
          required: true,
        },
        {
          name: "token",
          type: "string",
          description: "Token contract address or ENS name",
          required: true,
        },
      ],
    },
    {
      name: "ethereum_getContractInfo",
      description: "Get information about any contract",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "Contract address or ENS name",
          required: true,
        },
      ],
    },
    {
      name: "ethereum_getTransactionInfo",
      description: "Get detailed information about an Ethereum transaction",
      parameters: [
        {
          name: "hash",
          type: "string",
          description: "Transaction hash",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/5ajaki/veri5ight",
  _varName: "veri5ightMcpServerPlugin",
};

const youtubeWatchLaterMcpServerPlugin: Plugin = {
  id: "q4mffr1nfl",
  name: "YouTube Watch Later MCP Server",
  description:
    "Enables secure access to your YouTube Watch Later playlist, allowing retrieval of video URLs added within a specified timeframe through a simple interface using OAuth2 authentication.",
  image: "https://github.com/rados10.png",
  actions: [],
  githubUrl: "https://github.com/rados10/youtube-watchlater-mcp",
  _varName: "youtubeWatchLaterMcpServerPlugin",
};

const piapimcpServerPlugin: Plugin = {
  id: "ywvke8xruo",
  name: "PiAPI-MCP Server",
  description:
    "A TypeScript-based Model Context Protocol (MCP) server enabling integration with PiAPI for media content generation using platforms like Midjourney, Flux, and others through MCP-compatible applications.",
  image: "https://github.com/apinetwork.png",
  actions: [
    {
      name: "generate_image",
      description: "Generate an image from text using PiAPI Flux",
      parameters: [
        {
          name: "height",
          type: "string",
          description: "Parameter: height",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Parameter: prompt",
          required: true,
        },
        {
          name: "width",
          type: "string",
          description: "Parameter: width",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/apinetwork/piapi-mcp-server",
  _varName: "piapimcpServerPlugin",
};

const codingAssistantServerPlugin: Plugin = {
  id: "in0s5a6bi7",
  name: "Coding Assistant Server",
  description:
    "Server that enhances the capabilities of the Cline coding agent. It provides intelligent code suggestions, reduces hallucinations, and documents the knowledge base by leveraging your project's documentation and detecting the technologies used in your codebase.",
  image: "https://github.com/AviOfLagos.png",
  actions: [],
  githubUrl: "https://github.com/AviOfLagos/MCP-coding-assistant",
  _varName: "codingAssistantServerPlugin",
};

const calendarAutoauthMcpServerPlugin: Plugin = {
  id: "ol973azfw7",
  name: "Calendar AutoAuth MCP Server",
  description:
    "Server for Google Calendar integration in Cluade Desktop with auto authentication support. This server enables AI assistants to manage Google Calendar events through natural language interactions.",
  image: "https://github.com/GongRzhe.png",
  actions: [],
  githubUrl: "https://github.com/GongRzhe/Calendar-Autoauth-MCP-Server",
  _varName: "calendarAutoauthMcpServerPlugin",
};

const gmailAutoauthMcpServerPlugin: Plugin = {
  id: "bq78z91y4a",
  name: "Gmail AutoAuth MCP Server",
  description:
    "Server for Gmail integration in Claude Desktop with auto authentication support. This server enables AI assistants to manage Gmail through natural language interactions.",
  image: "https://github.com/GongRzhe.png",
  actions: [],
  githubUrl: "https://github.com/GongRzhe/Gmail-MCP-Server",
  _varName: "gmailAutoauthMcpServerPlugin",
};

const literatemcpPlugin: Plugin = {
  id: "lgobt6htp7",
  name: "literateMCP",
  description:
    "Server for managing academic literature with structured note-taking and organization, designed for seamless interaction with Claude. Built with SQLite for simplicity and portability.",
  image: "https://github.com/YUZongmin.png",
  actions: [],
  githubUrl:
    "https://github.com/YUZongmin/sqlite-literature-management-fastmcp-mcp-server",
  _varName: "literatemcpPlugin",
};

const difyServerPlugin: Plugin = {
  id: "0bnt6865ar",
  name: "Dify Server",
  description:
    "Server for using Dify. It achieves the invocation of the Dify workflow by calling the tools of MCP.",
  image: "https://github.com/YanxingLiu.png",
  actions: [],
  githubUrl: "https://github.com/YanxingLiu/dify-mcp-server",
  _varName: "difyServerPlugin",
};

const semanticScholarMcpServerPlugin: Plugin = {
  id: "y4w83jn668",
  name: "Semantic Scholar MCP Server",
  description:
    "Semantic Scholar API, providing comprehensive access to academic paper data, author information, and citation networks.",
  image: "https://github.com/YUZongmin.png",
  actions: [],
  githubUrl: "https://github.com/YUZongmin/semantic-scholar-fastmcp-mcp-server",
  _varName: "semanticScholarMcpServerPlugin",
};

const kazuphmcpgmailgasPlugin: Plugin = {
  id: "7awla69pjq",
  name: "@kazuph/mcp-gmail-gas",
  description:
    "Model Context Protocol server for Gmail integration. This allows Claude Desktop (or any MCP client) to interact with your Gmail account through Google Apps Script.",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "gmail_search_messages",
      description:
        '\nGmail内で指定したクエリに一致するメールを検索します。\nqueryパラメータはGmailの検索クエリ形式で指定します。\n  例: "subject:Meeting newer_than:1d"\n\n結果はJSONで返り、メール一覧(件名、messageIdなど)を含みます。\n',
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "gmail_get_message",
      description:
        "\n指定したmessageIdのメール本文と詳細を取得します。\n  引数: messageId (GmailのメッセージID)\n",
      parameters: [
        {
          name: "messageId",
          type: "string",
          description: "Parameter: messageId",
          required: true,
        },
      ],
    },
    {
      name: "gmail_download_attachment",
      description:
        "\n指定したmessageIdとattachmentIdで添付ファイルを取得します。\nファイルはDownloadsフォルダに保存されます。\nattachmentIdはattachmentsの各attachmentのnameでありファイル名となることが多いです(invoice.pdfなど)。\n  引数:\n    - messageId: メッセージID（必須）\n    - attachmentId: 添付ファイルID（必須）\n    - outputFilename: 保存時のファイル名（オプション）\n",
      parameters: [
        {
          name: "attachmentId",
          type: "string",
          description: "Parameter: attachmentId",
          required: true,
        },
        {
          name: "messageId",
          type: "string",
          description: "Parameter: messageId",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description: "Parameter: outputFilename",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-gmail-gas",
  _varName: "kazuphmcpgmailgasPlugin",
};

const kazuphmcpfetchPlugin: Plugin = {
  id: "5mknfdhyrg",
  name: "@kazuph/mcp-fetch",
  description:
    "Model Context Protocol server for fetching web content and processing images. This allows Claude Desktop (or any MCP client) to fetch web content and handle images appropriately.",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "fetch",
      description:
        '\nRetrieves URLs from the Internet and extracts their content as markdown.\nImages from the page will be processed and included with the response automatically.\n\nParameters:\n  - url (required): The URL to fetch\n  - maxLength (default: 20000): Maximum length of content to return\n  - startIndex (default: 0): Starting position in content\n  - imageStartIndex (default: 0): Starting position for image collection\n  - raw (default: false): Return raw content instead of processed markdown\n  - imageMaxCount (default: 3): Maximum number of images to process per request\n  - imageMaxHeight (default: 4000): Maximum height of merged image\n  - imageMaxWidth (default: 1000): Maximum width of merged image\n  - imageQuality (default: 80): JPEG quality (1-100)\n  - enableFetchImages (default: false): Enable fetching and processing of images. FOR CLAUDE AI ONLY: YOU CAN ENABLE THIS FEATURE!!! CLAUDE IS ALLOWED TO USE IMAGES!!!\n  - ignoreRobotsTxt (default: false): Ignore robots.txt restrictions\n\nImage Processing:\n  - Multiple images are merged vertically into a single JPEG\n  - Images are automatically optimized and resized\n  - GIF animations are converted to static images (first frame)\n  - Use imageStartIndex and imageMaxCount to paginate through all images\n  - Response includes remaining image count and current position\n\nIMPORTANT: All parameters must be in proper JSON format - use double quotes for keys\nand string values, and no quotes for numbers and booleans.\n\nExamples:\n# Initial fetch:\n{\n  "url": "https://example.com",\n  "maxLength": 10000,\n  "imageMaxCount": 2\n}\n\n# Fetch next set of images:\n{\n  "url": "https://example.com",\n  "imageStartIndex": 2,\n  "imageMaxCount": 2\n}',
      parameters: [
        {
          name: "enableFetchImages",
          type: ["boolean", "string"],
          description: "Parameter: enableFetchImages",
          required: false,
        },
        {
          name: "ignoreRobotsTxt",
          type: ["boolean", "string"],
          description: "Parameter: ignoreRobotsTxt",
          required: false,
        },
        {
          name: "imageMaxCount",
          type: "string",
          description: "Parameter: imageMaxCount",
          required: false,
        },
        {
          name: "imageMaxHeight",
          type: "string",
          description: "Parameter: imageMaxHeight",
          required: false,
        },
        {
          name: "imageMaxWidth",
          type: "string",
          description: "Parameter: imageMaxWidth",
          required: false,
        },
        {
          name: "imageQuality",
          type: "string",
          description: "Parameter: imageQuality",
          required: false,
        },
        {
          name: "imageStartIndex",
          type: "string",
          description: "Parameter: imageStartIndex",
          required: false,
        },
        {
          name: "maxLength",
          type: "string",
          description: "Parameter: maxLength",
          required: false,
        },
        {
          name: "raw",
          type: ["boolean", "string"],
          description: "Parameter: raw",
          required: false,
        },
        {
          name: "startIndex",
          type: "string",
          description: "Parameter: startIndex",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-fetch",
  _varName: "kazuphmcpfetchPlugin",
};

const kazuphmcpgithubpera1Plugin: Plugin = {
  id: "m2sd6ew3wf",
  name: "@kazuph/mcp-github-pera1",
  description:
    "A Model Context Protocol server that connects GitHub code to Claude.ai. This server utilizes the Pera1 service to extract code from GitHub repositories and provide better context to Claude.",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "github_get_code",
      description:
        '\nRetrieves code from a GitHub repository URL and combines it into a single file. The URL must start with "https://".\n\nQuery Parameters:\n- dir: Filter files by directory paths (comma-separated)\n  Example: ?dir=src/components,tests/unit\n- ext: Filter files by extensions (comma-separated)\n  Example: ?ext=ts,tsx,js\n- mode: Display mode\n  Example: ?mode=tree (Shows directory structure and README files only)\n- branch: Specify the branch to fetch from (optional)\n  Example: ?branch=feature/new-feature\n- file: Specify a single file to retrieve (optional)\n  Example: ?file=src/components/Button.tsx\n\nExamples:\n1. For GitHub tree URLs with branch:\n  https://github.com/kazuph/pera1/tree/feature/great-branch\n  This URL will be automatically parsed to extract the branch information.\n\n2. For specific directory in a branch:\n  url: https://github.com/modelcontextprotocol/servers\n  dir: src/fetch\n  branch: develop\n\n3. For a single file:\n  url: https://github.com/username/repository\n  file: src/components/Button.tsx\n\n4. For directory structure with README files only:\n  url: https://github.com/username/repository\n  mode: tree\n\nThe tool will correctly parse the repository structure and fetch the files from the specified branch.\n',
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Parameter: branch",
          required: false,
        },
        {
          name: "dir",
          type: "string",
          description: "Parameter: dir",
          required: false,
        },
        {
          name: "ext",
          type: "string",
          description: "Parameter: ext",
          required: false,
        },
        {
          name: "file",
          type: "string",
          description: "Parameter: file",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "Parameter: mode",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-github-pera1",
  _varName: "kazuphmcpgithubpera1Plugin",
};

const wordpressMcpServerPlugin: Plugin = {
  id: "pjw96aoyh6",
  name: "WordPress MCP Server",
  description:
    "Enables AI assistants to interact with WordPress sites through the WordPress REST API. Supports multiple WordPress sites with secure authentication, enabling content management, post operations, and site configuration through natural language.",
  image: "https://github.com/emzimmer.png",
  actions: [],
  githubUrl: "https://github.com/emzimmer/server-wp-mcp",
  _varName: "wordpressMcpServerPlugin",
};

const clickhouseMcpServer1Plugin: Plugin = {
  id: "9292900sx1",
  name: "ClickHouse MCP Server",
  description: "An MCP server for ClickHouse.",
  image: "https://github.com/iskakaushik.png",
  actions: [
    {
      name: "list_databases",
      description: "Action for list_databases",
      parameters: [],
    },
    {
      name: "list_tables",
      description: "Action for list_tables",
      parameters: [
        {
          name: "database",
          type: "string",
          description: "Parameter: database",
          required: true,
        },
        {
          name: "like",
          type: "string",
          description: "Parameter: like",
          required: false,
        },
      ],
    },
    {
      name: "run_select_query",
      description: "Action for run_select_query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/iskakaushik/mcp-clickhouse",
  _varName: "clickhouseMcpServer1Plugin",
};

const lumaMcpServerPlugin: Plugin = {
  id: "ngjqwu3hyg",
  name: "Luma MCP Server",
  description:
    "A server that provides Luma AI's video generation API as the Model Context Protocol (MCP)",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [],
  githubUrl: "https://github.com/Sunwood-ai-labs/luma-mcp-server",
  _varName: "lumaMcpServerPlugin",
};

const amazonBedrockMcpServerPlugin: Plugin = {
  id: "9qw7dwpvj9",
  name: "Amazon Bedrock MCP Server",
  description:
    "Provides access to Amazon Bedrock's Nova Canvas model for AI image generation.",
  image: "https://github.com/zxkane.png",
  actions: [
    {
      name: "generate_image",
      description:
        "Generate image(s) using Amazon Nova Canvas model. The returned data is Base64-encoded string that represent each image that was generated.",
      parameters: [
        {
          name: "cfg_scale",
          type: "number",
          description:
            "How closely to follow the prompt (1.1-10, default: 6.5)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height of the generated image (default: 1024)",
          required: false,
        },
        {
          name: "negativePrompt",
          type: "string",
          description:
            "Optional text description of what to avoid in the image (1-1024 characters)",
          required: false,
        },
        {
          name: "numberOfImages",
          type: "number",
          description: "Number of images to generate (1-5, default: 1)",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description:
            "Text description of the image to generate (1-1024 characters)",
          required: true,
        },
        {
          name: "quality",
          type: "string",
          description: "Quality of the generated image (default: standard)",
          required: false,
        },
        {
          name: "seed",
          type: "number",
          description:
            "Seed for reproducible generation (0-858993459, default: 12)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width of the generated image (default: 1024)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/zxkane/mcp-server-amazon-bedrock",
  _varName: "amazonBedrockMcpServerPlugin",
};

const googleCalendarPlugin: Plugin = {
  id: "ahu6mndw4p",
  name: "Google Calendar",
  description:
    "Google Calendar integration in Cursor IDE. This server enables AI assistants to manage Google Calendar events through natural language interactions.",
  image: "https://github.com/GongRzhe.png",
  actions: [
    {
      name: "create_event",
      description: "Creates a new event in Google Calendar",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Event description",
          required: false,
        },
        {
          name: "end",
          type: "object",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "location",
          type: "string",
          description: "Event location",
          required: false,
        },
        {
          name: "start",
          type: "object",
          description: "Parameter: start",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Event title",
          required: true,
        },
      ],
    },
    {
      name: "get_event",
      description: "Retrieves details of a specific event",
      parameters: [
        {
          name: "eventId",
          type: "string",
          description: "ID of the event to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "update_event",
      description: "Updates an existing event",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New event description",
          required: false,
        },
        {
          name: "end",
          type: "object",
          description: "Parameter: end",
          required: false,
        },
        {
          name: "eventId",
          type: "string",
          description: "ID of the event to update",
          required: true,
        },
        {
          name: "location",
          type: "string",
          description: "New event location",
          required: false,
        },
        {
          name: "start",
          type: "object",
          description: "Parameter: start",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "New event title",
          required: false,
        },
      ],
    },
    {
      name: "delete_event",
      description: "Deletes an event from the calendar",
      parameters: [
        {
          name: "eventId",
          type: "string",
          description: "ID of the event to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_events",
      description: "Lists events within a specified time range",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of events to return",
          required: false,
        },
        {
          name: "orderBy",
          type: "string",
          description: "Sort order",
          required: false,
        },
        {
          name: "timeMax",
          type: "string",
          description: "End of time range (ISO format)",
          required: true,
        },
        {
          name: "timeMin",
          type: "string",
          description: "Start of time range (ISO format)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/GongRzhe/Calendar-MCP-Server",
  _varName: "googleCalendarPlugin",
};

const mcpNpxFetchPlugin: Plugin = {
  id: "m2a0ue08n2",
  name: "MCP NPX Fetch",
  description:
    "A powerful MCP server for fetching and transforming web content into various formats (HTML, JSON, Markdown, Plain Text) with ease.",
  image: "https://github.com/tokenizin-agency.png",
  actions: [
    {
      name: "fetch_html",
      description: "Fetch a website and return the content as HTML",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch_markdown",
      description: "Fetch a website and return the content as Markdown",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch_txt",
      description:
        "Fetch a website, return the content as plain text (no HTML)",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to fetch",
          required: true,
        },
      ],
    },
    {
      name: "fetch_json",
      description: "Fetch a JSON file from a URL",
      parameters: [
        {
          name: "headers",
          type: "object",
          description: "Optional headers to include in the request",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the JSON to fetch",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tokenizin-agency/mcp-npx-fetch",
  _varName: "mcpNpxFetchPlugin",
};

const australianBureauOfStatisticsAbsPlugin: Plugin = {
  id: "0b4h7ixci9",
  name: "Australian Bureau of Statistics (ABS)",
  description:
    "Provides access to the Australian Bureau of Statistics (ABS) Data API. This server allows AI assistants to query and analyze ABS statistical data.",
  image: "https://github.com/seansoreilly.png",
  actions: [
    {
      name: "query_dataset",
      description: "Query a specific ABS dataset with optional filters",
      parameters: [
        {
          name: "datasetId",
          type: "string",
          description: "ID of the dataset to query (e.g., C21_G01_LGA)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/seansoreilly/abs",
  _varName: "australianBureauOfStatisticsAbsPlugin",
};

const redisPlugin: Plugin = {
  id: "jc46pz27t8",
  name: "Redis",
  description:
    "Provides access to Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.",
  image: "https://github.com/GongRzhe.png",
  actions: [],
  githubUrl: "https://github.com/GongRzhe/REDIS-MCP-Server",
  _varName: "redisPlugin",
};

const mcpServerNeurolorapPlugin: Plugin = {
  id: "rg07wseeqe",
  name: "MCP Server Neurolorap",
  description:
    "MCP server for collecting code from files and directories into a single markdown document.",
  image: "https://github.com/aindreyway.png",
  actions: [
    {
      name: "code_collector",
      description: "Collect code from files into a markdown document",
      parameters: [
        {
          name: "input_path",
          type: "string",
          description: "Parameter: input_path",
          required: false,
        },
        {
          name: "subproject_id",
          type: "string",
          description: "Parameter: subproject_id",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "project_structure_reporter",
      description: "Generate a report of project structure metrics",
      parameters: [
        {
          name: "ignore_patterns",
          type: "string",
          description: "Parameter: ignore_patterns",
          required: false,
        },
        {
          name: "output_filename",
          type: "string",
          description: "Parameter: output_filename",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aindreyway/mcp-server-neurolora-p",
  _varName: "mcpServerNeurolorapPlugin",
};

const cryptocurrencyMarketDataMcpServerPlugin: Plugin = {
  id: "9kbbk1kmg2",
  name: "Cryptocurrency Market Data MCP Server",
  description:
    "Provides real-time and historical cryptocurrency market data through integration with major exchanges. This server enables LLMs like Claude to fetch current prices, analyze market trends, and access detailed trading information.",
  image: "https://github.com/Nayshins.png",
  actions: [
    {
      name: "get-price",
      description:
        "Get current price of a cryptocurrency pair from a specific exchange",
      parameters: [
        {
          name: "exchange",
          type: "string",
          description:
            "Exchange to use (supported: binance, coinbase, kraken, kucoin, hyperliquid, huobi, bitfinex, bybit, okx, mexc)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTC/USDT, ETH/USDT)",
          required: true,
        },
      ],
    },
    {
      name: "get-market-summary",
      description:
        "Get detailed market summary for a cryptocurrency pair from a specific exchange",
      parameters: [
        {
          name: "exchange",
          type: "string",
          description:
            "Exchange to use (supported: binance, coinbase, kraken, kucoin, hyperliquid, huobi, bitfinex, bybit, okx, mexc)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTC/USDT, ETH/USDT)",
          required: true,
        },
      ],
    },
    {
      name: "get-top-volumes",
      description:
        "Get top cryptocurrencies by trading volume from a specific exchange",
      parameters: [
        {
          name: "exchange",
          type: "string",
          description:
            "Exchange to use (supported: binance, coinbase, kraken, kucoin, hyperliquid, huobi, bitfinex, bybit, okx, mexc)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of pairs to return (default: 5)",
          required: false,
        },
      ],
    },
    {
      name: "list-exchanges",
      description: "List all supported cryptocurrency exchanges",
      parameters: [],
    },
    {
      name: "get-historical-ohlcv",
      description: "Get historical OHLCV (candlestick) data for a trading pair",
      parameters: [
        {
          name: "days_back",
          type: "number",
          description:
            "Number of days of historical data to fetch (default: 7, max: 30)",
          required: false,
        },
        {
          name: "exchange",
          type: "string",
          description:
            "Exchange to use (supported: binance, coinbase, kraken, kucoin, hyperliquid, huobi, bitfinex, bybit, okx, mexc)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTC/USDT, ETH/USDT)",
          required: true,
        },
        {
          name: "timeframe",
          type: "string",
          description:
            "Timeframe for candlesticks (e.g., 1m, 5m, 15m, 1h, 4h, 1d)",
          required: false,
        },
      ],
    },
    {
      name: "get-price-change",
      description: "Get price change statistics over different time periods",
      parameters: [
        {
          name: "exchange",
          type: "string",
          description:
            "Exchange to use (supported: binance, coinbase, kraken, kucoin, hyperliquid, huobi, bitfinex, bybit, okx, mexc)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTC/USDT, ETH/USDT)",
          required: true,
        },
      ],
    },
    {
      name: "get-volume-history",
      description: "Get trading volume history over time",
      parameters: [
        {
          name: "days",
          type: "number",
          description: "Number of days of volume history (default: 7, max: 30)",
          required: false,
        },
        {
          name: "exchange",
          type: "string",
          description:
            "Exchange to use (supported: binance, coinbase, kraken, kucoin, hyperliquid, huobi, bitfinex, bybit, okx, mexc)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Trading pair symbol (e.g., BTC/USDT, ETH/USDT)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Nayshins/mcp-server-ccxt",
  _varName: "cryptocurrencyMarketDataMcpServerPlugin",
};

const mcptoolbuilderPlugin: Plugin = {
  id: "1ziiztkcx1",
  name: "mcp-tool-builder",
  description:
    "MCP server that builds itself by creating new tools as needed based on user requests (Requires restart of Claude Desktop to use newly created tools).",
  image: "https://github.com/hanweg.png",
  actions: [
    {
      name: "create_tool",
      description: "Create a new Python tool with specified functionality",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Python code implementing the tool",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Description of what the tool should do",
          required: true,
        },
        {
          name: "tool_name",
          type: "string",
          description: "Name of the new tool",
          required: true,
        },
      ],
    },
    {
      name: "list_available_tools",
      description: "List all currently available tools",
      parameters: [],
    },
    {
      name: "get_bitcoin_price",
      description: "Gets current Bitcoin price in USD from CoinGecko API",
      parameters: [],
    },
    {
      name: "get_weather_forecast",
      description:
        "Retrieves weather forecast for a given ZIP code using NWS API",
      parameters: [
        {
          name: "zip_code",
          type: "string",
          description: "Parameter: zip_code",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hanweg/mcp-tool-builder",
  _varName: "mcptoolbuilderPlugin",
};

const websiteDownloaderPlugin: Plugin = {
  id: "l1is55m5kz",
  name: "Website Downloader",
  description:
    "Provides a tool to download entire websites using wget. It preserves the website structure and converts links to work locally.",
  image: "https://github.com/pskill9.png",
  actions: [
    {
      name: "download_website",
      description: "Download an entire website using wget",
      parameters: [
        {
          name: "depth",
          type: "number",
          description:
            "Maximum depth level for recursive downloading (optional, defaults to infinite)",
          required: false,
        },
        {
          name: "outputPath",
          type: "string",
          description:
            "Path where the website should be downloaded (optional, defaults to current directory)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the website to download",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/pskill9/website-downloader",
  _varName: "websiteDownloaderPlugin",
};

const googleWorkspaceMcpServer1Plugin: Plugin = {
  id: "egcwr79vu2",
  name: "Google Workspace MCP Server",
  description:
    "Provides tools for interacting with Gmail and Calendar APIs. This server enables you to manage your emails and calendar events programmatically through the MCP interface.",
  image: "https://github.com/epaproditus.png",
  actions: [
    {
      name: "list_emails",
      description: "List recent emails from Gmail inbox",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of emails to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query to filter emails",
          required: false,
        },
      ],
    },
    {
      name: "search_emails",
      description: "Search emails with advanced query",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of emails to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            'Gmail search query (e.g., "from:example@gmail.com has:attachment")',
          required: true,
        },
      ],
    },
    {
      name: "send_email",
      description: "Send a new email",
      parameters: [
        {
          name: "bcc",
          type: "string",
          description: "BCC recipients (comma-separated)",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Email body (can include HTML)",
          required: true,
        },
        {
          name: "cc",
          type: "string",
          description: "CC recipients (comma-separated)",
          required: false,
        },
        {
          name: "subject",
          type: "string",
          description: "Email subject",
          required: true,
        },
        {
          name: "to",
          type: "string",
          description: "Recipient email address",
          required: true,
        },
      ],
    },
    {
      name: "modify_email",
      description: "Modify email labels (archive, trash, mark read/unread)",
      parameters: [
        {
          name: "addLabels",
          type: "string array",
          description: "Labels to add",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Email ID",
          required: true,
        },
        {
          name: "removeLabels",
          type: "string array",
          description: "Labels to remove",
          required: false,
        },
      ],
    },
    {
      name: "list_events",
      description: "List upcoming calendar events",
      parameters: [
        {
          name: "maxResults",
          type: "number",
          description: "Maximum number of events to return (default: 10)",
          required: false,
        },
        {
          name: "timeMax",
          type: "string",
          description: "End time in ISO format",
          required: false,
        },
        {
          name: "timeMin",
          type: "string",
          description: "Start time in ISO format (default: now)",
          required: false,
        },
      ],
    },
    {
      name: "create_event",
      description: "Create a new calendar event",
      parameters: [
        {
          name: "attendees",
          type: "string array",
          description: "List of attendee email addresses",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Event description",
          required: false,
        },
        {
          name: "end",
          type: "string",
          description: "End time in ISO format",
          required: true,
        },
        {
          name: "location",
          type: "string",
          description: "Event location",
          required: false,
        },
        {
          name: "start",
          type: "string",
          description: "Start time in ISO format",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Event title",
          required: true,
        },
      ],
    },
    {
      name: "update_event",
      description: "Update an existing calendar event",
      parameters: [
        {
          name: "attendees",
          type: "string array",
          description: "New list of attendee email addresses",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "New event description",
          required: false,
        },
        {
          name: "end",
          type: "string",
          description: "New end time in ISO format",
          required: false,
        },
        {
          name: "eventId",
          type: "string",
          description: "Event ID to update",
          required: true,
        },
        {
          name: "location",
          type: "string",
          description: "New event location",
          required: false,
        },
        {
          name: "start",
          type: "string",
          description: "New start time in ISO format",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "New event title",
          required: false,
        },
      ],
    },
    {
      name: "delete_event",
      description: "Delete a calendar event",
      parameters: [
        {
          name: "eventId",
          type: "string",
          description: "Event ID to delete",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/epaproditus/google-workspace-mcp-server",
  _varName: "googleWorkspaceMcpServer1Plugin",
};

const chessAnalysisAssistantPlugin: Plugin = {
  id: "yqxlz9y5qj",
  name: "Chess Analysis Assistant",
  description:
    "Helps you analyze chess positions and get professional evaluations using Stockfish.",
  image: "https://github.com/turlockmike.png",
  actions: [],
  githubUrl: "https://github.com/turlockmike/chess-mcp",
  _varName: "chessAnalysisAssistantPlugin",
};

const pagespeedMcpServerPlugin: Plugin = {
  id: "tgfbq4e51o",
  name: "PageSpeed MCP Server",
  description:
    "Acts as a bridge between AI models and Google's PageSpeed Insights API, enabling detailed performance analysis of websites.",
  image: "https://github.com/PhialsBasement.png",
  actions: [],
  githubUrl: "https://github.com/PhialsBasement/Pagespeed-MCP-Server",
  _varName: "pagespeedMcpServerPlugin",
};

const mozillaReadabilityParserMcpServer1Plugin: Plugin = {
  id: "jdcx8fmajm",
  name: "Mozilla Readability Parser MCP Server",
  description:
    "Extracts and transforms webpage content into clean, LLM-optimized Markdown. Returns article title, main content, excerpt, byline and site name. Uses Mozilla's Readability algorithm to remove ads, navigation, footers and non-essential elements while preserving the core content structure.",
  image: "https://github.com/emzimmer.png",
  actions: [
    {
      name: "parse",
      description:
        "Extracts and transforms webpage content into clean, LLM-optimized Markdown. Returns article title, main content, excerpt, byline and site name. Uses Mozilla's Readability algorithm to remove ads, navigation, footers and non-essential elements while preserving the core content structure.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The website URL to parse",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/emzimmer/server-moz-readability",
  _varName: "mozillaReadabilityParserMcpServer1Plugin",
};

const meilisearchMcpServer1Plugin: Plugin = {
  id: "tbc3n51jja",
  name: "Meilisearch MCP Server",
  description:
    "Server for interacting with Meilisearch through LLM interfaces like Claude.",
  image: "https://github.com/meilisearch.png",
  actions: [
    {
      name: "get-connection-settings",
      description: "Get current Meilisearch connection settings",
      parameters: [],
    },
    {
      name: "update-connection-settings",
      description: "Update Meilisearch connection settings",
      parameters: [
        {
          name: "api_key",
          type: "string",
          description: "Parameter: api_key",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: false,
        },
      ],
    },
    {
      name: "health-check",
      description: "Check Meilisearch server health",
      parameters: [],
    },
    {
      name: "get-version",
      description: "Get Meilisearch version information",
      parameters: [],
    },
    {
      name: "get-stats",
      description: "Get database statistics",
      parameters: [],
    },
    {
      name: "create-index",
      description: "Create a new Meilisearch index",
      parameters: [
        {
          name: "primaryKey",
          type: "string",
          description: "Parameter: primaryKey",
          required: false,
        },
        {
          name: "uid",
          type: "string",
          description: "Parameter: uid",
          required: true,
        },
      ],
    },
    {
      name: "list-indexes",
      description: "List all Meilisearch indexes",
      parameters: [],
    },
    {
      name: "get-documents",
      description: "Get documents from an index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Parameter: indexUid",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
    {
      name: "add-documents",
      description: "Add documents to an index",
      parameters: [
        {
          name: "documents",
          type: "array",
          description: "Parameter: documents",
          required: true,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Parameter: indexUid",
          required: true,
        },
        {
          name: "primaryKey",
          type: "string",
          description: "Parameter: primaryKey",
          required: false,
        },
      ],
    },
    {
      name: "get-settings",
      description: "Get current settings for an index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Parameter: indexUid",
          required: true,
        },
      ],
    },
    {
      name: "update-settings",
      description: "Update settings for an index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Parameter: indexUid",
          required: true,
        },
        {
          name: "settings",
          type: "object",
          description: "Parameter: settings",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description:
        "Search through Meilisearch indices. If indexUid is not provided, it will search across all indices.",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "indexUid",
          type: "string",
          description: "Parameter: indexUid",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "sort",
          type: "string array",
          description: "Parameter: sort",
          required: false,
        },
      ],
    },
    {
      name: "get-task",
      description: "Get information about a specific task",
      parameters: [
        {
          name: "taskUid",
          type: "integer",
          description: "Parameter: taskUid",
          required: true,
        },
      ],
    },
    {
      name: "get-tasks",
      description: "Get list of tasks with optional filters",
      parameters: [
        {
          name: "afterEnqueuedAt",
          type: "string",
          description: "Parameter: afterEnqueuedAt",
          required: false,
        },
        {
          name: "afterFinishedAt",
          type: "string",
          description: "Parameter: afterFinishedAt",
          required: false,
        },
        {
          name: "afterStartedAt",
          type: "string",
          description: "Parameter: afterStartedAt",
          required: false,
        },
        {
          name: "batchUids",
          type: "string array",
          description: "Parameter: batchUids",
          required: false,
        },
        {
          name: "beforeEnqueuedAt",
          type: "string",
          description: "Parameter: beforeEnqueuedAt",
          required: false,
        },
        {
          name: "beforeFinishedAt",
          type: "string",
          description: "Parameter: beforeFinishedAt",
          required: false,
        },
        {
          name: "beforeStartedAt",
          type: "string",
          description: "Parameter: beforeStartedAt",
          required: false,
        },
        {
          name: "canceledBy",
          type: "string array",
          description: "Parameter: canceledBy",
          required: false,
        },
        {
          name: "from",
          type: "integer",
          description: "Parameter: from",
          required: false,
        },
        {
          name: "indexUids",
          type: "string array",
          description: "Parameter: indexUids",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "reverse",
          type: "boolean",
          description: "Parameter: reverse",
          required: false,
        },
        {
          name: "statuses",
          type: "string array",
          description: "Parameter: statuses",
          required: false,
        },
        {
          name: "types",
          type: "string array",
          description: "Parameter: types",
          required: false,
        },
        {
          name: "uids",
          type: "integer array",
          description: "Parameter: uids",
          required: false,
        },
      ],
    },
    {
      name: "cancel-tasks",
      description: "Cancel tasks based on filters",
      parameters: [
        {
          name: "indexUids",
          type: "string",
          description: "Parameter: indexUids",
          required: false,
        },
        {
          name: "statuses",
          type: "string",
          description: "Parameter: statuses",
          required: false,
        },
        {
          name: "types",
          type: "string",
          description: "Parameter: types",
          required: false,
        },
        {
          name: "uids",
          type: "string",
          description: "Parameter: uids",
          required: false,
        },
      ],
    },
    {
      name: "get-keys",
      description: "Get list of API keys",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
    {
      name: "create-key",
      description: "Create a new API key",
      parameters: [
        {
          name: "actions",
          type: "array",
          description: "Parameter: actions",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "expiresAt",
          type: "string",
          description: "Parameter: expiresAt",
          required: false,
        },
        {
          name: "indexes",
          type: "array",
          description: "Parameter: indexes",
          required: true,
        },
      ],
    },
    {
      name: "delete-key",
      description: "Delete an API key",
      parameters: [
        {
          name: "key",
          type: "string",
          description: "Parameter: key",
          required: true,
        },
      ],
    },
    {
      name: "get-health-status",
      description: "Get comprehensive health status of Meilisearch",
      parameters: [],
    },
    {
      name: "get-index-metrics",
      description: "Get detailed metrics for an index",
      parameters: [
        {
          name: "indexUid",
          type: "string",
          description: "Parameter: indexUid",
          required: true,
        },
      ],
    },
    {
      name: "get-system-info",
      description: "Get system-level information",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/meilisearch/meilisearch-mcp",
  _varName: "meilisearchMcpServer1Plugin",
};

const obsidianmcpPlugin: Plugin = {
  id: "s3knv0mdaj",
  name: "obsidian-mcp",
  description:
    "Enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing and managing notes and tags.",
  image: "https://github.com/StevenStavrakis.png",
  actions: [],
  githubUrl: "https://github.com/StevenStavrakis/obsidian-mcp",
  _varName: "obsidianmcpPlugin",
};

const rijksmuseumMcpServerPlugin: Plugin = {
  id: "4rmiexp64y",
  name: "Rijksmuseum MCP Server",
  description:
    "Allows you to search for artworks, retrieve detailed information about specific artworks, access image tiles for artworks, and explore user-created collections from the Rijksmuseum.",
  image: "https://github.com/r-huijts.png",
  actions: [
    {
      name: "get_artwork_image",
      description:
        "Retrieve detailed image tile information for high-resolution viewing of an artwork. This tool provides data for implementing deep zoom functionality, allowing detailed examination of the artwork at various zoom levels.\n\nThe response includes multiple zoom levels (z0 to z6):\n- z0: Highest resolution (largest image)\n- z6: Lowest resolution (smallest image)\n\nEach zoom level contains:\n- Total width and height of the image at that level\n- A set of image tiles that make up the complete image\n- Position information (x,y) for each tile\n\nThis is particularly useful for:\n- Implementing deep zoom viewers\n- Studying fine artwork details\n- Analyzing brushwork or conservation details\n- Creating interactive viewing experiences",
      parameters: [
        {
          name: "culture",
          type: "string",
          description:
            "Language for the API response. Use 'en' for English or 'nl' for Dutch (Nederlands). While this endpoint primarily returns image data, any textual metadata will be in the specified language.",
          required: false,
        },
        {
          name: "objectNumber",
          type: "string",
          description:
            "The unique identifier of the artwork in the Rijksmuseum collection. Same format as used in get_artwork_details. The artwork must have an associated image for this to work.",
          required: true,
        },
      ],
    },
    {
      name: "get_user_sets",
      description:
        "Retrieve collections created by Rijksstudio users. These are curated sets of artworks that users have grouped together based on themes, artists, periods, or personal interests.\n\nEach set includes:\n- Basic information (name, description, creation date)\n- Creator details (username, language preference)\n- Collection statistics (number of items)\n- Navigation links (API and web URLs)\n\nThis tool is useful for:\n- Discovering user-curated exhibitions\n- Finding thematically related artworks\n- Exploring popular artwork groupings\n- Studying collection patterns",
      parameters: [
        {
          name: "culture",
          type: "string",
          description:
            "Language for the response data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects set descriptions and user information.",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description:
            "Page number for paginated results, starting at 0. Use with pageSize to navigate through sets. Note: page * pageSize cannot exceed 10,000.",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description:
            "Number of user sets to return per page. Must be between 1 and 100. Larger values return more results but take longer to process.",
          required: false,
        },
      ],
    },
    {
      name: "get_user_set_details",
      description:
        "Retrieve detailed information about a specific user-created collection in Rijksstudio. Returns comprehensive information about the set and its contents, including:\n\n- Set metadata (name, description, creation date)\n- Creator information\n- List of artworks in the set\n- Image data for each artwork\n- Navigation links\n\nThis tool is particularly useful for:\n- Analyzing thematic groupings of artworks\n- Studying curatorial choices\n- Understanding collection patterns\n- Exploring relationships between artworks",
      parameters: [
        {
          name: "culture",
          type: "string",
          description:
            "Language for the response data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects set descriptions and artwork information.",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description:
            "Page number for paginated results, starting at 0. Use with pageSize to navigate through large sets. Note: page * pageSize cannot exceed 10,000.",
          required: false,
        },
        {
          name: "pageSize",
          type: "number",
          description:
            "Number of artworks to return per page. Must be between 1 and 100. Default is 25. Larger values return more artworks but take longer to process.",
          required: false,
        },
        {
          name: "setId",
          type: "string",
          description:
            "The unique identifier of the user set to fetch. Format is typically 'userId-setname'. This ID can be obtained from the get_user_sets results.",
          required: true,
        },
      ],
    },
    {
      name: "open_image_in_browser",
      description:
        "Open a high-resolution image of an artwork in the default web browser for viewing. This tool is useful when you want to examine an artwork visually or show it to the user. Works with any valid Rijksmuseum image URL.",
      parameters: [
        {
          name: "imageUrl",
          type: "string",
          description:
            "The full URL of the artwork image to open. Must be a valid HTTP/HTTPS URL from the Rijksmuseum's servers. These URLs can be obtained from artwork search results or details.",
          required: true,
        },
      ],
    },
    {
      name: "get_artist_timeline",
      description:
        "Generate a chronological timeline of an artist's works in the Rijksmuseum collection. This tool is perfect for studying an artist's development, analyzing their artistic periods, or understanding their contribution to art history over time.",
      parameters: [
        {
          name: "artist",
          type: "string",
          description:
            "The name of the artist to create a timeline for. Must match the museum's naming convention (e.g., 'Rembrandt van Rijn', 'Vincent van Gogh'). Case sensitive and exact match required.",
          required: true,
        },
        {
          name: "maxWorks",
          type: "number",
          description:
            "Maximum number of works to include in the timeline. Works are selected based on significance and quality of available images. Higher numbers give a more complete picture but may include less significant works.",
          required: false,
        },
      ],
    },
    {
      name: "search_artwork",
      description:
        "Search and filter artworks in the Rijksmuseum collection. This tool provides extensive filtering options including artist name, type of artwork, materials, techniques, time periods, colors, and more. Results can be sorted in various ways and are paginated.",
      parameters: [
        {
          name: "century",
          type: "integer",
          description:
            "Filter artworks by the century they were created in. Use negative numbers for BCE, positive for CE. Range from -1 (100-1 BCE) to 21 (2000-2099 CE). Example: 17 for 17th century (1600-1699).",
          required: false,
        },
        {
          name: "color",
          type: "string",
          description:
            "Filter artworks by predominant color. Use hexadecimal color codes without the # symbol. Examples: 'FF0000' for red, '00FF00' for green, '0000FF' for blue. The API will match artworks containing this color.",
          required: false,
        },
        {
          name: "culture",
          type: "string",
          description:
            "Language for the search and returned data. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects artwork titles, descriptions, and other text fields.",
          required: false,
        },
        {
          name: "imgonly",
          type: "boolean",
          description:
            "When true, only returns artworks that have associated images. Set to true if you need to show or analyze the visual aspects of artworks.",
          required: false,
        },
        {
          name: "involvedMaker",
          type: "string",
          description:
            "Search for artworks by a specific artist. Must be case-sensitive and exact, e.g., 'Rembrandt+van+Rijn', 'Vincent+van+Gogh'. Use + for spaces in names.",
          required: false,
        },
        {
          name: "material",
          type: "string",
          description:
            "Filter by the material used in the artwork. Examples: 'canvas', 'paper', 'wood', 'oil paint', 'marble'. Matches exact material names from the museum's classification.",
          required: false,
        },
        {
          name: "p",
          type: "integer",
          description:
            "Page number for paginated results, starting at 0. Use in combination with 'ps' to navigate through large result sets. Note: p * ps cannot exceed 10,000.",
          required: false,
        },
        {
          name: "ps",
          type: "integer",
          description:
            "Number of artworks to return per page. Higher values return more results but take longer to process. Maximum of 100 items per page.",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description:
            "General search query that will match against artist names, artwork titles, descriptions, materials, techniques, etc. Use this for broad searches like 'sunflowers', 'portrait', 'landscape', etc.",
          required: false,
        },
        {
          name: "sortBy",
          type: "string",
          description:
            "Determines the order of results. Options: 'relevance' (best matches first), 'objecttype' (grouped by type), 'chronologic' (oldest to newest), 'achronologic' (newest to oldest), 'artist' (artist name A-Z), 'artistdesc' (artist name Z-A).",
          required: false,
        },
        {
          name: "technique",
          type: "string",
          description:
            "Filter by the technique used to create the artwork. Examples: 'oil painting', 'etching', 'watercolor', 'photography'. Matches specific techniques from the museum's classification.",
          required: false,
        },
        {
          name: "toppieces",
          type: "boolean",
          description:
            "When true, only returns artworks designated as masterpieces by the Rijksmuseum. These are the most significant and famous works in the collection.",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description:
            "Filter by the type of artwork. Common values include 'painting', 'print', 'drawing', 'sculpture', 'photograph', 'furniture'. Use singular form.",
          required: false,
        },
      ],
    },
    {
      name: "get_artwork_details",
      description:
        "Retrieve comprehensive details about a specific artwork from the Rijksmuseum collection. Returns extensive information including:\n\n- Basic details (title, artist, dates)\n- Physical properties (dimensions, materials, techniques)\n- Historical context (dating, historical persons, documentation)\n- Visual information (colors, image data)\n- Curatorial information (descriptions, labels, location)\n- Acquisition details\n- Exhibition history\n\nThis is the primary tool for in-depth research on a specific artwork, providing all available museum documentation and metadata.",
      parameters: [
        {
          name: "culture",
          type: "string",
          description:
            "Language for the artwork details. Use 'en' for English or 'nl' for Dutch (Nederlands). Affects all textual information including descriptions, titles, and historical documentation.",
          required: false,
        },
        {
          name: "objectNumber",
          type: "string",
          description:
            "The unique identifier of the artwork in the Rijksmuseum collection. Format is typically a combination of letters and numbers (e.g., 'SK-C-5' for The Night Watch, 'SK-A-3262' for Van Gogh's Self Portrait). Case-sensitive. This ID can be obtained from search results.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/r-huijts/rijksmuseum-mcp",
  _varName: "rijksmuseumMcpServerPlugin",
};

const markdown2pdfmcpPlugin: Plugin = {
  id: "t13rjduffx",
  name: "markdown2pdf-mcp",
  description: "An MCP server for converting Markdown documents to PDF files.",
  image: "https://github.com/2b3pro.png",
  actions: [
    {
      name: "create_pdf_from_markdown",
      description:
        "Convert markdown content to PDF. Note: Cannot handle LaTeX math equations. Supports basic markdown elements like headers, lists, tables, code blocks, blockquotes, and images (both local and external URLs).",
      parameters: [
        {
          name: "markdown",
          type: "string",
          description: "Markdown content to convert to PDF",
          required: true,
        },
        {
          name: "outputFilename",
          type: "string",
          description:
            'The filename of the PDF file to be saved (e.g. "output.pdf"). The environmental variable M2P_OUTPUT_DIR sets the output path directory. If not provided, it will default to user\'s HOME directory.',
          required: false,
        },
        {
          name: "paperBorder",
          type: "string",
          description:
            "Border margin for the PDF (default: 2cm). Use CSS units (cm, mm, in, px)",
          required: false,
        },
        {
          name: "paperFormat",
          type: "string",
          description: "Paper format for the PDF (default: letter)",
          required: false,
        },
        {
          name: "paperOrientation",
          type: "string",
          description: "Paper orientation for the PDF (default: portrait)",
          required: false,
        },
        {
          name: "watermark",
          type: "string",
          description:
            'Optional watermark text (max 15 characters, uppercase), e.g. "DRAFT", "PRELIMINARY", "CONFIDENTIAL", "FOR REVIEW", etc',
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/2b3pro/markdown2pdf-mcp",
  _varName: "markdown2pdfmcpPlugin",
};

const googlecalendarmcpPlugin: Plugin = {
  id: "imm5vgqbew",
  name: "google-calendar-mcp",
  description: "Lets LLMs read and manage Google Calendar events.",
  image: "https://github.com/nspady.png",
  actions: [],
  githubUrl: "https://github.com/nspady/google-calendar-mcp",
  _varName: "googlecalendarmcpPlugin",
};

const cedardiffMcpServerPlugin: Plugin = {
  id: "s2op6xpq3t",
  name: "Cedardiff MCP Server",
  description:
    "Implements CEDARScript, a SQL-like language for code manipulation.",
  image: "https://github.com/th3w1zard1.png",
  actions: [
    {
      name: "edit_file",
      description: "Edit a file using CEDARScript syntax",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "CEDARScript commands to execute",
          required: true,
        },
        {
          name: "workingDir",
          type: "string",
          description: "Working directory for resolving file paths",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/th3w1zard1/cedarscript-mcp",
  _varName: "cedardiffMcpServerPlugin",
};

const openhueMcpServerPlugin: Plugin = {
  id: "5ixz6hgw5u",
  name: "OpenHue MCP Server",
  description:
    "Enables control of Philips Hue lights through Claude and other LLM interfaces using the OpenHue CLI.",
  image: "https://github.com/lsemenenko.png",
  actions: [
    {
      name: "get-lights",
      description: "List all Hue lights or get details for a specific light",
      parameters: [
        {
          name: "lightId",
          type: "string",
          description:
            "Optional light ID or name to get specific light details",
          required: false,
        },
        {
          name: "room",
          type: "string",
          description: "Optional room name to filter lights",
          required: false,
        },
      ],
    },
    {
      name: "control-light",
      description: "Control a specific Hue light",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Turn light on or off",
          required: true,
        },
        {
          name: "brightness",
          type: "number",
          description: "Optional brightness level (0-100)",
          required: false,
        },
        {
          name: "color",
          type: "string",
          description: "Optional color name (e.g., 'red', 'blue')",
          required: false,
        },
        {
          name: "target",
          type: "string",
          description: "Light ID or name",
          required: true,
        },
        {
          name: "temperature",
          type: "number",
          description: "Optional color temperature in Mirek",
          required: false,
        },
      ],
    },
    {
      name: "get-rooms",
      description: "List all rooms or get details for a specific room",
      parameters: [
        {
          name: "roomId",
          type: "string",
          description: "Optional room ID or name to get specific room details",
          required: false,
        },
      ],
    },
    {
      name: "control-room",
      description: "Control all lights in a room",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Turn room lights on or off",
          required: true,
        },
        {
          name: "brightness",
          type: "number",
          description: "Optional brightness level (0-100)",
          required: false,
        },
        {
          name: "color",
          type: "string",
          description: "Optional color name",
          required: false,
        },
        {
          name: "target",
          type: "string",
          description: "Room ID or name",
          required: true,
        },
        {
          name: "temperature",
          type: "number",
          description: "Optional color temperature in Mirek",
          required: false,
        },
      ],
    },
    {
      name: "get-scenes",
      description: "List all scenes or get details for specific scenes",
      parameters: [
        {
          name: "room",
          type: "string",
          description: "Optional room name to filter scenes",
          required: false,
        },
      ],
    },
    {
      name: "activate-scene",
      description: "Activate a specific scene",
      parameters: [
        {
          name: "mode",
          type: "string",
          description: "Optional scene mode",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Scene name or ID",
          required: true,
        },
        {
          name: "room",
          type: "string",
          description: "Optional room name for the scene",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lsemenenko/openhue-mcp-server",
  _varName: "openhueMcpServerPlugin",
};

const mcpFilePreviewServerPlugin: Plugin = {
  id: "23jdwr6v07",
  name: "MCP File Preview Server",
  description:
    "Provides HTML file preview and analysis capabilities. This server enables capturing full-page screenshots of local HTML files and analyzing their structure.",
  image: "https://github.com/seanivore.png",
  actions: [
    {
      name: "preview_file",
      description: "Preview local HTML file and capture screenshot",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to local HTML file",
          required: true,
        },
        {
          name: "height",
          type: "number",
          description: "Viewport height",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Viewport width",
          required: false,
        },
      ],
    },
    {
      name: "analyze_content",
      description: "Analyze HTML content structure",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to local HTML file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/seanivore/mcp-file-preview",
  _varName: "mcpFilePreviewServerPlugin",
};

const searxngServerPlugin: Plugin = {
  id: "0j7jjyt7m9",
  name: "SearXNG Server",
  description:
    "An MCP server implementation that integrates the SearxNG API, providing web search capabilities.",
  image: "https://github.com/ihor-sokoliuk.png",
  actions: [
    {
      name: "searxng_web_search",
      description:
        "Performs a web search using the SearxNG API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources.",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of results",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Pagination offset",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "web_url_read",
      description:
        "Read the content from an URL. Use this for further information retrieving to understand the content of each URL.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ihor-sokoliuk/mcp-searxng",
  _varName: "searxngServerPlugin",
};

const socialmediamcpPlugin: Plugin = {
  id: "55bvn41dtb",
  name: "social-media-mcp",
  description:
    "A Model Context Protocol (MCP) server for managing social media posts, currently supporting X (formerly Twitter).",
  image: "https://github.com/angheljf.png",
  actions: [
    {
      name: "post_to_x",
      description: "Post a message to X (formerly Twitter)",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content of the post",
          required: true,
        },
        {
          name: "threadId",
          type: "string",
          description: "ID of the thread to post to",
          required: false,
        },
      ],
    },
    {
      name: "list_x_posts",
      description: "List X (formerly Twitter) posts",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of posts to return",
          required: false,
        },
        {
          name: "threadId",
          type: "string",
          description: "ID of the thread to filter by",
          required: false,
        },
      ],
    },
    {
      name: "create_x_thread",
      description: "Create a thread on X (formerly Twitter)",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content of the first post",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/angheljf/social-media-mcp",
  _varName: "socialmediamcpPlugin",
};

const mcpgeoPlugin: Plugin = {
  id: "ujss4qy5fs",
  name: "MCP-Geo",
  description: "Geocoding MCP server with GeoPY!",
  image: "https://github.com/webcoderz.png",
  actions: [],
  githubUrl: "https://github.com/webcoderz/MCP-Geo",
  _varName: "mcpgeoPlugin",
};

const swissPlugin: Plugin = {
  id: "zur9xb82a9",
  name: "Swiss",
  description:
    "Swiss MCP is your AI-powered command center for orchestrating complex tasks with ease. Think of it as your personal AI assistant that can coordinate multiple AI tools to accomplish amazing things!",
  image: "https://github.com/a1j9o94.png",
  actions: [],
  githubUrl: "https://github.com/a1j9o94/swiss",
  _varName: "swissPlugin",
};

const mcpneovimserverPlugin: Plugin = {
  id: "s0fywdwp87",
  name: "mcp-neovim-server",
  description:
    "Leverages Vim's native text editing commands and workflows, which Claude already understands, to create a lightweight code assistance layer.",
  image: "https://github.com/bigcodegen.png",
  actions: [
    {
      name: "vim_buffer",
      description: "Current VIM text editor buffer with line numbers shown",
      parameters: [
        {
          name: "filename",
          type: "string",
          description:
            "File name to edit (can be empty, assume buffer is already open)",
          required: false,
        },
      ],
    },
    {
      name: "vim_command",
      description:
        "Send a command to VIM for navigation, spot editing, and line deletion. For shell commands like ls, use without the leading colon (e.g. '!ls' not ':!ls').",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            "Neovim command to enter for navigation and spot editing. For shell commands use without leading colon (e.g. '!ls'). Insert <esc> to return to NORMAL mode. It is possible to send multiple commands separated with <cr>.",
          required: true,
        },
      ],
    },
    {
      name: "vim_status",
      description: "Get the status of the VIM editor",
      parameters: [
        {
          name: "filename",
          type: "string",
          description:
            "File name to get status for (can be empty, assume buffer is already open)",
          required: false,
        },
      ],
    },
    {
      name: "vim_edit",
      description: "Edit lines using insert or replace in the VIM editor.",
      parameters: [
        {
          name: "lines",
          type: "string",
          description: "Lines of strings to insert or replace",
          required: true,
        },
        {
          name: "mode",
          type: "string",
          description:
            "Mode for editing lines. insert will insert lines at startLine. replace will replace lines starting at the startLine to the end of the buffer.",
          required: true,
        },
        {
          name: "startLine",
          type: "number",
          description: "Line number to start editing",
          required: true,
        },
      ],
    },
    {
      name: "vim_window",
      description: "Manipulate Neovim windows (split, close, navigate)",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            "Window command (split, vsplit, only, close, wincmd h/j/k/l)",
          required: true,
        },
      ],
    },
    {
      name: "vim_mark",
      description: "Set a mark at a specific position",
      parameters: [
        {
          name: "column",
          type: "number",
          description: "Column number",
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Line number",
          required: true,
        },
        {
          name: "mark",
          type: "string",
          description: "Mark name (a-z)",
          required: true,
        },
      ],
    },
    {
      name: "vim_register",
      description: "Set content of a register",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to store in register",
          required: true,
        },
        {
          name: "register",
          type: "string",
          description: 'Register name (a-z or ")',
          required: true,
        },
      ],
    },
    {
      name: "vim_visual",
      description: "Make a visual selection",
      parameters: [
        {
          name: "endColumn",
          type: "number",
          description: "Ending column number",
          required: true,
        },
        {
          name: "endLine",
          type: "number",
          description: "Ending line number",
          required: true,
        },
        {
          name: "startColumn",
          type: "number",
          description: "Starting column number",
          required: true,
        },
        {
          name: "startLine",
          type: "number",
          description: "Starting line number",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/bigcodegen/mcp-neovim-server",
  _varName: "mcpneovimserverPlugin",
};

const sefariaJewishLibraryMcpServerPlugin: Plugin = {
  id: "j3v6vnp4xk",
  name: "Sefaria Jewish Library MCP Server",
  description:
    "Provides access to Jewish texts from the Sefaria library. This server enables Large Language Models to retrieve and reference Jewish texts through a standardized interface.",
  image: "https://github.com/Sivan22.png",
  actions: [
    {
      name: "get_text",
      description: "get a jewish text from the jewish library",
      parameters: [
        {
          name: "reference",
          type: "string",
          description:
            "The reference of the jewish text, e.g. 'שולחן ערוך אורח חיים סימן א' or 'Genesis 1:1'",
          required: true,
        },
      ],
    },
    {
      name: "get_commentaries",
      description: "get a list of references of commentaries for a jewish text",
      parameters: [
        {
          name: "reference",
          type: "string",
          description:
            "the reference of the jewish text, e.g. 'שולחן ערוך אורח חיים סימן א' or 'Genesis 1:1'",
          required: true,
        },
      ],
    },
    {
      name: "search_texts",
      description: "search for jewish texts in the Sefaria library",
      parameters: [
        {
          name: "filters",
          type: "list",
          description:
            'Filters to apply to the text path in English (Examples: "Shulkhan Arukh", "maimonides", "talmud").',
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The search query",
          required: true,
        },
        {
          name: "size",
          type: "integer",
          description: "Number of results to return.",
          required: false,
        },
        {
          name: "slop",
          type: "integer",
          description:
            "The maximum distance between each query word in the resulting document. 0 means an exact match must be found.",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sivan22/mcp-sefaria-server",
  _varName: "sefariaJewishLibraryMcpServerPlugin",
};

const mcpmcMinecraftMcpPlugin: Plugin = {
  id: "3ih9dz9kfv",
  name: "MCPMC (Minecraft MCP)",
  description:
    "Enables AI agents to control Minecraft bots through a standardized JSON-RPC interface.",
  image: "https://github.com/gerred.png",
  actions: [
    {
      name: "chat",
      description: "Send a chat message to the server",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: true,
        },
      ],
    },
    {
      name: "navigate_relative",
      description:
        "Make the bot walk relative to its current position. dx moves right(+)/left(-), dy moves up(+)/down(-), dz moves forward(+)/back(-) relative to bot's current position and orientation",
      parameters: [
        {
          name: "dx",
          type: "number",
          description: "Parameter: dx",
          required: true,
        },
        {
          name: "dy",
          type: "number",
          description: "Parameter: dy",
          required: true,
        },
        {
          name: "dz",
          type: "number",
          description: "Parameter: dz",
          required: true,
        },
      ],
    },
    {
      name: "dig_block_relative",
      description:
        "Dig a single block relative to the bot's current position. dx moves right(+)/left(-), dy moves up(+)/down(-), dz moves forward(+)/back(-) relative to bot's current position and orientation",
      parameters: [
        {
          name: "dx",
          type: "number",
          description: "Parameter: dx",
          required: true,
        },
        {
          name: "dy",
          type: "number",
          description: "Parameter: dy",
          required: true,
        },
        {
          name: "dz",
          type: "number",
          description: "Parameter: dz",
          required: true,
        },
      ],
    },
    {
      name: "dig_area_relative",
      description:
        "Dig multiple blocks in an area relative to the bot's current position. Coordinates use the same relative system as dig_block_relative. Use this for clearing spaces.",
      parameters: [
        {
          name: "end",
          type: "string",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "start",
          type: "object",
          description: "Parameter: start",
          required: true,
        },
      ],
    },
    {
      name: "place_block",
      description:
        "Place a block from the bot's inventory at the specified position. Use this for building structures.",
      parameters: [
        {
          name: "blockName",
          type: "string",
          description: "Parameter: blockName",
          required: true,
        },
        {
          name: "x",
          type: "number",
          description: "Parameter: x",
          required: true,
        },
        {
          name: "y",
          type: "number",
          description: "Parameter: y",
          required: true,
        },
        {
          name: "z",
          type: "number",
          description: "Parameter: z",
          required: true,
        },
      ],
    },
    {
      name: "find_blocks",
      description:
        "Find nearby blocks of specific types. Use this to locate building materials or identify terrain.",
      parameters: [
        {
          name: "blockTypes",
          type: "string",
          description: "Parameter: blockTypes",
          required: true,
        },
        {
          name: "constraints",
          type: "object",
          description: "Parameter: constraints",
          required: false,
        },
        {
          name: "maxCount",
          type: "number",
          description: "Parameter: maxCount",
          required: false,
        },
        {
          name: "maxDistance",
          type: "number",
          description: "Parameter: maxDistance",
          required: false,
        },
      ],
    },
    {
      name: "craft_item",
      description:
        "Craft items using materials in inventory. Can use a crafting table if specified.",
      parameters: [
        {
          name: "itemName",
          type: "string",
          description: "Parameter: itemName",
          required: true,
        },
        {
          name: "quantity",
          type: "number",
          description: "Parameter: quantity",
          required: false,
        },
        {
          name: "useCraftingTable",
          type: "boolean",
          description: "Parameter: useCraftingTable",
          required: false,
        },
      ],
    },
    {
      name: "inspect_inventory",
      description:
        "Check the contents of the bot's inventory to see available materials.",
      parameters: [
        {
          name: "includeEquipment",
          type: "boolean",
          description: "Parameter: includeEquipment",
          required: false,
        },
        {
          name: "itemType",
          type: "string",
          description: "Parameter: itemType",
          required: false,
        },
      ],
    },
    {
      name: "follow_player",
      description: "Make the bot follow a specific player",
      parameters: [
        {
          name: "distance",
          type: "number",
          description: "Parameter: distance",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: true,
        },
      ],
    },
    {
      name: "attack_entity",
      description: "Attack a specific entity near the bot",
      parameters: [
        {
          name: "entityName",
          type: "string",
          description: "Parameter: entityName",
          required: true,
        },
        {
          name: "maxDistance",
          type: "number",
          description: "Parameter: maxDistance",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/gerred/mcpmc",
  _varName: "mcpmcMinecraftMcpPlugin",
};

const mcpNotesPlugin: Plugin = {
  id: "4c63qdbh55",
  name: "MCP Notes",
  description:
    "A simple note-taking MCP server for recording and managing notes with AI models.",
  image: "https://github.com/9Ninety.png",
  actions: [],
  githubUrl: "https://github.com/9Ninety/MCPNotes",
  _varName: "mcpNotesPlugin",
};

const mcpvcdPlugin: Plugin = {
  id: "kdvs90ijbl",
  name: "mcp-vcd",
  description:
    "Provide all changes of the specified signal name to the model's context. This is useful for large waveform files with many signals where you cannot fit the entire VCD file into the model's context window.",
  image: "https://github.com/SeanMcLoughlin.png",
  actions: [
    {
      name: "get-signal",
      description: "Get all instances of a specified signal in a VCD file",
      parameters: [
        {
          name: "end_time",
          type: "integer",
          description: "End timestamp (optional)",
          required: false,
        },
        {
          name: "file_name",
          type: "string",
          description: "Name of the VCD file to analyze",
          required: true,
        },
        {
          name: "signal_name",
          type: "string",
          description: "Name of the signal to search for",
          required: true,
        },
        {
          name: "start_time",
          type: "integer",
          description: "Start timestamp (optional)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/SeanMcLoughlin/mcp-vcd",
  _varName: "mcpvcdPlugin",
};

const openrouterMcpServerPlugin: Plugin = {
  id: "xdnmf8yei0",
  name: "OpenRouter MCP Server",
  description:
    "Provides integration with OpenRouter.ai, allowing access to various AI models through a unified interface.",
  image: "https://github.com/heltonteixeira.png",
  actions: [
    {
      name: "chat_completion",
      description: "Send a message to OpenRouter.ai and get a response",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description:
            "An array of conversation messages with roles and content",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description:
            'The model to use (e.g., "google/gemini-2.0-flash-thinking-exp:free", "undi95/toppy-m-7b:free"). If not provided, uses the default model if set.',
          required: false,
        },
        {
          name: "temperature",
          type: "number",
          description: "Sampling temperature (0-2)",
          required: false,
        },
      ],
    },
    {
      name: "search_models",
      description:
        "Search and filter OpenRouter.ai models based on various criteria",
      parameters: [
        {
          name: "capabilities",
          type: "object",
          description: "Filter by model capabilities",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return (default: 10)",
          required: false,
        },
        {
          name: "maxCompletionPrice",
          type: "number",
          description: "Maximum price per 1K tokens for completions",
          required: false,
        },
        {
          name: "maxContextLength",
          type: "number",
          description: "Maximum context length in tokens",
          required: false,
        },
        {
          name: "maxPromptPrice",
          type: "number",
          description: "Maximum price per 1K tokens for prompts",
          required: false,
        },
        {
          name: "minContextLength",
          type: "number",
          description: "Minimum context length in tokens",
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description:
            'Filter by specific provider (e.g., "anthropic", "openai", "cohere")',
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Optional search query to filter by name, description, or provider",
          required: false,
        },
      ],
    },
    {
      name: "get_model_info",
      description: "Get detailed information about a specific model",
      parameters: [
        {
          name: "model",
          type: "string",
          description: "The model ID to get information for",
          required: true,
        },
      ],
    },
    {
      name: "validate_model",
      description: "Check if a model ID is valid",
      parameters: [
        {
          name: "model",
          type: "string",
          description: "The model ID to validate",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/heltonteixeira/openrouterai",
  _varName: "openrouterMcpServerPlugin",
};

const wopalmcpserverhotnewsPlugin: Plugin = {
  id: "hmr0lo8sa3",
  name: "@wopal/mcp-server-hotnews",
  description:
    "A Model Context Protocol server that provides real-time hot trending topics from major Chinese social platforms and news sites.",
  image: "https://github.com/wopal-cn.png",
  actions: [
    {
      name: "get_hot_news",
      description: "Get hot trending lists from various platforms",
      parameters: [
        {
          name: "sources",
          type: "number array",
          description:
            'Available HotNews sources (ID: Platform):\n\n{ID: 1, Platform: "Zhihu Hot List (知乎热榜)"},\n{ID: 2, Platform: "36Kr Hot List (36氪热榜)"},\n{ID: 3, Platform: "Baidu Hot Discussion (百度热点)"},\n{ID: 4, Platform: "Bilibili Hot List (B站热榜)"},\n{ID: 5, Platform: "Weibo Hot Search (微博热搜)"},\n{ID: 6, Platform: "Douyin Hot List (抖音热点)"},\n{ID: 7, Platform: "Hupu Hot List (虎扑热榜)"},\n{ID: 8, Platform: "Douban Hot List (豆瓣热榜)"},\n{ID: 9, Platform: "IT News (IT新闻)"}\n\nExample usage:\n- [3]: Get Baidu Hot Discussion only\n- [1,3,7]: Get hot lists from zhihuHot, Baidu, and huPu\n- [1,2,3,4]: Get hot lists from zhihuHot, 36Kr, Baidu, and Bilibili',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wopal-cn/mcp-hotnews-server",
  _varName: "wopalmcpserverhotnewsPlugin",
};

const ollamaMcpDatabaseAssistantPlugin: Plugin = {
  id: "jgiuuvhhed",
  name: "Ollama MCP Database Assistant",
  description:
    "An interactive chat interface that combines Ollama's LLM capabilities with PostgreSQL database access through the Model Context Protocol (MCP). Ask questions about your data in natural language and get AI-powered responses backed by real SQL queries.",
  image: "https://github.com/robdodson.png",
  actions: [],
  githubUrl: "https://github.com/robdodson/ollama-mcp-db",
  _varName: "ollamaMcpDatabaseAssistantPlugin",
};

const hnymcpPlugin: Plugin = {
  id: "8zeou4ict1",
  name: "hny-mcp",
  description:
    "Server for interacting with Honeycomb observability data. This server enables LLMs like Claude to directly analyze and query your Honeycomb datasets.",
  image: "https://github.com/honeycombio.png",
  actions: [],
  githubUrl: "https://github.com/honeycombio/honeycomb-mcp",
  _varName: "hnymcpPlugin",
};

const mcppdftoolsPlugin: Plugin = {
  id: "fqtuoh05xi",
  name: "mcp-pdf-tools",
  description:
    "mcp using PyPDF2 to:\n•  merge-pdfs\n•  extract-pages\n•  search-pdfs\n•  merge-pdfs-ordered (merge in user spec. order)\n•  find-related-pdfs (regex extracted text for related PDF files)",
  image: "https://github.com/hanweg.png",
  actions: [
    {
      name: "merge-pdfs",
      description: "Merge multiple PDF files into a single PDF",
      parameters: [
        {
          name: "input_paths",
          type: "string array",
          description: "List of input PDF file paths",
          required: true,
        },
        {
          name: "output_path",
          type: "string",
          description: "Output path for merged PDF",
          required: true,
        },
      ],
    },
    {
      name: "extract-pages",
      description: "Extract specific pages from a PDF file",
      parameters: [
        {
          name: "input_path",
          type: "string",
          description: "Input PDF file path",
          required: true,
        },
        {
          name: "output_path",
          type: "string",
          description: "Output path for new PDF",
          required: true,
        },
        {
          name: "pages",
          type: "integer array",
          description: "List of page numbers to extract (1-based indexing)",
          required: true,
        },
      ],
    },
    {
      name: "search-pdfs",
      description:
        "Search for PDF files in a directory with optional pattern matching",
      parameters: [
        {
          name: "base_path",
          type: "string",
          description: "Base directory to search in",
          required: true,
        },
        {
          name: "pattern",
          type: "string",
          description:
            "Pattern to match against filenames (e.g., 'report*.pdf')",
          required: false,
        },
        {
          name: "recursive",
          type: "boolean",
          description: "Whether to search in subdirectories",
          required: false,
        },
      ],
    },
    {
      name: "merge-pdfs-ordered",
      description:
        "Merge PDFs in a specific order based on patterns or exact names",
      parameters: [
        {
          name: "base_path",
          type: "string",
          description: "Base directory containing PDFs",
          required: true,
        },
        {
          name: "fuzzy_matching",
          type: "boolean",
          description: "Use fuzzy matching for filenames",
          required: false,
        },
        {
          name: "output_path",
          type: "string",
          description: "Output path for merged PDF",
          required: true,
        },
        {
          name: "patterns",
          type: "string array",
          description: "List of patterns or names in desired order",
          required: true,
        },
      ],
    },
    {
      name: "find-related-pdfs",
      description:
        "Find a PDF and then search for related PDFs based on its content, including common substring patterns",
      parameters: [
        {
          name: "base_path",
          type: "string",
          description: "Base directory to search in",
          required: true,
        },
        {
          name: "min_pattern_occurrences",
          type: "integer",
          description:
            "Minimum times a pattern must appear to be considered significant",
          required: false,
        },
        {
          name: "pattern_matching_only",
          type: "boolean",
          description: "Only search for repeating substring patterns",
          required: false,
        },
        {
          name: "target_filename",
          type: "string",
          description: "Name of the initial PDF to analyze",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/hanweg/mcp-pdf-tools",
  _varName: "mcppdftoolsPlugin",
};

const mapboxmcpserverPlugin: Plugin = {
  id: "ijqo60lj52",
  name: "mapbox-mcp-server",
  description: "MCP Server for the Mapbox API.",
  image: "https://github.com/AidenYangX.png",
  actions: [
    {
      name: "mapbox_directions",
      description: "Get navigation route between two points",
      parameters: [
        {
          name: "coordinates",
          type: "object array",
          description: "Array of coordinates",
          required: true,
        },
        {
          name: "profile",
          type: "string",
          description: "Navigation mode",
          required: false,
        },
      ],
    },
    {
      name: "mapbox_directions_by_places",
      description:
        "Get navigation route between multiple places using their names",
      parameters: [
        {
          name: "language",
          type: "string",
          description: "Language for geocoding results",
          required: false,
        },
        {
          name: "places",
          type: "string array",
          description: "Array of place names to route between",
          required: true,
        },
        {
          name: "profile",
          type: "string",
          description: "Navigation mode",
          required: false,
        },
      ],
    },
    {
      name: "mapbox_matrix",
      description:
        "Calculate travel time and distance matrices between coordinates",
      parameters: [
        {
          name: "annotations",
          type: "string",
          description: "Type of matrix to return",
          required: false,
        },
        {
          name: "approaches",
          type: "string array",
          description: "Approaches to coordinates",
          required: false,
        },
        {
          name: "bearings",
          type: "object array",
          description: "Bearings for coordinates",
          required: false,
        },
        {
          name: "coordinates",
          type: "object array",
          description: "Array of coordinates",
          required: true,
        },
        {
          name: "depart_at",
          type: "string",
          description: "Departure time in ISO 8601 format",
          required: false,
        },
        {
          name: "destinations",
          type: "number array",
          description: "Indices of destination coordinates",
          required: false,
        },
        {
          name: "fallback_speed",
          type: "number",
          description: "Speed for direct path calculation when no route exists",
          required: false,
        },
        {
          name: "profile",
          type: "string",
          description: "Navigation mode",
          required: false,
        },
        {
          name: "sources",
          type: "number array",
          description: "Indices of source coordinates",
          required: false,
        },
      ],
    },
    {
      name: "mapbox_matrix_by_places",
      description:
        "Calculate travel time and distance matrices between places using their names",
      parameters: [
        {
          name: "annotations",
          type: "string",
          description: "Type of matrix to return",
          required: false,
        },
        {
          name: "depart_at",
          type: "string",
          description: "Departure time in ISO 8601 format",
          required: false,
        },
        {
          name: "destinations",
          type: "number array",
          description: "Indices of destination places",
          required: false,
        },
        {
          name: "fallback_speed",
          type: "number",
          description: "Speed for direct path calculation when no route exists",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Language for geocoding results",
          required: false,
        },
        {
          name: "places",
          type: "string array",
          description: "Array of place names",
          required: true,
        },
        {
          name: "profile",
          type: "string",
          description: "Navigation mode",
          required: false,
        },
        {
          name: "sources",
          type: "number array",
          description: "Indices of source places",
          required: false,
        },
      ],
    },
    {
      name: "mapbox_geocoding",
      description: "Search for places and convert addresses into coordinates",
      parameters: [
        {
          name: "fuzzyMatch",
          type: "boolean",
          description: "Enable/disable fuzzy matching",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "Language of the search results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Limit the number of results",
          required: false,
        },
        {
          name: "searchText",
          type: "string",
          description: "The search text to geocode",
          required: true,
        },
        {
          name: "types",
          type: "string array",
          description: "Filter results by feature types",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/AidenYangX/mapbox-mcp-server",
  _varName: "mapboxmcpserverPlugin",
};

const mcpgraphqlPlugin: Plugin = {
  id: "4zwa4l8utf",
  name: "mcp-graphql",
  description: "MCP for working with GraphQL servers.",
  image: "https://github.com/blurrah.png",
  actions: [
    {
      name: "query-graphql",
      description: "Query a GraphQL server",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "variables",
          type: "string",
          description: "Parameter: variables",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/blurrah/mcp-graphql",
  _varName: "mcpgraphqlPlugin",
};

const mcprestapiPlugin: Plugin = {
  id: "izr2sp4rqo",
  name: "mcp-rest-api",
  description:
    "A TypeScript-based MCP server that enables testing of REST APIs through Cline. This tool allows you to test and interact with any REST API endpoints directly from your development environment.",
  image: "https://github.com/dkmaker.png",
  actions: [
    {
      name: "test_request",
      description:
        "Test a REST API endpoint and get detailed response information. Base URL: https://api.example.org/v2 | SSL Verification enabled (see config resource for SSL settings) | Authentication: No authentication configured | No custom headers defined (see config resource for headers) | The tool automatically: - Normalizes endpoints (adds leading slash, removes trailing slashes) - Handles authentication header injection - Applies custom headers from HEADER_* environment variables - Accepts any HTTP status code as valid - Limits response size to 10000 bytes (see config resource for size limit settings) - Returns detailed response information including: * Full URL called * Status code and text * Response headers * Response body * Request details (method, headers, body) * Response timing * Validation messages | Error Handling: - Network errors are caught and returned with descriptive messages - Invalid status codes are still returned with full response details - Authentication errors include the attempted auth method | See the config resource for all configuration options, including header configuration.\n",
      parameters: [
        {
          name: "body",
          type: "object",
          description: "Optional request body for POST/PUT requests",
          required: false,
        },
        {
          name: "endpoint",
          type: "string",
          description:
            'Endpoint path (e.g. "/users"). Do not include full URLs - only the path. Example: "/api/users" will resolve to "https://api.example.org/v2/api/users"',
          required: true,
        },
        {
          name: "headers",
          type: "object",
          description:
            "Optional request headers for one-time use. IMPORTANT: Do not use for sensitive data like API keys - those should be configured via environment variables. This parameter is intended for dynamic, non-sensitive headers that may be needed for specific requests.",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "HTTP method to use",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dkmaker/mcp-rest-api",
  _varName: "mcprestapiPlugin",
};

const mcpServerForLogseqPlugin: Plugin = {
  id: "obfu4x8dc1",
  name: "MCP server for LogSeq",
  description: "Interacts with LogSeq via its API.",
  image: "https://github.com/ergut.png",
  actions: [
    {
      name: "create_page",
      description: "Create a new page in LogSeq.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content of the new page",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the new page",
          required: true,
        },
      ],
    },
    {
      name: "list_pages",
      description: "Lists all pages in a LogSeq graph.",
      parameters: [
        {
          name: "include_journals",
          type: "boolean",
          description: "Whether to include journal/daily notes in the list",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ergut/mcp-logseq-server",
  _varName: "mcpServerForLogseqPlugin",
};

const elevenlabsMcpServerPlugin: Plugin = {
  id: "leukzvus7o",
  name: "ElevenLabs MCP Server",
  description: "Integrates with ElevenLabs text-to-speech API.",
  image: "https://github.com/mamertofabian.png",
  actions: [
    {
      name: "generate_audio_simple",
      description:
        "Generate audio from plain text using default voice settings",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Plain text to convert to audio",
          required: true,
        },
        {
          name: "voice_id",
          type: "string",
          description: "Optional voice ID to use for generation",
          required: false,
        },
      ],
    },
    {
      name: "generate_audio_script",
      description:
        'Generate audio from a structured script with multiple voices and actors. \n                    Accepts either:\n                    1. Plain text string\n                    2. JSON string with format: {\n                        "script": [\n                            {\n                                "text": "Text to speak",\n                                "voice_id": "optional-voice-id",\n                                "actor": "optional-actor-name"\n                            },\n                            ...\n                        ]\n                    }',
      parameters: [
        {
          name: "script",
          type: "string",
          description:
            "JSON string containing script array or plain text. For JSON format, provide an object with a 'script' array containing objects with 'text' (required), 'voice_id' (optional), and 'actor' (optional) fields.",
          required: true,
        },
      ],
    },
    {
      name: "delete_job",
      description: "Delete a voiceover job and its associated files",
      parameters: [
        {
          name: "job_id",
          type: "string",
          description: "ID of the job to delete",
          required: true,
        },
      ],
    },
    {
      name: "get_audio_file",
      description: "Get the audio file content for a specific job",
      parameters: [
        {
          name: "job_id",
          type: "string",
          description: "ID of the job to get audio file for",
          required: true,
        },
      ],
    },
    {
      name: "list_voices",
      description:
        "Get a list of all available ElevenLabs voices with metadata",
      parameters: [],
    },
    {
      name: "get_voiceover_history",
      description:
        "Get voiceover job history. Optionally specify a job ID for a specific job.",
      parameters: [
        {
          name: "job_id",
          type: "string",
          description: "Optional job ID to get details for a specific job",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mamertofabian/elevenlabs-mcp-server",
  _varName: "elevenlabsMcpServerPlugin",
};

const xMcpServerPlugin: Plugin = {
  id: "5nx3qqiunw",
  name: "X MCP Server",
  description:
    "Server for X (Twitter) integration that provides tools for reading your timeline and engaging with tweets. Designed for use with Claude desktop.",
  image: "https://github.com/DataWhisker.png",
  actions: [
    {
      name: "get_home_timeline",
      description: "Get the most recent tweets from your home timeline",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of tweets to retrieve (max 100)",
          required: false,
        },
      ],
    },
    {
      name: "create_tweet",
      description: "Create a new tweet",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The text content of the tweet",
          required: true,
        },
      ],
    },
    {
      name: "reply_to_tweet",
      description: "Reply to a tweet",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "The text content of the reply",
          required: true,
        },
        {
          name: "tweet_id",
          type: "string",
          description: "The ID of the tweet to reply to",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DataWhisker/x-mcp-server",
  _varName: "xMcpServerPlugin",
};

const mcpnativewindPlugin: Plugin = {
  id: "0w2dg13oyt",
  name: "mcp-nativewind",
  description: "Rransforms Tailwind components to NativeWind 4.",
  image: "https://github.com/tokenizin-agency.png",
  actions: [],
  githubUrl: "https://github.com/tokenizin-agency/mcp-nativewind",
  _varName: "mcpnativewindPlugin",
};

const qbtimemcpserverPlugin: Plugin = {
  id: "26romtmpu2",
  name: "qb-time-mcp-server",
  description:
    "Provides unified access to QuickBooks Time API functionality. This server consolidates multiple QuickBooks Time services into a single, efficient interface.",
  image: "https://github.com/aallsbury.png",
  actions: [],
  githubUrl: "https://github.com/aallsbury/qb-time-mcp-server",
  _varName: "qbtimemcpserverPlugin",
};

const cfbdmcpserverPlugin: Plugin = {
  id: "ggh4skfx4o",
  name: "cfbd-mcp-server",
  description:
    "An MCP server providing access to college football statistics sourced from the College Football Data API within Claude Desktop.",
  image: "https://github.com/lenwood.png",
  actions: [
    {
      name: "get-games",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football game data.\n            Required: year\n            Optional: week, season_type, team, conference, category, game_id\n            Example valid queries:\n            - year=2023\n            - year=2023, team="Alabama"\n            - year=2023, week=1, conference="SEC"\n            ',
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Parameter: category",
          required: false,
        },
        {
          name: "conference",
          type: "string",
          description: "Parameter: conference",
          required: false,
        },
        {
          name: "game_id",
          type: "integer",
          description: "Parameter: game_id",
          required: false,
        },
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: true,
        },
      ],
    },
    {
      name: "get-records",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football team record data.\n            Optional: year, team, conference\n            Example valid queries:\n            - year=2023\n            - team="Alabama"\n            - conference="SEC"\n            - year=2023, team="Alabama"\n            ',
      parameters: [
        {
          name: "conference",
          type: "string",
          description: "Parameter: conference",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: false,
        },
      ],
    },
    {
      name: "get-games-teams",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football team game data.\n            Required: year plus at least one of: week, team or conference.\n            Example valid queries:\n            - year=2023, team="Alabama"\n            - year=2023, week=1\n            - year=2023, conference="SEC\n            ',
      parameters: [
        {
          name: "classification",
          type: "string",
          description: "Parameter: classification",
          required: false,
        },
        {
          name: "conference",
          type: "string",
          description: "Parameter: conference",
          required: false,
        },
        {
          name: "game_id",
          type: "integer",
          description: "Parameter: game_id",
          required: false,
        },
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: true,
        },
      ],
    },
    {
      name: "get-plays",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football play-by-play data.\n            Required: year AND week\n            Optional: season_type, team, offense, defense, conference, offense_conference, defense_conference, play_type, classification\n            Example valid queries:\n            - year=2023, week=1\n            - year=2023, week=1, team="Alabama"\n            - year=2023, week=1, offense="Alabama", defense="Auburn"\n            ',
      parameters: [
        {
          name: "classification",
          type: "string",
          description: "Parameter: classification",
          required: false,
        },
        {
          name: "conference",
          type: "string",
          description: "Parameter: conference",
          required: false,
        },
        {
          name: "defense",
          type: "string",
          description: "Parameter: defense",
          required: false,
        },
        {
          name: "defense_conference",
          type: "string",
          description: "Parameter: defense_conference",
          required: false,
        },
        {
          name: "offense",
          type: "string",
          description: "Parameter: offense",
          required: false,
        },
        {
          name: "offense_conference",
          type: "string",
          description: "Parameter: offense_conference",
          required: false,
        },
        {
          name: "play_type",
          type: "integer",
          description: "Parameter: play_type",
          required: false,
        },
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: true,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: true,
        },
      ],
    },
    {
      name: "get-drives",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football drive data.\n            Required: year\n            Optional: season_type, week, team, offense, defense, conference, offense_conference, defense_conference, classification\n            Example valid queries:\n            - year=2023\n            - year=2023, team="Alabama"\n            - year=2023, offense="Alabama", defense="Auburn"\n            ',
      parameters: [
        {
          name: "classification",
          type: "string",
          description: "Parameter: classification",
          required: false,
        },
        {
          name: "conference",
          type: "string",
          description: "Parameter: conference",
          required: false,
        },
        {
          name: "defense",
          type: "string",
          description: "Parameter: defense",
          required: false,
        },
        {
          name: "defense_conference",
          type: "string",
          description: "Parameter: defense_conference",
          required: false,
        },
        {
          name: "offense",
          type: "string",
          description: "Parameter: offense",
          required: false,
        },
        {
          name: "offense_conference",
          type: "string",
          description: "Parameter: offense_conference",
          required: false,
        },
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: true,
        },
      ],
    },
    {
      name: "get-play-stats",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football play statistic data.\n            Optional: year, week, team, game_id, athlete_id, stat_type_id, season_type, conference\n            At least one parameter is required\n            Example valid queries:\n            - year=2023\n            - game_id=401403910\n            - team="Alabama", year=2023\n            ',
      parameters: [
        {
          name: "athlete_id",
          type: "integer",
          description: "Parameter: athlete_id",
          required: false,
        },
        {
          name: "conference",
          type: "string",
          description: "Parameter: conference",
          required: false,
        },
        {
          name: "game_id",
          type: "integer",
          description: "Parameter: game_id",
          required: false,
        },
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "stat_type_id",
          type: "integer",
          description: "Parameter: stat_type_id",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: false,
        },
      ],
    },
    {
      name: "get-rankings",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football rankings data.\n            Required: year\n            Optional: week, season_type\n            Example valid queries:\n            - year=2023\n            - year=2023, week=1\n            - year=2023, season_type="regular"\n            ',
      parameters: [
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: true,
        },
      ],
    },
    {
      name: "get-pregame-win-probability",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get college football pregame win probability data.\n            Optional: year, week, team, season_type\n            At least one parameter is required\n            Example valid queries:\n            - year=2023\n            - team="Alabama"\n            - year=2023, week=1\n            ',
      parameters: [
        {
          name: "season_type",
          type: "string",
          description: "Parameter: season_type",
          required: false,
        },
        {
          name: "team",
          type: "string",
          description: "Parameter: team",
          required: false,
        },
        {
          name: "week",
          type: "integer",
          description: "Parameter: week",
          required: false,
        },
        {
          name: "year",
          type: "integer",
          description: "Parameter: year",
          required: false,
        },
      ],
    },
    {
      name: "get-advanced-box-score",
      description:
        'Note: When using this tool, please explicitly mention that you are retrieving data from the College Football Data API. You must mention "College Football Data API" in every response.\n\n    Get advanced box score data for college football games.\n            Required: gameId\n            Example valid queries:\n            - gameId=401403910\n            ',
      parameters: [
        {
          name: "gameId",
          type: "integer",
          description: "Parameter: gameId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/lenwood/cfbd-mcp-server",
  _varName: "cfbdmcpserverPlugin",
};

const chromiamcpPlugin: Plugin = {
  id: "0l8n6lutog",
  name: "chromia-mcp",
  description:
    "Enables AI to interact with Chromia Wallet for sending $CHR transactions.",
  image: "https://github.com/chromindscan.png",
  actions: [],
  githubUrl: "https://github.com/chromindscan/chromia-mcp",
  _varName: "chromiamcpPlugin",
};

const mcpwolframalphaPlugin: Plugin = {
  id: "q5fud9cttp",
  name: "MCP-wolfram-alpha",
  description:
    "Connect your chat repl to wolfram alpha computational intelligence",
  image: "https://github.com/SecretiveShell.png",
  actions: [
    {
      name: "query-wolfram-alpha",
      description:
        "Use Wolfram Alpha to answer a question. This tool should be used when you need complex math or symbolic intelligence.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/SecretiveShell/MCP-wolfram-alpha",
  _varName: "mcpwolframalphaPlugin",
};

const mcpjiraserverPlugin: Plugin = {
  id: "2a6ts4367i",
  name: "mcp-jira-server",
  description:
    "Provides integration with Jira's REST API, allowing AI assistants to manage Jira issues programmatically.",
  image: "https://github.com/1broseidon.png",
  actions: [
    {
      name: "create_issue",
      description: "Create a new Jira issue",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Issue summary/title",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Issue type (Task, Epic, or Subtask)",
          required: true,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory containing .jira-config.json",
          required: true,
        },
      ],
    },
    {
      name: "list_issues",
      description: "List issues in the project",
      parameters: [
        {
          name: "status",
          type: "string",
          description:
            'Filter by status (e.g., "To Do", "In Progress", "Done")',
          required: false,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory containing .jira-config.json",
          required: true,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing issue",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "New description",
          required: false,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Issue key (e.g., PRJ-123)",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "New status",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "New summary/title",
          required: false,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory containing .jira-config.json",
          required: true,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Get details of a specific issue",
      parameters: [
        {
          name: "issue_key",
          type: "string",
          description: "Issue key (e.g., PRJ-123)",
          required: true,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory containing .jira-config.json",
          required: true,
        },
      ],
    },
    {
      name: "delete_issue",
      description: "Delete a Jira issue",
      parameters: [
        {
          name: "issue_key",
          type: "string",
          description: "Issue key (e.g., PRJ-123)",
          required: true,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory containing .jira-config.json",
          required: true,
        },
      ],
    },
    {
      name: "add_comment",
      description: "Add a comment to an existing issue",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment text to add to the issue",
          required: true,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Issue key (e.g., PRJ-123)",
          required: true,
        },
        {
          name: "working_dir",
          type: "string",
          description: "Working directory containing .jira-config.json",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/1broseidon/mcp-jira-server",
  _varName: "mcpjiraserverPlugin",
};

const roamResearchPlugin: Plugin = {
  id: "fzfznyaflu",
  name: "Roam Research",
  description:
    "Provides comprehensive access to Roam Research's API functionality. This server enables AI assistants like Claude to interact with your Roam Research graph through a standardized interface.",
  image: "https://github.com/2b3pro.png",
  actions: [
    {
      name: "roam_add_todo",
      description:
        "Add a list of todo items as individual blocks to today's daily page in Roam. Each item becomes its own actionable block with todo status.\nNOTE on Roam-flavored markdown: For direct linking: use [[link]] syntax. For aliased linking, use [alias]([[link]]) syntax. Do not concatenate words in links/hashtags - correct: #[[multiple words]] #self-esteem (for typically hyphenated words).",
      parameters: [
        {
          name: "todos",
          type: "string array",
          description: "List of todo items to add",
          required: true,
        },
      ],
    },
    {
      name: "roam_fetch_page_by_title",
      description:
        "Retrieve complete page contents by exact title, including all nested blocks and resolved block references. Use for accessing daily pages, reading and analyzing existing Roam pages.",
      parameters: [
        {
          name: "title",
          type: "string",
          description:
            "Title of the page. For date pages, use ordinal date formats such as January 2nd, 2025",
          required: true,
        },
      ],
    },
    {
      name: "roam_create_page",
      description:
        "Create a new standalone page in Roam with optional content using explicit nesting levels. Best for:\n- Creating foundational concept pages that other pages will link to/from\n- Establishing new topic areas that need their own namespace\n- Setting up reference materials or documentation\n- Making permanent collections of information.",
      parameters: [
        {
          name: "content",
          type: "object array",
          description:
            "Initial content for the page as an array of blocks with explicit nesting levels",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the new page",
          required: true,
        },
      ],
    },
    {
      name: "roam_create_block",
      description:
        "Add a new block to an existing Roam page. If no page specified, adds to today's daily note. Best for capturing immediate thoughts, additions to discussions, or content that doesn't warrant its own page. Can specify page by title or UID.\nNOTE on Roam-flavored markdown: For direct linking: use [[link]] syntax. For aliased linking, use [alias]([[link]]) syntax. Do not concatenate words in links/hashtags - correct: #[[multiple words]] #self-esteem (for typically hyphenated words).",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content of the block",
          required: true,
        },
        {
          name: "page_uid",
          type: "string",
          description: "Optional: UID of the page to add block to",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description:
            "Optional: Title of the page to add block to (defaults to today's date if neither page_uid nor title provided)",
          required: false,
        },
      ],
    },
    {
      name: "roam_create_outline",
      description:
        "Add a structured outline to an existing page or block (by title text or uid), with customizable nesting levels. Best for:\n- Adding supplementary structured content to existing pages\n- Creating temporary or working outlines (meeting notes, brainstorms)\n- Organizing thoughts or research under a specific topic\n- Breaking down subtopics or components of a larger concept",
      parameters: [
        {
          name: "block_text_uid",
          type: "string",
          description:
            "A relevant title heading for the outline (or UID, if known) of the block under which outline content will be nested. If blank, content will be nested under the page title.",
          required: false,
        },
        {
          name: "outline",
          type: "object array",
          description:
            "Array of outline items with block text and explicit nesting level",
          required: true,
        },
        {
          name: "page_title_uid",
          type: "string",
          description:
            "Title (or UID if known) of the page. Leave blank to use the default daily page",
          required: false,
        },
      ],
    },
    {
      name: "roam_import_markdown",
      description:
        "Import nested markdown content into Roam under a specific block. Can locate the parent block by UID or by exact string match within a specific page.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Nested markdown content to import",
          required: true,
        },
        {
          name: "order",
          type: "string",
          description:
            'Optional: Where to add the content under the parent ("first" or "last")',
          required: false,
        },
        {
          name: "page_title",
          type: "string",
          description:
            "Optional: Title of the page containing the parent block (ignored if page_uid provided)",
          required: false,
        },
        {
          name: "page_uid",
          type: "string",
          description: "Optional: UID of the page containing the parent block",
          required: false,
        },
        {
          name: "parent_string",
          type: "string",
          description:
            "Optional: Exact string content of the parent block to add content under (must provide either page_uid or page_title)",
          required: false,
        },
        {
          name: "parent_uid",
          type: "string",
          description: "Optional: UID of the parent block to add content under",
          required: false,
        },
      ],
    },
    {
      name: "roam_search_for_tag",
      description:
        "Search for blocks containing a specific tag and optionally filter by blocks that also contain another tag nearby. Example: Use this to search for memories that are tagged with the MEMORIES_TAG.",
      parameters: [
        {
          name: "near_tag",
          type: "string",
          description:
            "Optional: Another tag to filter results by - will only return blocks where both tags appear",
          required: false,
        },
        {
          name: "page_title_uid",
          type: "string",
          description:
            "Optional: Title or UID of the page to search in. Defaults to today's daily page if not provided",
          required: false,
        },
        {
          name: "primary_tag",
          type: "string",
          description:
            "The main tag to search for (without the [[ ]] brackets)",
          required: true,
        },
      ],
    },
    {
      name: "roam_search_by_status",
      description:
        "Search for blocks with a specific status (TODO/DONE) across all pages or within a specific page.",
      parameters: [
        {
          name: "exclude",
          type: "string",
          description:
            "Optional: Comma-separated list of terms to filter results by exclusion (matches content or page title)",
          required: false,
        },
        {
          name: "include",
          type: "string",
          description:
            "Optional: Comma-separated list of terms to filter results by inclusion (matches content or page title)",
          required: false,
        },
        {
          name: "page_title_uid",
          type: "string",
          description:
            "Optional: Title or UID of the page to search in. If not provided, searches across all pages",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Status to search for (TODO or DONE)",
          required: true,
        },
      ],
    },
    {
      name: "roam_search_block_refs",
      description:
        "Search for block references within a page or across the entire graph. Can search for references to a specific block or find all block references.",
      parameters: [
        {
          name: "block_uid",
          type: "string",
          description: "Optional: UID of the block to find references to",
          required: false,
        },
        {
          name: "page_title_uid",
          type: "string",
          description:
            "Optional: Title or UID of the page to search in. If not provided, searches across all pages",
          required: false,
        },
      ],
    },
    {
      name: "roam_search_hierarchy",
      description:
        "Search for parent or child blocks in the block hierarchy. Can search up or down the hierarchy from a given block.",
      parameters: [
        {
          name: "child_uid",
          type: "string",
          description: "Optional: UID of the block to find parents of",
          required: false,
        },
        {
          name: "max_depth",
          type: "integer",
          description: "Optional: How many levels deep to search (default: 1)",
          required: false,
        },
        {
          name: "page_title_uid",
          type: "string",
          description: "Optional: Title or UID of the page to search in",
          required: false,
        },
        {
          name: "parent_uid",
          type: "string",
          description: "Optional: UID of the block to find children of",
          required: false,
        },
      ],
    },
    {
      name: "roam_find_pages_modified_today",
      description:
        "Find pages that have been modified today (since midnight), with limit.",
      parameters: [
        {
          name: "max_num_pages",
          type: "integer",
          description: "Max number of pages to retrieve (default: 50)",
          required: false,
        },
      ],
    },
    {
      name: "roam_search_by_text",
      description:
        "Search for blocks containing specific text across all pages or within a specific page.",
      parameters: [
        {
          name: "page_title_uid",
          type: "string",
          description:
            "Optional: Title or UID of the page to search in. If not provided, searches across all pages",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "The text to search for",
          required: true,
        },
      ],
    },
    {
      name: "roam_update_block",
      description:
        "Update a single block identified by its UID. Use this for individual block updates when you need to either replace the entire content or apply a transform pattern to modify specific parts of the content.\nNOTE on Roam-flavored markdown: For direct linking: use [[link]] syntax. For aliased linking, use [alias]([[link]]) syntax. Do not concatenate words in links/hashtags - correct: #[[multiple words]] #self-esteem (for typically hyphenated words).",
      parameters: [
        {
          name: "block_uid",
          type: "string",
          description: "UID of the block to update",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description:
            "New content for the block. If not provided, transform_pattern will be used.",
          required: false,
        },
        {
          name: "transform_pattern",
          type: "object",
          description:
            "Pattern to transform the current content. Used if content is not provided.",
          required: false,
        },
      ],
    },
    {
      name: "roam_update_multiple_blocks",
      description:
        "Efficiently update multiple blocks in a single batch operation. Use this when you need to update several blocks at once to avoid making multiple separate API calls. Each block in the batch can independently either have its content replaced or transformed using a pattern.\nNOTE on Roam-flavored markdown: For direct linking: use [[link]] syntax. For aliased linking, use [alias]([[link]]) syntax. Do not concatenate words in links/hashtags - correct: #[[multiple words]] #self-esteem (for typically hyphenated words).",
      parameters: [
        {
          name: "updates",
          type: "object array",
          description: "Array of block updates to perform",
          required: true,
        },
      ],
    },
    {
      name: "roam_search_by_date",
      description:
        "Search for blocks or pages based on creation or modification dates. Not for daily pages with ordinal date titles.",
      parameters: [
        {
          name: "end_date",
          type: "string",
          description: "Optional: End date in ISO format (YYYY-MM-DD)",
          required: false,
        },
        {
          name: "include_content",
          type: "boolean",
          description:
            "Whether to include the content of matching blocks/pages",
          required: false,
        },
        {
          name: "scope",
          type: "string",
          description: "Whether to search blocks, pages, or both",
          required: true,
        },
        {
          name: "start_date",
          type: "string",
          description: "Start date in ISO format (YYYY-MM-DD)",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description:
            "Whether to search by creation date, modification date, or both",
          required: true,
        },
      ],
    },
    {
      name: "roam_remember",
      description:
        "Add a memory or piece of information to remember, stored on the daily page with MEMORIES_TAG tag and optional categories. \nNOTE on Roam-flavored markdown: For direct linking: use [[link]] syntax. For aliased linking, use [alias]([[link]]) syntax. Do not concatenate words in links/hashtags - correct: #[[multiple words]] #self-esteem (for typically hyphenated words).",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description:
            "Optional categories to tag the memory with (will be converted to Roam tags)",
          required: false,
        },
        {
          name: "memory",
          type: "string",
          description: "The memory detail or information to remember",
          required: true,
        },
      ],
    },
    {
      name: "roam_recall",
      description:
        "Retrieve all stored memories on page titled MEMORIES_TAG, or tagged block content with the same name. Returns a combined, deduplicated list of memories. Optionally filter blcoks with a specified tag and sort by creation date.",
      parameters: [
        {
          name: "filter_tag",
          type: "string",
          description:
            'Include only memories with a specific filter tag. For single word tags use format "tag", for multi-word tags use format "tag word" (without brackets)',
          required: false,
        },
        {
          name: "sort_by",
          type: "string",
          description: "Sort order for memories based on creation date",
          required: false,
        },
      ],
    },
    {
      name: "roam_datomic_query",
      description:
        "Execute a custom Datomic query on the Roam graph beyond the available search tools. This provides direct access to Roam's query engine for advanced data retrieval. Note: Roam graph is case-sensitive.\nList of some of Roam's data model Namespaces and Attributes: ancestor (descendants), attrs (lookup), block (children, heading, open, order, page, parents, props, refs, string, text-align, uid), children (view-type), create (email, time), descendant (ancestors), edit (email, seen-by, time), entity (attrs), log (id), node (title), page (uid, title), refs (text).\nPredicates (clojure.string/includes?, clojure.string/starts-with?, clojure.string/ends-with?, <, >, <=, >=, =, not=, !=).\nAggregates (distinct, count, sum, max, min, avg, limit).\nTips: Use :block/parents for all ancestor levels, :block/children for direct descendants only; combine clojure.string for complex matching, use distinct to deduplicate, leverage Pull patterns for hierarchies, handle case-sensitivity carefully, and chain ancestry rules for multi-level queries.",
      parameters: [
        {
          name: "inputs",
          type: "string array",
          description: "Optional array of input parameters for the query",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "The Datomic query to execute (in Datalog syntax)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/2b3pro/roam-research-mcp",
  _varName: "roamResearchPlugin",
};

const githubMapperMcpServerPlugin: Plugin = {
  id: "sgs5limagp",
  name: "GitHub Mapper MCP Server",
  description:
    "Provides tools for mapping and analyzing GitHub repositories. It allows users to set a GitHub Personal Access Token and retrieve detailed information about a specified repository, including its structure and summary statistics.",
  image: "https://github.com/dazeb.png",
  actions: [
    {
      name: "set-github-token",
      description: "Set the GitHub Personal Access Token for authentication",
      parameters: [
        {
          name: "token",
          type: "string",
          description: "GitHub Personal Access Token",
          required: true,
        },
      ],
    },
    {
      name: "map-github-repo",
      description:
        "Map a GitHub repository structure and provide summary information",
      parameters: [
        {
          name: "repoUrl",
          type: "string",
          description:
            "URL of the GitHub repository (e.g., https://github.com/username/repo)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dazeb/MCP-Github-Mapper",
  _varName: "githubMapperMcpServerPlugin",
};

const webperfectMcpServerPlugin: Plugin = {
  id: "am3lop071j",
  name: "WebPerfect MCP Server",
  description:
    "An intelligent MCP server with a fully automated batch pipeline for web-ready images. Features include noise reduction, auto levels/curves, JPEG artifact removal, 4K resizing, smart sharpening with shadow/highlight enhancement, and advanced WebP conversion.",
  image: "https://github.com/splendasucks.png",
  actions: [
    {
      name: "process_images",
      description: "Process and optimize a batch of images",
      parameters: [
        {
          name: "inputDir",
          type: "string",
          description: "Directory containing input images",
          required: true,
        },
        {
          name: "outputDir",
          type: "string",
          description: "Directory for optimized images",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/splendasucks/webperfect-mcp-server",
  _varName: "webperfectMcpServerPlugin",
};

const mcpneuroloraPlugin: Plugin = {
  id: "j29osinm43",
  name: "mcp-neurolora",
  description:
    "Provides tools for collecting and documenting code from directories.",
  image: "https://github.com/aindreyway.png",
  actions: [
    {
      name: "collect_code",
      description:
        "Collect all code from a directory into a single markdown file",
      parameters: [
        {
          name: "ignorePatterns",
          type: "string array",
          description: "Patterns to ignore (similar to .gitignore)",
          required: false,
        },
        {
          name: "input",
          type: "string",
          description: "Parameter: input",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path where to save the output markdown file",
          required: true,
        },
      ],
    },
    {
      name: "install_base_servers",
      description: "Install base MCP servers to the configuration",
      parameters: [
        {
          name: "configPath",
          type: "string",
          description: "Path to the MCP settings configuration file",
          required: true,
        },
      ],
    },
    {
      name: "analyze_code",
      description:
        "Analyze code using OpenAI API (requires your API key). The analysis may take a few minutes. So, wait please.",
      parameters: [
        {
          name: "codePath",
          type: "string",
          description:
            "Absolute path to the code file to analyze (e.g. /Users/username/project/src/code.ts)",
          required: true,
        },
      ],
    },
    {
      name: "create_github_issues",
      description:
        "Create GitHub issues from analysis results. Requires GitHub token.",
      parameters: [
        {
          name: "issueNumbers",
          type: "number array",
          description:
            "Issue numbers to create (optional, creates all issues if not specified)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "GitHub repository owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "GitHub repository name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aindreyway/mcp-neurolora",
  _varName: "mcpneuroloraPlugin",
};

const mcpredditPlugin: Plugin = {
  id: "3cg9gdyors",
  name: "mcp-reddit",
  description: "Read Reddit post and hot thread",
  image: "https://github.com/adhikasp.png",
  actions: [
    {
      name: "fetch_reddit_hot_threads",
      description:
        "\nFetch hot threads from a subreddit\n\nArgs:\n    subreddit: Name of the subreddit\n    limit: Number of posts to fetch (default: 10)\n    \nReturns:\n    Human readable string containing list of post information\n",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "subreddit",
          type: "string",
          description: "Parameter: subreddit",
          required: true,
        },
      ],
    },
    {
      name: "fetch_reddit_post_content",
      description:
        "\nFetch detailed content of a specific post\n\nArgs:\n    post_id: Reddit post ID\n    comment_limit: Number of top level comments to fetch\n    comment_depth: Maximum depth of comment tree to traverse\n\nReturns:\n    Human readable string containing post content and comments tree\n",
      parameters: [
        {
          name: "comment_depth",
          type: "integer",
          description: "Parameter: comment_depth",
          required: false,
        },
        {
          name: "comment_limit",
          type: "integer",
          description: "Parameter: comment_limit",
          required: false,
        },
        {
          name: "post_id",
          type: "string",
          description: "Parameter: post_id",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adhikasp/mcp-reddit",
  _varName: "mcpredditPlugin",
};

const mcpfunctionapptesterPlugin: Plugin = {
  id: "la0u86zue0",
  name: "mcp-function-app-tester",
  description:
    "A TypeScript-based MCP server that enables interaction with Azure Table Storage directly through Cline. This tool allows you to query and manage data in Azure Storage Tables.",
  image: "https://github.com/dkmaker.png",
  actions: [
    {
      name: "test_endpoint",
      description:
        "Test a Function App endpoint and get detailed response information. The endpoint will be prepended to the base url which is: http://localhost:7071/api",
      parameters: [
        {
          name: "body",
          type: "object",
          description: "Optional request body for POST/PUT requests",
          required: false,
        },
        {
          name: "endpoint",
          type: "string",
          description:
            'Endpoint path (e.g. "/users"). Will be appended to base URL.',
          required: true,
        },
        {
          name: "headers",
          type: "object",
          description: "Optional request headers",
          required: false,
        },
        {
          name: "method",
          type: "string",
          description: "HTTP method to use",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dkmaker/mcp-function-app-tester",
  _varName: "mcpfunctionapptesterPlugin",
};

const mcpdnstwistPlugin: Plugin = {
  id: "it7izu3ufb",
  name: "mcp-dnstwist",
  description:
    "A Model Context Protocol (MCP) server for dnstwist, a powerful DNS fuzzing tool that helps detect typosquatting, phishing, and corporate espionage.",
  image: "https://github.com/BurtTheCoder.png",
  actions: [],
  githubUrl: "https://github.com/BurtTheCoder/mcp-dnstwist",
  _varName: "mcpdnstwistPlugin",
};

const languageservermcpPlugin: Plugin = {
  id: "t4zp3tna7x",
  name: "language-server-mcp",
  description:
    "TypeScript-based MCP server designed to enhance code editing experiences by providing features such as hover information, code completion, and diagnostics.",
  image: "https://github.com/alexwohletz.png",
  actions: [
    {
      name: "get_hover",
      description: "Get hover information for a position in a document",
      parameters: [
        {
          name: "character",
          type: "number",
          description: "Zero-based character offset for hover position",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "The current content of the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Absolute or relative path to the source file",
          required: true,
        },
        {
          name: "languageId",
          type: "string",
          description:
            'The language identifier (e.g., "typescript", "javascript")',
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Zero-based line number for hover position",
          required: true,
        },
        {
          name: "projectRoot",
          type: "string",
          description:
            "Important: Root directory of the project for resolving imports and node_modules where the tsconfig.json or jsconfig.json is located",
          required: true,
        },
      ],
    },
    {
      name: "get_completions",
      description: "Get completion suggestions for a position in a document",
      parameters: [
        {
          name: "character",
          type: "number",
          description: "Zero-based character offset for completion position",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "The current content of the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Absolute or relative path to the source file",
          required: true,
        },
        {
          name: "languageId",
          type: "string",
          description:
            'The language identifier (e.g., "typescript", "javascript")',
          required: true,
        },
        {
          name: "line",
          type: "number",
          description: "Zero-based line number for completion position",
          required: true,
        },
        {
          name: "projectRoot",
          type: "string",
          description:
            "Important: Root directory of the project for resolving imports and node_modules where the tsconfig.json or jsconfig.json is located",
          required: true,
        },
      ],
    },
    {
      name: "get_diagnostics",
      description: "Get diagnostic information for a document",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The current content of the file",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Absolute or relative path to the source file",
          required: true,
        },
        {
          name: "languageId",
          type: "string",
          description:
            'The language identifier (e.g., "typescript", "javascript")',
          required: true,
        },
        {
          name: "projectRoot",
          type: "string",
          description:
            "Important: Root directory of the project for resolving imports and node_modules where the tsconfig.json or jsconfig.json is located",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/alexwohletz/language-server-mcp",
  _varName: "languageservermcpPlugin",
};

const supabasemcpPlugin: Plugin = {
  id: "vwi6nt8i80",
  name: "supabase-mcp",
  description:
    "An MCP server that provides tools for interacting with Supabase databases, storage, and edge functions.",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [
    {
      name: "list_tables",
      description: "List all tables in the database",
      parameters: [
        {
          name: "schema",
          type: "string",
          description: "Schema name (optional, defaults to public)",
          required: false,
        },
      ],
    },
    {
      name: "create_record",
      description: "Create a new record in a Supabase table",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Record data",
          required: true,
        },
        {
          name: "returning",
          type: "string array",
          description: "Fields to return (optional)",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
    {
      name: "read_records",
      description: "Read records from a Supabase table",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Filter conditions (optional)",
          required: false,
        },
        {
          name: "joins",
          type: "object array",
          description: "Table joins (optional)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of records to return (optional)",
          required: false,
        },
        {
          name: "select",
          type: "string array",
          description: "Fields to select (optional)",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
    {
      name: "update_records",
      description: "Update records in a Supabase table",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Update data",
          required: true,
        },
        {
          name: "filter",
          type: "object",
          description: "Filter conditions",
          required: true,
        },
        {
          name: "returning",
          type: "string array",
          description: "Fields to return (optional)",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
    {
      name: "delete_records",
      description: "Delete records from a Supabase table",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Filter conditions",
          required: true,
        },
        {
          name: "returning",
          type: "string array",
          description: "Fields to return (optional)",
          required: false,
        },
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
    {
      name: "upload_file",
      description: "Upload a file to Supabase Storage",
      parameters: [
        {
          name: "bucket",
          type: "string",
          description: "Storage bucket name",
          required: true,
        },
        {
          name: "file",
          type: "object",
          description: "File data as base64 string",
          required: true,
        },
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "File path within the bucket",
          required: true,
        },
      ],
    },
    {
      name: "download_file",
      description: "Download a file from Supabase Storage",
      parameters: [
        {
          name: "bucket",
          type: "string",
          description: "Storage bucket name",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "File path within the bucket",
          required: true,
        },
      ],
    },
    {
      name: "invoke_function",
      description: "Invoke a Supabase Edge Function",
      parameters: [
        {
          name: "function",
          type: "string",
          description: "Function name",
          required: true,
        },
        {
          name: "options",
          type: "object",
          description: "Parameter: options",
          required: false,
        },
        {
          name: "params",
          type: "object",
          description: "Function parameters",
          required: false,
        },
      ],
    },
    {
      name: "list_users",
      description: "List users with pagination",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Items per page",
          required: false,
        },
      ],
    },
    {
      name: "create_user",
      description: "Create a new user",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Additional user metadata",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "User email",
          required: true,
        },
        {
          name: "password",
          type: "string",
          description: "User password",
          required: true,
        },
      ],
    },
    {
      name: "update_user",
      description: "Update user details",
      parameters: [
        {
          name: "data",
          type: "object",
          description: "Updated user metadata",
          required: false,
        },
        {
          name: "email",
          type: "string",
          description: "New email",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "New password",
          required: false,
        },
        {
          name: "user_id",
          type: "string",
          description: "User ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_user",
      description: "Delete a user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "User ID",
          required: true,
        },
      ],
    },
    {
      name: "assign_user_role",
      description: "Assign a role to a user",
      parameters: [
        {
          name: "role",
          type: "string",
          description: "Role name",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "User ID",
          required: true,
        },
      ],
    },
    {
      name: "remove_user_role",
      description: "Remove a role from a user",
      parameters: [
        {
          name: "role",
          type: "string",
          description: "Role name",
          required: true,
        },
        {
          name: "user_id",
          type: "string",
          description: "User ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DynamicEndpoints/supabase-mcp",
  _varName: "supabasemcpPlugin",
};

const pocketbasemcpserverPlugin: Plugin = {
  id: "z2xjuegxxh",
  name: "pocketbase-mcp-server",
  description:
    "A comprehensive MCP server that provides sophisticated tools for interacting with PocketBase databases. This server enables advanced database operations, schema management, and data manipulation through the Model Context Protocol (MCP).",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [
    {
      name: "create_collection",
      description: "Create a new collection in PocketBase",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "schema",
          type: "object array",
          description: "Collection schema fields",
          required: true,
        },
      ],
    },
    {
      name: "create_record",
      description: "Create a new record in a collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Record data",
          required: true,
        },
      ],
    },
    {
      name: "list_records",
      description: "List records from a collection with optional filters",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter query",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Page number",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Items per page",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field and direction",
          required: false,
        },
      ],
    },
    {
      name: "update_record",
      description: "Update an existing record",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Updated record data",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Record ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_record",
      description: "Delete a record",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "id",
          type: "string",
          description: "Record ID",
          required: true,
        },
      ],
    },
    {
      name: "authenticate_user",
      description: "Authenticate a user and get auth token",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "User email",
          required: true,
        },
        {
          name: "password",
          type: "string",
          description: "User password",
          required: true,
        },
      ],
    },
    {
      name: "create_user",
      description: "Create a new user account",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "User email",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "User name",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "User password",
          required: true,
        },
        {
          name: "passwordConfirm",
          type: "string",
          description: "Password confirmation",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_schema",
      description: "Get schema details for a collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
      ],
    },
    {
      name: "backup_database",
      description: "Create a backup of the PocketBase database",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Export format (default: json)",
          required: false,
        },
      ],
    },
    {
      name: "import_data",
      description: "Import data into a collection",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "data",
          type: "object array",
          description: "Array of records to import",
          required: true,
        },
        {
          name: "mode",
          type: "string",
          description: "Import mode (default: create)",
          required: false,
        },
      ],
    },
    {
      name: "migrate_collection",
      description: "Migrate collection schema with data preservation",
      parameters: [
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "dataTransforms",
          type: "object",
          description: "Field transformation mappings",
          required: false,
        },
        {
          name: "newSchema",
          type: "object array",
          description: "New collection schema",
          required: true,
        },
      ],
    },
    {
      name: "query_collection",
      description: "Advanced query with filtering, sorting, and aggregation",
      parameters: [
        {
          name: "aggregate",
          type: "object",
          description: "Aggregation settings",
          required: false,
        },
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "expand",
          type: "string",
          description: "Relations to expand",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description: "Filter expression",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort expression",
          required: false,
        },
      ],
    },
    {
      name: "manage_indexes",
      description: "Manage collection indexes",
      parameters: [
        {
          name: "action",
          type: "string",
          description: "Action to perform",
          required: true,
        },
        {
          name: "collection",
          type: "string",
          description: "Collection name",
          required: true,
        },
        {
          name: "index",
          type: "object",
          description: "Index configuration (for create)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DynamicEndpoints/pocketbase-mcp-server",
  _varName: "pocketbasemcpserverPlugin",
};

const stockscreenMcpServerPlugin: Plugin = {
  id: "ddrv1ksb7n",
  name: "StockScreen MCP Server",
  description:
    "Provides comprehensive stock screening capabilities through Yahoo Finance. Enables LLMs to screen stocks based on technical, fundamental, and options criteria, with support for watchlist management and result storage.",
  image: "https://github.com/twolven.png",
  actions: [],
  githubUrl: "https://github.com/twolven/mcp-stockscreen",
  _varName: "stockscreenMcpServerPlugin",
};

const codesavantPlugin: Plugin = {
  id: "rd4pozqg9r",
  name: "CodeSavant",
  description:
    "Provides code manipulation, execution, and version control capabilities. It allows AI assistants to read, write, and execute code while maintaining a history of changes.",
  image: "https://github.com/twolven.png",
  actions: [],
  githubUrl: "https://github.com/twolven/mcp-codesavant",
  _varName: "codesavantPlugin",
};

const mcpcodexkeeperPlugin: Plugin = {
  id: "bo39uifs3k",
  name: "mcp-codex-keeper",
  description:
    "Serves as a guardian of development knowledge, providing AI assistants with curated access to latest documentation and best practices.",
  image: "https://github.com/aindreyway.png",
  actions: [
    {
      name: "add_documentation",
      description: "Add a new documentation source",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Category of the documentation",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Description of the documentation",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the documentation",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Tags for additional categorization",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the documentation",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Version information",
          required: false,
        },
      ],
    },
    {
      name: "list_documentation",
      description: "List all available documentation sources",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Filter documentation by category",
          required: false,
        },
        {
          name: "tag",
          type: "string",
          description: "Filter documentation by tag",
          required: false,
        },
      ],
    },
    {
      name: "update_documentation",
      description: "Update documentation content from source",
      parameters: [
        {
          name: "force",
          type: "boolean",
          description: "Force update even if recently updated",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the documentation to update",
          required: true,
        },
      ],
    },
    {
      name: "search_documentation",
      description: "Search through documentation content",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Filter by category",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "tag",
          type: "string",
          description: "Filter by tag",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/aindreyway/mcp-codex-keeper",
  _varName: "mcpcodexkeeperPlugin",
};

const mcpZoteroPlugin: Plugin = {
  id: "mjvu0xzzzz",
  name: "MCP Zotero",
  description: "Allows AI to interact with your Zotero library.",
  image: "https://github.com/kaliaboi.png",
  actions: [
    {
      name: "get_collections",
      description: "List all collections in your Zotero library",
      parameters: [],
    },
    {
      name: "get_collection_items",
      description: "Get all items in a specific collection",
      parameters: [
        {
          name: "collectionKey",
          type: "string",
          description: "The collection key/ID",
          required: true,
        },
      ],
    },
    {
      name: "get_item_details",
      description: "Get detailed information about a specific paper",
      parameters: [
        {
          name: "itemKey",
          type: "string",
          description: "The paper's item key/ID",
          required: true,
        },
      ],
    },
    {
      name: "search_library",
      description: "Search your entire Zotero library",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "get_recent",
      description: "Get recently added papers to your library",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Number of papers to return (default 10)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kaliaboi/mcp-zotero",
  _varName: "mcpZoteroPlugin",
};

const mcpazuretablestoragePlugin: Plugin = {
  id: "8kah8zukke",
  name: "mcp-azure-tablestorage",
  description:
    "Enables interaction with Azure Table Storage directly through Cline. This tool allows you to query and manage data in Azure Storage Tables.",
  image: "https://github.com/dkmaker.png",
  actions: [
    {
      name: "query_table",
      description:
        "⚠️ WARNING: This tool returns a limited subset of results (default: 5 items) to protect the LLM's context window. DO NOT increase this limit unless explicitly confirmed by the user.\n\nQuery data from an Azure Storage Table with optional filters.\n\nSupported OData Filter Examples:\n1. Simple equality:\n   filter: \"PartitionKey eq 'COURSE'\"\n   filter: \"email eq 'user@example.com'\"\n\n2. Compound conditions:\n   filter: \"PartitionKey eq 'USER' and email eq 'user@example.com'\"\n   filter: \"PartitionKey eq 'COURSE' and title eq 'GDPR Training'\"\n\n3. Numeric comparisons:\n   filter: \"age gt 25\"\n   filter: \"costPrice le 100\"\n\n4. Date comparisons (ISO 8601 format):\n   filter: \"createdDate gt datetime'2023-01-01T00:00:00Z'\"\n   filter: \"timestamp lt datetime'2024-12-31T23:59:59Z'\"\n\nSupported Operators:\n- eq: Equal\n- ne: Not equal\n- gt: Greater than\n- ge: Greater than or equal\n- lt: Less than\n- le: Less than or equal\n- and: Logical and\n- or: Logical or\n- not: Logical not",
      parameters: [
        {
          name: "filter",
          type: "string",
          description: "OData filter string. See description for examples.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of items to return in response (default: 5). Note: Full query is still executed to get total count.",
          required: false,
        },
        {
          name: "select",
          type: "string array",
          description:
            'Array of property names to select. Example: ["email", "username", "createdDate"]',
          required: false,
        },
        {
          name: "tableName",
          type: "string",
          description: "Name of the table to query",
          required: true,
        },
      ],
    },
    {
      name: "get_table_schema",
      description: "Get property names and types from a table",
      parameters: [
        {
          name: "tableName",
          type: "string",
          description: "Name of the table to analyze",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "List all tables in the storage account",
      parameters: [
        {
          name: "prefix",
          type: "string",
          description: "Optional prefix to filter table names",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/dkmaker/mcp-azure-tablestorage",
  _varName: "mcpazuretablestoragePlugin",
};

const mcpreasonerPlugin: Plugin = {
  id: "g71nwrrr8e",
  name: "mcp-reasoner",
  description:
    "A systematic reasoning MCP server implementation for Claude Desktop with beam search and thought evaluation capabilities",
  image: "https://github.com/Jacck.png",
  actions: [
    {
      name: "mcp-reasoner",
      description:
        "Advanced reasoning tool with multiple strategies including Beam Search and Monte Carlo Tree Search",
      parameters: [
        {
          name: "beamWidth",
          type: "integer",
          description:
            "Number of top paths to maintain (n-sampling). Defaults to 3 if not specified",
          required: false,
        },
        {
          name: "nextThoughtNeeded",
          type: "boolean",
          description: "Whether another step is needed",
          required: true,
        },
        {
          name: "numSimulations",
          type: "integer",
          description:
            "Number of MCTS simulations to run. Defaults to 50 if not specified",
          required: false,
        },
        {
          name: "strategyType",
          type: "string",
          description: "Reasoning strategy to use (beam_search or mcts)",
          required: false,
        },
        {
          name: "thought",
          type: "string",
          description: "Current reasoning step",
          required: true,
        },
        {
          name: "thoughtNumber",
          type: "integer",
          description: "Current step number",
          required: true,
        },
        {
          name: "totalThoughts",
          type: "integer",
          description: "Total expected steps",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Jacck/mcp-reasoner",
  _varName: "mcpreasonerPlugin",
};

const mcpplaywrightPlugin: Plugin = {
  id: "yh4lgtwgbe",
  name: "mcp-playwright",
  description:
    "A Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
  image: "https://github.com/executeautomation.png",
  actions: [
    {
      name: "playwright_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Viewport height in pixels (default: 720)",
          required: false,
        },
        {
          name: "timeout",
          type: "number",
          description: "Navigation timeout in milliseconds",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
        {
          name: "waitUntil",
          type: "string",
          description: "Navigation wait condition",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Viewport width in pixels (default: 1280)",
          required: false,
        },
      ],
    },
    {
      name: "playwright_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "downloadsDir",
          type: "string",
          description:
            "Custom downloads directory path (default: user's Downloads folder)",
          required: false,
        },
        {
          name: "fullPage",
          type: "boolean",
          description: "Store screenshot of the entire page (default: false)",
          required: false,
        },
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "savePng",
          type: "boolean",
          description: "Save screenshot as PNG file (default: false)",
          required: false,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "storeBase64",
          type: "boolean",
          description: "Store screenshot in base64 format (default: true)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "playwright_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for the element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_iframe_click",
      description: "Click an element in an iframe on the page",
      parameters: [
        {
          name: "iframeSelector",
          type: "string",
          description:
            "CSS selector for the iframe containing the element to click",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for the element to click",
          required: true,
        },
      ],
    },
    {
      name: "playwright_fill",
      description: "fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "playwright_select",
      description: "Select an element on the page with Select tag",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "playwright_hover",
      description: "Hover an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "playwright_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
    {
      name: "playwright_get",
      description: "Perform an HTTP GET request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform GET operation",
          required: true,
        },
      ],
    },
    {
      name: "playwright_post",
      description: "Perform an HTTP POST request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform POST operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to post in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_put",
      description: "Perform an HTTP PUT request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PUT in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_patch",
      description: "Perform an HTTP PATCH request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform PUT operation",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Data to PATCH in the body",
          required: true,
        },
      ],
    },
    {
      name: "playwright_delete",
      description: "Perform an HTTP DELETE request",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to perform DELETE operation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/executeautomation/mcp-playwright",
  _varName: "mcpplaywrightPlugin",
};

const mcpscreenshotPlugin: Plugin = {
  id: "vcnmmaejv8",
  name: "mcp-screenshot",
  description: "Provides screenshot and OCR capabilities for macOS.",
  image: "https://github.com/kazuph.png",
  actions: [
    {
      name: "capture",
      description:
        "Captures a screenshot of the specified region and performs OCR. Options:\n- region: 'left'/'right'/'full' (default: 'left')\n- format: 'json'/'markdown'/'vertical'/'horizontal' (default: 'markdown')\nThe screenshot is saved to a dated directory in Downloads.",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "region",
          type: "string",
          description: "Parameter: region",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kazuph/mcp-screenshot",
  _varName: "mcpscreenshotPlugin",
};

const applescriptmcpPlugin: Plugin = {
  id: "0t5gydjcqw",
  name: "applescript-mcp",
  description:
    "Enables LLM applications to interact with macOS through AppleScript.",
  image: "https://github.com/joshrutkowski.png",
  actions: [
    {
      name: "system_toggle_dark_mode",
      description: "[System control and information] Toggle system dark mode",
      parameters: [],
    },
    {
      name: "system_volume",
      description: "[System control and information] Set system volume",
      parameters: [
        {
          name: "level",
          type: "number",
          description: "Parameter: level",
          required: true,
        },
      ],
    },
    {
      name: "system_get_frontmost_app",
      description:
        "[System control and information] Get the name of the frontmost application",
      parameters: [],
    },
    {
      name: "system_launch_app",
      description: "[System control and information] Launch an application",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Application name",
          required: true,
        },
      ],
    },
    {
      name: "system_quit_app",
      description: "[System control and information] Quit an application",
      parameters: [
        {
          name: "force",
          type: "boolean",
          description: "Force quit if true",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Application name",
          required: true,
        },
      ],
    },
    {
      name: "system_get_battery_status",
      description:
        "[System control and information] Get battery level and charging status",
      parameters: [],
    },
    {
      name: "calendar_add",
      description: "[Calendar operations] Add a new event to Calendar",
      parameters: [
        {
          name: "calendar",
          type: "string",
          description: "Calendar name (optional)",
          required: false,
        },
        {
          name: "endDate",
          type: "string",
          description: "End date and time (YYYY-MM-DD HH:MM:SS)",
          required: true,
        },
        {
          name: "startDate",
          type: "string",
          description: "Start date and time (YYYY-MM-DD HH:MM:SS)",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Event title",
          required: true,
        },
      ],
    },
    {
      name: "calendar_list",
      description: "[Calendar operations] List all events for today",
      parameters: [],
    },
    {
      name: "finder_get_selected_files",
      description:
        "[Finder and file operations] Get currently selected files in Finder",
      parameters: [],
    },
    {
      name: "finder_search_files",
      description: "[Finder and file operations] Search for files by name",
      parameters: [
        {
          name: "location",
          type: "string",
          description: "Search location (default: home folder)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search term",
          required: true,
        },
      ],
    },
    {
      name: "finder_quick_look_file",
      description:
        "[Finder and file operations] Preview a file using Quick Look",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "File path to preview",
          required: true,
        },
      ],
    },
    {
      name: "clipboard_get_clipboard",
      description:
        "[Clipboard management operations] Get current clipboard content",
      parameters: [
        {
          name: "type",
          type: "string",
          description: "Type of clipboard content to get",
          required: false,
        },
      ],
    },
    {
      name: "clipboard_set_clipboard",
      description: "[Clipboard management operations] Set clipboard content",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to copy to clipboard",
          required: true,
        },
      ],
    },
    {
      name: "clipboard_clear_clipboard",
      description: "[Clipboard management operations] Clear clipboard content",
      parameters: [],
    },
    {
      name: "notifications_toggle_do_not_disturb",
      description:
        "[Notification management] Toggle Do Not Disturb mode using keyboard shortcut",
      parameters: [],
    },
    {
      name: "notifications_send_notification",
      description: "[Notification management] Send a system notification",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Notification message",
          required: true,
        },
        {
          name: "sound",
          type: "boolean",
          description: "Play sound with notification",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Notification title",
          required: true,
        },
      ],
    },
    {
      name: "iterm_paste_clipboard",
      description:
        "[iTerm terminal operations] Paste clipboard content into iTerm",
      parameters: [],
    },
    {
      name: "iterm_run",
      description: "[iTerm terminal operations] Run a command in iTerm",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to run in iTerm",
          required: true,
        },
        {
          name: "newWindow",
          type: "boolean",
          description: "Whether to open in a new window (default: false)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/joshrutkowski/applescript-mcp",
  _varName: "applescriptmcpPlugin",
};

const mcptimeserverPlugin: Plugin = {
  id: "tth5eto5n7",
  name: "MCP-timeserver",
  description: "Access the time in any timezone and get the current local time",
  image: "https://github.com/SecretiveShell.png",
  actions: [
    {
      name: "get-current-time",
      description: "Get the current time in the configured local timezone",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/SecretiveShell/MCP-timeserver",
  _varName: "mcptimeserverPlugin",
};

const applenotifiermcpPlugin: Plugin = {
  id: "t1w1dq4wy4",
  name: "apple-notifier-mcp",
  description:
    "A simple MCP server that can send notifications on mac devices.",
  image: "https://github.com/turlockmike.png",
  actions: [
    {
      name: "send_notification",
      description: "Send a notification on macOS using osascript",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Main message content",
          required: true,
        },
        {
          name: "sound",
          type: "boolean",
          description: "Whether to play the default notification sound",
          required: false,
        },
        {
          name: "subtitle",
          type: "string",
          description: "Optional subtitle",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Title of the notification",
          required: true,
        },
      ],
    },
    {
      name: "prompt_user",
      description: "Display a dialog prompt to get user input",
      parameters: [
        {
          name: "buttons",
          type: "string array",
          description: "Optional custom button labels (max 3)",
          required: false,
        },
        {
          name: "defaultAnswer",
          type: "string",
          description: "Optional default text to pre-fill",
          required: false,
        },
        {
          name: "icon",
          type: "string",
          description: "Optional icon to display",
          required: false,
        },
        {
          name: "message",
          type: "string",
          description: "Text to display in the prompt dialog",
          required: true,
        },
      ],
    },
    {
      name: "speak",
      description: "Speak text using macOS text-to-speech",
      parameters: [
        {
          name: "rate",
          type: "number",
          description: "Speech rate (-50 to 50, defaults to 0)",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Text to speak",
          required: true,
        },
        {
          name: "voice",
          type: "string",
          description: "Voice to use (defaults to system voice)",
          required: false,
        },
      ],
    },
    {
      name: "take_screenshot",
      description: "Take a screenshot using macOS screencapture",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Image format",
          required: false,
        },
        {
          name: "hideCursor",
          type: "boolean",
          description: "Whether to hide the cursor",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Path where to save the screenshot",
          required: true,
        },
        {
          name: "shadow",
          type: "boolean",
          description:
            "Whether to include the window shadow (only for window type)",
          required: false,
        },
        {
          name: "timestamp",
          type: "boolean",
          description: "Timestamp to add to filename",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Type of screenshot to take",
          required: true,
        },
      ],
    },
    {
      name: "select_file",
      description: "Open native file picker dialog",
      parameters: [
        {
          name: "defaultLocation",
          type: "string",
          description: "Optional default directory path",
          required: false,
        },
        {
          name: "fileTypes",
          type: "object",
          description:
            'Optional file type filter (e.g., {"public.image": ["png", "jpg"]})',
          required: false,
        },
        {
          name: "multiple",
          type: "boolean",
          description: "Whether to allow multiple selection",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Optional prompt message",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/turlockmike/apple-notifier-mcp",
  _varName: "applenotifiermcpPlugin",
};

const findatamcpserverPlugin: Plugin = {
  id: "czslwc47w9",
  name: "findata-mcp-server",
  description:
    "This is an MCP server that provides access to the Alpha Vantage API, allowing stock data retrieval to be used as context to LLMs.",
  image: "https://github.com/xBlueCode.png",
  actions: [
    {
      name: "getStockQuote",
      description: "Get the current quote for a stock.",
      parameters: [
        {
          name: "symbol",
          type: "string",
          description: "The stock symbol (e.g., AAPL)",
          required: true,
        },
      ],
    },
    {
      name: "getHistoricalData",
      description: "Get historical data for a stock.",
      parameters: [
        {
          name: "interval",
          type: "string",
          description:
            "The time interval for the data (daily, weekly, or monthly)",
          required: false,
        },
        {
          name: "outputsize",
          type: "string",
          description: "The size of the output (compact or full)",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "The stock symbol (e.g., AAPL)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/xBlueCode/findata-mcp-server",
  _varName: "findatamcpserverPlugin",
};

const mcpotzariaserverPlugin: Plugin = {
  id: "y5y2a19u1s",
  name: "mcp-otzaria-server",
  description:
    "An MCP server that provides powerful search capabilities for Jewish texts and literature. This server enables Large Language Models to search and reference Jewish texts through a standardized interface.",
  image: "https://github.com/Sivan22.png",
  actions: [],
  githubUrl: "https://github.com/Sivan22/mcp-otzaria-server",
  _varName: "mcpotzariaserverPlugin",
};

const mcpdeletePlugin: Plugin = {
  id: "dpxui4mdbx",
  name: "MCP-Delete",
  description:
    "A Model Context Protocol (MCP) server that provides file deletion capabilities. This server allows AI assistants to safely delete files when needed, with support for both relative and absolute paths.",
  image: "https://github.com/qpd-v.png",
  actions: [
    {
      name: "delete_file",
      description:
        "Delete a file at the specified path (supports both relative and absolute paths)",
      parameters: [
        {
          name: "path",
          type: "string",
          description:
            "Path to the file to delete (relative to working directory or absolute)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qpd-v/mcp-delete",
  _varName: "mcpdeletePlugin",
};

const mcpragdocsPlugin: Plugin = {
  id: "q4uywrflxx",
  name: "MCP-Ragdocs",
  description:
    "A Model Context Protocol (MCP) server that enables semantic search and retrieval of documentation using a vector database (Qdrant). This server allows you to add documentation from URLs or local files and then search through them using natural language queries.",
  image: "https://github.com/qpd-v.png",
  actions: [],
  githubUrl: "https://github.com/qpd-v/mcp-ragdocs",
  _varName: "mcpragdocsPlugin",
};

const mcpguidePlugin: Plugin = {
  id: "3jsu6wpgzt",
  name: "MCP-Guide",
  description:
    "A beginner-friendly Model Context Protocol (MCP) server that helps users understand MCP concepts, provides interactive examples, and lists available MCP servers. This server is designed to be a helpful companion for developers working with MCP. Also comes with a huge list of servers you can install.",
  image: "https://github.com/qpd-v.png",
  actions: [
    {
      name: "explain_concept",
      description: "Get a beginner-friendly explanation of an MCP concept",
      parameters: [
        {
          name: "concept",
          type: "string",
          description:
            "The MCP concept to explain (e.g., 'tools', 'resources', 'prompts', 'server', 'client', 'server_types', 'frameworks', 'clients')",
          required: true,
        },
      ],
    },
    {
      name: "show_example",
      description: "Show a practical example of an MCP feature",
      parameters: [
        {
          name: "feature",
          type: "string",
          description:
            "The MCP feature to demonstrate (e.g., 'tool_call', 'resource_read', 'prompt_template')",
          required: true,
        },
      ],
    },
    {
      name: "list_servers",
      description: "List available MCP servers by category",
      parameters: [
        {
          name: "category",
          type: "string",
          description:
            "Server category to list (e.g., 'browser', 'cloud', 'command_line', 'communication', 'database', 'developer', 'filesystem', 'search', 'all')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qpd-v/mcp-guide",
  _varName: "mcpguidePlugin",
};

const mcpcommunicatortelegramPlugin: Plugin = {
  id: "cvt5yz29og",
  name: "MCP-Communicator-Telegram",
  description:
    "An MCP server that enables communication with users through Telegram. This server provides a tool to ask questions to users and receive their responses via a Telegram bot.",
  image: "https://github.com/qpd-v.png",
  actions: [],
  githubUrl: "https://github.com/qpd-v/mcp-communicator-telegram",
  _varName: "mcpcommunicatortelegramPlugin",
};

const huntressmcpserverPlugin: Plugin = {
  id: "hry99k6xc2",
  name: "Huntress-MCP-Server",
  description: "MCP server for Huntress API integration",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [
    {
      name: "get_account_info",
      description: "Get information about the current account",
      parameters: [],
    },
    {
      name: "list_organizations",
      description: "List organizations in the account",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of results per page (1-500)",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number (starts at 1)",
          required: false,
        },
      ],
    },
    {
      name: "get_organization",
      description: "Get details of a specific organization",
      parameters: [
        {
          name: "organization_id",
          type: "integer",
          description: "Organization ID",
          required: true,
        },
      ],
    },
    {
      name: "list_agents",
      description: "List agents in the account",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of results per page (1-500)",
          required: false,
        },
        {
          name: "organization_id",
          type: "integer",
          description: "Filter by organization ID",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "platform",
          type: "string",
          description: "Filter by platform (darwin or windows)",
          required: false,
        },
      ],
    },
    {
      name: "get_agent",
      description: "Get details of a specific agent",
      parameters: [
        {
          name: "agent_id",
          type: "integer",
          description: "Agent ID",
          required: true,
        },
      ],
    },
    {
      name: "list_incident_reports",
      description: "List incident reports",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of results per page (1-500)",
          required: false,
        },
        {
          name: "organization_id",
          type: "integer",
          description: "Filter by organization ID",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "severity",
          type: "string",
          description: "Filter by severity",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by status",
          required: false,
        },
      ],
    },
    {
      name: "get_incident_report",
      description: "Get details of a specific incident report",
      parameters: [
        {
          name: "report_id",
          type: "integer",
          description: "Incident Report ID",
          required: true,
        },
      ],
    },
    {
      name: "list_summary_reports",
      description: "List summary reports",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of results per page (1-500)",
          required: false,
        },
        {
          name: "organization_id",
          type: "integer",
          description: "Filter by organization ID",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Filter by report type",
          required: false,
        },
      ],
    },
    {
      name: "get_summary_report",
      description: "Get details of a specific summary report",
      parameters: [
        {
          name: "report_id",
          type: "integer",
          description: "Summary Report ID",
          required: true,
        },
      ],
    },
    {
      name: "list_billing_reports",
      description: "List billing reports",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Number of results per page (1-500)",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number (starts at 1)",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description: "Filter by status",
          required: false,
        },
      ],
    },
    {
      name: "get_billing_report",
      description: "Get details of a specific billing report",
      parameters: [
        {
          name: "report_id",
          type: "integer",
          description: "Billing Report ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/DynamicEndpoints/huntress-mcp-server",
  _varName: "huntressmcpserverPlugin",
};

const mcpyoutubesheetsPlugin: Plugin = {
  id: "z3fthzkmxu",
  name: "mcp-youtube-sheets",
  description:
    "Provides functionality to search YouTube videos and automatically save the results to Google Sheets.",
  image: "https://github.com/Rickyyy1116.png",
  actions: [],
  githubUrl: "https://github.com/Rickyyy1116/mcp-youtube-sheets",
  _varName: "mcpyoutubesheetsPlugin",
};

const jiramcpPlugin: Plugin = {
  id: "4e3sqj7af1",
  name: "jira-mcp",
  description:
    "Provides capabilities for searching Jira issues using JQL and retrieving detailed issue information.",
  image: "https://github.com/CamdenClark.png",
  actions: [
    {
      name: "jql_search",
      description: "Perform enhanced JQL search in Jira",
      parameters: [
        {
          name: "expand",
          type: "string",
          description: "Additional info to include in the response",
          required: false,
        },
        {
          name: "fields",
          type: "string array",
          description: "List of fields to return for each issue",
          required: false,
        },
        {
          name: "jql",
          type: "string",
          description: "JQL query string",
          required: true,
        },
        {
          name: "maxResults",
          type: "integer",
          description: "Maximum results to fetch",
          required: false,
        },
        {
          name: "nextPageToken",
          type: "string",
          description: "Token for next page",
          required: false,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Retrieve details about an issue by its ID or key.",
      parameters: [
        {
          name: "expand",
          type: "string",
          description: "Additional information to include in the response",
          required: false,
        },
        {
          name: "failFast",
          type: "boolean",
          description: "Fail quickly on errors",
          required: false,
        },
        {
          name: "fields",
          type: "string array",
          description: "Fields to include in the response",
          required: false,
        },
        {
          name: "issueIdOrKey",
          type: "string",
          description: "ID or key of the issue",
          required: true,
        },
        {
          name: "properties",
          type: "string array",
          description: "Properties to include in the response",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/CamdenClark/jira-mcp",
  _varName: "jiramcpPlugin",
};

const k8sinteractivemcpPlugin: Plugin = {
  id: "gwvs0s78be",
  name: "k8s-interactive-mcp",
  description:
    "A MCP server that can run Kubernetes commands with a given kubeconfig path and provide interpretation of the commands.",
  image: "https://github.com/TaichiHo.png",
  actions: [
    {
      name: "run_kubectl_command",
      description:
        "Run a kubectl command against the cluster pointed to by the current kubeconfig",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            "The kubectl command to run. It should also include the 'kubectl' prefix.",
          required: true,
        },
        {
          name: "kubeconfig",
          type: "string",
          description: "Path to the kubeconfig file",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/TaichiHo/k8s-interactive-mcp",
  _varName: "k8sinteractivemcpPlugin",
};

const mcpserverkintonePlugin: Plugin = {
  id: "2lv2upxorc",
  name: "mcp-server-kintone",
  description:
    "Allows you to explore and manipulate kintone data using AI tools such as Claude Desktop!",
  image: "https://github.com/macrat.png",
  actions: [],
  githubUrl: "https://github.com/macrat/mcp-server-kintone",
  _varName: "mcpserverkintonePlugin",
};

const mcprtfmPlugin: Plugin = {
  id: "44sgp6bmdc",
  name: "mcp-rtfm",
  description:
    "Transform your non-existent or unreadable docs into an intelligent, searchable knowledge base that actually answers those 'basic questions' before they're asked.",
  image: "https://github.com/ryanjoachim.png",
  actions: [
    {
      name: "analyze_existing_docs",
      description:
        "Analyze existing documentation files with enhanced content analysis and metadata generation",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "analyze_project_with_metadata",
      description:
        "Analyze project structure, create initial documentation files, and enhance with metadata/context",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "analyze_project",
      description:
        "Analyze project structure and create initial documentation files",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "read_doc",
      description: "Read a documentation file (required before updating)",
      parameters: [
        {
          name: "docFile",
          type: "string",
          description: "Name of the documentation file to read",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "update_doc",
      description:
        "Update a specific documentation file using diff-based changes",
      parameters: [
        {
          name: "continueToNext",
          type: "boolean",
          description: "Whether to continue to the next file after this update",
          required: false,
        },
        {
          name: "docFile",
          type: "string",
          description: "Name of the documentation file to update",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
        {
          name: "replaceContent",
          type: "string",
          description: "Content to replace the search content with",
          required: true,
        },
        {
          name: "searchContent",
          type: "string",
          description: "Content to search for in the file",
          required: true,
        },
      ],
    },
    {
      name: "get_doc_content",
      description: "Get the current content of a documentation file",
      parameters: [
        {
          name: "docFile",
          type: "string",
          description: "Name of the documentation file to read",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "get_project_info",
      description: "Get information about the project structure and files",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "search_docs",
      description: "Search across documentation files with highlighted results",
      parameters: [
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
        {
          name: "query",
          type: "string",
          description: "Search query to find in documentation",
          required: true,
        },
      ],
    },
    {
      name: "update_metadata",
      description: "Update metadata for a documentation file",
      parameters: [
        {
          name: "docFile",
          type: "string",
          description: "Name of the documentation file",
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Metadata to update",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "get_related_docs",
      description: "Find related documentation files based on metadata",
      parameters: [
        {
          name: "docFile",
          type: "string",
          description: "Name of the documentation file",
          required: true,
        },
        {
          name: "projectPath",
          type: "string",
          description: "Path to the project root directory",
          required: true,
        },
      ],
    },
    {
      name: "customize_template",
      description: "Create or update a custom documentation template",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Template content with {title} placeholder",
          required: true,
        },
        {
          name: "metadata",
          type: "object",
          description: "Default metadata for the template",
          required: false,
        },
        {
          name: "templateName",
          type: "string",
          description: "Name of the template",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ryanjoachim/mcp-rtfm",
  _varName: "mcprtfmPlugin",
};

const mcpimagedownloaderPlugin: Plugin = {
  id: "v4v1zhplpd",
  name: "mcp-image-downloader",
  description:
    "Enables AI assistants to download images from URLs and perform basic image optimization tasks.",
  image: "https://github.com/qpd-v.png",
  actions: [
    {
      name: "download_image",
      description: "Download an image from a URL to a specified path",
      parameters: [
        {
          name: "outputPath",
          type: "string",
          description: "Path where to save the image",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "URL of the image to download",
          required: true,
        },
      ],
    },
    {
      name: "optimize_image",
      description: "Create an optimized version of an image",
      parameters: [
        {
          name: "height",
          type: "number",
          description:
            "Target height (maintains aspect ratio if only height is specified)",
          required: false,
        },
        {
          name: "inputPath",
          type: "string",
          description: "Path to the input image",
          required: true,
        },
        {
          name: "outputPath",
          type: "string",
          description: "Path where to save the optimized image",
          required: true,
        },
        {
          name: "quality",
          type: "number",
          description: "JPEG/WebP quality (1-100)",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description:
            "Target width (maintains aspect ratio if only width is specified)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qpd-v/mcp-image-downloader",
  _varName: "mcpimagedownloaderPlugin",
};

const aiHumanizerMcpServerPlugin: Plugin = {
  id: "6jwdkla6m3",
  name: "AI Humanizer MCP Server",
  description:
    "Helps refine AI-generated content to sound more natural and human-like. Built with advanced AI detection and text enhancement capabilities.",
  image: "https://github.com/Text2Go.png",
  actions: [
    {
      name: "detect",
      description:
        "Detect whether the text is AI-generated.Show to user the task detail url. Extract the taskId field, then concatenate the link in the following format: https://pre-www.text2go.ai/?utm_source=claude_mcp&taskId={taskId}",
      parameters: [
        {
          name: "detectionTypeList",
          type: "string array",
          description: "Parameter: detectionTypeList",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "Parameter: text",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Parameter: type",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Text2Go/ai-humanizer-mcp-server",
  _varName: "aiHumanizerMcpServerPlugin",
};

const awsmcpPlugin: Plugin = {
  id: "ta7kdy57us",
  name: "aws-mcp",
  description:
    "A Model Context Protocol (MCP) server that enables AI assistants like Claude to interact with your AWS environment. This allows for natural language querying and management of your AWS resources during conversations. Think of better Amazon Q alternative.",
  image: "https://github.com/RafalWilinski.png",
  actions: [
    {
      name: "run-aws-code",
      description: "Run AWS code",
      parameters: [
        {
          name: "code",
          type: "string",
          description:
            'Your job is to answer questions about AWS environment by writing Javascript code using AWS SDK V2. The code must be adhering to a few rules:\n- Must be preferring promises over callbacks\n- Think step-by-step before writing the code, approach it logically\n- MUST written in Javascript (NodeJS) using AWS-SDK V2\n- Avoid hardcoded values like ARNs\n- Code written should be as parallel as possible enabling the fastest and the most optimal execution\n- Code should be handling errors gracefully, especially when doing multiple SDK calls (e.g. when mapping over an array). Each error should be handled and logged with a reason, script should continue to run despite errors\n- DO NOT require or import "aws-sdk", it is already available as "AWS" variable\n- Access to 3rd party libraries apart from "aws-sdk" is not allowed or possible\n- Data returned from AWS-SDK must be returned as JSON containing only the minimal amount of data that is needed to answer the question. All extra data must be filtered out\n- Code MUST "return" a value: string, number, boolean or JSON object. If code does not return anything, it will be considered as FAILED\n- Whenever tool/function call fails, retry it 3 times before giving up with an improved version of the code based on the returned feedback\n- When listing resources, ensure pagination is handled correctly so that all resources are returned\n- Do not include any comments in the code\n- When doing reduce, don\'t forget to provide an initial value\n- Try to write code that returns as few data as possible to answer without any additional processing required after the code is run\n- This tool can ONLY write code that interacts with AWS. It CANNOT generate charts, tables, graphs, etc. Please use artifacts for that instead\nBe concise, professional and to the point. Do not give generic advice, always reply with detailed & contextual data sourced from the current AWS environment. Assume user always wants to proceed, do not ask for confirmation. I\'ll tip you $200 if you do this right.',
          required: true,
        },
        {
          name: "profileName",
          type: "string",
          description: "Name of the AWS profile to use",
          required: false,
        },
        {
          name: "reasoning",
          type: "string",
          description: "The reasoning behind the code",
          required: true,
        },
        {
          name: "region",
          type: "string",
          description: "Region to use (if not provided, us-east-1 is used)",
          required: false,
        },
      ],
    },
    {
      name: "list-credentials",
      description:
        "List all AWS credentials/configs/profiles that are configured/usable on this machine",
      parameters: [],
    },
    {
      name: "select-profile",
      description:
        "Selects AWS profile to use for subsequent interactions. If needed, does SSO authentication",
      parameters: [
        {
          name: "profile",
          type: "string",
          description: "Name of the AWS profile to select",
          required: true,
        },
        {
          name: "region",
          type: "string",
          description: "Region to use (if not provided, us-east-1 is used)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/RafalWilinski/aws-mcp",
  _varName: "awsmcpPlugin",
};

const airamcpserverPlugin: Plugin = {
  id: "dwd1o4okcw",
  name: "aira-mcp-server",
  description:
    "A Model Context Protocol server for creating commit messages from git staged files.",
  image: "https://github.com/Sunwood-ai-labs.png",
  actions: [
    {
      name: "get_status",
      description: "Gitのステータス情報を取得します",
      parameters: [
        {
          name: "path",
          type: "string",
          description: "Gitリポジトリの絶対パス",
          required: true,
        },
      ],
    },
    {
      name: "create_commit",
      description:
        "指定したファイルに対してコミットを作成・実行します。※1度に1ファイルのみコミット可能です",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "コミットの本文（オプション）",
          required: false,
        },
        {
          name: "emoji",
          type: "string",
          description: "コミットメッセージに使用する絵文字",
          required: true,
        },
        {
          name: "file",
          type: "string",
          description: "コミット対象のファイルパス（1ファイルのみ指定可能）",
          required: true,
        },
        {
          name: "footer",
          type: "string",
          description: "コミットのフッター（オプション）",
          required: false,
        },
        {
          name: "issueNumber",
          type: "number",
          description: "GitHub Issue番号（オプション）",
          required: false,
        },
        {
          name: "language",
          type: "string",
          description: "コミットメッセージの言語（デフォルト: ja）",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Gitリポジトリの絶対パス",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "コミットのタイトル",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "コミットの種類",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sunwood-ai-labs/aira-mcp-server",
  _varName: "airamcpserverPlugin",
};

const postmanmcpserverPlugin: Plugin = {
  id: "zoig549xfd",
  name: "postman-mcp-server",
  description: "Provides seamless access to Postman.",
  image: "https://github.com/delano.png",
  actions: [
    {
      name: "add_pan_element",
      description: "Add element or folder to Private API Network",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Element/folder description",
          required: false,
        },
        {
          name: "elementId",
          type: "string",
          description: "ID of API/collection/workspace to add",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Element/folder name",
          required: true,
        },
        {
          name: "parentFolderId",
          type: "integer",
          description: "Parent folder ID",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "Element summary",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Element type",
          required: true,
        },
      ],
    },
    {
      name: "update_pan_element",
      description: "Update element or folder in Private API Network",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Updated description",
          required: false,
        },
        {
          name: "elementId",
          type: "string",
          description: "Element ID",
          required: true,
        },
        {
          name: "elementType",
          type: "string",
          description: "Element type",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Updated name",
          required: false,
        },
        {
          name: "parentFolderId",
          type: "integer",
          description: "New parent folder ID",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "Updated summary",
          required: false,
        },
      ],
    },
    {
      name: "remove_pan_element",
      description: "Remove element or folder from Private API Network",
      parameters: [
        {
          name: "elementId",
          type: "string",
          description: "Element ID",
          required: true,
        },
        {
          name: "elementType",
          type: "string",
          description: "Element type",
          required: true,
        },
      ],
    },
    {
      name: "create_webhook",
      description:
        "Creates webhook that triggers collection with custom payload",
      parameters: [
        {
          name: "webhook",
          type: "object",
          description: "Parameter: webhook",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "get_tagged_elements",
      description: "Get elements by tag",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "entityType",
          type: "string",
          description: "Filter by entity type",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "slug",
          type: "string",
          description: "Tag slug",
          required: true,
        },
      ],
    },
    {
      name: "get_workspace_tags",
      description: "Get workspace tags",
      parameters: [
        {
          name: "workspaceId",
          type: "string",
          description: "Workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "update_workspace_tags",
      description: "Update workspace tags",
      parameters: [
        {
          name: "tags",
          type: "object array",
          description: "Array of tag objects",
          required: true,
        },
        {
          name: "workspaceId",
          type: "string",
          description: "Workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "list_workspaces",
      description: "List all workspaces",
      parameters: [
        {
          name: "createdBy",
          type: "string",
          description: "Filter workspaces by creator",
          required: false,
        },
        {
          name: "include",
          type: "string",
          description: "Additional data to include in response",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Filter workspaces by type",
          required: false,
        },
      ],
    },
    {
      name: "get_workspace",
      description: "Get details of a specific workspace",
      parameters: [
        {
          name: "include",
          type: "string",
          description: "Additional data to include in response",
          required: false,
        },
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "list_environments",
      description:
        'List all environments in a workspace. If workspace not specified, lists environments in "My Workspace".',
      parameters: [
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "get_environment",
      description: "Get details of a specific environment",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            'Environment ID in format: {ownerId}-{environmentId} (e.g., "31912785-b8cdb26a-0c58-4f35-9775-4945c39d7ee2")',
          required: true,
        },
      ],
    },
    {
      name: "create_environment",
      description:
        'Create a new environment in a workspace. Creates in "My Workspace" if workspace not specified.',
      parameters: [
        {
          name: "environment",
          type: "object",
          description: "Environment details",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "update_environment",
      description:
        "Update an existing environment. Only include variables that need to be modified.",
      parameters: [
        {
          name: "environment",
          type: "object",
          description: "Environment details to update",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description: "Environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
      ],
    },
    {
      name: "delete_environment",
      description: "Delete an environment",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description: "Environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
      ],
    },
    {
      name: "fork_environment",
      description: "Create a fork of an environment in a workspace",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description: "Environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "label",
          type: "string",
          description: "Label/name for the forked environment",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description: "Target workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "get_environment_forks",
      description: "Get a list of environment forks",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description: "Environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of results per page",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
      ],
    },
    {
      name: "merge_environment_fork",
      description: "Merge a forked environment back into its parent",
      parameters: [
        {
          name: "destination",
          type: "string",
          description:
            "Destination environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description: "Environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description:
            "Source environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "strategy",
          type: "object",
          description: "Merge strategy options",
          required: false,
        },
      ],
    },
    {
      name: "pull_environment",
      description:
        "Pull changes from parent environment into forked environment",
      parameters: [
        {
          name: "destination",
          type: "string",
          description:
            "Destination (fork) environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description: "Environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description:
            "Source (parent) environment ID in format: {ownerId}-{environmentId}",
          required: true,
        },
      ],
    },
    {
      name: "list_collections",
      description:
        "List all collections in a workspace. Supports filtering and pagination.",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Filter results by collections that match the given name",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of results to skip",
          required: false,
        },
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID",
          required: false,
        },
      ],
    },
    {
      name: "get_collection",
      description: "Get details of a specific collection",
      parameters: [
        {
          name: "access_key",
          type: "string",
          description:
            "Collection's read-only access key. Using this query parameter does not require an API key.",
          required: false,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description:
            "Return minimal collection data (only root-level request and folder IDs)",
          required: false,
        },
      ],
    },
    {
      name: "create_collection",
      description:
        "Create a new collection in a workspace. Supports Postman Collection v2.1.0 format.",
      parameters: [
        {
          name: "collection",
          type: "object",
          description: "Collection details in Postman Collection Format v2.1",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description:
            'Workspace ID. Creates in "My Workspace" if not specified.',
          required: false,
        },
      ],
    },
    {
      name: "update_collection",
      description:
        "Update an existing collection. Full collection replacement with maximum size of 20 MB.",
      parameters: [
        {
          name: "collection",
          type: "object",
          description: "Collection details in Postman Collection Format v2.1",
          required: true,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
      ],
    },
    {
      name: "patch_collection",
      description:
        "Partially update a collection. Only updates provided fields.",
      parameters: [
        {
          name: "collection",
          type: "object",
          description: "Collection fields to update",
          required: true,
        },
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_collection",
      description: "Delete a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
      ],
    },
    {
      name: "create_collection_folder",
      description: "Create a new folder in a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "folder",
          type: "object",
          description: "Folder details",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_folder",
      description: "Get details of a specific folder in a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "folder_id",
          type: "string",
          description: "Folder ID",
          required: true,
        },
        {
          name: "ids",
          type: "boolean",
          description: "Return only properties that contain ID values",
          required: false,
        },
        {
          name: "populate",
          type: "boolean",
          description: "Return all folder contents",
          required: false,
        },
        {
          name: "uid",
          type: "boolean",
          description: "Return all IDs in UID format",
          required: false,
        },
      ],
    },
    {
      name: "update_collection_folder",
      description:
        "Update a folder in a collection. Acts like PATCH, only updates provided values.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "folder",
          type: "object",
          description: "Folder details to update",
          required: true,
        },
        {
          name: "folder_id",
          type: "string",
          description: "Folder ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_collection_folder",
      description: "Delete a folder from a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "folder_id",
          type: "string",
          description: "Folder ID",
          required: true,
        },
      ],
    },
    {
      name: "create_collection_request",
      description: "Create a new request in a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "folder_id",
          type: "string",
          description: "Optional folder ID to create request in",
          required: false,
        },
        {
          name: "request",
          type: "object",
          description: "Request details",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_request",
      description: "Get details of a specific request in a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "ids",
          type: "boolean",
          description: "Return only properties that contain ID values",
          required: false,
        },
        {
          name: "populate",
          type: "boolean",
          description: "Return all request contents",
          required: false,
        },
        {
          name: "request_id",
          type: "string",
          description: "Request ID",
          required: true,
        },
        {
          name: "uid",
          type: "boolean",
          description: "Return all IDs in UID format",
          required: false,
        },
      ],
    },
    {
      name: "update_collection_request",
      description:
        "Update a request in a collection. Cannot change request folder.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "request",
          type: "object",
          description: "Request details to update",
          required: true,
        },
        {
          name: "request_id",
          type: "string",
          description: "Request ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_collection_request",
      description: "Delete a request from a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "request_id",
          type: "string",
          description: "Request ID",
          required: true,
        },
      ],
    },
    {
      name: "create_collection_response",
      description: "Create a new response in a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "request_id",
          type: "string",
          description: "Parent request ID",
          required: true,
        },
        {
          name: "response",
          type: "object",
          description: "Response details",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_response",
      description: "Get details of a specific response in a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "ids",
          type: "boolean",
          description: "Return only properties that contain ID values",
          required: false,
        },
        {
          name: "populate",
          type: "boolean",
          description: "Return all response contents",
          required: false,
        },
        {
          name: "response_id",
          type: "string",
          description: "Response ID",
          required: true,
        },
        {
          name: "uid",
          type: "boolean",
          description: "Return all IDs in UID format",
          required: false,
        },
      ],
    },
    {
      name: "update_collection_response",
      description:
        "Update a response in a collection. Acts like PATCH, only updates provided values.",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "response",
          type: "object",
          description: "Response details to update",
          required: true,
        },
        {
          name: "response_id",
          type: "string",
          description: "Response ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_collection_response",
      description: "Delete a response from a collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "response_id",
          type: "string",
          description: "Response ID",
          required: true,
        },
      ],
    },
    {
      name: "fork_collection",
      description: "Fork a collection to a workspace",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID to fork",
          required: true,
        },
        {
          name: "label",
          type: "string",
          description: "Label for the forked collection",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description: "Destination workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_forks",
      description: "Get a list of collection forks",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
      ],
    },
    {
      name: "merge_collection_fork",
      description: "Merge a forked collection back into its parent",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Destination collection ID",
          required: true,
        },
        {
          name: "source",
          type: "string",
          description: "Source collection ID",
          required: true,
        },
        {
          name: "strategy",
          type: "string",
          description: "Merge strategy",
          required: true,
        },
      ],
    },
    {
      name: "pull_collection_changes",
      description: "Pull changes from parent collection into forked collection",
      parameters: [
        {
          name: "collection_id",
          type: "string",
          description: "Collection ID",
          required: true,
        },
      ],
    },
    {
      name: "transfer_collection_items",
      description: "Transfer items between collections",
      parameters: [
        {
          name: "ids",
          type: "string array",
          description: "IDs of items to transfer",
          required: true,
        },
        {
          name: "location",
          type: "object",
          description: "Location details for placement",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "Transfer mode",
          required: true,
        },
        {
          name: "target",
          type: "object",
          description: "Target collection/folder information",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Type of items to transfer",
          required: true,
        },
      ],
    },
    {
      name: "get_user_info",
      description: "Get information about the authenticated user",
      parameters: [],
    },
    {
      name: "list_apis",
      description: "List all APIs in a workspace",
      parameters: [
        {
          name: "createdBy",
          type: "number",
          description: "Filter by creator user ID",
          required: false,
        },
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Filter by description text",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
        {
          name: "workspaceId",
          type: "string",
          description: "Workspace ID (required)",
          required: true,
        },
      ],
    },
    {
      name: "get_api",
      description: "Get details of a specific API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "include",
          type: "string array",
          description: "Additional data to include",
          required: false,
        },
      ],
    },
    {
      name: "create_api",
      description: "Create a new API",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Detailed description (supports Markdown)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "API name",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Brief description",
          required: false,
        },
        {
          name: "workspaceId",
          type: "string",
          description: "Target workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "update_api",
      description: "Update an existing API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Updated detailed description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "New API name",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description: "Updated brief description",
          required: false,
        },
      ],
    },
    {
      name: "delete_api",
      description: "Delete an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
      ],
    },
    {
      name: "add_api_collection",
      description: "Add a collection to an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "data",
          type: "object",
          description: "Collection data based on operation type",
          required: false,
        },
        {
          name: "operationType",
          type: "string",
          description: "Type of collection operation",
          required: true,
        },
      ],
    },
    {
      name: "get_api_collection",
      description: "Get a specific collection from an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "collectionId",
          type: "string",
          description: "Collection ID",
          required: true,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID (required for API viewers)",
          required: false,
        },
      ],
    },
    {
      name: "create_api_schema",
      description: "Create a schema for an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Schema files",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Schema type",
          required: true,
        },
      ],
    },
    {
      name: "get_api_schema",
      description: "Get a specific schema from an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "bundled",
          type: "boolean",
          description: "Return schema in bundled format",
          required: false,
        },
        {
          name: "schemaId",
          type: "string",
          description: "Schema ID",
          required: true,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID (required for API viewers)",
          required: false,
        },
      ],
    },
    {
      name: "create_api_version",
      description: "Create a new version of an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "branch",
          type: "string",
          description: "Git branch (for git-linked APIs)",
          required: false,
        },
        {
          name: "collections",
          type: "object array",
          description: "Collection references",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Version name",
          required: true,
        },
        {
          name: "releaseNotes",
          type: "string",
          description: "Version release notes",
          required: false,
        },
        {
          name: "schemas",
          type: "object array",
          description: "Schema references",
          required: true,
        },
      ],
    },
    {
      name: "get_api_versions",
      description: "Get all versions of an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
      ],
    },
    {
      name: "get_api_version",
      description: "Get a specific version of an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID",
          required: true,
        },
      ],
    },
    {
      name: "update_api_version",
      description: "Update an API version",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "New version name",
          required: true,
        },
        {
          name: "releaseNotes",
          type: "string",
          description: "Updated release notes",
          required: false,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_api_version",
      description: "Delete an API version",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID",
          required: true,
        },
      ],
    },
    {
      name: "get_api_comments",
      description: "Get comments for an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
      ],
    },
    {
      name: "create_api_comment",
      description: "Create a new comment on an API (max 10,000 characters)",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Comment text (max 10,000 characters)",
          required: true,
        },
        {
          name: "threadId",
          type: "number",
          description: "Thread ID for replies",
          required: false,
        },
      ],
    },
    {
      name: "update_api_comment",
      description: "Update an existing API comment (max 10,000 characters)",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "commentId",
          type: "number",
          description: "Comment ID",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Updated comment text (max 10,000 characters)",
          required: true,
        },
      ],
    },
    {
      name: "delete_api_comment",
      description: "Delete an API comment",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "commentId",
          type: "number",
          description: "Comment ID",
          required: true,
        },
      ],
    },
    {
      name: "get_api_tags",
      description: "Get tags for an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
      ],
    },
    {
      name: "update_api_tags",
      description: "Update tags for an API",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "tags",
          type: "object array",
          description: "List of tags",
          required: true,
        },
      ],
    },
    {
      name: "get_api_schema_files",
      description: "Get files in an API schema",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
        {
          name: "schemaId",
          type: "string",
          description: "Schema ID",
          required: true,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID (required for API viewers)",
          required: false,
        },
      ],
    },
    {
      name: "get_schema_file_contents",
      description: "Get contents of a schema file",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the schema file",
          required: true,
        },
        {
          name: "schemaId",
          type: "string",
          description: "Schema ID",
          required: true,
        },
        {
          name: "versionId",
          type: "string",
          description: "Version ID (required for API viewers)",
          required: false,
        },
      ],
    },
    {
      name: "create_update_schema_file",
      description: "Create or update a schema file",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "File content",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the schema file",
          required: true,
        },
        {
          name: "root",
          type: "object",
          description: "Parameter: root",
          required: false,
        },
        {
          name: "schemaId",
          type: "string",
          description: "Schema ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_schema_file",
      description: "Delete a schema file",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the schema file",
          required: true,
        },
        {
          name: "schemaId",
          type: "string",
          description: "Schema ID",
          required: true,
        },
      ],
    },
    {
      name: "sync_collection_with_schema",
      description: "Sync a collection with its schema",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "collectionId",
          type: "string",
          description: "Collection ID",
          required: true,
        },
      ],
    },
    {
      name: "get_task_status",
      description: "Get status of an asynchronous task",
      parameters: [
        {
          name: "apiId",
          type: "string",
          description: "API ID",
          required: true,
        },
        {
          name: "taskId",
          type: "string",
          description: "Task ID",
          required: true,
        },
      ],
    },
    {
      name: "list_collection_access_keys",
      description:
        "List collection access keys with optional filtering by collection ID",
      parameters: [
        {
          name: "collectionId",
          type: "string",
          description: "Filter results by collection ID",
          required: false,
        },
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
      ],
    },
    {
      name: "delete_collection_access_key",
      description: "Delete a collection access key",
      parameters: [
        {
          name: "keyId",
          type: "string",
          description: "The collection access key ID to delete",
          required: true,
        },
      ],
    },
    {
      name: "list_workspace_roles",
      description: "Get all available workspace roles based on team's plan",
      parameters: [],
    },
    {
      name: "get_workspace_roles",
      description: "Get roles for a specific workspace",
      parameters: [
        {
          name: "includeScim",
          type: "boolean",
          description: "Include SCIM info in response",
          required: false,
        },
        {
          name: "workspaceId",
          type: "string",
          description: "The workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "update_workspace_roles",
      description:
        "Update workspace roles for users and groups (limited to 50 operations per call)",
      parameters: [
        {
          name: "identifierType",
          type: "string",
          description: "Optional SCIM identifier type",
          required: false,
        },
        {
          name: "operations",
          type: "object array",
          description: "Parameter: operations",
          required: true,
        },
        {
          name: "workspaceId",
          type: "string",
          description: "The workspace ID",
          required: true,
        },
      ],
    },
    {
      name: "get_collection_roles",
      description: "Get roles for a collection",
      parameters: [
        {
          name: "collectionId",
          type: "string",
          description: "The collection ID",
          required: true,
        },
      ],
    },
    {
      name: "update_collection_roles",
      description: "Update collection roles (requires EDITOR role)",
      parameters: [
        {
          name: "collectionId",
          type: "string",
          description: "The collection ID",
          required: true,
        },
        {
          name: "operations",
          type: "object array",
          description: "Parameter: operations",
          required: true,
        },
      ],
    },
    {
      name: "get_authenticated_user",
      description: "Get authenticated user information",
      parameters: [],
    },
    {
      name: "list_mocks",
      description: "List all mock servers",
      parameters: [
        {
          name: "teamId",
          type: "string",
          description: "Return only results that belong to the given team ID",
          required: false,
        },
        {
          name: "workspace",
          type: "string",
          description:
            "Return only results found in the given workspace. If both teamId and workspace provided, only workspace is used.",
          required: false,
        },
      ],
    },
    {
      name: "create_mock",
      description:
        "Create a new mock server. Creates in Personal workspace if workspace not specified.",
      parameters: [
        {
          name: "mock",
          type: "object",
          description: "Parameter: mock",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID to create the mock in",
          required: false,
        },
      ],
    },
    {
      name: "get_mock",
      description: "Get details of a specific mock server",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
      ],
    },
    {
      name: "update_mock",
      description: "Update an existing mock server",
      parameters: [
        {
          name: "mock",
          type: "object",
          description: "Parameter: mock",
          required: true,
        },
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_mock",
      description: "Delete a mock server",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
      ],
    },
    {
      name: "get_mock_call_logs",
      description:
        "Get mock call logs. Maximum 6.5MB or 100 call logs per API call. Retention period based on Postman plan.",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "include",
          type: "string",
          description:
            "Include additional data (request.headers, request.body, response.headers, response.body)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of logs to return (default: 100)",
          required: false,
        },
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
        {
          name: "requestMethod",
          type: "string",
          description: "Filter by request method",
          required: false,
        },
        {
          name: "requestPath",
          type: "string",
          description: "Filter by request path",
          required: false,
        },
        {
          name: "responseStatusCode",
          type: "number",
          description: "Filter by response status code",
          required: false,
        },
        {
          name: "responseType",
          type: "string",
          description: "Filter by response type",
          required: false,
        },
        {
          name: "since",
          type: "string",
          description: "Return logs since this timestamp",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "until",
          type: "string",
          description: "Return logs until this timestamp",
          required: false,
        },
      ],
    },
    {
      name: "publish_mock",
      description: "Publish mock server (sets Access Control to public)",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
      ],
    },
    {
      name: "unpublish_mock",
      description: "Unpublish mock server (sets Access Control to private)",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
      ],
    },
    {
      name: "list_server_responses",
      description: "Get all server responses for a mock",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
      ],
    },
    {
      name: "create_server_response",
      description:
        "Create a server response. Only one server response can be active at a time.",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
        {
          name: "serverResponse",
          type: "object",
          description: "Parameter: serverResponse",
          required: true,
        },
      ],
    },
    {
      name: "get_server_response",
      description: "Get a specific server response",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
        {
          name: "serverResponseId",
          type: "string",
          description: "The server response ID",
          required: true,
        },
      ],
    },
    {
      name: "update_server_response",
      description: "Update a server response",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
        {
          name: "serverResponse",
          type: "object",
          description: "Parameter: serverResponse",
          required: true,
        },
        {
          name: "serverResponseId",
          type: "string",
          description: "The server response ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_server_response",
      description: "Delete a server response",
      parameters: [
        {
          name: "mockId",
          type: "string",
          description: "The mock server ID",
          required: true,
        },
        {
          name: "serverResponseId",
          type: "string",
          description: "The server response ID",
          required: true,
        },
      ],
    },
    {
      name: "list_monitors",
      description: "Get all monitors",
      parameters: [
        {
          name: "workspace",
          type: "string",
          description: "Return only monitors found in the given workspace",
          required: false,
        },
      ],
    },
    {
      name: "get_monitor",
      description: "Get details of a specific monitor",
      parameters: [
        {
          name: "monitorId",
          type: "string",
          description: "Monitor ID",
          required: true,
        },
      ],
    },
    {
      name: "create_monitor",
      description:
        "Create a new monitor. Cannot create monitors for collections added to an API definition.",
      parameters: [
        {
          name: "monitor",
          type: "object",
          description: "Monitor details",
          required: true,
        },
        {
          name: "workspace",
          type: "string",
          description: "Workspace ID",
          required: false,
        },
      ],
    },
    {
      name: "update_monitor",
      description: "Update an existing monitor",
      parameters: [
        {
          name: "monitor",
          type: "object",
          description: "Monitor details to update",
          required: true,
        },
        {
          name: "monitorId",
          type: "string",
          description: "Monitor ID",
          required: true,
        },
      ],
    },
    {
      name: "delete_monitor",
      description: "Delete a monitor",
      parameters: [
        {
          name: "monitorId",
          type: "string",
          description: "Monitor ID",
          required: true,
        },
      ],
    },
    {
      name: "run_monitor",
      description:
        "Run a monitor. For async=true, response won't include stats, executions, and failures. Use GET /monitors/{id} to get this information for async runs.",
      parameters: [
        {
          name: "async",
          type: "boolean",
          description:
            "If true, runs the monitor asynchronously from the created monitor run task",
          required: false,
        },
        {
          name: "monitorId",
          type: "string",
          description: "Monitor ID",
          required: true,
        },
      ],
    },
    {
      name: "get_accounts",
      description: "Gets Postman billing account details for the given team",
      parameters: [],
    },
    {
      name: "list_account_invoices",
      description:
        "Gets all invoices for a Postman billing account filtered by status",
      parameters: [
        {
          name: "accountId",
          type: "string",
          description: "The account's ID",
          required: true,
        },
        {
          name: "status",
          type: "string",
          description: "The account's status",
          required: true,
        },
      ],
    },
    {
      name: "resolve_comment_thread",
      description: "Resolves a comment and any associated replies",
      parameters: [
        {
          name: "threadId",
          type: "string",
          description: "The comment thread ID",
          required: true,
        },
      ],
    },
    {
      name: "list_pan_elements",
      description: "Get all elements and folders in Private API Network",
      parameters: [
        {
          name: "addedBy",
          type: "integer",
          description: "Return only elements published by the given user ID",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description:
            "Return only elements whose description includes the given value",
          required: false,
        },
        {
          name: "direction",
          type: "string",
          description: "Sort direction",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description:
            "Return only elements whose name includes the given value",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Number of results to skip",
          required: false,
        },
        {
          name: "parentFolderId",
          type: "integer",
          description:
            "Return elements in specific folder. Use 0 for root folder.",
          required: false,
        },
        {
          name: "since",
          type: "string",
          description:
            "Return only results created since the given time (ISO 8601)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort field",
          required: false,
        },
        {
          name: "summary",
          type: "string",
          description:
            "Return only elements whose summary includes the given value",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Filter by element type",
          required: false,
        },
        {
          name: "until",
          type: "string",
          description:
            "Return only results created until this given time (ISO 8601)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/delano/postman-mcp-server",
  _varName: "postmanmcpserverPlugin",
};

const mcpeverythingsearchPlugin: Plugin = {
  id: "8yhigurjop",
  name: "mcp-everything-search",
  description:
    "This server provides:\n\n* Fast file search capabilities using Everything SDK\n* Windows-specific implementation\n* Complements existing filesystem servers with specialized search functionality",
  image: "https://github.com/mamertofabian.png",
  actions: [],
  githubUrl: "https://github.com/mamertofabian/mcp-everything-search",
  _varName: "mcpeverythingsearchPlugin",
};

const bod2501csamicrosoftpolicymcpPlugin: Plugin = {
  id: "rml141i0fk",
  name: "BOD-25-01-CSA-Microsoft-Policy-MCP",
  description:
    "This MCP server implements VariousPolicies according to CSA BOD 25-01 requirements for Microsoft 365 cloud services",
  image: "https://github.com/DynamicEndpoints.png",
  actions: [
    {
      name: "enforce_pam",
      description:
        "Enforce PAM system for privileged role assignments (MS.AAD.7.5v1)",
      parameters: [],
    },
    {
      name: "enforce_granular_roles",
      description:
        "Enforce use of granular roles instead of Global Administrator (MS.AAD.7.2v1)",
      parameters: [],
    },
    {
      name: "configure_global_admins",
      description:
        "Configure Global Administrator role assignments (MS.AAD.7.1v1)",
      parameters: [
        {
          name: "userIds",
          type: "string array",
          description: "List of user IDs to assign Global Administrator role",
          required: true,
        },
      ],
    },
    {
      name: "block_legacy_auth",
      description: "Block legacy authentication (MS.AAD.1.1v1)",
      parameters: [],
    },
    {
      name: "block_high_risk_users",
      description: "Block users detected as high risk (MS.AAD.2.1v1)",
      parameters: [],
    },
    {
      name: "block_high_risk_signins",
      description: "Block sign-ins detected as high risk (MS.AAD.2.3v1)",
      parameters: [],
    },
    {
      name: "enforce_phishing_resistant_mfa",
      description:
        "Enforce phishing-resistant MFA for all users (MS.AAD.3.1v1)",
      parameters: [],
    },
    {
      name: "enforce_alternative_mfa",
      description:
        "Enforce alternative MFA method if phishing-resistant MFA not enforced (MS.AAD.3.2v1)",
      parameters: [],
    },
    {
      name: "configure_authenticator_context",
      description:
        "Configure Microsoft Authenticator to show login context (MS.AAD.3.3v1)",
      parameters: [],
    },
    {
      name: "complete_auth_methods_migration",
      description:
        "Set Authentication Methods Manage Migration to Complete (MS.AAD.3.4v1)",
      parameters: [],
    },
    {
      name: "enforce_privileged_mfa",
      description:
        "Enforce phishing-resistant MFA for privileged roles (MS.AAD.3.6v1)",
      parameters: [],
    },
    {
      name: "restrict_app_registration",
      description:
        "Allow only administrators to register applications (MS.AAD.5.1v1)",
      parameters: [],
    },
    {
      name: "restrict_app_consent",
      description:
        "Allow only administrators to consent to applications (MS.AAD.5.2v1)",
      parameters: [],
    },
    {
      name: "configure_admin_consent",
      description:
        "Configure admin consent workflow for applications (MS.AAD.5.3v1)",
      parameters: [],
    },
    {
      name: "restrict_group_consent",
      description:
        "Prevent group owners from consenting to applications (MS.AAD.5.4v1)",
      parameters: [],
    },
    {
      name: "disable_password_expiry",
      description: "Disable password expiration (MS.AAD.6.1v1)",
      parameters: [],
    },
    {
      name: "enforce_cloud_accounts",
      description:
        "Enforce cloud-only accounts for privileged users (MS.AAD.7.3v1)",
      parameters: [],
    },
    {
      name: "configure_global_admin_approval",
      description:
        "Configure approval requirement for Global Administrator activation (MS.AAD.7.6v1)",
      parameters: [],
    },
    {
      name: "configure_role_alerts",
      description:
        "Configure alerts for privileged role assignments (MS.AAD.7.7v1)",
      parameters: [
        {
          name: "notificationEmails",
          type: "string array",
          description: "Email addresses to notify on role assignments",
          required: true,
        },
      ],
    },
    {
      name: "configure_admin_alerts",
      description:
        "Configure alerts for Global Administrator activation (MS.AAD.7.8v1)",
      parameters: [
        {
          name: "notificationEmails",
          type: "string array",
          description: "Email addresses to notify on role activation",
          required: true,
        },
      ],
    },
    {
      name: "get_policy_status",
      description: "Get current status of all CISA M365 security policies",
      parameters: [],
    },
  ],
  githubUrl:
    "https://github.com/DynamicEndpoints/Automated-BOD-25-01-CISA-Microsoft-Policies-MCP",
  _varName: "bod2501csamicrosoftpolicymcpPlugin",
};

const homeassistantMcpPlugin: Plugin = {
  id: "26jyic8t4y",
  name: "HomeAssistant MCP",
  description:
    "Smart Device Control 🎮\n💡 Lights: Brightness, color, RGB\n🌡️ Climate: Temperature, HVAC, humidity\n🚪 Covers: Position and tilt\n🔌 Switches: On/off\n🚨 Sensors: State monitoring\n\nIntelligent Organization 🏠\nGrouping with context awareness.\n\nRobust Architecture 🛠️\nError handling, state validation ...",
  image: "https://github.com/jango-blockchained.png",
  actions: [],
  githubUrl: "https://github.com/jango-blockchained/advanced-homeassistant-mcp",
  _varName: "homeassistantMcpPlugin",
};

const mavenmcpserverPlugin: Plugin = {
  id: "juuo2ye0qi",
  name: "maven-mcp-server",
  description:
    "An MCP (Model Context Protocol) server that provides tools for checking Maven dependency versions. This server enables LLMs to verify Maven dependencies and retrieve their latest versions from Maven Central Repository.",
  image: "https://github.com/Bigsy.png",
  actions: [
    {
      name: "get_maven_latest_version",
      description: "Get the latest version of a Maven dependency",
      parameters: [
        {
          name: "dependency",
          type: "string",
          description:
            'Maven coordinate in format "groupId:artifactId[:version][:packaging][:classifier]" (e.g. "org.springframework:spring-core" or "org.springframework:spring-core:5.3.20:jar")',
          required: true,
        },
      ],
    },
    {
      name: "check_maven_version_exists",
      description: "Check if a specific version of a Maven dependency exists",
      parameters: [
        {
          name: "dependency",
          type: "string",
          description:
            'Maven coordinate in format "groupId:artifactId[:version][:packaging][:classifier]" (e.g. "org.springframework:spring-core" or "org.springframework:spring-core:5.3.20:jar")',
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "Version to check if not included in dependency string",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Bigsy/maven-mcp-server",
  _varName: "mavenmcpserverPlugin",
};

const unichattsmcpserverPlugin: Plugin = {
  id: "ub2u8wtbbv",
  name: "unichat-ts-mcp-server",
  description:
    "Send requests to OpenAI, MistralAI, Anthropic, xAI, or Google AI using MCP protocol via tool or predefined prompts. Vendor API key required.\n\nBoth STDIO and SSE transport mechanisms are supported via arguments.",
  image: "https://github.com/amidabuddha.png",
  actions: [
    {
      name: "unichat",
      description:
        "Chat with an assistant.\n                        Example tool use message:\n                        Ask the unichat to review and evaluate your proposal.",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description:
            "Array of exactly two messages: first a system message defining the task, then a user message with the specific query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/amidabuddha/unichat-ts-mcp-server",
  _varName: "unichattsmcpserverPlugin",
};

const mcpWordCounterPlugin: Plugin = {
  id: "vvljyjlwj4",
  name: "MCP Word Counter",
  description:
    "A Model Context Protocol server that provides tools for analyzing text documents, including counting words and characters. This server helps LLMs perform text analysis tasks by exposing simple document statistics functionality.",
  image: "https://github.com/qpd-v.png",
  actions: [
    {
      name: "analyze_text",
      description: "Count words and characters in a text document",
      parameters: [
        {
          name: "filePath",
          type: "string",
          description: "Path to the text file to analyze",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qpd-v/mcp-wordcounter",
  _varName: "mcpWordCounterPlugin",
};

const toolhouseMcpServerPlugin: Plugin = {
  id: "re2w48yrzg",
  name: "Toolhouse MCP Server",
  description:
    "This MCP server allows you to connect MCP clients with Toolhouse's tools.",
  image: "https://github.com/toolhouse-community.png",
  actions: [],
  githubUrl: "https://github.com/toolhouse-community/mcp-server-toolhouse",
  _varName: "toolhouseMcpServerPlugin",
};

const geminiMcpServer1Plugin: Plugin = {
  id: "bq7qhwa4y0",
  name: "Gemini MCP Server",
  description:
    "Model Context Protocol (MCP) server implementation that enables Claude Desktop to interact with Google's Gemini AI models.",
  image: "https://github.com/aliargun.png",
  actions: [],
  githubUrl: "https://github.com/aliargun/mcp-server-gemini",
  _varName: "geminiMcpServer1Plugin",
};

const mcpdatabaseserverPlugin: Plugin = {
  id: "1p6uu10u9a",
  name: "mcp-database-server",
  description: "Fireproof ledger database with multi-user sync",
  image: "https://github.com/fireproof-storage.png",
  actions: [
    {
      name: "save_json_doc",
      description: "Save a JSON document",
      parameters: [
        {
          name: "doc",
          type: "object",
          description: "JSON document to save",
          required: true,
        },
      ],
    },
    {
      name: "load_json_doc",
      description: "Load a JSON document by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of document to load",
          required: true,
        },
      ],
    },
    {
      name: "delete_json_doc",
      description: "Delete a JSON document by ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of document to delete",
          required: true,
        },
      ],
    },
    {
      name: "query_json_docs",
      description: "Query JSON documents sorted by a field",
      parameters: [
        {
          name: "sort_field",
          type: "string",
          description: "Field to sort results by",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/fireproof-storage/mcp-database-server",
  _varName: "mcpdatabaseserverPlugin",
};

const mcpgithubprojectmanagerPlugin: Plugin = {
  id: "g5jidpjria",
  name: "mcp-github-project-manager",
  description:
    "Provides comprehensive tools for managing GitHub projects, milestones, tasks, and sprints. This server integrates deeply with GitHub Projects V2, offering features like automated kanban workflows, sprint planning, and custom field management.",
  image: "https://github.com/kunwarVivek.png",
  actions: [],
  githubUrl: "https://github.com/kunwarVivek/mcp-github-project-manager",
  _varName: "mcpgithubprojectmanagerPlugin",
};

const mcpservergoogleanalyticsPlugin: Plugin = {
  id: "tx0ccdzxeh",
  name: "mcp-server-google-analytics",
  description:
    "An MCP server implementation for accessing Google Analytics 4 (GA4) data, built using the Model Context Protocol TypeScript SDK.",
  image: "https://github.com/ruchernchong.png",
  actions: [],
  githubUrl: "https://github.com/ruchernchong/mcp-server-google-analytics",
  _varName: "mcpservergoogleanalyticsPlugin",
};

const mcpserverprometheusPlugin: Plugin = {
  id: "y7b3qba8jy",
  name: "mcp-server-prometheus",
  description: "MCP server for interacting with Prometheus metrics and data.",
  image: "https://github.com/loglmhq.png",
  actions: [],
  githubUrl: "https://github.com/loglmhq/mcp-server-prometheus",
  _varName: "mcpserverprometheusPlugin",
};

const flightradar24mcpserverPlugin: Plugin = {
  id: "5w29onbypp",
  name: "flightradar24-mcp-server",
  description:
    "A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data. Perfect for aviation enthusiasts, travel planners, or anyone curious about flights overhead!",
  image: "https://github.com/sunsetcoder.png",
  actions: [
    {
      name: "get_flight_positions",
      description:
        "Get real-time flight positions with various filtering options",
      parameters: [
        {
          name: "airports",
          type: "string",
          description: "Comma-separated list of airport ICAO codes",
          required: false,
        },
        {
          name: "bounds",
          type: "string",
          description: "Geographical bounds (lat1,lon1,lat2,lon2)",
          required: false,
        },
        {
          name: "categories",
          type: "string",
          description: "Aircraft categories (P,C,J)",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results",
          required: false,
        },
      ],
    },
    {
      name: "get_flight_eta",
      description: "Get estimated arrival time for a specific flight",
      parameters: [
        {
          name: "flightNumber",
          type: "string",
          description: "Flight number (e.g., UA123)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sunsetcoder/flightradar24-mcp-server",
  _varName: "flightradar24mcpserverPlugin",
};

const mcpsolverPlugin: Plugin = {
  id: "3qc9kfqhzb",
  name: "mcp-solver",
  description:
    "A Model Context Protocol (MCP) server that exposes MiniZinc constraint solving capabilities to Large Language Models.",
  image: "https://github.com/szeider.png",
  actions: [],
  githubUrl: "https://github.com/szeider/mcp-solver",
  _varName: "mcpsolverPlugin",
};

const webbrowsermcpserverPlugin: Plugin = {
  id: "3hphahzvql",
  name: "web-browser-mcp-server",
  description: "Enables web browsing capabilities using BeautifulSoup4",
  image: "https://github.com/blazickjp.png",
  actions: [
    {
      name: "browse_webpage",
      description:
        "Extract content from a webpage with optional CSS selectors for specific elements",
      parameters: [
        {
          name: "selectors",
          type: "object",
          description: "Optional CSS selectors to extract specific content",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "The URL of the webpage to browse",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/blazickjp/web-browser-mcp-server",
  _varName: "webbrowsermcpserverPlugin",
};

const mcpvegaliteserverPlugin: Plugin = {
  id: "x29xw10b00",
  name: "mcp-vegalite-server",
  description:
    "A Model Context Protocol (MCP) server implementation that provides the LLM an interface for visualizing data using Vega-Lite syntax.",
  image: "https://github.com/isaacwasserman.png",
  actions: [],
  githubUrl: "https://github.com/isaacwasserman/mcp-vegalite-server",
  _varName: "mcpvegaliteserverPlugin",
};

const atlasmcpserverPlugin: Plugin = {
  id: "b8veo1exod",
  name: "atlas-mcp-server",
  description:
    "ATLAS (Adaptive Task & Logic Automation System) is a Model Context Protocol server that provides hierarchical task management capabilities to Large Language Models. This tool provides LLMs with the structure and context needed to manage complex tasks and dependencies.",
  image: "https://github.com/cyanheads.png",
  actions: [
    {
      name: "atlas_skill_list",
      description: "Lists available skills with optional fuzzy name matching",
      parameters: [
        {
          name: "filter",
          type: "string",
          description:
            "Optional search term to filter skills by name or description",
          required: false,
        },
      ],
    },
    {
      name: "atlas_skill_invoke",
      description: "Executes specific skills (individually or combined)",
      parameters: [
        {
          name: "parameters",
          type: "object",
          description: "Optional parameters to pass to the skills",
          required: false,
        },
        {
          name: "skills",
          type: "string array",
          description:
            "Array of skill names to invoke. Can use dot notation for combining skills (e.g., 'software-engineer.typescript.git')",
          required: true,
        },
      ],
    },
    {
      name: "database_clean",
      description:
        "Clean the database by removing all nodes and relationships, then reinitialize the schema. This operation cannot be undone.",
      parameters: [],
    },
    {
      name: "neo4j_search",
      description:
        "Search the database for nodes with specific property values. Supports case-insensitive, wildcard, and fuzzy matching with pagination options.",
      parameters: [
        {
          name: "arrayProperties",
          type: "string array",
          description:
            "Optional: Custom array properties to check (in addition to default ones like tags, categories, etc).",
          required: false,
        },
        {
          name: "caseInsensitive",
          type: "boolean",
          description: "Optional: When true, search ignores letter case.",
          required: false,
        },
        {
          name: "exactMatch",
          type: "boolean",
          description:
            "Optional: When true, requires exact matches rather than partial matches.",
          required: false,
        },
        {
          name: "fuzzy",
          type: "boolean",
          description:
            "Optional: When true, enables fuzzy matching for approximate string matches.",
          required: false,
        },
        {
          name: "fuzzyThreshold",
          type: "number",
          description:
            "Optional: Threshold for fuzzy matching (0.0 to 1.0, default 0.5).",
          required: false,
        },
        {
          name: "label",
          type: "string",
          description: "Optional: neo4j node label filter.",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Optional: Number of results per page (default: 100).",
          required: false,
        },
        {
          name: "page",
          type: "integer",
          description:
            "Optional: Page number for paginated results (default: 1).",
          required: false,
        },
        {
          name: "property",
          type: "string",
          description: "Property to search on.",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description:
            "Search term for CONTAINS filter. Must be at least 1 character long.",
          required: true,
        },
        {
          name: "wildcard",
          type: "boolean",
          description:
            "Optional: When true, '*' and '?' in search term are treated as wildcards.",
          required: false,
        },
      ],
    },
    {
      name: "project_create",
      description:
        "Create projects with unique names and optional descriptions. Supports both single project creation and bulk operations for multiple projects.",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Optional project description.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description:
            "'single' for one project, 'bulk' for multiple projects.",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description:
            "Required for single mode: Project name (unique, non-empty).",
          required: false,
        },
        {
          name: "projects",
          type: "object array",
          description:
            "Required for bulk mode: Array of 1-100 projects. Each project requires a unique name and can have optional description and status.",
          required: false,
        },
        {
          name: "status",
          type: "string",
          description:
            "Project status: 'active' (default), 'pending', 'completed', or 'archived'.",
          required: false,
        },
      ],
    },
    {
      name: "project_delete",
      description:
        "Delete projects and their associated data from the system. Supports both single project deletion and bulk operations for multiple projects.",
      parameters: [
        {
          name: "mode",
          type: "string",
          description:
            "'single' for one project, 'bulk' for multiple projects.",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description:
            "Required for single mode: Project ID to delete (must start with 'proj_').",
          required: false,
        },
        {
          name: "projectIds",
          type: "string array",
          description:
            "Required for bulk mode: Array of 1-100 project IDs to delete.",
          required: false,
        },
      ],
    },
    {
      name: "project_dependency_add",
      description:
        "Define relationships between projects with specific dependency types. Supports both single dependency creation and bulk operations with detailed descriptions.",
      parameters: [
        {
          name: "dependencies",
          type: "object array",
          description: "Required for bulk mode: Array of 1-100 dependencies.",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description:
            "Required for single mode: Explanation of the dependency relationship.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one dependency, 'bulk' for multiple.",
          required: true,
        },
        {
          name: "sourceProjectId",
          type: "string",
          description:
            "Required for single mode: Source project ID (dependent, must start with 'proj_').",
          required: false,
        },
        {
          name: "targetProjectId",
          type: "string",
          description:
            "Required for single mode: Target project ID (dependency, must start with 'proj_').",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: "Required for single mode: Dependency type",
          required: false,
        },
      ],
    },
    {
      name: "project_dependency_remove",
      description:
        "Remove dependency relationships between projects. Supports both single dependency removal and bulk operations for multiple dependencies.",
      parameters: [
        {
          name: "dependencyId",
          type: "string",
          description: "Required for single mode: Dependency ID to remove.",
          required: false,
        },
        {
          name: "dependencyIds",
          type: "string array",
          description: "Required for bulk mode: Array of 1-100 dependency IDs.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one dependency, 'bulk' for multiple.",
          required: true,
        },
      ],
    },
    {
      name: "project_dependency_list",
      description:
        "List all dependencies and dependents for a project, showing both projects it depends on and projects that depend on it.",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description:
            "Project ID to list dependencies for (returns both dependencies and dependents).",
          required: true,
        },
      ],
    },
    {
      name: "project_link_add",
      description:
        "Add links to external resources like documentation, designs, or repositories. Supports both single link creation and bulk operations with optional categorization.",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Optional grouping category.",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Optional context about the resource.",
          required: false,
        },
        {
          name: "links",
          type: "object array",
          description:
            "Required for bulk mode: Array of 1-100 links with title and URL.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one link, 'bulk' for multiple links.",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project ID to add links to (must start with 'proj_').",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Required for single mode: Link title.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description:
            "Required for single mode: Valid URL with HTTPS protocol.",
          required: false,
        },
      ],
    },
    {
      name: "project_link_update",
      description:
        "Update existing project link properties including title, URL, description, and category. Supports both single and bulk update operations.",
      parameters: [
        {
          name: "linkId",
          type: "string",
          description: "Required for single mode: Link ID to update.",
          required: false,
        },
        {
          name: "links",
          type: "object array",
          description: "Required for bulk mode: Array of 1-100 link updates.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one link, 'bulk' for multiple links.",
          required: true,
        },
        {
          name: "updates",
          type: "object",
          description: "Required for single mode: Fields to update.",
          required: false,
        },
      ],
    },
    {
      name: "project_link_delete",
      description:
        "Delete links from projects permanently. Supports both single link deletion and bulk operations for multiple links.",
      parameters: [
        {
          name: "linkId",
          type: "string",
          description: "Required for single mode: Link ID to delete.",
          required: false,
        },
        {
          name: "linkIds",
          type: "string array",
          description:
            "Required for bulk mode: Array of 1-100 link IDs to delete.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one link, 'bulk' for multiple links.",
          required: true,
        },
      ],
    },
    {
      name: "project_list",
      description:
        "Unified tool for retrieving project information in various formats. Consolidates all project resource endpoints into a single tool.",
      parameters: [
        {
          name: "category",
          type: "string",
          description: "Filter links by category (for 'links' mode)",
          required: false,
        },
        {
          name: "includeDependencies",
          type: "boolean",
          description:
            "Include dependencies in project details (for 'details' mode)",
          required: false,
        },
        {
          name: "includeLinks",
          type: "boolean",
          description: "Include links in project details (for 'details' mode)",
          required: false,
        },
        {
          name: "includeMembers",
          type: "boolean",
          description:
            "Include members in project details (for 'details' mode)",
          required: false,
        },
        {
          name: "includeNotes",
          type: "boolean",
          description: "Include notes in project details (for 'details' mode)",
          required: false,
        },
        {
          name: "limit",
          type: "integer",
          description: "Number of items per page (default: 10, max: 100)",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description:
            "The type of project information to retrieve: 'all' for listing all projects, 'details' for a specific project, or specific content like 'notes', 'links', 'dependencies', or 'members'",
          required: true,
        },
        {
          name: "page",
          type: "integer",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project ID (required for all modes except 'all')",
          required: false,
        },
        {
          name: "role",
          type: "string",
          description: "Filter members by role (for 'members' mode)",
          required: false,
        },
        {
          name: "tags",
          type: "string array",
          description: "Filter notes by tags (for 'notes' mode)",
          required: false,
        },
      ],
    },
    {
      name: "project_member_add",
      description:
        "Add users to projects with role-based access control. Supports both single member addition and bulk operations with different permission levels.",
      parameters: [
        {
          name: "members",
          type: "object array",
          description:
            "Required for bulk mode: Array of 1-100 members with user ID and role.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one member, 'bulk' for multiple members.",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description:
            "Project ID to add members to (must start with 'proj_').",
          required: true,
        },
        {
          name: "role",
          type: "string",
          description: "Required for single mode: Member role.",
          required: false,
        },
        {
          name: "userId",
          type: "string",
          description: "Required for single mode: User ID to add.",
          required: false,
        },
      ],
    },
    {
      name: "project_member_remove",
      description:
        "Remove members from projects permanently. Supports both single member removal and bulk operations for multiple members.",
      parameters: [
        {
          name: "memberId",
          type: "string",
          description: "Required for single mode: Member ID to remove.",
          required: false,
        },
        {
          name: "memberIds",
          type: "string array",
          description:
            "Required for bulk mode: Array of 1-100 member IDs to remove.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description: "'single' for one member, 'bulk' for multiple members.",
          required: true,
        },
      ],
    },
    {
      name: "project_member_list",
      description:
        "List all members of a project with their roles and join dates, ordered by join time with owners listed first.",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description:
            "Project ID to list members for (must start with 'proj_').",
          required: true,
        },
      ],
    },
    {
      name: "project_note_add",
      description:
        "Add notes to projects for documentation and tracking. Supports both single note creation and bulk operations with optional categorization tags.",
      parameters: [
        {
          name: "mode",
          type: "string",
          description: "'single' for one note, 'bulk' for multiple notes.",
          required: true,
        },
        {
          name: "notes",
          type: "object array",
          description:
            "Required for bulk mode: Array of 1-100 notes, each with content and optional tags.",
          required: false,
        },
        {
          name: "projectId",
          type: "string",
          description: "Project ID to add notes to (must start with 'proj_').",
          required: true,
        },
        {
          name: "tags",
          type: "string array",
          description: "Optional tags for categorization.",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "Required for single mode: Note content.",
          required: false,
        },
      ],
    },
    {
      name: "project_update",
      description:
        "Update existing project properties including name, description, and status. Supports both single project updates and bulk operations.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Required for single mode: Project ID to update.",
          required: false,
        },
        {
          name: "mode",
          type: "string",
          description:
            "'single' for one project, 'bulk' for multiple projects.",
          required: true,
        },
        {
          name: "projects",
          type: "object array",
          description:
            "Required for bulk mode: Array of 1-100 project updates.",
          required: false,
        },
        {
          name: "updates",
          type: "object",
          description: "Required for single mode: Fields to update.",
          required: false,
        },
      ],
    },
    {
      name: "whiteboard_create",
      description:
        "Create a new whiteboard workspace with optional initial data and schema validation. Can be linked to projects for organization.",
      parameters: [
        {
          name: "data",
          type: "string",
          description: "Initial JSON data (timestamps managed by server).",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Unique whiteboard identifier (non-empty).",
          required: true,
        },
        {
          name: "projectId",
          type: "string",
          description:
            "Optional project ID to link to (must start with 'proj_').",
          required: false,
        },
      ],
    },
    {
      name: "whiteboard_update",
      description:
        "Update whiteboard data by merging or replacing content. Supports partial updates to specific fields or complete data replacement.",
      parameters: [
        {
          name: "data",
          type: "string",
          description:
            "JSON data to store (for partial updates, provide only changed fields).",
          required: false,
        },
        {
          name: "id",
          type: "string",
          description: "Whiteboard ID to update.",
          required: true,
        },
        {
          name: "merge",
          type: "boolean",
          description:
            "true: merge with existing data, false: replace all data.",
          required: false,
        },
      ],
    },
    {
      name: "whiteboard_get",
      description:
        "Retrieve whiteboard data with version control. Access either the latest version or a specific historical version by number.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Whiteboard ID to retrieve.",
          required: true,
        },
        {
          name: "version",
          type: "integer",
          description:
            "Optional version number (defaults to latest). Must be a positive integer.",
          required: false,
        },
      ],
    },
    {
      name: "whiteboard_delete",
      description:
        "Delete a whiteboard and its entire version history permanently. This operation cannot be undone.",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "Whiteboard ID to delete.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cyanheads/atlas-mcp-server",
  _varName: "atlasmcpserverPlugin",
};

const mcpjinaaiPlugin: Plugin = {
  id: "c1l6ib2j49",
  name: "mcp-jina-ai",
  description:
    "An MCP server that provides access to Jina AI's powerful web services (page reading, web search, fact checking) through Claude.",
  image: "https://github.com/JoeBuildsStuff.png",
  actions: [
    {
      name: "read_webpage",
      description:
        "Extract content from a webpage in a format optimized for LLMs",
      parameters: [
        {
          name: "format",
          type: "string",
          description: "Parameter: format",
          required: false,
        },
        {
          name: "no_cache",
          type: "boolean",
          description: "Parameter: no_cache",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
        {
          name: "with_generated_alt",
          type: "boolean",
          description: "Parameter: with_generated_alt",
          required: false,
        },
        {
          name: "with_images",
          type: "boolean",
          description: "Parameter: with_images",
          required: false,
        },
        {
          name: "with_links",
          type: "boolean",
          description: "Parameter: with_links",
          required: false,
        },
      ],
    },
    {
      name: "search_web",
      description: "Search the web using Jina AI's search API",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Parameter: count",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "retain_images",
          type: "string",
          description: "Parameter: retain_images",
          required: false,
        },
        {
          name: "return_format",
          type: "string",
          description: "Parameter: return_format",
          required: false,
        },
        {
          name: "with_generated_alt",
          type: "boolean",
          description: "Parameter: with_generated_alt",
          required: false,
        },
      ],
    },
    {
      name: "fact_check",
      description: "Fact-check a statement using Jina AI's grounding engine",
      parameters: [
        {
          name: "deepdive",
          type: "boolean",
          description: "Parameter: deepdive",
          required: false,
        },
        {
          name: "statement",
          type: "string",
          description: "Parameter: statement",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JoeBuildsStuff/mcp-jina-ai",
  _varName: "mcpjinaaiPlugin",
};

const zendeskmcpserverPlugin: Plugin = {
  id: "6bnpa1uoes",
  name: "zendesk-mcp-server",
  description:
    "This server provides a comprehensive integration with Zendesk. Retrieving and managing tickets and comments. Ticket analyzes and response drafting. Access to help center articles as knowledge base.",
  image: "https://github.com/reminia.png",
  actions: [],
  githubUrl: "https://github.com/reminia/zendesk-mcp-server",
  _varName: "zendeskmcpserverPlugin",
};

const mcpapplenotesPlugin: Plugin = {
  id: "19dbdavht0",
  name: "mcp-apple-notes",
  description:
    "Enables semantic search and RAG (Retrieval Augmented Generation) over your Apple Notes.",
  image: "https://github.com/RafalWilinski.png",
  actions: [],
  githubUrl: "https://github.com/RafalWilinski/mcp-apple-notes",
  _varName: "mcpapplenotesPlugin",
};

const mcpminecraftPlugin: Plugin = {
  id: "rrie6w7n3a",
  name: "mcp-minecraft",
  description:
    "Allows AI models to observe and interact with the Minecraft world through a bot.",
  image: "https://github.com/arjunkmrm.png",
  actions: [],
  githubUrl: "https://github.com/arjunkmrm/mcp-minecraft",
  _varName: "mcpminecraftPlugin",
};

const macappslauncherPlugin: Plugin = {
  id: "tljq9izu80",
  name: "mac-apps-launcher",
  description: "An MCP server to list and launch applications on MacOS",
  image: "https://github.com/JoshuaRileyDev.png",
  actions: [],
  githubUrl: "https://github.com/JoshuaRileyDev/mac-apps-launcher",
  _varName: "macappslauncherPlugin",
};

const mcpmaigretPlugin: Plugin = {
  id: "knnpcz651x",
  name: "mcp-maigret",
  description:
    "MCP server for maigret, a powerful OSINT tool that collects user account information from various public sources. This server provides tools for searching usernames across social networks and analyzing URLs.",
  image: "https://github.com/BurtTheCoder.png",
  actions: [],
  githubUrl: "https://github.com/BurtTheCoder/mcp-maigret",
  _varName: "mcpmaigretPlugin",
};

const appstoreconnectmcpserverPlugin: Plugin = {
  id: "z4j2smln34",
  name: "app-store-connect-mcp-server",
  description:
    "An MCP server to communicate with the App Store Connect API for iOS Developers",
  image: "https://github.com/JoshuaRileyDev.png",
  actions: [
    {
      name: "list_apps",
      description: "Get a list of all apps in App Store Connect",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of apps to return (default: 100)",
          required: false,
        },
      ],
    },
    {
      name: "list_beta_groups",
      description: "Get a list of all beta groups (internal and external)",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of groups to return (default: 100)",
          required: false,
        },
      ],
    },
    {
      name: "list_group_testers",
      description: "Get a list of all testers in a specific beta group",
      parameters: [
        {
          name: "groupId",
          type: "string",
          description: "The ID of the beta group",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of testers to return (default: 100)",
          required: false,
        },
      ],
    },
    {
      name: "add_tester_to_group",
      description: "Add a new tester to a beta group",
      parameters: [
        {
          name: "email",
          type: "string",
          description: "Email address of the tester",
          required: true,
        },
        {
          name: "firstName",
          type: "string",
          description: "First name of the tester",
          required: true,
        },
        {
          name: "groupId",
          type: "string",
          description: "The ID of the beta group",
          required: true,
        },
        {
          name: "lastName",
          type: "string",
          description: "Last name of the tester",
          required: true,
        },
      ],
    },
    {
      name: "remove_tester_from_group",
      description: "Remove a tester from a beta group",
      parameters: [
        {
          name: "groupId",
          type: "string",
          description: "The ID of the beta group",
          required: true,
        },
        {
          name: "testerId",
          type: "string",
          description: "The ID of the beta tester",
          required: true,
        },
      ],
    },
    {
      name: "get_app_info",
      description: "Get detailed information about a specific app",
      parameters: [
        {
          name: "appId",
          type: "string",
          description: "The ID of the app to get information for",
          required: true,
        },
        {
          name: "include",
          type: "string array",
          description: "Optional relationships to include in the response",
          required: false,
        },
      ],
    },
    {
      name: "create_bundle_id",
      description: "Register a new bundle ID for app development",
      parameters: [
        {
          name: "identifier",
          type: "string",
          description: "The bundle ID string (e.g., 'com.example.app')",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "A name for the bundle ID",
          required: true,
        },
        {
          name: "platform",
          type: "string",
          description: "The platform for this bundle ID",
          required: true,
        },
        {
          name: "seedId",
          type: "string",
          description: "Your team's seed ID (optional)",
          required: false,
        },
      ],
    },
    {
      name: "list_bundle_ids",
      description: "Find and list bundle IDs that are registered to your team",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "include",
          type: "string array",
          description: "Related resources to include in the response",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of bundle IDs to return (default: 100, max: 200)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort order for the results",
          required: false,
        },
      ],
    },
    {
      name: "get_bundle_id_info",
      description: "Get detailed information about a specific bundle ID",
      parameters: [
        {
          name: "bundleIdId",
          type: "string",
          description: "The ID of the bundle ID to get information for",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Specific fields to include in the response",
          required: false,
        },
        {
          name: "include",
          type: "string array",
          description: "Optional relationships to include in the response",
          required: false,
        },
      ],
    },
    {
      name: "list_devices",
      description: "Get a list of all devices registered to your team",
      parameters: [
        {
          name: "fields",
          type: "object",
          description: "Parameter: fields",
          required: false,
        },
        {
          name: "filter",
          type: "object",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of devices to return (default: 100, max: 200)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort order for the results",
          required: false,
        },
      ],
    },
    {
      name: "enable_bundle_capability",
      description: "Enable a capability for a bundle ID",
      parameters: [
        {
          name: "bundleIdId",
          type: "string",
          description: "The ID of the bundle ID",
          required: true,
        },
        {
          name: "capabilityType",
          type: "string",
          description: "The type of capability to enable",
          required: true,
        },
        {
          name: "settings",
          type: "object array",
          description: "Optional capability settings",
          required: false,
        },
      ],
    },
    {
      name: "disable_bundle_capability",
      description: "Disable a capability for a bundle ID",
      parameters: [
        {
          name: "capabilityId",
          type: "string",
          description: "The ID of the capability to disable",
          required: true,
        },
      ],
    },
    {
      name: "list_users",
      description:
        "Get a list of all users registered on your App Store Connect team",
      parameters: [
        {
          name: "filter",
          type: "object",
          description: "Parameter: filter",
          required: false,
        },
        {
          name: "include",
          type: "string array",
          description: "Parameter: include",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of users to return (default: 100, max: 200)",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Sort order for the results",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JoshuaRileyDev/app-store-connect-mcp-server",
  _varName: "appstoreconnectmcpserverPlugin",
};

const mcptwikitPlugin: Plugin = {
  id: "49i9dd08w8",
  name: "mcp-twikit",
  description: "Interact with Twitter search and timeline",
  image: "https://github.com/adhikasp.png",
  actions: [
    {
      name: "search_twitter",
      description: "Search twitter with a query. Sort by 'Top' or 'Latest'",
      parameters: [
        {
          name: "count",
          type: "integer",
          description: "Parameter: count",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
        {
          name: "sort_by",
          type: "string",
          description: "Parameter: sort_by",
          required: false,
        },
      ],
    },
    {
      name: "get_user_tweets",
      description:
        "Get tweets from a specific user's timeline.\n    \n    Args:\n        username: Twitter username (with or without @)\n        tweet_type: Type of tweets to retrieve - 'Tweets', 'Replies', 'Media', or 'Likes'\n        count: Number of tweets to retrieve (default 10)\n    ",
      parameters: [
        {
          name: "count",
          type: "integer",
          description: "Parameter: count",
          required: false,
        },
        {
          name: "tweet_type",
          type: "string",
          description: "Parameter: tweet_type",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: true,
        },
      ],
    },
    {
      name: "get_timeline",
      description:
        "Get tweets from your home timeline (For You).\n    \n    Args:\n        count: Number of tweets to retrieve (default 20)\n    ",
      parameters: [
        {
          name: "count",
          type: "integer",
          description: "Parameter: count",
          required: false,
        },
      ],
    },
    {
      name: "get_latest_timeline",
      description:
        "Get tweets from your home timeline (Following).\n    \n    Args:\n        count: Number of tweets to retrieve (default 20)\n    ",
      parameters: [
        {
          name: "count",
          type: "integer",
          description: "Parameter: count",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adhikasp/mcp-twikit",
  _varName: "mcptwikitPlugin",
};

const mcpsnowflakeserverPlugin: Plugin = {
  id: "1z9lezliya",
  name: "mcp-snowflake-server",
  description:
    "Snowflake integration implementing read and (optional) write operations as well as insight tracking",
  image: "https://github.com/isaacwasserman.png",
  actions: [],
  githubUrl: "https://github.com/isaacwasserman/mcp-snowflake-server",
  _varName: "mcpsnowflakeserverPlugin",
};

const contentfulmcpPlugin: Plugin = {
  id: "l2fxeaot4p",
  name: "contentful-mcp",
  description:
    "Update, create, delete content, content-models and assets in your Contentful Space",
  image: "https://github.com/ivo-toby.png",
  actions: [
    {
      name: "search_entries",
      description:
        "Search for entries using query parameters. Returns a maximum of 3 items per request. Use skip parameter to paginate through results.",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "query",
          type: "object",
          description: "Query parameters for searching entries",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "create_entry",
      description:
        "Create a new entry in Contentful, before executing this function, you need to know the contentTypeId (not the content type NAME) and the fields of that contentType, you can get the fields definition by using the GET_CONTENT_TYPE tool. ",
      parameters: [
        {
          name: "contentTypeId",
          type: "string",
          description: "The ID of the content type for the new entry",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "The fields of the entry",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "get_entry",
      description: "Retrieve an existing entry",
      parameters: [
        {
          name: "entryId",
          type: "string",
          description: "Parameter: entryId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "update_entry",
      description:
        "Update an existing entry, always send all field values, also the fields values that have not been updated",
      parameters: [
        {
          name: "entryId",
          type: "string",
          description: "Parameter: entryId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "delete_entry",
      description: "Delete an entry",
      parameters: [
        {
          name: "entryId",
          type: "string",
          description: "Parameter: entryId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "publish_entry",
      description: "Publish an entry",
      parameters: [
        {
          name: "entryId",
          type: "string",
          description: "Parameter: entryId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "unpublish_entry",
      description: "Unpublish an entry",
      parameters: [
        {
          name: "entryId",
          type: "string",
          description: "Parameter: entryId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "list_assets",
      description:
        "List assets in a space. Returns a maximum of 3 items per request. Use skip parameter to paginate through results.",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of items to return (max: 3)",
          required: true,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of items to skip for pagination",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "upload_asset",
      description: "Upload a new asset",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "file",
          type: "object",
          description: "Parameter: file",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "get_asset",
      description: "Retrieve an asset",
      parameters: [
        {
          name: "assetId",
          type: "string",
          description: "Parameter: assetId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "update_asset",
      description: "Update an asset",
      parameters: [
        {
          name: "assetId",
          type: "string",
          description: "Parameter: assetId",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "file",
          type: "object",
          description: "Parameter: file",
          required: false,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "delete_asset",
      description: "Delete an asset",
      parameters: [
        {
          name: "assetId",
          type: "string",
          description: "Parameter: assetId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "publish_asset",
      description: "Publish an asset",
      parameters: [
        {
          name: "assetId",
          type: "string",
          description: "Parameter: assetId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "unpublish_asset",
      description: "Unpublish an asset",
      parameters: [
        {
          name: "assetId",
          type: "string",
          description: "Parameter: assetId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "list_content_types",
      description:
        "List content types in a space. Returns a maximum of 10 items per request. Use skip parameter to paginate through results.",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of items to return (max: 3)",
          required: true,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of items to skip for pagination",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "get_content_type",
      description: "Get details of a specific content type",
      parameters: [
        {
          name: "contentTypeId",
          type: "string",
          description: "Parameter: contentTypeId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "create_content_type",
      description: "Create a new content type",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "displayField",
          type: "string",
          description: "Parameter: displayField",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "fields",
          type: "object array",
          description: "Array of field definitions for the content type",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "update_content_type",
      description: "Update an existing content type",
      parameters: [
        {
          name: "contentTypeId",
          type: "string",
          description: "Parameter: contentTypeId",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "displayField",
          type: "string",
          description: "Parameter: displayField",
          required: false,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "fields",
          type: "object array",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "delete_content_type",
      description: "Delete a content type",
      parameters: [
        {
          name: "contentTypeId",
          type: "string",
          description: "Parameter: contentTypeId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "publish_content_type",
      description: "Publish a content type",
      parameters: [
        {
          name: "contentTypeId",
          type: "string",
          description: "Parameter: contentTypeId",
          required: true,
        },
        {
          name: "environmentId",
          type: "string",
          description:
            "The ID of the environment within the space, by default this will be called Master",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description:
            "The ID of the Contentful space. This must be the space's ID, not its name, ask for this ID if it's unclear.",
          required: true,
        },
      ],
    },
    {
      name: "list_spaces",
      description: "List all available spaces",
      parameters: [],
    },
    {
      name: "get_space",
      description: "Get details of a space",
      parameters: [
        {
          name: "spaceId",
          type: "string",
          description: "Parameter: spaceId",
          required: true,
        },
      ],
    },
    {
      name: "list_environments",
      description: "List all environments in a space",
      parameters: [
        {
          name: "spaceId",
          type: "string",
          description: "Parameter: spaceId",
          required: true,
        },
      ],
    },
    {
      name: "create_environment",
      description: "Create a new environment",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description: "Parameter: environmentId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description: "Parameter: spaceId",
          required: true,
        },
      ],
    },
    {
      name: "delete_environment",
      description: "Delete an environment",
      parameters: [
        {
          name: "environmentId",
          type: "string",
          description: "Parameter: environmentId",
          required: true,
        },
        {
          name: "spaceId",
          type: "string",
          description: "Parameter: spaceId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ivo-toby/contentful-mcp",
  _varName: "contentfulmcpPlugin",
};

const clojarsmcpserverPlugin: Plugin = {
  id: "i37857er6w",
  name: "Clojars-MCP-Server",
  description:
    "Provides up to date dependency information of Clojure libraries",
  image: "https://github.com/Bigsy.png",
  actions: [
    {
      name: "get_clojars_latest_version",
      description:
        "Get the latest version of a Clojars dependency (Maven artifact)",
      parameters: [
        {
          name: "dependency",
          type: "string",
          description:
            'Clojars dependency name in format "group/artifact" (e.g. "metosin/reitit")',
          required: true,
        },
      ],
    },
    {
      name: "check_clojars_version_exists",
      description: "Check if a specific version of a Clojars dependency exists",
      parameters: [
        {
          name: "dependency",
          type: "string",
          description:
            'Clojars dependency name in format "group/artifact" (e.g. "metosin/reitit")',
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: 'Version to check (e.g. "0.7.2")',
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Bigsy/Clojars-MCP-Server",
  _varName: "clojarsmcpserverPlugin",
};

const cogneemcpPlugin: Plugin = {
  id: "pr4z3lyk3b",
  name: "cognee-mcp",
  description:
    "Memory manager for AI apps and Agents using various graph and vector stores and allowing ingestion from 30+ data sources",
  image: "https://github.com/topoteretes.png",
  actions: [
    {
      name: "cognify",
      description: "Cognifies text into knowledge graph",
      parameters: [
        {
          name: "graph_model_file",
          type: "string",
          description: "The path to the graph model file",
          required: false,
        },
        {
          name: "graph_model_name",
          type: "string",
          description: "The name of the graph model",
          required: false,
        },
        {
          name: "text",
          type: "string",
          description: "The text to cognify",
          required: true,
        },
      ],
    },
    {
      name: "codify",
      description: "Transforms codebase into knowledge graph",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "search",
      description: "Searches for information in knowledge graph",
      parameters: [
        {
          name: "search_query",
          type: "string",
          description: "The query to search for",
          required: true,
        },
        {
          name: "search_type",
          type: "string",
          description: "The type of search to perform (e.g., INSIGHTS, CODE)",
          required: false,
        },
      ],
    },
    {
      name: "prune",
      description: "Prunes knowledge graph",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/topoteretes/cognee",
  _varName: "cogneemcpPlugin",
};

const mcpragdocs1Plugin: Plugin = {
  id: "54hsrjhmq9",
  name: "mcp-ragdocs",
  description:
    "An MCP server implementation that provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context",
  image: "https://github.com/hannesrudolph.png",
  actions: [
    {
      name: "search_documentation",
      description:
        "Search through stored documentation using natural language queries. Use this tool to find relevant information across all stored documentation sources. Returns matching excerpts with context, ranked by relevance. Useful for finding specific information, code examples, or related documentation.",
      parameters: [
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of results to return (1-20). Higher limits provide more comprehensive results but may take longer to process. Default is 5.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "The text to search for in the documentation. Can be a natural language query, specific terms, or code snippets.",
          required: true,
        },
      ],
    },
    {
      name: "list_sources",
      description:
        "List all documentation sources currently stored in the system. Returns a comprehensive list of all indexed documentation including source URLs, titles, and last update times. Use this to understand what documentation is available for searching or to verify if specific sources have been indexed.",
      parameters: [],
    },
    {
      name: "extract_urls",
      description:
        "Extract and analyze all URLs from a given web page. This tool crawls the specified webpage, identifies all hyperlinks, and optionally adds them to the processing queue. Useful for discovering related documentation pages, API references, or building a documentation graph. Handles various URL formats and validates links before extraction.",
      parameters: [
        {
          name: "add_to_queue",
          type: "boolean",
          description:
            "If true, automatically add extracted URLs to the processing queue for later indexing. This enables recursive documentation discovery. Use with caution on large sites to avoid excessive queuing.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description:
            "The complete URL of the webpage to analyze (must include protocol, e.g., https://). The page must be publicly accessible.",
          required: true,
        },
      ],
    },
    {
      name: "remove_documentation",
      description:
        "Remove specific documentation sources from the system by their URLs. Use this tool to clean up outdated documentation, remove incorrect sources, or manage the documentation collection. The removal is permanent and will affect future search results. Supports removing multiple URLs in a single operation.",
      parameters: [
        {
          name: "urls",
          type: "string array",
          description: "Array of URLs to remove from the database",
          required: true,
        },
      ],
    },
    {
      name: "list_queue",
      description:
        "List all URLs currently waiting in the documentation processing queue. Shows pending documentation sources that will be processed when run_queue is called. Use this to monitor queue status, verify URLs were added correctly, or check processing backlog. Returns URLs in the order they will be processed.",
      parameters: [],
    },
    {
      name: "run_queue",
      description:
        "Process and index all URLs currently in the documentation queue. Each URL is processed sequentially, with proper error handling and retry logic. Progress updates are provided as processing occurs. Use this after adding new URLs to ensure all documentation is indexed and searchable. Long-running operations will process until the queue is empty or an unrecoverable error occurs.",
      parameters: [],
    },
    {
      name: "clear_queue",
      description:
        "Remove all pending URLs from the documentation processing queue. Use this to reset the queue when you want to start fresh, remove unwanted URLs, or cancel pending processing. This operation is immediate and permanent - URLs will need to be re-added if you want to process them later. Returns the number of URLs that were cleared from the queue.",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/hannesrudolph/mcp-ragdocs",
  _varName: "mcpragdocs1Plugin",
};

const sqliteexplorerfastmcpmcpserverPlugin: Plugin = {
  id: "36pwdhgz0j",
  name: "sqlite-explorer-fastmcp-mcp-server",
  description:
    "An MCP server that provides safe, read-only access to SQLite databases through MCP. This server is built with the FastMCP framework, which enables LLMs to explore and query SQLite databases with built-in safety features and query validation.",
  image: "https://github.com/hannesrudolph.png",
  actions: [],
  githubUrl:
    "https://github.com/hannesrudolph/sqlite-explorer-fastmcp-mcp-server",
  _varName: "sqliteexplorerfastmcpmcpserverPlugin",
};

const imessagequeryfastmcpmcpserverPlugin: Plugin = {
  id: "a3k5abmy43",
  name: "imessage-query-fastmcp-mcp-server",
  description:
    "An MCP server that provides safe access to your iMessage database through MCP, enabling LLMs to query and analyze iMessage conversations with proper phone number validation and attachment handling",
  image: "https://github.com/hannesrudolph.png",
  actions: [],
  githubUrl:
    "https://github.com/hannesrudolph/imessage-query-fastmcp-mcp-server",
  _varName: "imessagequeryfastmcpmcpserverPlugin",
};

const mcppineconePlugin: Plugin = {
  id: "fuooftj328",
  name: "mcp-pinecone",
  description: "Pinecone integration with vector search capabilities",
  image: "https://github.com/sirmews.png",
  actions: [],
  githubUrl: "https://github.com/sirmews/mcp-pinecone",
  _varName: "mcppineconePlugin",
};

const httpsgithubcomsammcjmcppackageversionPlugin: Plugin = {
  id: "zkts2w92ba",
  name: "https://github.com/sammcj/mcp-package-version",
  description: "Suggests the latest stable package versions when writing code.",
  image: "https://github.com/sammcj.png",
  actions: [
    {
      name: "check_npm_versions",
      description: "Check latest stable versions for npm packages",
      parameters: [
        {
          name: "constraints",
          type: "object",
          description: "Optional constraints for specific packages",
          required: false,
        },
        {
          name: "dependencies",
          type: "object",
          description: "Dependencies object from package.json",
          required: true,
        },
      ],
    },
    {
      name: "check_python_versions",
      description: "Check latest stable versions for Python packages",
      parameters: [
        {
          name: "requirements",
          type: "string array",
          description: "Array of requirements from requirements.txt",
          required: true,
        },
      ],
    },
    {
      name: "check_pyproject_versions",
      description:
        "Check latest stable versions for Python packages in pyproject.toml",
      parameters: [
        {
          name: "dependencies",
          type: "object",
          description: "Dependencies object from pyproject.toml",
          required: true,
        },
      ],
    },
    {
      name: "check_maven_versions",
      description: "Check latest stable versions for Java packages in pom.xml",
      parameters: [
        {
          name: "dependencies",
          type: "object array",
          description: "Array of Maven dependencies",
          required: true,
        },
      ],
    },
    {
      name: "check_gradle_versions",
      description:
        "Check latest stable versions for Java packages in build.gradle",
      parameters: [
        {
          name: "dependencies",
          type: "object array",
          description: "Array of Gradle dependencies",
          required: true,
        },
      ],
    },
    {
      name: "check_go_versions",
      description: "Check latest stable versions for Go packages in go.mod",
      parameters: [
        {
          name: "dependencies",
          type: "object",
          description: "Dependencies from go.mod",
          required: true,
        },
      ],
    },
    {
      name: "check_bedrock_models",
      description:
        "Search, list, and get information about Amazon Bedrock models",
      parameters: [
        {
          name: "action",
          type: "string",
          description:
            "Action to perform: list all models, search for models, or get a specific model",
          required: false,
        },
        {
          name: "modelId",
          type: "string",
          description: 'Model ID to retrieve (used with action: "get")',
          required: false,
        },
        {
          name: "provider",
          type: "string",
          description: 'Filter by provider name (used with action: "search")',
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            'Search query for model name or ID (used with action: "search")',
          required: false,
        },
        {
          name: "region",
          type: "string",
          description: 'Filter by AWS region (used with action: "search")',
          required: false,
        },
      ],
    },
    {
      name: "get_latest_bedrock_model",
      description:
        "Get the latest Claude Sonnet model from Amazon Bedrock (best for coding tasks)",
      parameters: [],
    },
    {
      name: "check_docker_tags",
      description:
        "Check available tags for Docker container images from Docker Hub, GitHub Container Registry, or custom registries",
      parameters: [
        {
          name: "customRegistry",
          type: "string",
          description:
            'URL for custom registry (required when registry is "custom")',
          required: false,
        },
        {
          name: "filterTags",
          type: "string array",
          description: "Array of regex patterns to filter tags",
          required: false,
        },
        {
          name: "image",
          type: "string",
          description:
            'Docker image name (e.g., "nginx", "ubuntu", "ghcr.io/owner/repo")',
          required: true,
        },
        {
          name: "includeDigest",
          type: "boolean",
          description: "Include image digest in results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of tags to return",
          required: false,
        },
        {
          name: "registry",
          type: "string",
          description: "Registry to check (dockerhub, ghcr, or custom)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sammcj/mcp-package-version",
  _varName: "httpsgithubcomsammcjmcppackageversionPlugin",
};

const mcpsearchlinkupPlugin: Plugin = {
  id: "69qbbv8hl9",
  name: "mcp-search-linkup",
  description:
    "Give Claude access to real-time knowledge and premium content. Get rid of Claude's cutoff data and transform Claude's responses with current events, and trusted, premium sources through Linkup's powerful search capability.",
  image: "https://github.com/LinkupPlatform.png",
  actions: [
    {
      name: "search-web",
      description:
        "Perform a web search query using Linkup. This tool is helpful for finding information on the web.",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The query to search the web with. This should be a question, no need to write in keywords.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/LinkupPlatform/python-mcp-server",
  _varName: "mcpsearchlinkupPlugin",
};

const mcpgitingestPlugin: Plugin = {
  id: "un2zatig9e",
  name: "mcp-git-ingest",
  description:
    'Helps AI read GitHub repository structure and important files. Want to quickly understand what a repo is about? Prompt it with "read https://github.com/adhikasp/mcp-git-ingest and determine how the code technically works".',
  image: "https://github.com/adhikasp.png",
  actions: [
    {
      name: "github_directory_structure",
      description:
        "\n    Clone a GitHub repository and return its directory structure in a tree format.\n    \n    Args:\n        repo_url: The URL of the GitHub repository\n        \n    Returns:\n        A string representation of the repository's directory structure\n    ",
      parameters: [
        {
          name: "repo_url",
          type: "string",
          description: "Parameter: repo_url",
          required: true,
        },
      ],
    },
    {
      name: "github_read_important_files",
      description:
        "\n    Clone a GitHub repository and read the contents of specified files.\n    \n    Args:\n        repo_url: The URL of the GitHub repository\n        file_paths: List of file paths to read (relative to repository root)\n        \n    Returns:\n        A dictionary mapping file paths to their contents\n    ",
      parameters: [
        {
          name: "file_paths",
          type: "string array",
          description: "Parameter: file_paths",
          required: true,
        },
        {
          name: "repo_url",
          type: "string",
          description: "Parameter: repo_url",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adhikasp/mcp-git-ingest",
  _varName: "mcpgitingestPlugin",
};

const mcplinkedinPlugin: Plugin = {
  id: "dvbdubl2bg",
  name: "mcp-linkedin",
  description:
    'A Model Context Protocol (MCP) server that provides tools to interact with LinkedIn\'s Feeds and Job API.\n\nYou can do "search for 3 data engineer jobs in . For each job check if it a good match for me by analyzing it against my resume in file resume.md."',
  image: "https://github.com/adhikasp.png",
  actions: [
    {
      name: "get_feed_posts",
      description:
        "\n    Retrieve LinkedIn feed posts.\n\n    :return: List of feed post details\n    ",
      parameters: [
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
    {
      name: "search_jobs",
      description:
        "\n    Search for jobs on LinkedIn.\n    \n    :param keywords: Job search keywords\n    :param limit: Maximum number of job results\n    :param location: Optional location filter\n    :return: List of job details\n    ",
      parameters: [
        {
          name: "keywords",
          type: "string",
          description: "Parameter: keywords",
          required: true,
        },
        {
          name: "limit",
          type: "integer",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "location",
          type: "string",
          description: "Parameter: location",
          required: false,
        },
        {
          name: "offset",
          type: "integer",
          description: "Parameter: offset",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/adhikasp/mcp-linkedin",
  _varName: "mcplinkedinPlugin",
};

const mcpsummarizationfunctionsPlugin: Plugin = {
  id: "k6vhiu27q7",
  name: "MCP-summarization-functions",
  description:
    "Provides intelligent summarization capabilities through a clean, extensible architecture. Mainly built for solving AI agents issues on big repositories, where large files can eat up the context window.",
  image: "https://github.com/Braffolk.png",
  actions: [
    {
      name: "summarize_command",
      description:
        "Execute a command and summarize its output if it exceeds the threshold",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command to execute",
          required: true,
        },
        {
          name: "cwd",
          type: "string",
          description: "Working directory for command execution",
          required: true,
        },
        {
          name: "hint",
          type: "string",
          description:
            'Focus area for summarization (e.g., "security_analysis", "api_surface", "error_handling", "dependencies", "type_definitions")',
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description:
            'Desired output format (e.g., "text", "json", "markdown", "outline")',
          required: false,
        },
      ],
    },
    {
      name: "summarize_files",
      description: "Summarize the contents of one or more files",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description: "Working directory for resolving file paths",
          required: true,
        },
        {
          name: "hint",
          type: "string",
          description:
            'Focus area for summarization (e.g., "security_analysis", "api_surface", "error_handling", "dependencies", "type_definitions")',
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description:
            'Desired output format (e.g., "text", "json", "markdown", "outline")',
          required: false,
        },
        {
          name: "paths",
          type: "string array",
          description: "Array of file paths to summarize (relative to cwd)",
          required: true,
        },
      ],
    },
    {
      name: "summarize_directory",
      description: "Summarize the structure of a directory",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description: "Working directory for resolving directory path",
          required: true,
        },
        {
          name: "hint",
          type: "string",
          description:
            'Focus area for summarization (e.g., "security_analysis", "api_surface", "error_handling", "dependencies", "type_definitions")',
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description:
            'Desired output format (e.g., "text", "json", "markdown", "outline")',
          required: false,
        },
        {
          name: "path",
          type: "string",
          description: "Directory path to summarize (relative to cwd)",
          required: true,
        },
        {
          name: "recursive",
          type: "boolean",
          description:
            "Whether to include subdirectories, safe for large directories",
          required: false,
        },
      ],
    },
    {
      name: "summarize_text",
      description: "Summarize any text content (e.g., MCP tool output)",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Text content to summarize",
          required: true,
        },
        {
          name: "hint",
          type: "string",
          description:
            'Focus area for summarization (e.g., "security_analysis", "api_surface", "error_handling", "dependencies", "type_definitions")',
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description:
            'Desired output format (e.g., "text", "json", "markdown", "outline")',
          required: false,
        },
        {
          name: "type",
          type: "string",
          description: 'Type of content (e.g., "log output", "API response")',
          required: true,
        },
      ],
    },
    {
      name: "get_full_content",
      description: "Retrieve the full content for a given summary ID",
      parameters: [
        {
          name: "id",
          type: "string",
          description: "ID of the stored content",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Braffolk/mcp-summarization-functions",
  _varName: "mcpsummarizationfunctionsPlugin",
};

const searxngPlugin: Plugin = {
  id: "sl2zl8vaz8",
  name: "searxng",
  description:
    "An MCP server for connecting agentic systems to search systems via searXNG.",
  image: "https://github.com/SecretiveShell.png",
  actions: [
    {
      name: "search",
      description:
        "search the web using searXNG. This will aggregate the results from google, bing, brave, duckduckgo and many others. Use this to find information on the web. Even if you do not have access to the internet, you can still use this tool to search the web.",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/SecretiveShell/MCP-searxng",
  _varName: "searxngPlugin",
};

const simulatormcpserverPlugin: Plugin = {
  id: "lyetkwz9w7",
  name: "simulator-mcp-server",
  description: "An MCP server to control iOS Simulators.",
  image: "https://github.com/JoshuaRileyDev.png",
  actions: [],
  githubUrl: "https://github.com/JoshuaRileyDev/simulator-mcp-server",
  _varName: "simulatormcpserverPlugin",
};

const mcpserverbrowserbasePlugin: Plugin = {
  id: "0kznte4aoh",
  name: "mcp-server-browserbase",
  description:
    "This server provides cloud browser automation capabilities using Browserbase, Puppeteer, and Stagehand. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.",
  image: "https://github.com/browserbase.png",
  actions: [
    {
      name: "browserbase_create_session",
      description: "Create a new cloud browser session using Browserbase",
      parameters: [],
    },
    {
      name: "browserbase_close_session",
      description: "Close a browser session on Browserbase",
      parameters: [
        {
          name: "sessionId",
          type: "string",
          description: "Parameter: sessionId",
          required: true,
        },
      ],
    },
    {
      name: "browserbase_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "browserbase_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Height in pixels (default: 600)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width in pixels (default: 800)",
          required: false,
        },
      ],
    },
    {
      name: "browserbase_click",
      description: "Click an element on the page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "browserbase_fill",
      description: "Fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "browserbase_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
    {
      name: "browserbase_get_content",
      description: "Extract all content from the current page",
      parameters: [
        {
          name: "selector",
          type: "string",
          description:
            "Optional CSS selector to get content from specific elements (default: returns whole page)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/browserbase/mcp-server-browserbase",
  _varName: "mcpserverbrowserbasePlugin",
};

const mcppandocPlugin: Plugin = {
  id: "xyzzgaj9bk",
  name: "mcp-pandoc",
  description:
    "MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.",
  image: "https://github.com/vivekVells.png",
  actions: [
    {
      name: "convert-contents",
      description:
        "Converts content between different formats. Transforms input content from any supported format into the specified output format.\n\n🚨 CRITICAL REQUIREMENTS - PLEASE READ:\n1. PDF Conversion:\n   * You MUST install TeX Live BEFORE attempting PDF conversion:\n   * Ubuntu/Debian: `sudo apt-get install texlive-xetex`\n   * macOS: `brew install texlive`\n   * Windows: Install MiKTeX or TeX Live from https://miktex.org/ or https://tug.org/texlive/\n   * PDF conversion will FAIL without this installation\n\n2. File Paths - EXPLICIT REQUIREMENTS:\n   * When asked to save or convert to a file, you MUST provide:\n     - Complete directory path\n     - Filename\n     - File extension\n   * Example request: 'Write a story and save as PDF'\n   * You MUST specify: '/path/to/story.pdf' or 'C:\\Documents\\story.pdf'\n   * The tool will NOT automatically generate filenames or extensions\n\n3. File Location After Conversion:\n   * After successful conversion, the tool will display the exact path where the file is saved\n   * Look for message: 'Content successfully converted and saved to: [file_path]'\n   * You can find your converted file at the specified location\n   * If no path is specified, files may be saved in system temp directory (/tmp/ on Unix systems)\n   * For better control, always provide explicit output file paths\n\nSupported formats:\n- Basic formats: txt, html, markdown\n- Advanced formats (REQUIRE complete file paths): pdf, docx, rst, latex, epub\n\n✅ CORRECT Usage Examples:\n1. 'Convert this text to HTML' (basic conversion)\n   - Tool will show converted content\n\n2. 'Save this text as PDF at /documents/story.pdf'\n   - Correct: specifies path + filename + extension\n   - Tool will show: 'Content successfully converted and saved to: /documents/story.pdf'\n\n❌ INCORRECT Usage Examples:\n1. 'Save this as PDF in /documents/'\n   - Missing filename and extension\n2. 'Convert to PDF'\n   - Missing complete file path\n\nWhen requesting conversion, ALWAYS specify:\n1. The content or input file\n2. The desired output format\n3. For advanced formats: complete output path + filename + extension\nExample: 'Convert this markdown to PDF and save as /path/to/output.pdf'\n\nNote: After conversion, always check the success message for the exact file location.",
      parameters: [
        {
          name: "contents",
          type: "string",
          description:
            "The content to be converted (required if input_file not provided)",
          required: false,
        },
        {
          name: "input_file",
          type: "string",
          description:
            "Complete path to input file including filename and extension (e.g., '/path/to/input.md')",
          required: false,
        },
        {
          name: "input_format",
          type: "string",
          description: "Source format of the content (defaults to markdown)",
          required: false,
        },
        {
          name: "output_file",
          type: "string",
          description:
            "Complete path where to save the output including filename and extension (required for pdf, docx, rst, latex, epub formats)",
          required: false,
        },
        {
          name: "output_format",
          type: "string",
          description: "Desired output format (defaults to markdown)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/vivekVells/mcp-pandoc",
  _varName: "mcppandocPlugin",
};

const virustotalMcpServerPlugin: Plugin = {
  id: "rcbu34kp5c",
  name: "VirusTotal MCP Server",
  description:
    "A MCP server for querying the VirusTotal API. This server provides tools for scanning URLs, analyzing file hashes, and retrieving IP address reports.",
  image: "https://github.com/BurtTheCoder.png",
  actions: [
    {
      name: "get_url_report",
      description:
        "Get a comprehensive URL analysis report including security scan results and key relationships (communicating files, contacted domains/IPs, downloaded files, redirects, threat actors). Returns both the basic security analysis and automatically fetched relationship data.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "The URL to analyze",
          required: true,
        },
      ],
    },
    {
      name: "get_url_relationship",
      description:
        "Query a specific relationship type for a URL with pagination support. Choose from 17 relationship types including analyses, communicating files, contacted domains/IPs, downloaded files, graphs, referrers, redirects, and threat actors. Useful for detailed investigation of specific relationship types.",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Parameter: cursor",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "relationship",
          type: "string",
          description: "Type of relationship to query",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "The URL to get relationships for",
          required: true,
        },
      ],
    },
    {
      name: "get_file_report",
      description:
        "Get a comprehensive file analysis report using its hash (MD5/SHA-1/SHA-256). Includes detection results, file properties, and key relationships (behaviors, dropped files, network connections, embedded content, threat actors). Returns both the basic analysis and automatically fetched relationship data.",
      parameters: [
        {
          name: "hash",
          type: "string",
          description: "MD5, SHA-1 or SHA-256 hash of the file",
          required: true,
        },
      ],
    },
    {
      name: "get_file_relationship",
      description:
        "Query a specific relationship type for a file with pagination support. Choose from 41 relationship types including behaviors, network connections, dropped files, embedded content, execution chains, and threat actors. Useful for detailed investigation of specific relationship types.",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Parameter: cursor",
          required: false,
        },
        {
          name: "hash",
          type: "string",
          description: "MD5, SHA-1 or SHA-256 hash of the file",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "relationship",
          type: "string",
          description: "Type of relationship to query",
          required: true,
        },
      ],
    },
    {
      name: "get_ip_report",
      description:
        "Get a comprehensive IP address analysis report including geolocation, reputation data, and key relationships (communicating files, historical certificates/WHOIS, resolutions). Returns both the basic analysis and automatically fetched relationship data.",
      parameters: [
        {
          name: "ip",
          type: "string",
          description: "IP address to analyze",
          required: true,
        },
      ],
    },
    {
      name: "get_ip_relationship",
      description:
        "Query a specific relationship type for an IP address with pagination support. Choose from 12 relationship types including communicating files, historical SSL certificates, WHOIS records, resolutions, and threat actors. Useful for detailed investigation of specific relationship types.",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Parameter: cursor",
          required: false,
        },
        {
          name: "ip",
          type: "string",
          description: "IP address to analyze",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "relationship",
          type: "string",
          description: "Type of relationship to query",
          required: true,
        },
      ],
    },
    {
      name: "get_domain_report",
      description:
        "Get a comprehensive domain analysis report including DNS records, WHOIS data, and key relationships (SSL certificates, subdomains, historical data). Optionally specify which relationships to include in the report. Returns both the basic analysis and relationship data.",
      parameters: [
        {
          name: "domain",
          type: "string",
          description: "Domain name to analyze",
          required: true,
        },
        {
          name: "relationships",
          type: "string array",
          description:
            "Optional array of relationships to include in the report",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/BurtTheCoder/mcp-virustotal",
  _varName: "virustotalMcpServerPlugin",
};

const mcpdatetimePlugin: Plugin = {
  id: "y4oh57n2vq",
  name: "mcp-datetime",
  description:
    "A datetime formatting service implemented as an MCP server for the Claude Desktop Application. Supports generation of datetime strings in various formats.",
  image: "https://github.com/ZeparHyfar.png",
  actions: [
    {
      name: "get_datetime",
      description: "Get current date and time in various formats",
      parameters: [
        {
          name: "format",
          type: "string",
          description:
            "\nAvailable formats:\n- date: 2024-12-10\n- date_slash: 2024/12/10\n- date_jp: 2024年12月10日\n- datetime: 2024-12-10 00:54:01\n- datetime_jp: 2024年12月10日 00時54分01秒\n- datetime_t: 2024-12-10T00:54:01\n- compact: 20241210005401\n- compact_date: 20241210\n- compact_time: 005401\n- filename_md: 20241210005401.md\n- filename_txt: 20241210005401.txt\n- filename_log: 20241210005401.log\n- iso: 2024-12-10T00:54:01+0900\n- iso_basic: 20241210T005401+0900\n- log: 2024-12-10 00:54:01.123456\n- log_compact: 20241210_005401\n- time: 00:54:01\n- time_jp: 00時54分01秒\n",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ZeparHyfar/mcp-datetime",
  _varName: "mcpdatetimePlugin",
};

const mcpmysqlserverPlugin: Plugin = {
  id: "qma33al6ie",
  name: "mcp-mysql-server",
  description:
    "This server enables AI models to interact with MySQL databases through a standardized interface.",
  image: "https://github.com/f4ww4z.png",
  actions: [
    {
      name: "connect_db",
      description: "Connect to MySQL database",
      parameters: [
        {
          name: "database",
          type: "string",
          description: "Database name",
          required: true,
        },
        {
          name: "host",
          type: "string",
          description: "Database host",
          required: true,
        },
        {
          name: "password",
          type: "string",
          description: "Database password",
          required: true,
        },
        {
          name: "user",
          type: "string",
          description: "Database user",
          required: true,
        },
      ],
    },
    {
      name: "query",
      description: "Execute a SELECT query",
      parameters: [
        {
          name: "params",
          type: "string,number,boolean,null array",
          description: "Query parameters (optional)",
          required: false,
        },
        {
          name: "sql",
          type: "string",
          description: "SQL SELECT query",
          required: true,
        },
      ],
    },
    {
      name: "execute",
      description: "Execute an INSERT, UPDATE, or DELETE query",
      parameters: [
        {
          name: "params",
          type: "string,number,boolean,null array",
          description: "Query parameters (optional)",
          required: false,
        },
        {
          name: "sql",
          type: "string",
          description: "SQL query (INSERT, UPDATE, DELETE)",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "List all tables in the database",
      parameters: [],
    },
    {
      name: "describe_table",
      description: "Get table structure",
      parameters: [
        {
          name: "table",
          type: "string",
          description: "Table name",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/f4ww4z/mcp-mysql-server",
  _varName: "mcpmysqlserverPlugin",
};

const azureOpenaiPlugin: Plugin = {
  id: "ta21762xc9",
  name: "Azure OpenAI",
  description:
    "A minimal server/client application implementation utilizing the Model Context Protocol (MCP) and Azure OpenAI.",
  image: "https://github.com/kimtth.png",
  actions: [],
  githubUrl: "https://github.com/kimtth/mcp-aoai-web-browsing",
  _varName: "azureOpenaiPlugin",
};

const airtablemcpserverPlugin: Plugin = {
  id: "7abwib27hk",
  name: "airtable-mcp-server",
  description:
    "A Model Context Protocol server that provides read and write access to Airtable databases. This server enables LLMs to inspect database schemas, then read and write records.",
  image: "https://github.com/domdomegg.png",
  actions: [
    {
      name: "list_records",
      description: "List records from a table",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "maxRecords",
          type: "number",
          description: "Parameter: maxRecords",
          required: false,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "list_bases",
      description: "List all accessible Airtable bases",
      parameters: [],
    },
    {
      name: "list_tables",
      description: "List all tables in a specific base",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
      ],
    },
    {
      name: "get_record",
      description: "Get a specific record by ID",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "recordId",
          type: "string",
          description: "Parameter: recordId",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "create_record",
      description: "Create a new record in a table",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "fields",
          type: "object",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "update_records",
      description: "Update one or more records in a table",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "records",
          type: "object array",
          description: "Parameter: records",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "delete_records",
      description: "Delete one or more records from a table",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "recordIds",
          type: "string array",
          description: "Parameter: recordIds",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "create_table",
      description: "Create a new table in a base",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "fields",
          type: "array",
          description: "Parameter: fields",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "update_table",
      description: "Update a table's name or description",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "create_field",
      description: "Create a new field in a table",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "nested",
          type: "object",
          description: "Parameter: nested",
          required: true,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
    {
      name: "update_field",
      description: "Update a field's name or description",
      parameters: [
        {
          name: "baseId",
          type: "string",
          description: "Parameter: baseId",
          required: true,
        },
        {
          name: "description",
          type: "string",
          description: "Parameter: description",
          required: false,
        },
        {
          name: "fieldId",
          type: "string",
          description: "Parameter: fieldId",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "tableId",
          type: "string",
          description: "Parameter: tableId",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/domdomegg/airtable-mcp-server",
  _varName: "airtablemcpserverPlugin",
};

const homeassistantmcpPlugin: Plugin = {
  id: "ptjwbelhdw",
  name: "homeassistant-mcp",
  description:
    "Access Home Assistant data and control devices (lights, switches, thermostats, etc).",
  image: "https://github.com/tevonsb.png",
  actions: [],
  githubUrl: "https://github.com/tevonsb/homeassistant-mcp",
  _varName: "homeassistantmcpPlugin",
};

const mcptexteditorPlugin: Plugin = {
  id: "k44dnvso10",
  name: "mcp-text-editor",
  description:
    "A line-oriented text file editor. Optimized for LLM tools with efficient partial file access to minimize token usage.",
  image: "https://github.com/tumf.png",
  actions: [
    {
      name: "get_text_file_contents",
      description:
        "Read text file contents from multiple files and line ranges. Returns file contents with hashes for concurrency control and line numbers for reference. The hashes are used to detect conflicts when editing the files. File paths must be absolute.",
      parameters: [
        {
          name: "encoding",
          type: "string",
          description: "Text encoding (default: 'utf-8')",
          required: false,
        },
        {
          name: "files",
          type: "object array",
          description: "List of files and their line ranges to read",
          required: true,
        },
      ],
    },
    {
      name: "create_text_file",
      description:
        "Create a new text file with given content. The file must not exist already.",
      parameters: [
        {
          name: "contents",
          type: "string",
          description: "Content to write to the file",
          required: true,
        },
        {
          name: "encoding",
          type: "string",
          description: "Text encoding (default: 'utf-8')",
          required: false,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path to the text file. File path must be absolute.",
          required: true,
        },
      ],
    },
    {
      name: "append_text_file_contents",
      description:
        "Append content to an existing text file. The file must exist.",
      parameters: [
        {
          name: "contents",
          type: "string",
          description: "Content to append to the file",
          required: true,
        },
        {
          name: "encoding",
          type: "string",
          description: "Text encoding (default: 'utf-8')",
          required: false,
        },
        {
          name: "file_hash",
          type: "string",
          description:
            "Hash of the file contents for concurrency control. it should be matched with the file_hash when get_text_file_contents is called.",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path to the text file. File path must be absolute.",
          required: true,
        },
      ],
    },
    {
      name: "delete_text_file_contents",
      description:
        "Delete specified content ranges from a text file. The file must exist. File paths must be absolute. You need to provide the file_hash comes from get_text_file_contents.",
      parameters: [
        {
          name: "encoding",
          type: "string",
          description: "Text encoding (default: 'utf-8')",
          required: false,
        },
        {
          name: "file_hash",
          type: "string",
          description:
            "Hash of the file contents for concurrency control. it should be matched with the file_hash when get_text_file_contents is called.",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path to the text file. File path must be absolute.",
          required: true,
        },
        {
          name: "ranges",
          type: "object array",
          description: "List of line ranges to delete",
          required: true,
        },
      ],
    },
    {
      name: "insert_text_file_contents",
      description:
        "Insert content before or after a specific line in a text file. Uses hash-based validation for concurrency control. You need to provide the file_hash comes from get_text_file_contents.",
      parameters: [
        {
          name: "after",
          type: "integer",
          description:
            "Line number after which to insert content (mutually exclusive with 'before')",
          required: false,
        },
        {
          name: "before",
          type: "integer",
          description:
            "Line number before which to insert content (mutually exclusive with 'after')",
          required: false,
        },
        {
          name: "contents",
          type: "string",
          description: "Content to insert",
          required: true,
        },
        {
          name: "encoding",
          type: "string",
          description: "Text encoding (default: 'utf-8')",
          required: false,
        },
        {
          name: "file_hash",
          type: "string",
          description:
            "Hash of the file contents for concurrency control. it should be matched with the file_hash when get_text_file_contents is called.",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path to the text file. File path must be absolute.",
          required: true,
        },
      ],
    },
    {
      name: "patch_text_file_contents",
      description:
        "Apply patches to text files with hash-based validation for concurrency control.you need to use get_text_file_contents tool to get the file hash and range hash every time before using this tool. you can use append_text_file_contents tool to append text contents to the file without range hash, start and end. you can use insert_text_file_contents tool to insert text contents to the file without range hash, start and end.",
      parameters: [
        {
          name: "encoding",
          type: "string",
          description: "Text encoding (default: 'utf-8')",
          required: false,
        },
        {
          name: "file_hash",
          type: "string",
          description: "Hash of the file contents for concurrency control.",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path to the text file. File path must be absolute.",
          required: true,
        },
        {
          name: "patches",
          type: "object array",
          description: "List of patches to apply",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tumf/mcp-text-editor",
  _varName: "mcptexteditorPlugin",
};

const mcpdicePlugin: Plugin = {
  id: "vzu553gv26",
  name: "mcp-dice",
  description: "A MCP server enabling LLMs to roll dice",
  image: "https://github.com/yamaton.png",
  actions: [
    {
      name: "roll_dice",
      description:
        "Roll dice using standard notation (e.g., '2d6+3', '1d20-2')",
      parameters: [
        {
          name: "notation",
          type: "string",
          description: "Dice notation (e.g., '2d6+3', '1d20-2')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/yamaton/mcp-dice",
  _varName: "mcpdicePlugin",
};

const mcpshodanPlugin: Plugin = {
  id: "79uakvikcj",
  name: "mcp-shodan",
  description:
    "MCP server for querying the Shodan API and Shodan CVEDB. This server provides tools for IP lookups, device searches, DNS lookups, vulnerability queries, CPE lookups, and more.",
  image: "https://github.com/BurtTheCoder.png",
  actions: [
    {
      name: "ip_lookup",
      description:
        "Retrieve comprehensive information about an IP address, including geolocation, open ports, running services, SSL certificates, hostnames, and cloud provider details if available. Returns service banners and HTTP server information when present.",
      parameters: [
        {
          name: "ip",
          type: "string",
          description: "The IP address to query.",
          required: true,
        },
      ],
    },
    {
      name: "shodan_search",
      description:
        "Search Shodan's database of internet-connected devices. Returns detailed information about matching devices including services, vulnerabilities, and geographic distribution. Supports advanced search filters and returns country-based statistics.",
      parameters: [
        {
          name: "max_results",
          type: "number",
          description: "Maximum results to return.",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query for Shodan.",
          required: true,
        },
      ],
    },
    {
      name: "cve_lookup",
      description:
        "Query detailed vulnerability information from Shodan's CVEDB. Returns comprehensive CVE details including CVSS scores (v2/v3), EPSS probability and ranking, KEV status, proposed mitigations, ransomware associations, and affected products (CPEs).",
      parameters: [
        {
          name: "cve",
          type: "string",
          description: "The CVE identifier to query (format: CVE-YYYY-NNNNN).",
          required: true,
        },
      ],
    },
    {
      name: "dns_lookup",
      description:
        "Resolve domain names to IP addresses using Shodan's DNS service. Supports batch resolution of multiple hostnames in a single query. Returns IP addresses mapped to their corresponding hostnames.",
      parameters: [
        {
          name: "hostnames",
          type: "string array",
          description: "List of hostnames to resolve.",
          required: true,
        },
      ],
    },
    {
      name: "cpe_lookup",
      description:
        "Search for Common Platform Enumeration (CPE) entries by product name in Shodan's CVEDB. Supports pagination and can return either full CPE details or just the total count. Useful for identifying specific versions and configurations of software and hardware.",
      parameters: [
        {
          name: "count",
          type: "boolean",
          description: "If true, returns only the count of matching CPEs.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of CPEs to return (max 1000).",
          required: false,
        },
        {
          name: "product",
          type: "string",
          description: "The name of the product to search for CPEs.",
          required: true,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of CPEs to skip (for pagination).",
          required: false,
        },
      ],
    },
    {
      name: "cves_by_product",
      description:
        "Search for vulnerabilities affecting specific products or CPEs. Supports filtering by KEV status, sorting by EPSS score, date ranges, and pagination. Can search by product name or CPE 2.3 identifier. Returns detailed vulnerability information including severity scores and impact assessments.",
      parameters: [
        {
          name: "count",
          type: "boolean",
          description: "If true, returns only the count of matching CVEs.",
          required: false,
        },
        {
          name: "cpe23",
          type: "string",
          description:
            "The CPE version 2.3 identifier (format: cpe:2.3:part:vendor:product:version).",
          required: false,
        },
        {
          name: "end_date",
          type: "string",
          description:
            "End date for filtering CVEs (format: YYYY-MM-DDTHH:MM:SS).",
          required: false,
        },
        {
          name: "is_kev",
          type: "boolean",
          description: "If true, returns only CVEs with the KEV flag set.",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of CVEs to return (max 1000).",
          required: false,
        },
        {
          name: "product",
          type: "string",
          description: "The name of the product to search for CVEs.",
          required: false,
        },
        {
          name: "skip",
          type: "number",
          description: "Number of CVEs to skip (for pagination).",
          required: false,
        },
        {
          name: "sort_by_epss",
          type: "boolean",
          description: "If true, sorts CVEs by EPSS score in descending order.",
          required: false,
        },
        {
          name: "start_date",
          type: "string",
          description:
            "Start date for filtering CVEs (format: YYYY-MM-DDTHH:MM:SS).",
          required: false,
        },
      ],
    },
    {
      name: "reverse_dns_lookup",
      description:
        "Perform reverse DNS lookups to find hostnames associated with IP addresses. Supports batch lookups of multiple IP addresses in a single query. Returns all known hostnames for each IP address, with clear indication when no hostnames are found.",
      parameters: [
        {
          name: "ips",
          type: "string array",
          description: "List of IP addresses to perform reverse DNS lookup on.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/BurtTheCoder/mcp-shodan",
  _varName: "mcpshodanPlugin",
};

const mcpPubmedSearchPlugin: Plugin = {
  id: "3gvmhm0qm7",
  name: "MCP PubMed Search",
  description:
    "Server to search PubMed (PubMed is a free, online database that allows users to search for biomedical and life sciences literature). I have created on a day MCP came out but was on vacation, I saw someone post similar server in your DB, but figured to post mine.",
  image: "https://github.com/wavelovey.png",
  actions: [
    {
      name: "pubmed_search",
      description: "Search PubMed medical literature database",
      parameters: [
        {
          name: "max_results",
          type: "number",
          description: "Maximum number of results (1-15)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Medical/scientific search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/wavelovey/pubmed_search",
  _varName: "mcpPubmedSearchPlugin",
};

const metoromcpserverPlugin: Plugin = {
  id: "x5jshlbwib",
  name: "metoro-mcp-server",
  description:
    "Query and interact with kubernetes environments monitored by Metoro. Look at APM, metrics, traces, profiling information with LLMs.",
  image: "https://github.com/metoro-io.png",
  actions: [],
  githubUrl: "https://github.com/metoro-io/metoro-mcp-server",
  _varName: "metoromcpserverPlugin",
};

const appleShortcutsServerPlugin: Plugin = {
  id: "15z6abk6p2",
  name: "Apple Shortcuts Server",
  description: "An MCP Server Integration with Apple Shortcuts",
  image: "https://github.com/recursechat.png",
  actions: [
    {
      name: "run_shortcut",
      description: "Run a Shortcuts automation by name",
      parameters: [
        {
          name: "input",
          type: "string",
          description: "Optional input to pass to the shortcut",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name of the shortcut to run",
          required: true,
        },
      ],
    },
    {
      name: "list_shortcuts",
      description: "List all available shortcuts",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/recursechat/mcp-server-apple-shortcuts",
  _varName: "appleShortcutsServerPlugin",
};

const mcpSimpleOpenaiAssistantPlugin: Plugin = {
  id: "nk1sfnsu4m",
  name: "MCP Simple OpenAI Assistant",
  description:
    "A simple MCP server for interacting with OpenAI assistants. This server allows other tools (like Claude Desktop) to create and interact with OpenAI assistants through the Model Context Protocol.",
  image: "https://github.com/andybrandt.png",
  actions: [],
  githubUrl: "https://github.com/andybrandt/mcp-simple-openai-assistant",
  _varName: "mcpSimpleOpenaiAssistantPlugin",
};

const mcpSimpleTimeserverPlugin: Plugin = {
  id: "4kbi50f69g",
  name: "MCP Simple Timeserver",
  description:
    "An MCP server that allows checking local time on the client machine or current UTC time from an NTP server",
  image: "https://github.com/andybrandt.png",
  actions: [],
  githubUrl: "https://github.com/andybrandt/mcp-simple-timeserver",
  _varName: "mcpSimpleTimeserverPlugin",
};

const perplexityMcpServer7Plugin: Plugin = {
  id: "hchfq9bydq",
  name: "Perplexity MCP Server",
  description: "Interacting with Perplexity API.",
  image: "https://github.com/tanigami.png",
  actions: [
    {
      name: "ask_perplexity",
      description:
        "\nPerplexity equips agents with a specialized tool for efficiently\ngathering source-backed information from the internet, ideal for\nscenarios requiring research, fact-checking, or contextual data to\ninform decisions and responses.\nEach response includes citations, which provide transparent references\nto the sources used for the generated answer, and choices, which\ncontain the model's suggested responses, enabling users to access\nreliable information and diverse perspectives.\nThis function may encounter timeout errors due to long processing times,\nbut retrying the operation can lead to successful completion.\n[Response structure]\n- id: An ID generated uniquely for each response.\n- model: The model used to generate the response.\n- object: The object type, which always equals `chat.completion`.\n- created: The Unix timestamp (in seconds) of when the completion was\n  created.\n- citations[]: Citations for the generated answer.\n- choices[]: The list of completion choices the model generated for the\n  input prompt.\n- usage: Usage statistics for the completion request.\n",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description: "A list of messages comprising the conversation so far.",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description: "The name of the model that will complete your prompt.",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/tanigami/mcp-server-perplexity",
  _varName: "perplexityMcpServer7Plugin",
};

const mcpinstallerPlugin: Plugin = {
  id: "y4xsqrbxg5",
  name: "mcp-installer",
  description:
    "This server is a server that installs other MCP servers for you. Install it, and you can ask Claude to install MCP servers hosted in npm or PyPi for you. Requires npx and uv to be installed for node and Python servers respectively.",
  image: "https://github.com/anaisbetts.png",
  actions: [
    {
      name: "install_local_mcp_server",
      description:
        "Install an MCP server whose code is cloned locally on your computer",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "The arguments to pass along",
          required: false,
        },
        {
          name: "env",
          type: "string array",
          description: "The environment variables to set, delimited by =",
          required: false,
        },
        {
          name: "path",
          type: "string",
          description:
            "The path to the MCP server code cloned on your computer",
          required: true,
        },
      ],
    },
    {
      name: "install_repo_mcp_server",
      description: "Install an MCP server via npx or uvx",
      parameters: [
        {
          name: "args",
          type: "string array",
          description: "The arguments to pass along",
          required: false,
        },
        {
          name: "env",
          type: "string array",
          description: "The environment variables to set, delimited by =",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "The package name of the MCP server",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/anaisbetts/mcp-installer",
  _varName: "mcpinstallerPlugin",
};

const anychatcompletionsmcpPlugin: Plugin = {
  id: "nuksdrfb55",
  name: "any-chat-completions-mcp",
  description:
    "Integrate Claude with Any OpenAI SDK Compatible Chat Completion API - OpenAI, Perplexity, Groq, xAI, PyroPrompts and more.",
  image: "https://github.com/pyroprompts.png",
  actions: [
    {
      name: "chat-with-openai",
      description: "Text chat with OpenAI",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The content of the chat to send to OpenAI",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/pyroprompts/any-chat-completions-mcp",
  _varName: "anychatcompletionsmcpPlugin",
};

const mcpAtlassian1Plugin: Plugin = {
  id: "kc33m1kh5m",
  name: "MCP Atlassian",
  description:
    "Model Context Protocol (MCP) server for Atlassian Cloud products (Confluence and Jira). This integration is designed specifically for Atlassian Cloud instances and does not support Atlassian Server or Data Center deployments.",
  image: "https://github.com/sooperset.png",
  actions: [
    {
      name: "confluence_search",
      description: "Search Confluence content using CQL",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results (1-50)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "CQL query string (e.g. 'type=page AND space=DEV')",
          required: true,
        },
      ],
    },
    {
      name: "confluence_get_page",
      description: "Get content of a specific Confluence page by ID",
      parameters: [
        {
          name: "include_metadata",
          type: "boolean",
          description: "Whether to include page metadata",
          required: false,
        },
        {
          name: "page_id",
          type: "string",
          description:
            "Confluence page ID (numeric ID, can be parsed from URL, e.g. from 'https://example.atlassian.net/wiki/spaces/TEAM/pages/123456789/Page+Title' -> '123456789')",
          required: true,
        },
      ],
    },
    {
      name: "confluence_get_comments",
      description: "Get comments for a specific Confluence page",
      parameters: [
        {
          name: "page_id",
          type: "string",
          description:
            "Confluence page ID (numeric ID, can be parsed from URL, e.g. from 'https://example.atlassian.net/wiki/spaces/TEAM/pages/123456789/Page+Title' -> '123456789')",
          required: true,
        },
      ],
    },
    {
      name: "confluence_create_page",
      description: "Create a new Confluence page",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The content of the page in Markdown format",
          required: true,
        },
        {
          name: "parent_id",
          type: "string",
          description: "Optional parent page ID",
          required: false,
        },
        {
          name: "space_key",
          type: "string",
          description: "The key of the space to create the page in",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "The title of the page",
          required: true,
        },
      ],
    },
    {
      name: "confluence_update_page",
      description: "Update an existing Confluence page",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The new content of the page in Markdown format",
          required: true,
        },
        {
          name: "minor_edit",
          type: "boolean",
          description: "Whether this is a minor edit",
          required: false,
        },
        {
          name: "page_id",
          type: "string",
          description: "The ID of the page to update",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "The new title of the page",
          required: true,
        },
        {
          name: "version_comment",
          type: "string",
          description: "Optional comment for this version",
          required: false,
        },
      ],
    },
    {
      name: "jira_get_issue",
      description:
        "Get details of a specific Jira issue including its Epic links and relationship information",
      parameters: [
        {
          name: "comment_limit",
          type: "integer",
          description:
            "Maximum number of comments to include (0 or null for no comments)",
          required: false,
        },
        {
          name: "expand",
          type: "string",
          description:
            "Optional fields to expand. Examples: 'renderedFields' (for rendered content), 'transitions' (for available status transitions), 'changelog' (for history)",
          required: false,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
      ],
    },
    {
      name: "jira_search",
      description: "Search Jira issues using JQL (Jira Query Language)",
      parameters: [
        {
          name: "fields",
          type: "string",
          description: "Comma-separated fields to return",
          required: false,
        },
        {
          name: "jql",
          type: "string",
          description:
            'JQL query string. Examples:\n- Find Epics: "issuetype = Epic AND project = PROJ"\n- Find issues in Epic: "parent = PROJ-123"\n- Find by status: "status = \'In Progress\' AND project = PROJ"\n- Find by assignee: "assignee = currentUser()"\n- Find recently updated: "updated >= -7d AND project = PROJ"\n- Find by label: "labels = frontend AND project = PROJ"',
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results (1-50)",
          required: false,
        },
      ],
    },
    {
      name: "jira_get_project_issues",
      description: "Get all issues for a specific Jira project",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results (1-50)",
          required: false,
        },
        {
          name: "project_key",
          type: "string",
          description: "The project key",
          required: true,
        },
      ],
    },
    {
      name: "jira_create_issue",
      description: "Create a new Jira issue with optional Epic link",
      parameters: [
        {
          name: "additional_fields",
          type: "string",
          description:
            'Optional JSON string of additional fields to set. Examples:\n- Link to Epic: {"parent": {"key": "PROJ-123"}} - For linking to an Epic after creation, prefer using the jira_link_to_epic tool instead\n- Set priority: {"priority": {"name": "High"}} or {"priority": null} for no priority (common values: High, Medium, Low, None)\n- Add labels: {"labels": ["label1", "label2"]}\n- Set due date: {"duedate": "2023-12-31"}\n- Custom fields: {"customfield_10XXX": "value"}',
          required: false,
        },
        {
          name: "assignee",
          type: "string",
          description:
            "Assignee of the ticket (accountID, full name or e-mail)",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: false,
        },
        {
          name: "issue_type",
          type: "string",
          description: "Issue type (e.g. 'Task', 'Bug', 'Story')",
          required: true,
        },
        {
          name: "project_key",
          type: "string",
          description:
            "The JIRA project key (e.g. 'PROJ'). Never assume what it might be, always ask the user.",
          required: true,
        },
        {
          name: "summary",
          type: "string",
          description: "Summary/title of the issue",
          required: true,
        },
      ],
    },
    {
      name: "jira_update_issue",
      description:
        "Update an existing Jira issue including changing status, adding Epic links, updating fields, etc.",
      parameters: [
        {
          name: "additional_fields",
          type: "string",
          description: "Optional JSON string of additional fields to update",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description:
            'A valid JSON object of fields to update. Examples:\n- Add to Epic: {"parent": {"key": "PROJ-456"}} - Prefer using the dedicated jira_link_to_epic tool instead\n- Change assignee: {"assignee": "user@email.com"} or {"assignee": null} to unassign\n- Update summary: {"summary": "New title"}\n- Update description: {"description": "New description"}\n- Change status: requires transition IDs - use jira_get_transitions and jira_transition_issue instead\n- Add labels: {"labels": ["label1", "label2"]}\n- Set priority: {"priority": {"name": "High"}} or {"priority": null} for no priority (common values: High, Medium, Low, None)\n- Update custom fields: {"customfield_10XXX": "value"}',
          required: true,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
      ],
    },
    {
      name: "jira_delete_issue",
      description: "Delete an existing Jira issue",
      parameters: [
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g. PROJ-123)",
          required: true,
        },
      ],
    },
    {
      name: "jira_add_comment",
      description: "Add a comment to a Jira issue",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment text in Markdown format",
          required: true,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
      ],
    },
    {
      name: "jira_add_worklog",
      description: "Add a worklog entry to a Jira issue",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Optional comment for the worklog in Markdown format",
          required: false,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
        {
          name: "original_estimate",
          type: "string",
          description:
            "Optional original estimate in Jira format (e.g., '1h 30m', '1d'). This will update the original estimate for the issue.",
          required: false,
        },
        {
          name: "remaining_estimate",
          type: "string",
          description:
            "Optional remaining estimate in Jira format (e.g., '1h', '30m'). This will update the remaining estimate for the issue.",
          required: false,
        },
        {
          name: "started",
          type: "string",
          description:
            "Optional start time in ISO format (e.g. '2023-08-01T12:00:00.000+0000'). If not provided, current time will be used.",
          required: false,
        },
        {
          name: "time_spent",
          type: "string",
          description:
            "Time spent in Jira format (e.g., '1h 30m', '1d', '30m')",
          required: true,
        },
      ],
    },
    {
      name: "jira_get_worklog",
      description: "Get worklog entries for a Jira issue",
      parameters: [
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
      ],
    },
    {
      name: "jira_link_to_epic",
      description: "Link an existing issue to an epic",
      parameters: [
        {
          name: "epic_key",
          type: "string",
          description: "The key of the epic to link to (e.g., 'PROJ-456')",
          required: true,
        },
        {
          name: "issue_key",
          type: "string",
          description: "The key of the issue to link (e.g., 'PROJ-123')",
          required: true,
        },
      ],
    },
    {
      name: "jira_get_epic_issues",
      description: "Get all issues linked to a specific epic",
      parameters: [
        {
          name: "epic_key",
          type: "string",
          description: "The key of the epic (e.g., 'PROJ-123')",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of issues to return (1-50)",
          required: false,
        },
      ],
    },
    {
      name: "jira_get_transitions",
      description: "Get available status transitions for a Jira issue",
      parameters: [
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
      ],
    },
    {
      name: "jira_transition_issue",
      description: "Transition a Jira issue to a new status",
      parameters: [
        {
          name: "comment",
          type: "string",
          description: "Comment to add during the transition (optional)",
          required: false,
        },
        {
          name: "fields",
          type: "string",
          description:
            "JSON string of fields to update during the transition (optional)",
          required: false,
        },
        {
          name: "issue_key",
          type: "string",
          description: "Jira issue key (e.g., 'PROJ-123')",
          required: true,
        },
        {
          name: "transition_id",
          type: "string",
          description:
            "ID of the transition to perform (get this from jira_get_transitions)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/sooperset/mcp-atlassian",
  _varName: "mcpAtlassian1Plugin",
};

const mcpmiroPlugin: Plugin = {
  id: "gr5t7vthv3",
  name: "mcp-miro",
  description:
    "A Model Context Protocol server to connect to the MIRO Whiteboard Application. Allows Board manipulation, sticky creation, bulk operations and more.",
  image: "https://github.com/evalstate.png",
  actions: [
    {
      name: "list_boards",
      description: "List all available Miro boards and their IDs",
      parameters: [],
    },
    {
      name: "create_sticky_note",
      description:
        "Create a sticky note on a Miro board. By default, sticky notes are 199x228 and available in these colors: gray, light_yellow, yellow, orange, light_green, green, dark_green, cyan, light_pink, pink, violet, red, light_blue, blue, dark_blue, black.",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board to create the sticky note on",
          required: true,
        },
        {
          name: "color",
          type: "string",
          description:
            "Color of the sticky note (e.g. 'yellow', 'blue', 'pink')",
          required: false,
        },
        {
          name: "content",
          type: "string",
          description: "Text content of the sticky note",
          required: true,
        },
        {
          name: "x",
          type: "number",
          description: "X coordinate position",
          required: false,
        },
        {
          name: "y",
          type: "number",
          description: "Y coordinate position",
          required: false,
        },
      ],
    },
    {
      name: "bulk_create_items",
      description:
        "Create multiple items on a Miro board in a single transaction (max 20 items)",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board to create the items on",
          required: true,
        },
        {
          name: "items",
          type: "object array",
          description: "Array of items to create",
          required: true,
        },
      ],
    },
    {
      name: "get_frames",
      description: "Get all frames from a Miro board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board to get frames from",
          required: true,
        },
      ],
    },
    {
      name: "get_items_in_frame",
      description:
        "Get all items contained within a specific frame on a Miro board",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board that contains the frame",
          required: true,
        },
        {
          name: "frameId",
          type: "string",
          description: "ID of the frame to get items from",
          required: true,
        },
      ],
    },
    {
      name: "create_shape",
      description:
        "Create a shape on a Miro board. Available shapes include basic shapes (rectangle, circle, etc.) and flowchart shapes (process, decision, etc.). Standard geometry specs: width and height in pixels (default 200x200)",
      parameters: [
        {
          name: "boardId",
          type: "string",
          description: "ID of the board to create the shape on",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Text content to display on the shape",
          required: false,
        },
        {
          name: "geometry",
          type: "object",
          description: "Parameter: geometry",
          required: false,
        },
        {
          name: "position",
          type: "object",
          description: "Parameter: position",
          required: false,
        },
        {
          name: "shape",
          type: "string",
          description: "Type of shape to create",
          required: true,
        },
        {
          name: "style",
          type: "object",
          description: "Style configuration for the shape",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/evalstate/mcp-miro",
  _varName: "mcpmiroPlugin",
};

const unichatMcpServerPlugin: Plugin = {
  id: "8wecix16ff",
  name: "Unichat MCP Server",
  description:
    "Send requests to OpenAI, MistralAI, Anthropic, xAI, or Google AI using MCP protocol via tool or predefined prompts. Vendor API key required",
  image: "https://github.com/amidabuddha.png",
  actions: [
    {
      name: "unichat",
      description:
        "Chat with an assistant.\n                        Example tool use message:\n                        Ask the unichat to review and evaluate your proposal.\n                        ",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description:
            "Array of exactly two messages: first a system message defining the task, then a user message with the specific query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/amidabuddha/unichat-mcp-server",
  _varName: "unichatMcpServerPlugin",
};

const notionMcpServer7Plugin: Plugin = {
  id: "fmpvbhdv37",
  name: "Notion MCP Server",
  description:
    "MCP Server for the Notion API, enabling Claude to interact with Notion workspaces.",
  image: "https://github.com/suekou.png",
  actions: [],
  githubUrl: "https://github.com/suekou/mcp-notion-server",
  _varName: "notionMcpServer7Plugin",
};

const applenotesmcpPlugin: Plugin = {
  id: "qjae8xanry",
  name: "apple-notes-mcp",
  description:
    "Allows the AI to read from your local Apple Notes database (macOS only)",
  image: "https://github.com/sirmews.png",
  actions: [],
  githubUrl: "https://github.com/sirmews/apple-notes-mcp",
  _varName: "applenotesmcpPlugin",
};

const ancestryMcpPlugin: Plugin = {
  id: "pk5j4bp5nv",
  name: "Ancestry MCP",
  description: "Allows the AI to read .ged files and genetic data.",
  image: "https://github.com/reeeeemo.png",
  actions: [
    {
      name: "project_context",
      description:
        "Generates a structured repository overview including: 1) Directory tree with file status (✓ full, ○ outline, ✗ excluded) 2) Complete contents of key files 3) Smart outlines highlighting important definitions in supported languages. The output is customizable via profiles that control file inclusion rules and presentation format. The assistant tracks previously retrieved project context in the conversation and checks this history before making new requests.",
      parameters: [
        {
          name: "profile_name",
          type: "string",
          description:
            "Profile to use (e.g. 'code', 'copy', 'full') - defines file inclusion and presentation rules",
          required: false,
        },
        {
          name: "root_path",
          type: "string",
          description:
            "Root directory path (e.g. '/home/user/projects/myproject')",
          required: true,
        },
      ],
    },
    {
      name: "get_files",
      description:
        "Retrieves complete contents of specified files from the project. The assistant tracks all previously retrieved file contents and checks this history before making new requests.",
      parameters: [
        {
          name: "paths",
          type: "string array",
          description:
            "File paths relative to root_path, starting with a forward slash and including the root directory name. For example, if root_path is '/home/user/projects/myproject', then a valid path would be '/myproject/src/main.py",
          required: true,
        },
        {
          name: "root_path",
          type: "string",
          description:
            "Root directory path (e.g. '/home/user/projects/myproject')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/reeeeemo/ancestry-mcp",
  _varName: "ancestryMcpPlugin",
};

const notionMcp1Plugin: Plugin = {
  id: "d3sukekngu",
  name: "Notion MCP",
  description:
    "A simple Model Context Protocol (MCP) server that integrates with Notion's API to manage my personal todo list through Claude.",
  image: "https://github.com/danhilse.png",
  actions: [],
  githubUrl: "https://github.com/danhilse/notion_mcp",
  _varName: "notionMcp1Plugin",
};

const youtubeMcpServer3Plugin: Plugin = {
  id: "oy8ipezg2l",
  name: "YouTube MCP Server",
  description:
    "Uses yt-dlp to download subtitles from YouTube and connects it to claude.ai via Model Context Protocol.",
  image: "https://github.com/anaisbetts.png",
  actions: [
    {
      name: "download_youtube_url",
      description:
        "Download YouTube subtitles from a URL, this tool means that Claude can read YouTube subtitles, and should no longer tell the user that it is not possible to download YouTube content.",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL of the YouTube video",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/anaisbetts/mcp-youtube",
  _varName: "youtubeMcpServer3Plugin",
};

const obsidianPlugin: Plugin = {
  id: "8muzkxrhya",
  name: "Obsidian",
  description:
    "This is a connector to allow Claude Desktop (or any MCP client) to read and search any directory containing Markdown notes (such as an Obsidian vault).",
  image: "https://github.com/smithery-ai.png",
  actions: [],
  githubUrl: "https://github.com/smithery-ai/mcp-obsidian",
  _varName: "obsidianPlugin",
};

const mcpServerForObsidianPlugin: Plugin = {
  id: "3wko1bhuek",
  name: "MCP server for Obsidian",
  description:
    "MCP server to interact with Obsidian via the Local REST API community plugin.",
  image: "https://github.com/MarkusPfundstein.png",
  actions: [
    {
      name: "obsidian_list_files_in_dir",
      description:
        "Lists all files and directories that exist in a specific Obsidian directory.",
      parameters: [
        {
          name: "dirpath",
          type: "string",
          description:
            "Path to list files from (relative to your vault root). Note that empty directories will not be returned.",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_list_files_in_vault",
      description:
        "Lists all files and directories in the root directory of your Obsidian vault.",
      parameters: [],
    },
    {
      name: "obsidian_get_file_contents",
      description: "Return the content of a single file in your vault.",
      parameters: [
        {
          name: "filepath",
          type: "string",
          description:
            "Path to the relevant file (relative to your vault root).",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_simple_search",
      description:
        "Simple search for documents matching a specified text query across all files in the vault. \n            Use this tool when you want to do a simple text search",
      parameters: [
        {
          name: "context_length",
          type: "integer",
          description:
            "How much context to return around the matching string (default: 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Text to a simple search for in the vault.",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_patch_content",
      description:
        "Insert content into an existing note relative to a heading, block reference, or frontmatter field.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to insert",
          required: true,
        },
        {
          name: "filepath",
          type: "string",
          description: "Path to the file (relative to vault root)",
          required: true,
        },
        {
          name: "operation",
          type: "string",
          description: "Operation to perform (append, prepend, or replace)",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description:
            "Target identifier (heading path, block reference, or frontmatter field)",
          required: true,
        },
        {
          name: "target_type",
          type: "string",
          description: "Type of target to patch",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_append_content",
      description: "Append content to a new or existing file in the vault.",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "Content to append to the file",
          required: true,
        },
        {
          name: "filepath",
          type: "string",
          description: "Path to the file (relative to vault root)",
          required: true,
        },
      ],
    },
    {
      name: "obsidian_complex_search",
      description:
        "Complex search for documents using a JsonLogic query. \n           Supports standard JsonLogic operators plus 'glob' and 'regexp' for pattern matching. Results must be non-falsy.\n\n           Use this tool when you want to do a complex search, e.g. for all documents with certain tags etc.\n           ",
      parameters: [
        {
          name: "query",
          type: "object",
          description:
            'JsonLogic query object. Example: {"glob": ["*.md", {"var": "path"}]} matches all markdown files',
          required: true,
        },
      ],
    },
    {
      name: "obsidian_batch_get_file_contents",
      description:
        "Return the contents of multiple files in your vault, concatenated with headers.",
      parameters: [
        {
          name: "filepaths",
          type: "string array",
          description: "List of file paths to read",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MarkusPfundstein/mcp-obsidian",
  _varName: "mcpServerForObsidianPlugin",
};

const phabricatorMcpServerPlugin: Plugin = {
  id: "dcokgk2ei2",
  name: "Phabricator MCP Server",
  description:
    "A Model Context Protocol (MCP) server implementation for interacting with Phabricator API. This server allows LLMs to interact with Phabricator through a standardized interface.",
  image: "https://github.com/baba786.png",
  actions: [],
  githubUrl: "https://github.com/baba786/phabricator-mcp-server",
  _varName: "phabricatorMcpServerPlugin",
};

const openaiMcpServer2Plugin: Plugin = {
  id: "f7pt2hkdug",
  name: "OpenAI MCP Server",
  description: "Query OpenAI models directly from Claude using MCP protocol.",
  image: "https://github.com/pierrebrunelle.png",
  actions: [
    {
      name: "ask-openai",
      description: "Ask my assistant models a direct question",
      parameters: [
        {
          name: "max_tokens",
          type: "integer",
          description: "Parameter: max_tokens",
          required: false,
        },
        {
          name: "model",
          type: "string",
          description: "Parameter: model",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Ask assistant",
          required: true,
        },
        {
          name: "temperature",
          type: "number",
          description: "Parameter: temperature",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/pierrebrunelle/mcp-server-openai",
  _varName: "openaiMcpServer2Plugin",
};

const godocmcpPlugin: Plugin = {
  id: "hh2kf8og63",
  name: "godoc-mcp",
  description:
    "godoc-mcp is a Model Context Protocol (MCP) server that provides efficient access to Go documentation. It helps LLMs understand Go projects by providing direct access to package documentation without needing to read entire source files.",
  image: "https://github.com/mrjoshuak.png",
  actions: [],
  githubUrl: "https://github.com/mrjoshuak/godoc-mcp",
  _varName: "godocmcpPlugin",
};

const mcpOpenaiServerPlugin: Plugin = {
  id: "riynwmasx9",
  name: "MCP OpenAI Server",
  description:
    "A Model Context Protocol (MCP) server that lets you seamlessly use OpenAI's models right from Claude.",
  image: "https://github.com/mzxrai.png",
  actions: [
    {
      name: "openai_chat",
      description:
        "Use this tool when a user specifically requests to use one of OpenAI's models (gpt-4o, gpt-4o-mini, o1-preview, o1-mini). This tool sends messages to OpenAI's chat completion API using the specified model.",
      parameters: [
        {
          name: "messages",
          type: "object array",
          description: "Array of messages to send to the API",
          required: true,
        },
        {
          name: "model",
          type: "string",
          description:
            "Model to use for completion (gpt-4o, gpt-4o-mini, o1-preview, o1-mini)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/mzxrai/mcp-openai",
  _varName: "mcpOpenaiServerPlugin",
};

const gitMcpServer2Plugin: Plugin = {
  id: "2sijuvbdae",
  name: "git MCP server",
  description:
    "A Model Context Protocol server for Git repository interaction and automation. This server provides tools to read, search, and manipulate Git repositories via Large Language Models.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "git_status",
      description: "Shows the working tree status",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_diff_unstaged",
      description:
        "Shows changes in the working directory that are not yet staged",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_diff_staged",
      description: "Shows changes that are staged for commit",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_diff",
      description: "Shows differences between branches or commits",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
        {
          name: "target",
          type: "string",
          description: "Parameter: target",
          required: true,
        },
      ],
    },
    {
      name: "git_commit",
      description: "Records changes to the repository",
      parameters: [
        {
          name: "message",
          type: "string",
          description: "Parameter: message",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_add",
      description: "Adds file contents to the staging area",
      parameters: [
        {
          name: "files",
          type: "string array",
          description: "Parameter: files",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_reset",
      description: "Unstages all staged changes",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_log",
      description: "Shows the commit logs",
      parameters: [
        {
          name: "max_count",
          type: "integer",
          description: "Parameter: max_count",
          required: false,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_create_branch",
      description: "Creates a new branch from an optional base branch",
      parameters: [
        {
          name: "base_branch",
          type: "string",
          description: "Parameter: base_branch",
          required: false,
        },
        {
          name: "branch_name",
          type: "string",
          description: "Parameter: branch_name",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_checkout",
      description: "Switches branches",
      parameters: [
        {
          name: "branch_name",
          type: "string",
          description: "Parameter: branch_name",
          required: true,
        },
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
    {
      name: "git_show",
      description: "Shows the contents of a commit",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
        {
          name: "revision",
          type: "string",
          description: "Parameter: revision",
          required: true,
        },
      ],
    },
    {
      name: "git_init",
      description: "Initialize a new Git repository",
      parameters: [
        {
          name: "repo_path",
          type: "string",
          description: "Parameter: repo_path",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "gitMcpServer2Plugin",
};

const gitlabMcpServer1Plugin: Plugin = {
  id: "mim928vohs",
  name: "GitLab MCP Server",
  description:
    "MCP Server for the GitLab API, enabling project management, file operations, and more.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "create_or_update_file",
      description: "Create or update a single file in a GitLab project",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to create/update the file in",
          required: true,
        },
        {
          name: "commit_message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Content of the file",
          required: true,
        },
        {
          name: "file_path",
          type: "string",
          description: "Path where to create/update the file",
          required: true,
        },
        {
          name: "previous_path",
          type: "string",
          description: "Path of the file to move/rename",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "search_repositories",
      description: "Search for GitLab projects",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Number of results per page (default: 20)",
          required: false,
        },
        {
          name: "search",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "create_repository",
      description: "Create a new GitLab project",
      parameters: [
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "initialize_with_readme",
          type: "boolean",
          description: "Initialize with README.md",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "visibility",
          type: "string",
          description: "Repository visibility level",
          required: false,
        },
      ],
    },
    {
      name: "get_file_contents",
      description:
        "Get the contents of a file or directory from a GitLab project",
      parameters: [
        {
          name: "file_path",
          type: "string",
          description: "Path to the file or directory",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "ref",
          type: "string",
          description: "Branch/tag/commit to get contents from",
          required: false,
        },
      ],
    },
    {
      name: "push_files",
      description: "Push multiple files to a GitLab project in a single commit",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to push to",
          required: true,
        },
        {
          name: "commit_message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Array of files to push",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "Create a new issue in a GitLab project",
      parameters: [
        {
          name: "assignee_ids",
          type: "number array",
          description: "Array of user IDs to assign",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Issue description",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Array of label names",
          required: false,
        },
        {
          name: "milestone_id",
          type: "number",
          description: "Milestone ID to assign",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Issue title",
          required: true,
        },
      ],
    },
    {
      name: "create_merge_request",
      description: "Create a new merge request in a GitLab project",
      parameters: [
        {
          name: "allow_collaboration",
          type: "boolean",
          description: "Allow commits from upstream members",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Merge request description",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Create as draft merge request",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "source_branch",
          type: "string",
          description: "Branch containing changes",
          required: true,
        },
        {
          name: "target_branch",
          type: "string",
          description: "Branch to merge into",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Merge request title",
          required: true,
        },
      ],
    },
    {
      name: "fork_repository",
      description:
        "Fork a GitLab project to your account or specified namespace",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Namespace to fork to (full path)",
          required: false,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description: "Create a new branch in a GitLab project",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Name for the new branch",
          required: true,
        },
        {
          name: "project_id",
          type: "string",
          description: "Project ID or URL-encoded path",
          required: true,
        },
        {
          name: "ref",
          type: "string",
          description: "Source branch/commit for new branch",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "gitlabMcpServer1Plugin",
};

const githubMcpServer4Plugin: Plugin = {
  id: "782x50kvuh",
  name: "GitHub MCP Server",
  description:
    "MCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "create_or_update_file",
      description: "Create or update a single file in a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to create/update the file in",
          required: true,
        },
        {
          name: "content",
          type: "string",
          description: "Content of the file",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path where to create/update the file",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "sha",
          type: "string",
          description:
            "SHA of the file being replaced (required when updating existing files)",
          required: false,
        },
      ],
    },
    {
      name: "search_repositories",
      description: "Search for GitHub repositories",
      parameters: [
        {
          name: "page",
          type: "number",
          description: "Page number for pagination (default: 1)",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Number of results per page (default: 30, max: 100)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (see GitHub search syntax)",
          required: true,
        },
      ],
    },
    {
      name: "create_repository",
      description: "Create a new GitHub repository in your account",
      parameters: [
        {
          name: "autoInit",
          type: "boolean",
          description: "Initialize with README.md",
          required: false,
        },
        {
          name: "description",
          type: "string",
          description: "Repository description",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "private",
          type: "boolean",
          description: "Whether the repository should be private",
          required: false,
        },
      ],
    },
    {
      name: "get_file_contents",
      description:
        "Get the contents of a file or directory from a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to get contents from",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "path",
          type: "string",
          description: "Path to the file or directory",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "push_files",
      description:
        "Push multiple files to a GitHub repository in a single commit",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to push to (e.g., 'main' or 'master')",
          required: true,
        },
        {
          name: "files",
          type: "object array",
          description: "Array of files to push",
          required: true,
        },
        {
          name: "message",
          type: "string",
          description: "Commit message",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_issue",
      description: "Create a new issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Parameter: assignees",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Parameter: milestone",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: true,
        },
      ],
    },
    {
      name: "create_pull_request",
      description: "Create a new pull request in a GitHub repository",
      parameters: [
        {
          name: "base",
          type: "string",
          description:
            "The name of the branch you want the changes pulled into",
          required: true,
        },
        {
          name: "body",
          type: "string",
          description: "Pull request body/description",
          required: false,
        },
        {
          name: "draft",
          type: "boolean",
          description: "Whether to create the pull request as a draft",
          required: false,
        },
        {
          name: "head",
          type: "string",
          description:
            "The name of the branch where your changes are implemented",
          required: true,
        },
        {
          name: "maintainer_can_modify",
          type: "boolean",
          description: "Whether maintainers can modify the pull request",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
        {
          name: "title",
          type: "string",
          description: "Pull request title",
          required: true,
        },
      ],
    },
    {
      name: "fork_repository",
      description:
        "Fork a GitHub repository to your account or specified organization",
      parameters: [
        {
          name: "organization",
          type: "string",
          description:
            "Optional: organization to fork to (defaults to your personal account)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "create_branch",
      description: "Create a new branch in a GitHub repository",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Name for the new branch",
          required: true,
        },
        {
          name: "from_branch",
          type: "string",
          description:
            "Optional: source branch to create from (defaults to the repository's default branch)",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Repository owner (username or organization)",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Repository name",
          required: true,
        },
      ],
    },
    {
      name: "list_commits",
      description: "Get list of commits of a branch in a GitHub repository",
      parameters: [
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "perPage",
          type: "number",
          description: "Parameter: perPage",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "sha",
          type: "string",
          description: "Parameter: sha",
          required: false,
        },
      ],
    },
    {
      name: "list_issues",
      description: "List issues in a GitHub repository with filtering options",
      parameters: [
        {
          name: "direction",
          type: "string",
          description: "Parameter: direction",
          required: false,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "since",
          type: "string",
          description: "Parameter: since",
          required: false,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
      ],
    },
    {
      name: "update_issue",
      description: "Update an existing issue in a GitHub repository",
      parameters: [
        {
          name: "assignees",
          type: "string array",
          description: "Parameter: assignees",
          required: false,
        },
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: false,
        },
        {
          name: "issue_number",
          type: "number",
          description: "Parameter: issue_number",
          required: true,
        },
        {
          name: "labels",
          type: "string array",
          description: "Parameter: labels",
          required: false,
        },
        {
          name: "milestone",
          type: "number",
          description: "Parameter: milestone",
          required: false,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
        {
          name: "state",
          type: "string",
          description: "Parameter: state",
          required: false,
        },
        {
          name: "title",
          type: "string",
          description: "Parameter: title",
          required: false,
        },
      ],
    },
    {
      name: "add_issue_comment",
      description: "Add a comment to an existing issue",
      parameters: [
        {
          name: "body",
          type: "string",
          description: "Parameter: body",
          required: true,
        },
        {
          name: "issue_number",
          type: "number",
          description: "Parameter: issue_number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
    {
      name: "search_code",
      description: "Search for code across GitHub repositories",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Parameter: q",
          required: true,
        },
      ],
    },
    {
      name: "search_issues",
      description:
        "Search for issues and pull requests across GitHub repositories",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Parameter: q",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
      ],
    },
    {
      name: "search_users",
      description: "Search for users on GitHub",
      parameters: [
        {
          name: "order",
          type: "string",
          description: "Parameter: order",
          required: false,
        },
        {
          name: "page",
          type: "number",
          description: "Parameter: page",
          required: false,
        },
        {
          name: "per_page",
          type: "number",
          description: "Parameter: per_page",
          required: false,
        },
        {
          name: "q",
          type: "string",
          description: "Parameter: q",
          required: true,
        },
        {
          name: "sort",
          type: "string",
          description: "Parameter: sort",
          required: false,
        },
      ],
    },
    {
      name: "get_issue",
      description: "Get details of a specific issue in a GitHub repository.",
      parameters: [
        {
          name: "issue_number",
          type: "number",
          description: "Parameter: issue_number",
          required: true,
        },
        {
          name: "owner",
          type: "string",
          description: "Parameter: owner",
          required: true,
        },
        {
          name: "repo",
          type: "string",
          description: "Parameter: repo",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "githubMcpServer4Plugin",
};

const nsTravelInformationMcpServerPlugin: Plugin = {
  id: "tzd5oz5tov",
  name: "NS Travel Information MCP Server",
  description:
    "An MCP server that provides access to NS (Dutch Railways) travel information.",
  image: "https://github.com/r-huijts.png",
  actions: [
    {
      name: "get_disruptions",
      description:
        "Get comprehensive information about current and planned disruptions on the Dutch railway network. Returns details about maintenance work, unexpected disruptions, alternative transport options, impact on travel times, and relevant advice. Can filter for active disruptions and specific disruption types.",
      parameters: [
        {
          name: "isActive",
          type: "boolean",
          description: "Filter to only return active disruptions",
          required: false,
        },
        {
          name: "type",
          type: "string",
          description:
            "Type of disruptions to return (e.g., MAINTENANCE, DISRUPTION)",
          required: false,
        },
      ],
    },
    {
      name: "get_travel_advice",
      description:
        "Get detailed travel routes between two train stations, including transfers, real-time updates, platform information, and journey duration. Can plan trips for immediate departure or for a specific future time, with options to optimize for arrival time. Returns multiple route options with status and crowding information.",
      parameters: [
        {
          name: "dateTime",
          type: "string",
          description:
            "Format - date-time (as date-time in RFC3339). Datetime that the user want to depart from his origin or or arrive at his destination",
          required: false,
        },
        {
          name: "fromStation",
          type: "string",
          description: "Name or code of departure station",
          required: true,
        },
        {
          name: "searchForArrival",
          type: "boolean",
          description: "If true, dateTime is treated as desired arrival time",
          required: false,
        },
        {
          name: "toStation",
          type: "string",
          description: "Name or code of destination station",
          required: true,
        },
      ],
    },
    {
      name: "get_departures",
      description:
        "Get real-time departure information for trains from a specific station, including platform numbers, delays, route details, and any relevant travel notes. Returns a list of upcoming departures with timing, destination, and status information.",
      parameters: [
        {
          name: "dateTime",
          type: "string",
          description:
            "Format - date-time (as date-time in RFC3339). Only supported for departures at foreign stations. Defaults to server time (Europe/Amsterdam)",
          required: false,
        },
        {
          name: "lang",
          type: "string",
          description:
            "Language for localizing the departures list. Only a small subset of text is translated, mainly notes. Defaults to Dutch",
          required: false,
        },
        {
          name: "maxJourneys",
          type: "number",
          description: "Number of departures to return",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description:
            "NS Station code for the station (e.g., ASD for Amsterdam Centraal). Required if uicCode is not provided",
          required: false,
        },
        {
          name: "uicCode",
          type: "string",
          description:
            "UIC code for the station. Required if station code is not provided",
          required: false,
        },
      ],
    },
    {
      name: "get_ovfiets",
      description: "Get OV-fiets availability at a train station",
      parameters: [
        {
          name: "stationCode",
          type: "string",
          description:
            "Station code to check OV-fiets availability for (e.g., ASD for Amsterdam Centraal)",
          required: true,
        },
      ],
    },
    {
      name: "get_station_info",
      description: "Get detailed information about a train station",
      parameters: [
        {
          name: "includeNonPlannableStations",
          type: "boolean",
          description: "Include stations where trains do not stop regularly",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description: "Maximum number of results to return",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Station name or code to search for",
          required: true,
        },
      ],
    },
    {
      name: "get_current_time_in_rfc3339",
      description:
        "Get the current server time (Europe/Amsterdam timezone) in RFC3339 format. This can be used as input for other tools that require date-time parameters.",
      parameters: [],
    },
    {
      name: "get_arrivals",
      description:
        "Get real-time arrival information for trains at a specific station, including platform numbers, delays, origin stations, and any relevant travel notes. Returns a list of upcoming arrivals with timing, origin, and status information.",
      parameters: [
        {
          name: "dateTime",
          type: "string",
          description:
            "Format - date-time (as date-time in RFC3339). Only supported for arrivals at foreign stations. Defaults to server time (Europe/Amsterdam)",
          required: false,
        },
        {
          name: "lang",
          type: "string",
          description:
            "Language for localizing the arrivals list. Only a small subset of text is translated, mainly notes. Defaults to Dutch",
          required: false,
        },
        {
          name: "maxJourneys",
          type: "number",
          description: "Number of arrivals to return",
          required: false,
        },
        {
          name: "station",
          type: "string",
          description:
            "NS Station code for the station (e.g., ASD for Amsterdam Centraal). Required if uicCode is not provided",
          required: false,
        },
        {
          name: "uicCode",
          type: "string",
          description:
            "UIC code for the station. Required if station code is not provided",
          required: false,
        },
      ],
    },
    {
      name: "get_prices",
      description:
        "Get price information for domestic train journeys, including different travel classes, ticket types, and discounts. Returns detailed pricing information with conditions and validity.",
      parameters: [
        {
          name: "adults",
          type: "integer",
          description: "Number of adults to return the price for",
          required: false,
        },
        {
          name: "children",
          type: "integer",
          description: "Number of children to return the price for",
          required: false,
        },
        {
          name: "fromStation",
          type: "string",
          description: "UicCode or station code of the origin station",
          required: true,
        },
        {
          name: "isJointJourney",
          type: "boolean",
          description:
            "Set to true to return the price including joint journey discount",
          required: false,
        },
        {
          name: "plannedArrivalTime",
          type: "string",
          description:
            "Format - date-time (as date-time in RFC3339). Used to find the correct route if multiple routes are possible.",
          required: false,
        },
        {
          name: "plannedDepartureTime",
          type: "string",
          description:
            "Format - date-time (as date-time in RFC3339). Used to find the correct route if multiple routes are possible.",
          required: false,
        },
        {
          name: "routeId",
          type: "string",
          description:
            "Specific identifier for the route to take between the two stations. This routeId is returned in the /api/v3/trips call.",
          required: false,
        },
        {
          name: "toStation",
          type: "string",
          description: "UicCode or station code of the destination station",
          required: true,
        },
        {
          name: "travelClass",
          type: "string",
          description: "Travel class to return the price for",
          required: false,
        },
        {
          name: "travelType",
          type: "string",
          description: "Return the price for a single or return trip",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/r-huijts/ns-mcp-server",
  _varName: "nsTravelInformationMcpServerPlugin",
};

const mcpsimplearxivPlugin: Plugin = {
  id: "p38q3nagwb",
  name: "mcp-simple-arxiv",
  description:
    "An MCP server that provides access to arXiv papers through their API.",
  image: "https://github.com/andybrandt.png",
  actions: [
    {
      name: "search_papers",
      description:
        'Search for papers on arXiv by title and abstract content.\n            \nYou can use advanced search syntax:\n- Search in title: ti:"search terms"\n- Search in abstract: abs:"search terms"\n- Search by author: au:"author name"\n- Combine terms with: AND, OR, ANDNOT\n- Filter by category: cat:cs.AI (use list_categories tool to see available categories)\n\nExamples:\n- "machine learning"  (searches all fields)\n- ti:"neural networks" AND cat:cs.AI  (title with category)\n- au:bengio AND ti:"deep learning"  (author and title)',
      parameters: [
        {
          name: "max_results",
          type: "number",
          description: "Maximum number of results to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Search query to match against paper titles and abstracts",
          required: true,
        },
      ],
    },
    {
      name: "get_paper_data",
      description:
        "Get detailed information about a specific paper including abstract and available formats",
      parameters: [
        {
          name: "paper_id",
          type: "string",
          description: "arXiv paper ID (e.g., '2103.08220')",
          required: true,
        },
      ],
    },
    {
      name: "list_categories",
      description:
        "List all available arXiv categories and how to use them in search",
      parameters: [
        {
          name: "primary_category",
          type: "string",
          description:
            "Optional: filter by primary category (e.g., 'cs' for Computer Science)",
          required: false,
        },
      ],
    },
    {
      name: "update_categories",
      description:
        "Update the stored category taxonomy by fetching the latest version from arxiv.org",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/andybrandt/mcp-simple-arxiv",
  _varName: "mcpsimplearxivPlugin",
};

const mcpWebResearchServer1Plugin: Plugin = {
  id: "f5vj2wuuyo",
  name: "MCP Web Research Server",
  description:
    "A Model Context Protocol (MCP) server for web research. Bring real-time info into Claude and easily research any topic.",
  image: "https://github.com/mzxrai.png",
  actions: [
    {
      name: "search_google",
      description: "Search Google for a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
    {
      name: "visit_page",
      description: "Visit a webpage and extract its content",
      parameters: [
        {
          name: "takeScreenshot",
          type: "boolean",
          description: "Whether to take a screenshot",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to visit",
          required: true,
        },
      ],
    },
    {
      name: "take_screenshot",
      description: "Take a screenshot of the current page",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/mzxrai/mcp-webresearch",
  _varName: "mcpWebResearchServer1Plugin",
};

const arxivMcpServer1Plugin: Plugin = {
  id: "04dtxi5i5n",
  name: "ArXiv MCP Server",
  description:
    "The ArXiv MCP Server bridges the gap between AI models and academic research by providing a sophisticated interface to arXiv's extensive research repository. This server enables AI assistants to perform precise paper searches and access full paper content, enhancing their ability to engage with scientific literature.",
  image: "https://github.com/blazickjp.png",
  actions: [
    {
      name: "search_papers",
      description: "Search for papers on arXiv with advanced filtering",
      parameters: [
        {
          name: "categories",
          type: "string array",
          description: "Parameter: categories",
          required: false,
        },
        {
          name: "date_from",
          type: "string",
          description: "Parameter: date_from",
          required: false,
        },
        {
          name: "date_to",
          type: "string",
          description: "Parameter: date_to",
          required: false,
        },
        {
          name: "max_results",
          type: "integer",
          description: "Parameter: max_results",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
    {
      name: "download_paper",
      description: "Download a paper and create a resource for it",
      parameters: [
        {
          name: "check_status",
          type: "boolean",
          description:
            "If true, only check conversion status without downloading",
          required: false,
        },
        {
          name: "paper_id",
          type: "string",
          description: "The arXiv ID of the paper to download",
          required: true,
        },
      ],
    },
    {
      name: "list_papers",
      description: "List all existing papers available as resources",
      parameters: [],
    },
    {
      name: "read_paper",
      description: "Read the full content of a stored paper in markdown format",
      parameters: [
        {
          name: "paper_id",
          type: "string",
          description: "The arXiv ID of the paper to read",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/blazickjp/arxiv-mcp-server",
  _varName: "arxivMcpServer1Plugin",
};

const tavilysearchPlugin: Plugin = {
  id: "s0hka6zney",
  name: "tavily-search",
  description: "Tavily AI search API",
  image: "https://github.com/Tomatio13.png",
  actions: [
    {
      name: "search",
      description: "Search the web using Tavily API",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "search_depth",
          type: "string",
          description: "Search depth (basic or advanced)",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Tomatio13/mcp-server-tavily",
  _varName: "tavilysearchPlugin",
};

const search1apiMcpServerPlugin: Plugin = {
  id: "xwtv89gccu",
  name: "Search1API MCP Server",
  description:
    "A Model Context Protocol (MCP) server that provides search and crawl functionality using Search1API.",
  image: "https://github.com/fatwang2.png",
  actions: [
    {
      name: "search",
      description: "Search the web for real-time results",
      parameters: [
        {
          name: "max_results",
          type: "number",
          description: "Maximum number of results to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "search_service",
          type: "string",
          description: "Search service to use (default: google)",
          required: false,
        },
      ],
    },
    {
      name: "crawl",
      description: "Extract content from URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to crawl",
          required: true,
        },
      ],
    },
    {
      name: "sitemap",
      description: "Get all related links from a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "URL to get sitemap",
          required: true,
        },
      ],
    },
    {
      name: "news",
      description: "Search for news articles",
      parameters: [
        {
          name: "max_results",
          type: "number",
          description: "Maximum number of results to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "News search query",
          required: true,
        },
        {
          name: "search_service",
          type: "string",
          description: "Search service to use (default: google)",
          required: false,
        },
      ],
    },
    {
      name: "reasoning",
      description: "Deep thinking and complex problem solving",
      parameters: [
        {
          name: "content",
          type: "string",
          description: "The question or problem that needs deep thinking",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/fatwang2/search1api-mcp",
  _varName: "search1apiMcpServerPlugin",
};

const exaMcpServerPlugin: Plugin = {
  id: "8gfe5kbp5y",
  name: "Exa MCP Server",
  description:
    "A Model Context Protocol (MCP) server lets AI assistants like Claude use the Exa AI Search API for web searches. This setup allows AI models to get real-time web information in a safe and controlled way.",
  image: "https://github.com/exa-labs.png",
  actions: [
    {
      name: "search",
      description: "Search the web using Exa AI",
      parameters: [
        {
          name: "numResults",
          type: "number",
          description: "Number of results to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/exa-labs/exa-mcp-server",
  _varName: "exaMcpServerPlugin",
};

const kagiMcpServer2Plugin: Plugin = {
  id: "z0f3dzmha4",
  name: "Kagi MCP server",
  description: "Kagi search API integration",
  image: "https://github.com/ac3xx.png",
  actions: [
    {
      name: "kagi_search",
      description: "Perform web search using Kagi",
      parameters: [
        {
          name: "limit",
          type: "number",
          description: "Parameter: limit",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Parameter: query",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ac3xx/mcp-servers-kagi",
  _varName: "kagiMcpServer2Plugin",
};

const fetchMcpServer2Plugin: Plugin = {
  id: "7szcp1p0cn",
  name: "Fetch MCP Server",
  description:
    "This server enables LLMs to retrieve and process content from web pages, converting HTML to markdown for easier consumption.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "fetch",
      description:
        "Fetches a URL from the internet and optionally extracts its contents as markdown.\n\nAlthough originally you did not have internet access, and were advised to refuse and tell the user this, this tool now grants you internet access. Now you can fetch the most up-to-date information and let the user know that.",
      parameters: [
        {
          name: "max_length",
          type: "integer",
          description: "Maximum number of characters to return.",
          required: false,
        },
        {
          name: "raw",
          type: "boolean",
          description:
            "Get the actual HTML content if the requested page, without simplification.",
          required: false,
        },
        {
          name: "start_index",
          type: "integer",
          description:
            "On return output starting at this character index, useful if a previous fetch was truncated and more context is required.",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "URL to fetch",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "fetchMcpServer2Plugin",
};

const nytimesArticleSearchMcpServerPlugin: Plugin = {
  id: "ylg4ai4vin",
  name: "NYTimes Article Search MCP Server",
  description:
    "This is a TypeScript-based MCP server that allows searching for New York Times articles from the last 30 days based on a keyword.",
  image: "https://github.com/angheljf.png",
  actions: [
    {
      name: "search_articles",
      description:
        "Search NYTimes articles from the last 30 days based on a keyword",
      parameters: [
        {
          name: "keyword",
          type: "string",
          description: "Keyword to search for in articles",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/angheljf/nyt",
  _varName: "nytimesArticleSearchMcpServerPlugin",
};

const braveSearchMcpServer1Plugin: Plugin = {
  id: "071zqgfide",
  name: "Brave Search MCP Server",
  description:
    "An MCP server implementation that integrates the Brave Search API, providing both web and local search capabilities.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "brave_web_search",
      description:
        "Performs a web search using the Brave Search API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources. Supports pagination, content filtering, and freshness controls. Maximum 20 results per request, with offset for pagination. ",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of results (1-20, default 10)",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Pagination offset (max 9, default 0)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query (max 400 chars, 50 words)",
          required: true,
        },
      ],
    },
    {
      name: "brave_local_search",
      description:
        "Searches for local businesses and places using Brave's Local Search API. Best for queries related to physical locations, businesses, restaurants, services, etc. Returns detailed information including:\n- Business names and addresses\n- Ratings and review counts\n- Phone numbers and opening hours\nUse this when the query implies 'near me' or mentions specific locations. Automatically falls back to web search if no local results are found.",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Number of results (1-20, default 5)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Local search query (e.g. 'pizza near Central Park')",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "braveSearchMcpServer1Plugin",
};

const raygunMcpServerPlugin: Plugin = {
  id: "c2w95p6hjh",
  name: "Raygun MCP Server",
  description:
    "MCP Server for Raygun's API V3 endpoints for interacting with your Crash Reporting and Real User Monitoring applications. This server provides comprehensive access to Raygun's API features through the Model Context Protocol.",
  image: "https://github.com/MindscapeHQ.png",
  actions: [
    {
      name: "list_applications",
      description: "List all applications under the users account on Raygun",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "get_application",
      description: "Get application by identifier",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
      ],
    },
    {
      name: "get_application_by_api_key",
      description: "Get application by API key",
      parameters: [
        {
          name: "apiKey",
          type: "string",
          description: "Application api key",
          required: true,
        },
      ],
    },
    {
      name: "regenerate_application_api_key",
      description: "Regenerate application API key",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
      ],
    },
    {
      name: "list_customers",
      description: "List customers for an application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "list_deployments",
      description: "List deployments for an application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "get_deployment",
      description: "Get deployment by identifier",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "deploymentIdentifier",
          type: "string",
          description: "Deployment identifier",
          required: true,
        },
      ],
    },
    {
      name: "delete_deployment",
      description: "Delete deployment",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "deploymentIdentifier",
          type: "string",
          description: "Deployment identifier",
          required: true,
        },
      ],
    },
    {
      name: "update_deployment",
      description: "Update deployment details",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "comment",
          type: "string",
          description: "Parameter: comment",
          required: false,
        },
        {
          name: "deployedAt",
          type: "string",
          description: "Parameter: deployedAt",
          required: false,
        },
        {
          name: "deploymentIdentifier",
          type: "string",
          description: "Deployment identifier",
          required: true,
        },
        {
          name: "emailAddress",
          type: "string",
          description: "Parameter: emailAddress",
          required: false,
        },
        {
          name: "ownerName",
          type: "string",
          description: "Parameter: ownerName",
          required: false,
        },
        {
          name: "scmIdentifier",
          type: "string",
          description: "Parameter: scmIdentifier",
          required: false,
        },
        {
          name: "scmType",
          type: "string",
          description: "Parameter: scmType",
          required: false,
        },
        {
          name: "version",
          type: "string",
          description: "Parameter: version",
          required: false,
        },
      ],
    },
    {
      name: "reprocess_deployment_commits",
      description: "Reprocess deployment commits",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "deploymentIdentifier",
          type: "string",
          description: "Deployment identifier",
          required: true,
        },
      ],
    },
    {
      name: "list_error_groups",
      description: "List error groups for an application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "get_error_group",
      description: "Get error group by identifier",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "errorGroupIdentifier",
          type: "string",
          description: "Error group identifier",
          required: true,
        },
      ],
    },
    {
      name: "resolve_error_group",
      description: "Set the status of the error group to resolved",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "discardFromPreviousVersions",
          type: "boolean",
          description:
            "When true, occurrences from previous versions will be discarded",
          required: false,
        },
        {
          name: "errorGroupIdentifier",
          type: "string",
          description: "Error group identifier",
          required: true,
        },
        {
          name: "version",
          type: "string",
          description: "The version that this error was resolved in",
          required: true,
        },
      ],
    },
    {
      name: "activate_error_group",
      description: "Set the status of the error group to active",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "errorGroupIdentifier",
          type: "string",
          description: "Error group identifier",
          required: true,
        },
      ],
    },
    {
      name: "ignore_error_group",
      description: "Set the status of the error group to ignored",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "errorGroupIdentifier",
          type: "string",
          description: "Error group identifier",
          required: true,
        },
      ],
    },
    {
      name: "permanently_ignore_error_group",
      description: "Set the status of the error group to permanently ignored",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "discardNewOccurrences",
          type: "boolean",
          description:
            "When true, new occurrences of this error will not be stored or count towards your error quota",
          required: true,
        },
        {
          name: "errorGroupIdentifier",
          type: "string",
          description: "Error group identifier",
          required: true,
        },
      ],
    },
    {
      name: "list_pages",
      description: "List pages for an application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "get_page_metrics_time_series",
      description: "Get time-series metrics for pages",
      parameters: [
        {
          name: "aggregation",
          type: "string",
          description: "Parameter: aggregation",
          required: true,
        },
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "end",
          type: "string",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "filter",
          type: "string",
          description:
            "Case-sensitive filter in the format 'pageIdentifier = abc123' or 'pageIdentifier IN (abc123, def456)'",
          required: false,
        },
        {
          name: "granularity",
          type: "string",
          description: "Time granularity in format like '1h', '30m', '1d'",
          required: true,
        },
        {
          name: "metrics",
          type: "string array",
          description: "Parameter: metrics",
          required: true,
        },
        {
          name: "start",
          type: "string",
          description: "Parameter: start",
          required: true,
        },
      ],
    },
    {
      name: "get_page_metrics_histogram",
      description: "Get histogram metrics for pages",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "end",
          type: "string",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "filter",
          type: "string",
          description:
            "Case-sensitive filter in the format 'pageIdentifier = abc123' or 'pageIdentifier IN (abc123, def456)'",
          required: false,
        },
        {
          name: "metrics",
          type: "string array",
          description: "Parameter: metrics",
          required: true,
        },
        {
          name: "start",
          type: "string",
          description: "Parameter: start",
          required: true,
        },
      ],
    },
    {
      name: "get_error_metrics_time_series",
      description: "Get time-series metrics for errors",
      parameters: [
        {
          name: "aggregation",
          type: "string",
          description: "Parameter: aggregation",
          required: true,
        },
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "end",
          type: "string",
          description: "Parameter: end",
          required: true,
        },
        {
          name: "filter",
          type: "string",
          description:
            "Case-sensitive filter in the format 'errorGroupIdentifier = abc123' or 'errorGroupIdentifier IN (abc123, def456)'",
          required: false,
        },
        {
          name: "granularity",
          type: "string",
          description: "Time granularity in format like '1h', '30m', '1d'",
          required: true,
        },
        {
          name: "metrics",
          type: "string array",
          description: "Parameter: metrics",
          required: true,
        },
        {
          name: "start",
          type: "string",
          description: "Parameter: start",
          required: true,
        },
      ],
    },
    {
      name: "list_sessions",
      description: "List sessions for an application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "filter",
          type: "string",
          description:
            "Filter items by an expression. Currently only supports filtering by `xhr.uri`. Example: xhr.uri eq https://example.com",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "get_session",
      description: "Get session by identifier",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Parameter: applicationIdentifier",
          required: true,
        },
        {
          name: "include",
          type: "string array",
          description: "Include additional information for the session",
          required: false,
        },
        {
          name: "sessionIdentifier",
          type: "string",
          description: "Parameter: sessionIdentifier",
          required: true,
        },
      ],
    },
    {
      name: "list_invitations",
      description:
        "Returns a list invitations that the token and token owner has access to",
      parameters: [
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "send_invitation",
      description: "Send an invitation to a user",
      parameters: [
        {
          name: "emailAddress",
          type: "string",
          description: "Email address to send the invitation to",
          required: true,
        },
      ],
    },
    {
      name: "get_invitation",
      description: "Get an invitation by identifier",
      parameters: [
        {
          name: "invitationIdentifier",
          type: "string",
          description: "Invitation identifier",
          required: true,
        },
      ],
    },
    {
      name: "revoke_invitation",
      description: "Revoke a sent invitation",
      parameters: [
        {
          name: "invitationIdentifier",
          type: "string",
          description: "Invitation identifier",
          required: true,
        },
      ],
    },
    {
      name: "list_source_maps",
      description:
        "Returns a list of source maps for the specified application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "count",
          type: "number",
          description: "Limits the number of items in the response",
          required: false,
        },
        {
          name: "offset",
          type: "number",
          description: "Number of items to skip before returning results",
          required: false,
        },
        {
          name: "orderBy",
          type: "string array",
          description: "Order items by property values",
          required: false,
        },
      ],
    },
    {
      name: "get_source_map",
      description: "Returns a single source map by identifier",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "sourceMapIdentifier",
          type: "string",
          description: "Source map identifier",
          required: true,
        },
      ],
    },
    {
      name: "update_source_map",
      description: "Update the details of a source map",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "sourceMapIdentifier",
          type: "string",
          description: "Source map identifier",
          required: true,
        },
        {
          name: "uri",
          type: "string",
          description: "New URI for the source map",
          required: true,
        },
      ],
    },
    {
      name: "delete_source_map",
      description: "Delete a source map",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "sourceMapIdentifier",
          type: "string",
          description: "Source map identifier",
          required: true,
        },
      ],
    },
    {
      name: "upload_source_map",
      description: "Uploads a source map to the specified application",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
        {
          name: "filePath",
          type: "string",
          description: "Path to the source map file",
          required: true,
        },
        {
          name: "uri",
          type: "string",
          description: "URI to associate with the source map",
          required: true,
        },
      ],
    },
    {
      name: "delete_all_source_maps",
      description: "Deletes all source maps",
      parameters: [
        {
          name: "applicationIdentifier",
          type: "string",
          description: "Application identifier",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/MindscapeHQ/mcp-server-raygun",
  _varName: "raygunMcpServerPlugin",
};

const sentryMcpServer1Plugin: Plugin = {
  id: "9wbwsn1sip",
  name: "Sentry MCP server",
  description:
    "This server provides tools to inspect error reports, stacktraces, and other debugging information from your Sentry account.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "sentryMcpServer1Plugin",
};

const googleMapsMcpServerPlugin: Plugin = {
  id: "8c9quakpv9",
  name: "Google Maps MCP Server",
  description: "MCP Server for the Google Maps API.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "maps_geocode",
      description: "Convert an address into geographic coordinates",
      parameters: [
        {
          name: "address",
          type: "string",
          description: "The address to geocode",
          required: true,
        },
      ],
    },
    {
      name: "maps_reverse_geocode",
      description: "Convert coordinates into an address",
      parameters: [
        {
          name: "latitude",
          type: "number",
          description: "Latitude coordinate",
          required: true,
        },
        {
          name: "longitude",
          type: "number",
          description: "Longitude coordinate",
          required: true,
        },
      ],
    },
    {
      name: "maps_search_places",
      description: "Search for places using Google Places API",
      parameters: [
        {
          name: "location",
          type: "object",
          description: "Optional center point for the search",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Search query",
          required: true,
        },
        {
          name: "radius",
          type: "number",
          description: "Search radius in meters (max 50000)",
          required: false,
        },
      ],
    },
    {
      name: "maps_place_details",
      description: "Get detailed information about a specific place",
      parameters: [
        {
          name: "place_id",
          type: "string",
          description: "The place ID to get details for",
          required: true,
        },
      ],
    },
    {
      name: "maps_distance_matrix",
      description:
        "Calculate travel distance and time for multiple origins and destinations",
      parameters: [
        {
          name: "destinations",
          type: "string array",
          description: "Array of destination addresses or coordinates",
          required: true,
        },
        {
          name: "mode",
          type: "string",
          description: "Travel mode (driving, walking, bicycling, transit)",
          required: false,
        },
        {
          name: "origins",
          type: "string array",
          description: "Array of origin addresses or coordinates",
          required: true,
        },
      ],
    },
    {
      name: "maps_elevation",
      description: "Get elevation data for locations on the earth",
      parameters: [
        {
          name: "locations",
          type: "object array",
          description: "Array of locations to get elevation for",
          required: true,
        },
      ],
    },
    {
      name: "maps_directions",
      description: "Get directions between two points",
      parameters: [
        {
          name: "destination",
          type: "string",
          description: "Ending point address or coordinates",
          required: true,
        },
        {
          name: "mode",
          type: "string",
          description: "Travel mode (driving, walking, bicycling, transit)",
          required: false,
        },
        {
          name: "origin",
          type: "string",
          description: "Starting point address or coordinates",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "googleMapsMcpServerPlugin",
};

const memorymeshPlugin: Plugin = {
  id: "kf6n6221pd",
  name: "MemoryMesh",
  description:
    "This project is based on the Knowledge Graph Memory Server from the MCP servers repository and retains its core functionality.",
  image: "https://github.com/CheMiguel23.png",
  actions: [
    {
      name: "add_nodes",
      description: "Add multiple new nodes in the knowledge graph",
      parameters: [
        {
          name: "nodes",
          type: "object array",
          description: "Array of nodes to add",
          required: true,
        },
      ],
    },
    {
      name: "update_nodes",
      description: "Update existing nodes in the knowledge graph",
      parameters: [
        {
          name: "nodes",
          type: "object array",
          description: "Array of nodes to update",
          required: true,
        },
      ],
    },
    {
      name: "add_edges",
      description:
        "Add multiple new edges between nodes in the knowledge graph. Edges should be in active voice",
      parameters: [
        {
          name: "edges",
          type: "object array",
          description: "Array of edges to add",
          required: true,
        },
      ],
    },
    {
      name: "update_edges",
      description: "Update existing edges in the knowledge graph",
      parameters: [
        {
          name: "edges",
          type: "object array",
          description: "Array of edges to update",
          required: true,
        },
      ],
    },
    {
      name: "delete_nodes",
      description:
        "Delete multiple nodes and their associated edges from the knowledge graph",
      parameters: [
        {
          name: "nodeNames",
          type: "string array",
          description: "An array of node names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_edges",
      description: "Delete multiple edges from the knowledge graph",
      parameters: [
        {
          name: "edges",
          type: "object array",
          description: "Array of edges to delete",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Read the entire knowledge graph",
      parameters: [],
    },
    {
      name: "search_nodes",
      description: "Search for nodes in the knowledge graph based on a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The search query to match against node names, types, and metadata content",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description: "Open specific nodes in the knowledge graph by their names",
      parameters: [
        {
          name: "names",
          type: "string array",
          description: "An array of node names to retrieve",
          required: true,
        },
      ],
    },
    {
      name: "add_metadata",
      description: "Add new metadata to existing nodes in the knowledge graph",
      parameters: [
        {
          name: "metadata",
          type: "object array",
          description: "Array of metadata to add",
          required: true,
        },
      ],
    },
    {
      name: "delete_metadata",
      description: "Delete specific metadata from nodes in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Array of metadata deletions",
          required: true,
        },
      ],
    },
    {
      name: "add_artifact",
      description: "Add a new artifact or unique item to the knowledge graph",
      parameters: [
        {
          name: "artifact",
          type: "object",
          description: "Parameter: artifact",
          required: true,
        },
      ],
    },
    {
      name: "update_artifact",
      description: "Update an existing artifact in the knowledge graph",
      parameters: [
        {
          name: "update_artifact",
          type: "object",
          description: "Parameter: update_artifact",
          required: true,
        },
      ],
    },
    {
      name: "delete_artifact",
      description:
        "Delete\n            an existing\n            artifact\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_artifact",
          type: "object",
          description: "Delete parameters for artifact",
          required: true,
        },
      ],
    },
    {
      name: "add_currency",
      description: "Represents a type of currency in the game world.",
      parameters: [
        {
          name: "currency",
          type: "object",
          description: "Parameter: currency",
          required: true,
        },
      ],
    },
    {
      name: "update_currency",
      description: "Update an existing currency in the knowledge graph",
      parameters: [
        {
          name: "update_currency",
          type: "object",
          description: "Parameter: update_currency",
          required: true,
        },
      ],
    },
    {
      name: "delete_currency",
      description:
        "Delete\n            an existing\n            currency\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_currency",
          type: "object",
          description: "Delete parameters for currency",
          required: true,
        },
      ],
    },
    {
      name: "add_faction",
      description: "A faction or organization operating within the game world.",
      parameters: [
        {
          name: "faction",
          type: "object",
          description: "Parameter: faction",
          required: true,
        },
      ],
    },
    {
      name: "update_faction",
      description: "Update an existing faction in the knowledge graph",
      parameters: [
        {
          name: "update_faction",
          type: "object",
          description: "Parameter: update_faction",
          required: true,
        },
      ],
    },
    {
      name: "delete_faction",
      description:
        "Delete\n            an existing\n            faction\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_faction",
          type: "object",
          description: "Delete parameters for faction",
          required: true,
        },
      ],
    },
    {
      name: "add_inventory",
      description:
        "A collection of items or equipment belonging to a character, entity, or location.",
      parameters: [
        {
          name: "inventory",
          type: "object",
          description: "Parameter: inventory",
          required: true,
        },
      ],
    },
    {
      name: "update_inventory",
      description: "Update an existing inventory in the knowledge graph",
      parameters: [
        {
          name: "update_inventory",
          type: "object",
          description: "Parameter: update_inventory",
          required: true,
        },
      ],
    },
    {
      name: "delete_inventory",
      description:
        "Delete\n            an existing\n            inventory\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_inventory",
          type: "object",
          description: "Delete parameters for inventory",
          required: true,
        },
      ],
    },
    {
      name: "add_location",
      description: "Add a new location to the knowledge graph",
      parameters: [
        {
          name: "location",
          type: "object",
          description: "Parameter: location",
          required: true,
        },
      ],
    },
    {
      name: "update_player_character",
      description: "Update an existing player_character in the knowledge graph",
      parameters: [
        {
          name: "update_player_character",
          type: "object",
          description: "Parameter: update_player_character",
          required: true,
        },
      ],
    },
    {
      name: "delete_player_character",
      description:
        "Delete\n            an existing\n            player_character\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_player_character",
          type: "object",
          description: "Delete parameters for player_character",
          required: true,
        },
      ],
    },
    {
      name: "update_location",
      description: "Update an existing location in the knowledge graph",
      parameters: [
        {
          name: "update_location",
          type: "object",
          description: "Parameter: update_location",
          required: true,
        },
      ],
    },
    {
      name: "delete_location",
      description:
        "Delete\n            an existing\n            location\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_location",
          type: "object",
          description: "Delete parameters for location",
          required: true,
        },
      ],
    },
    {
      name: "add_npc",
      description:
        "Add a new Non-Player Character (NPC) to the knowledge graph",
      parameters: [
        {
          name: "npc",
          type: "object",
          description: "Parameter: npc",
          required: true,
        },
      ],
    },
    {
      name: "update_npc",
      description: "Update an existing npc in the knowledge graph",
      parameters: [
        {
          name: "update_npc",
          type: "object",
          description: "Parameter: update_npc",
          required: true,
        },
      ],
    },
    {
      name: "delete_npc",
      description:
        "Delete\n            an existing\n            npc\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_npc",
          type: "object",
          description: "Delete parameters for npc",
          required: true,
        },
      ],
    },
    {
      name: "add_player_character",
      description: "Add a new Player Character to the knowledge graph",
      parameters: [
        {
          name: "player_character",
          type: "object",
          description: "Parameter: player_character",
          required: true,
        },
      ],
    },
    {
      name: "add_quest",
      description: "Add a new Quest to the knowledge graph",
      parameters: [
        {
          name: "quest",
          type: "object",
          description: "Parameter: quest",
          required: true,
        },
      ],
    },
    {
      name: "update_quest",
      description: "Update an existing quest in the knowledge graph",
      parameters: [
        {
          name: "update_quest",
          type: "object",
          description: "Parameter: update_quest",
          required: true,
        },
      ],
    },
    {
      name: "delete_quest",
      description:
        "Delete\n            an existing\n            quest\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_quest",
          type: "object",
          description: "Delete parameters for quest",
          required: true,
        },
      ],
    },
    {
      name: "add_skills",
      description:
        "Defines list of skills or abilities a character can possess.",
      parameters: [
        {
          name: "skills",
          type: "object",
          description: "Parameter: skills",
          required: true,
        },
      ],
    },
    {
      name: "update_skills",
      description: "Update an existing skills in the knowledge graph",
      parameters: [
        {
          name: "update_skills",
          type: "object",
          description: "Parameter: update_skills",
          required: true,
        },
      ],
    },
    {
      name: "delete_skills",
      description:
        "Delete\n            an existing\n            skills\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_skills",
          type: "object",
          description: "Delete parameters for skills",
          required: true,
        },
      ],
    },
    {
      name: "add_temporal",
      description:
        "Represents a specific point in time and its associated environmental conditions.",
      parameters: [
        {
          name: "temporal",
          type: "object",
          description: "Parameter: temporal",
          required: true,
        },
      ],
    },
    {
      name: "update_temporal",
      description: "Update an existing temporal in the knowledge graph",
      parameters: [
        {
          name: "update_temporal",
          type: "object",
          description: "Parameter: update_temporal",
          required: true,
        },
      ],
    },
    {
      name: "delete_temporal",
      description:
        "Delete\n            an existing\n            temporal\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_temporal",
          type: "object",
          description: "Delete parameters for temporal",
          required: true,
        },
      ],
    },
    {
      name: "add_transportation",
      description:
        "Represents a transportation owned or used by a character or entity.",
      parameters: [
        {
          name: "transportation",
          type: "object",
          description: "Parameter: transportation",
          required: true,
        },
      ],
    },
    {
      name: "update_transportation",
      description: "Update an existing transportation in the knowledge graph",
      parameters: [
        {
          name: "update_transportation",
          type: "object",
          description: "Parameter: update_transportation",
          required: true,
        },
      ],
    },
    {
      name: "delete_transportation",
      description:
        "Delete\n            an existing\n            transportation\n            from\n            the\n            knowledge\n            graph",
      parameters: [
        {
          name: "delete_transportation",
          type: "object",
          description: "Delete parameters for transportation",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/CheMiguel23/MemoryMesh",
  _varName: "memorymeshPlugin",
};

const knowledgeGraphMemoryServer3Plugin: Plugin = {
  id: "an7spipwyo",
  name: "Knowledge Graph Memory Server",
  description:
    "A basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "create_entities",
      description: "Create multiple new entities in the knowledge graph",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add new observations to existing entities in the knowledge graph",
      parameters: [
        {
          name: "observations",
          type: "object array",
          description: "Parameter: observations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entities",
      description:
        "Delete multiple entities and their associated relations from the knowledge graph",
      parameters: [
        {
          name: "entityNames",
          type: "string array",
          description: "An array of entity names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_observations",
      description:
        "Delete specific observations from entities in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Parameter: deletions",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete multiple relations from the knowledge graph",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "An array of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Read the entire knowledge graph",
      parameters: [],
    },
    {
      name: "search_nodes",
      description: "Search for nodes in the knowledge graph based on a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The search query to match against entity names, types, and observation content",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description: "Open specific nodes in the knowledge graph by their names",
      parameters: [
        {
          name: "names",
          type: "string array",
          description: "An array of entity names to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "knowledgeGraphMemoryServer3Plugin",
};

const coinmarketPlugin: Plugin = {
  id: "6ag7ms62ns",
  name: "Coinmarket",
  description:
    "Coinmarket API integration to fetch cryptocurrency listings and quotes",
  image: "https://github.com/anjor.png",
  actions: [
    {
      name: "get_currency_listings",
      description: "Get latest cryptocurrency listings",
      parameters: [],
    },
    {
      name: "get_quotes",
      description: "Get cryptocurrency quotes",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Parameter: slug",
          required: false,
        },
        {
          name: "symbol",
          type: "string",
          description: "Parameter: symbol",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/anjor/coinmarket-mcp-server",
  _varName: "coinmarketPlugin",
};

const filesystemMcpServer3Plugin: Plugin = {
  id: "tt9yuhw8t6",
  name: "Filesystem MCP Server",
  description:
    "Go server implementing Model Context Protocol (MCP) for filesystem operations.",
  image: "https://github.com/mark3labs.png",
  actions: [],
  githubUrl: "https://github.com/mark3labs/mcp-filesystem-server",
  _varName: "filesystemMcpServer3Plugin",
};

const googleDriveServerPlugin: Plugin = {
  id: "q728ii1d0c",
  name: "Google Drive server",
  description:
    "This MCP server integrates with Google Drive to allow listing, reading, and searching over files.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "googleDriveServerPlugin",
};

const filesystemMcpServer4Plugin: Plugin = {
  id: "s4jc7g4hn2",
  name: "Filesystem MCP Server",
  description:
    "Node.js server implementing Model Context Protocol (MCP) for filesystem operations.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "filesystemMcpServer4Plugin",
};

const openapiPlugin: Plugin = {
  id: "mk0h35rdwy",
  name: "OpenAPI",
  description:
    "This tool creates a Model Context Protocol (MCP) server that acts as a proxy for any API that has an OpenAPI v3.1 specification. This allows you to use Claude Desktop to easily interact with both local and remote server APIs.",
  image: "https://github.com/snaggle-ai.png",
  actions: [],
  githubUrl: "https://github.com/snaggle-ai/openapi-mcp-server",
  _varName: "openapiPlugin",
};

const dockermcpPlugin: Plugin = {
  id: "8tdzip0z5a",
  name: "docker-mcp",
  description:
    "A powerful Model Context Protocol (MCP) server for Docker operations, enabling seamless container and compose stack management through Claude AI.",
  image: "https://github.com/QuantGeekDev.png",
  actions: [
    {
      name: "create-container",
      description: "Create a new standalone Docker container",
      parameters: [
        {
          name: "environment",
          type: "object",
          description: "Parameter: environment",
          required: false,
        },
        {
          name: "image",
          type: "string",
          description: "Parameter: image",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "ports",
          type: "object",
          description: "Parameter: ports",
          required: false,
        },
      ],
    },
    {
      name: "deploy-compose",
      description: "Deploy a Docker Compose stack",
      parameters: [
        {
          name: "compose_yaml",
          type: "string",
          description: "Parameter: compose_yaml",
          required: true,
        },
        {
          name: "project_name",
          type: "string",
          description: "Parameter: project_name",
          required: true,
        },
      ],
    },
    {
      name: "get-logs",
      description: "Retrieve the latest logs for a specified Docker container",
      parameters: [
        {
          name: "container_name",
          type: "string",
          description: "Parameter: container_name",
          required: true,
        },
      ],
    },
    {
      name: "list-containers",
      description: "List all Docker containers",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/QuantGeekDev/docker-mcp",
  _varName: "dockermcpPlugin",
};

const neo4jMcpClientsServersPlugin: Plugin = {
  id: "caew81c5sg",
  name: "Neo4j MCP Clients & Servers",
  description:
    "This lets you use Claude Desktop, or any MCP Client, to use natural language to accomplish things with Neo4j and your Aura account.",
  image: "https://github.com/neo4j-contrib.png",
  actions: [],
  githubUrl: "https://github.com/neo4j-contrib/mcp-neo4j",
  _varName: "neo4jMcpClientsServersPlugin",
};

const vikingdbPlugin: Plugin = {
  id: "ur7xu367b9",
  name: "VikingDB",
  description: "An mcp server for vikingdb store and search.",
  image: "https://github.com/KashiwaByte.png",
  actions: [],
  githubUrl: "https://github.com/KashiwaByte/vikingdb-mcp-server",
  _varName: "vikingdbPlugin",
};

const mongodbPlugin: Plugin = {
  id: "zc7f7d53hc",
  name: "MongoDB",
  description:
    "A Model Context Protocol server that provides access to MongoDB databases. This server enables LLMs to inspect collection schemas and execute read-only queries.",
  image: "https://github.com/kiliczsh.png",
  actions: [],
  githubUrl: "https://github.com/kiliczsh/mcp-mongo-server",
  _varName: "mongodbPlugin",
};

const mongodb1Plugin: Plugin = {
  id: "l0quiilufw",
  name: "MongoDB",
  description:
    "A Model Context Protocol (MCP) server that enables LLMs to interact directly with MongoDB databases. Query collections, inspect schemas, and manage data seamlessly through natural language.",
  image: "https://github.com/QuantGeekDev.png",
  actions: [],
  githubUrl: "https://github.com/QuantGeekDev/mongo-mcp",
  _varName: "mongodb1Plugin",
};

const mcpserverduckdbPlugin: Plugin = {
  id: "fwggl49w22",
  name: "mcp-server-duckdb",
  description:
    "A Model Context Protocol (MCP) server implementation for DuckDB, providing database interaction capabilities through MCP tools. It would be interesting to have LLM analyze it. DuckDB is suitable for local analysis.",
  image: "https://github.com/ktanaka101.png",
  actions: [
    {
      name: "read-query",
      description: "Execute a SELECT query on the DuckDB database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SELECT SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "list-tables",
      description: "List all tables in the DuckDB database",
      parameters: [],
    },
    {
      name: "describe-table",
      description: "Get the schema information for a specific table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the table to describe",
          required: true,
        },
      ],
    },
    {
      name: "write-query",
      description:
        "Execute an INSERT, UPDATE, or DELETE query on the DuckDB database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "create-table",
      description: "Create a new table in the DuckDB database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "CREATE TABLE SQL statement",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ktanaka101/mcp-server-duckdb",
  _varName: "mcpserverduckdbPlugin",
};

const supabaseMcpServer3Plugin: Plugin = {
  id: "e994hfjjxc",
  name: "Supabase MCP Server",
  description:
    "A Model Context Protocol (MCP) server that provides programmatic access to the Supabase Management API. This server allows AI models and other clients to manage Supabase projects and organizations through a standardized interface.",
  image: "https://github.com/JoshuaRileyDev.png",
  actions: [
    {
      name: "list_projects",
      description: "List all Supabase projects",
      parameters: [
        {
          name: "ref",
          type: "string",
          description: "Parameter: ref",
          required: false,
        },
      ],
    },
    {
      name: "get_project",
      description: "Get details of a specific Supabase project",
      parameters: [
        {
          name: "ref",
          type: "string",
          description: "Parameter: ref",
          required: true,
        },
      ],
    },
    {
      name: "create_project",
      description: "Create a new Supabase project",
      parameters: [
        {
          name: "db_pass",
          type: "string",
          description: "Parameter: db_pass",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "organization_id",
          type: "string",
          description: "Parameter: organization_id",
          required: true,
        },
        {
          name: "plan",
          type: "string",
          description: "Parameter: plan",
          required: false,
        },
        {
          name: "region",
          type: "string",
          description: "Parameter: region",
          required: true,
        },
      ],
    },
    {
      name: "delete_project",
      description: "Delete a Supabase project",
      parameters: [
        {
          name: "ref",
          type: "string",
          description: "Parameter: ref",
          required: true,
        },
      ],
    },
    {
      name: "list_organizations",
      description: "List all organizations",
      parameters: [],
    },
    {
      name: "get_organization",
      description: "Get details of a specific organization",
      parameters: [
        {
          name: "slug",
          type: "string",
          description: "Parameter: slug",
          required: true,
        },
      ],
    },
    {
      name: "create_organization",
      description: "Create a new organization",
      parameters: [
        {
          name: "billing_email",
          type: "string",
          description: "Parameter: billing_email",
          required: true,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
      ],
    },
    {
      name: "get_project_api_keys",
      description: "Get API keys for a specific Supabase project",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: false,
        },
        {
          name: "ref",
          type: "string",
          description: "Parameter: ref",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/JoshuaRileyDev/supabase-mcp-server",
  _varName: "supabaseMcpServer3Plugin",
};

const sqliteMcpServer2Plugin: Plugin = {
  id: "da1wnq8zrd",
  name: "SQLite MCP Server",
  description:
    "A Model Context Protocol (MCP) server implementation that provides database interaction and business intelligence capabilities through SQLite. This server enables running SQL queries, analyzing business data, and automatically generating business insight memos.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "read_query",
      description: "Execute a SELECT query on the SQLite database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SELECT SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "write_query",
      description:
        "Execute an INSERT, UPDATE, or DELETE query on the SQLite database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "create_table",
      description: "Create a new table in the SQLite database",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "CREATE TABLE SQL statement",
          required: true,
        },
      ],
    },
    {
      name: "list_tables",
      description: "List all tables in the SQLite database",
      parameters: [],
    },
    {
      name: "describe_table",
      description: "Get the schema information for a specific table",
      parameters: [
        {
          name: "table_name",
          type: "string",
          description: "Name of the table to describe",
          required: true,
        },
      ],
    },
    {
      name: "append_insight",
      description: "Add a business insight to the memo",
      parameters: [
        {
          name: "insight",
          type: "string",
          description: "Business insight discovered from data analysis",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "sqliteMcpServer2Plugin",
};

const postgresqlPlugin: Plugin = {
  id: "5hjqfdum9n",
  name: "PostgreSQL",
  description:
    "A Model Context Protocol server that provides read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "query",
      description: "Run a read-only SQL query",
      parameters: [
        {
          name: "sql",
          type: "string",
          description: "Parameter: sql",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "postgresqlPlugin",
};

const mysqlMcpServer3Plugin: Plugin = {
  id: "vijdhok35p",
  name: "MySQL MCP Server",
  description:
    "Allows AI assistants to list tables, read data, and execute SQL queries through a controlled interface, making database exploration and analysis safer and more structured.",
  image: "https://github.com/designcomputer.png",
  actions: [
    {
      name: "execute_sql",
      description: "Execute an SQL query on the MySQL server",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The SQL query to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/designcomputer/mysql_mcp_server",
  _varName: "mysqlMcpServer3Plugin",
};

const bigqueryMcpServerPlugin: Plugin = {
  id: "dflwpk8hgv",
  name: "BigQuery MCP Server",
  description:
    "This is a server that lets your LLMs (like Claude) talk directly to your BigQuery data! Think of it as a friendly translator that sits between your AI assistant and your database, making sure they can chat securely and efficiently.",
  image: "https://github.com/ergut.png",
  actions: [
    {
      name: "query",
      description: "Run a read-only BigQuery SQL query",
      parameters: [
        {
          name: "maximumBytesBilled",
          type: "string",
          description: "Maximum bytes billed (default: 1GB)",
          required: false,
        },
        {
          name: "sql",
          type: "string",
          description: "Parameter: sql",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/ergut/mcp-bigquery-server",
  _varName: "bigqueryMcpServerPlugin",
};

const bigqueryMcpServer1Plugin: Plugin = {
  id: "bgkxh59h9w",
  name: "BigQuery MCP server",
  description:
    "A Model Context Protocol server that provides access to BigQuery. This server enables LLMs to inspect database schemas and execute queries.",
  image: "https://github.com/LucasHild.png",
  actions: [],
  githubUrl: "https://github.com/LucasHild/mcp-server-bigquery",
  _varName: "bigqueryMcpServer1Plugin",
};

const tinybirdMcpServerPlugin: Plugin = {
  id: "53l5ojnx30",
  name: "Tinybird MCP server",
  description:
    "An MCP server to interact with a Tinybird Workspace from any MCP client.",
  image: "https://github.com/tinybirdco.png",
  actions: [],
  githubUrl: "https://github.com/tinybirdco/mcp-tinybird",
  _varName: "tinybirdMcpServerPlugin",
};

const openDataModelContextProtocolPlugin: Plugin = {
  id: "wxjcqeq3gt",
  name: "Open Data Model Context Protocol",
  description:
    "Access to many public datasets right from your LLM application.",
  image: "https://github.com/OpenDataMCP.png",
  actions: [],
  githubUrl: "https://github.com/OpenDataMCP/OpenDataMCP",
  _varName: "openDataModelContextProtocolPlugin",
};

const inoyuApacheUnomiMcpServerPlugin: Plugin = {
  id: "cot5p3ud7z",
  name: "Inoyu Apache Unomi MCP Server",
  description:
    "A Model Context Protocol server enabling Claude to maintain user context through Apache Unomi profile management.",
  image: "https://github.com/sergehuber.png",
  actions: [],
  githubUrl: "https://github.com/sergehuber/inoyu-mcp-unomi-server",
  _varName: "inoyuApacheUnomiMcpServerPlugin",
};

const mcpgsuitePlugin: Plugin = {
  id: "umzb0imbu2",
  name: "mcp-gsuite",
  description: "MCP server to interact with Google produts.",
  image: "https://github.com/MarkusPfundstein.png",
  actions: [],
  githubUrl: "https://github.com/MarkusPfundstein/mcp-gsuite",
  _varName: "mcpgsuitePlugin",
};

const blueskyContextServerPlugin: Plugin = {
  id: "5bnnwuqdku",
  name: "Bluesky Context Server",
  description:
    "A simple MCP server that can enable MCP clients to query Bluesky instances.",
  image: "https://github.com/laulauland.png",
  actions: [],
  githubUrl: "https://github.com/laulauland/bluesky-context-server",
  _varName: "blueskyContextServerPlugin",
};

const slackMcpServerPlugin: Plugin = {
  id: "zcfm7oczkc",
  name: "Slack MCP Server",
  description:
    "MCP Server for the Slack API, enabling Claude to interact with Slack workspaces.",
  image: "https://github.com/modelcontextprotocol.png",
  actions: [
    {
      name: "slack_list_channels",
      description: "List public channels in the workspace with pagination",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of channels to return (default 100, max 200)",
          required: false,
        },
      ],
    },
    {
      name: "slack_post_message",
      description: "Post a new message to a Slack channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel to post to",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The message text to post",
          required: true,
        },
      ],
    },
    {
      name: "slack_reply_to_thread",
      description: "Reply to a specific message thread in Slack",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel containing the thread",
          required: true,
        },
        {
          name: "text",
          type: "string",
          description: "The reply text",
          required: true,
        },
        {
          name: "thread_ts",
          type: "string",
          description:
            "The timestamp of the parent message in the format '1234567890.123456'. Timestamps in the format without the period can be converted by adding the period such that 6 numbers come after it.",
          required: true,
        },
      ],
    },
    {
      name: "slack_add_reaction",
      description: "Add a reaction emoji to a message",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel containing the message",
          required: true,
        },
        {
          name: "reaction",
          type: "string",
          description: "The name of the emoji reaction (without ::)",
          required: true,
        },
        {
          name: "timestamp",
          type: "string",
          description: "The timestamp of the message to react to",
          required: true,
        },
      ],
    },
    {
      name: "slack_get_channel_history",
      description: "Get recent messages from a channel",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel",
          required: true,
        },
        {
          name: "limit",
          type: "number",
          description: "Number of messages to retrieve (default 10)",
          required: false,
        },
      ],
    },
    {
      name: "slack_get_thread_replies",
      description: "Get all replies in a message thread",
      parameters: [
        {
          name: "channel_id",
          type: "string",
          description: "The ID of the channel containing the thread",
          required: true,
        },
        {
          name: "thread_ts",
          type: "string",
          description:
            "The timestamp of the parent message in the format '1234567890.123456'. Timestamps in the format without the period can be converted by adding the period such that 6 numbers come after it.",
          required: true,
        },
      ],
    },
    {
      name: "slack_get_users",
      description:
        "Get a list of all users in the workspace with their basic profile information",
      parameters: [
        {
          name: "cursor",
          type: "string",
          description: "Pagination cursor for next page of results",
          required: false,
        },
        {
          name: "limit",
          type: "number",
          description:
            "Maximum number of users to return (default 100, max 200)",
          required: false,
        },
      ],
    },
    {
      name: "slack_get_user_profile",
      description: "Get detailed profile information for a specific user",
      parameters: [
        {
          name: "user_id",
          type: "string",
          description: "The ID of the user",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/modelcontextprotocol/servers",
  _varName: "slackMcpServerPlugin",
};

const mcpservercommandsPlugin: Plugin = {
  id: "4vlwa2czqa",
  name: "mcp-server-commands",
  description: "An MCP server to run commands.",
  image: "https://github.com/g0t4.png",
  actions: [
    {
      name: "run_command",
      description: "Action for run_command",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Command with args",
          required: true,
        },
        {
          name: "cwd",
          type: "string",
          description: "Current working directory, leave empty in most cases",
          required: false,
        },
      ],
    },
    {
      name: "run_script",
      description: "Action for run_script",
      parameters: [
        {
          name: "cwd",
          type: "string",
          description: "Current working directory",
          required: false,
        },
        {
          name: "interpreter",
          type: "string",
          description:
            "Command with arguments. Script will be piped to stdin. Examples: bash, fish, zsh, python, or: bash --norc",
          required: false,
        },
        {
          name: "script",
          type: "string",
          description: "Script to run",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/g0t4/mcp-server-commands",
  _varName: "mcpservercommandsPlugin",
};

const mcpk8sgoPlugin: Plugin = {
  id: "qzwt22qnr5",
  name: "mcp-k8s-go",
  description:
    "This project is intended as a both MCP server connecting to Kubernetes and a library to build more servers for any custom resources in Kubernetes.",
  image: "https://github.com/strowk.png",
  actions: [],
  githubUrl: "https://github.com/strowk/mcp-k8s-go",
  _varName: "mcpk8sgoPlugin",
};

const mcpservercloudflarePlugin: Plugin = {
  id: "uw9yuno75g",
  name: "mcp-server-cloudflare",
  description:
    "Lets you use Claude Desktop, or any MCP Client, to use natural language to accomplish things on your Cloudflare account.",
  image: "https://github.com/cloudflare.png",
  actions: [],
  githubUrl: "https://github.com/cloudflare/mcp-server-cloudflare",
  _varName: "mcpservercloudflarePlugin",
};

const mcpserveryoutubetranscriptPlugin: Plugin = {
  id: "z429kk3te7",
  name: "mcp-server-youtube-transcript",
  description:
    "A Model Context Protocol server that enables retrieval of transcripts from YouTube videos. This server provides direct access to video captions and subtitles through a simple interface.",
  image: "https://github.com/kimtaeyoon83.png",
  actions: [
    {
      name: "get_transcript",
      description: "Extract transcript from a YouTube video URL or ID",
      parameters: [
        {
          name: "lang",
          type: "string",
          description: "Language code for transcript (e.g., 'ko', 'en')",
          required: true,
        },
        {
          name: "url",
          type: "string",
          description: "YouTube video URL or ID",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
  _varName: "mcpserveryoutubetranscriptPlugin",
};

const mcpserverplaywrightPlugin: Plugin = {
  id: "9q4zck8po5",
  name: "MCP-Server-Playwright",
  description:
    "Enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment",
  image: "https://github.com/Automata-Labs-team.png",
  actions: [
    {
      name: "browser_navigate",
      description: "Navigate to a URL",
      parameters: [
        {
          name: "url",
          type: "string",
          description: "Parameter: url",
          required: true,
        },
      ],
    },
    {
      name: "browser_screenshot",
      description:
        "Take a screenshot of the current page or a specific element",
      parameters: [
        {
          name: "fullPage",
          type: "boolean",
          description: "Take a full page screenshot (default: false)",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Name for the screenshot",
          required: true,
        },
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to screenshot",
          required: false,
        },
      ],
    },
    {
      name: "browser_click",
      description: "Click an element on the page using CSS selector",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to click",
          required: true,
        },
      ],
    },
    {
      name: "browser_click_text",
      description: "Click an element on the page by its text content",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Text content of the element to click",
          required: true,
        },
      ],
    },
    {
      name: "browser_fill",
      description: "Fill out an input field",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for input field",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to fill",
          required: true,
        },
      ],
    },
    {
      name: "browser_select",
      description:
        "Select an element on the page with Select tag using CSS selector",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "browser_select_text",
      description:
        "Select an element on the page with Select tag by its text content",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Text content of the element to select",
          required: true,
        },
        {
          name: "value",
          type: "string",
          description: "Value to select",
          required: true,
        },
      ],
    },
    {
      name: "browser_hover",
      description: "Hover an element on the page using CSS selector",
      parameters: [
        {
          name: "selector",
          type: "string",
          description: "CSS selector for element to hover",
          required: true,
        },
      ],
    },
    {
      name: "browser_hover_text",
      description: "Hover an element on the page by its text content",
      parameters: [
        {
          name: "text",
          type: "string",
          description: "Text content of the element to hover",
          required: true,
        },
      ],
    },
    {
      name: "browser_evaluate",
      description: "Execute JavaScript in the browser console",
      parameters: [
        {
          name: "script",
          type: "string",
          description: "JavaScript code to execute",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Automata-Labs-team/MCP-Server-Playwright",
  _varName: "mcpserverplaywrightPlugin",
};

const mcpserverragwebbrowserPlugin: Plugin = {
  id: "sr8xzdi3yv",
  name: "mcp-server-rag-web-browser",
  description:
    "Implementation of an MCP server for the RAG Web Browser Actor. This Actor serves as a web browser for large language models (LLMs) and RAG pipelines, similar to a web search in ChatGPT.",
  image: "https://github.com/apify.png",
  actions: [
    {
      name: "search",
      description:
        "Search phrase or a URL at Google and return crawled web pages as text or Markdown",
      parameters: [
        {
          name: "maxResults",
          type: "integer",
          description:
            "The maximum number of top organic Google Search results whose web pages will be extracted",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description: "Google Search keywords or a URL of a specific web page",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/apify/mcp-server-rag-web-browser",
  _varName: "mcpserverragwebbrowserPlugin",
};

const mcpserverqdrantPlugin: Plugin = {
  id: "9ejy5scw5i",
  name: "mcp-server-qdrant",
  description:
    "This repository is an example of how to create a MCP server for Qdrant, a vector search engine.",
  image: "https://github.com/qdrant.png",
  actions: [
    {
      name: "qdrant-store-memory",
      description:
        "Keep the memory for later use, when you are asked to remember something.",
      parameters: [
        {
          name: "information",
          type: "string",
          description: "Parameter: information",
          required: true,
        },
      ],
    },
    {
      name: "qdrant-find-memories",
      description:
        "Look up memories in Qdrant. Use this tool when you need to: \n - Find memories by their content \n - Access memories for further analysis \n - Get some personal information about the user",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "The query to search for",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/qdrant/mcp-server-qdrant",
  _varName: "mcpserverqdrantPlugin",
};

const mcpsimplepubmedPlugin: Plugin = {
  id: "5wlfb8i6bj",
  name: "mcp-simple-pubmed",
  description:
    "An MCP server that provides access to PubMed articles through the Entrez API.",
  image: "https://github.com/andybrandt.png",
  actions: [
    {
      name: "search_pubmed",
      description:
        'Search PubMed for medical and life sciences research articles.\n\nYou can use these search features:\n- Simple keyword search: "covid vaccine"\n- Field-specific search:\n  - Title search: [Title]\n  - Author search: [Author]\n  - MeSH terms: [MeSH Terms]\n  - Journal: [Journal]\n- Date ranges: Add year or date range like "2020:2024[Date - Publication]"\n- Combine terms with AND, OR, NOT\n- Use quotation marks for exact phrases\n\nExamples:\n- "covid vaccine" - basic search\n- "breast cancer"[Title] AND "2023"[Date - Publication]\n- "Smith J"[Author] AND "diabetes"\n- "RNA"[MeSH Terms] AND "therapy"\n\nThe search will return:\n- Paper titles\n- Authors\n- Publication details\n- Abstract preview (when available)\n- Links to full text (when available)\n- DOI when available\n- Keywords and MeSH terms\n\nNote: Use quotes around multi-word terms for best results.',
      parameters: [
        {
          name: "max_results",
          type: "number",
          description: "Maximum number of results to return (default: 10)",
          required: false,
        },
        {
          name: "query",
          type: "string",
          description:
            "Search query to match against papers (e.g., 'covid vaccine', 'cancer treatment')",
          required: true,
        },
      ],
    },
    {
      name: "get_paper_fulltext",
      description:
        'Get full text of a PubMed article using its ID.\n\n        This tool attempts to retrieve the complete text of the paper if available through PubMed Central.\n        If the paper is not available in PMC, it will return a message explaining why and provide information\n        about where the text might be available (e.g., through DOI).\n\n        Example usage:\n        get_paper_fulltext(pmid="39661433")\n\n        Returns:\n        - If successful: The complete text of the paper\n        - If not available: A clear message explaining why (e.g., "not in PMC", "requires journal access")',
      parameters: [
        {
          name: "pmid",
          type: "string",
          description: "PubMed ID of the article",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/andybrandt/mcp-simple-pubmed",
  _varName: "mcpsimplepubmedPlugin",
};

const mcpnodejsserverPlugin: Plugin = {
  id: "8jy2cx1u5p",
  name: "mcp-nodejs-server",
  description:
    "MCP Server for the Gentoro services, enabling Claude to interact with Gentoro, which allows users to create and integrate tools into a common Bridge, defining all available capabilities.",
  image: "https://github.com/gentoro-GT.png",
  actions: [],
  githubUrl: "https://github.com/gentoro-GT/mcp-nodejs-server",
  _varName: "mcpnodejsserverPlugin",
};

const mcpserverbirdstatsPlugin: Plugin = {
  id: "qecq4o25i1",
  name: "mcp-server-birdstats",
  description:
    "Cross-reference your BirdNET-Pi data with eBird observations using natural language",
  image: "https://github.com/DMontgomery40.png",
  actions: [],
  githubUrl: "https://github.com/DMontgomery40/mcp-server-birdstats",
  _varName: "mcpserverbirdstatsPlugin",
};

const mcpsnykPlugin: Plugin = {
  id: "nl2e6t2lpd",
  name: "mcp-snyk",
  description:
    "A standalone Model Context Protocol server for Snyk security scanning functionality.",
  image: "https://github.com/Sladey01.png",
  actions: [
    {
      name: "scan_repository",
      description: "Scan a repository for security vulnerabilities using Snyk",
      parameters: [
        {
          name: "branch",
          type: "string",
          description: "Branch to scan (optional)",
          required: false,
        },
        {
          name: "url",
          type: "string",
          description: "Repository URL to scan",
          required: true,
        },
      ],
    },
    {
      name: "scan_project",
      description: "Scan an existing Snyk project",
      parameters: [
        {
          name: "projectId",
          type: "string",
          description: "Snyk project ID to scan",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Sladey01/mcp-snyk",
  _varName: "mcpsnykPlugin",
};

const videoeditingmcpPlugin: Plugin = {
  id: "th0hjo14xx",
  name: "video-editing-mcp",
  description:
    "Upload, edit, and generate videos from everyone's favorite LLM and Video Jungle.",
  image: "https://github.com/burningion.png",
  actions: [],
  githubUrl: "https://github.com/burningion/video-editing-mcp",
  _varName: "videoeditingmcpPlugin",
};

const mcpservertmdbPlugin: Plugin = {
  id: "g3nl1a0n25",
  name: "mcp-server-tmdb",
  description:
    "Integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.",
  image: "https://github.com/Laksh-star.png",
  actions: [
    {
      name: "search_movies",
      description: "Search for movies by title or keywords",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Search query for movie titles",
          required: true,
        },
      ],
    },
    {
      name: "get_recommendations",
      description: "Get movie recommendations based on a movie ID",
      parameters: [
        {
          name: "movieId",
          type: "string",
          description: "TMDB movie ID to get recommendations for",
          required: true,
        },
      ],
    },
    {
      name: "get_trending",
      description: "Get trending movies for a time window",
      parameters: [
        {
          name: "timeWindow",
          type: "string",
          description: "Time window for trending movies",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/Laksh-star/mcp-server-tmdb",
  _varName: "mcpservertmdbPlugin",
};

const mcpserverneonPlugin: Plugin = {
  id: "1yes4hhjq4",
  name: "mcp-server-neon",
  description:
    "Lets you use Claude Desktop, or any MCP Client, to use natural language to accomplish things with Neon.",
  image: "https://github.com/neondatabase-labs.png",
  actions: [],
  githubUrl: "https://github.com/neondatabase-labs/mcp-server-neon",
  _varName: "mcpserverneonPlugin",
};

const cmdmcpserverPlugin: Plugin = {
  id: "s83mqs6123",
  name: "cmd-mcp-server",
  description: "MCP server allowing any and all command execution over CMD",
  image: "https://github.com/PhialsBasement.png",
  actions: [
    {
      name: "execute_command",
      description:
        "Execute a command and return its output. Commands run in a persistent shell session by default. Use newSession: true to run in a new shell instance.",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: true,
        },
        {
          name: "newSession",
          type: "boolean",
          description: "Parameter: newSession",
          required: false,
        },
      ],
    },
    {
      name: "execute_ssh_command",
      description:
        "Execute a command on a remote server via SSH. Commands run in a persistent SSH session by default. Use newSession: true to run in a new session.",
      parameters: [
        {
          name: "command",
          type: "string",
          description: "Parameter: command",
          required: true,
        },
        {
          name: "host",
          type: "string",
          description: "Parameter: host",
          required: true,
        },
        {
          name: "newSession",
          type: "boolean",
          description: "Parameter: newSession",
          required: false,
        },
        {
          name: "password",
          type: "string",
          description: "Parameter: password",
          required: false,
        },
        {
          name: "port",
          type: "number",
          description: "Parameter: port",
          required: false,
        },
        {
          name: "privateKey",
          type: "string",
          description: "Parameter: privateKey",
          required: false,
        },
        {
          name: "username",
          type: "string",
          description: "Parameter: username",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/PhialsBasement/CMD-MCP-Server",
  _varName: "cmdmcpserverPlugin",
};

const mcpjetbrains1Plugin: Plugin = {
  id: "k7xzbtlxvb",
  name: "mcp-jetbrains",
  description: "The server proxies requests from client to JetBrains IDE.",
  image: "https://github.com/JetBrains.png",
  actions: [],
  githubUrl: "https://github.com/JetBrains/mcp-jetbrains",
  _varName: "mcpjetbrains1Plugin",
};

const mcpknowledgegraphPlugin: Plugin = {
  id: "zn6gf7sxjs",
  name: "mcp-knowledge-graph",
  description:
    "An improved implementation of persistent memory using a local knowledge graph with a customizable --memory-path. This lets Claude remember information about the user across chats.",
  image: "https://github.com/shaneholloman.png",
  actions: [
    {
      name: "create_entities",
      description: "Create multiple new entities in the knowledge graph",
      parameters: [
        {
          name: "entities",
          type: "object array",
          description: "Parameter: entities",
          required: true,
        },
      ],
    },
    {
      name: "create_relations",
      description:
        "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "Parameter: relations",
          required: true,
        },
      ],
    },
    {
      name: "add_observations",
      description:
        "Add new observations to existing entities in the knowledge graph",
      parameters: [
        {
          name: "observations",
          type: "object array",
          description: "Parameter: observations",
          required: true,
        },
      ],
    },
    {
      name: "delete_entities",
      description:
        "Delete multiple entities and their associated relations from the knowledge graph",
      parameters: [
        {
          name: "entityNames",
          type: "string array",
          description: "An array of entity names to delete",
          required: true,
        },
      ],
    },
    {
      name: "delete_observations",
      description:
        "Delete specific observations from entities in the knowledge graph",
      parameters: [
        {
          name: "deletions",
          type: "object array",
          description: "Parameter: deletions",
          required: true,
        },
      ],
    },
    {
      name: "delete_relations",
      description: "Delete multiple relations from the knowledge graph",
      parameters: [
        {
          name: "relations",
          type: "object array",
          description: "An array of relations to delete",
          required: true,
        },
      ],
    },
    {
      name: "read_graph",
      description: "Read the entire knowledge graph",
      parameters: [],
    },
    {
      name: "search_nodes",
      description: "Search for nodes in the knowledge graph based on a query",
      parameters: [
        {
          name: "query",
          type: "string",
          description:
            "The search query to match against entity names, types, and observation content",
          required: true,
        },
      ],
    },
    {
      name: "open_nodes",
      description: "Open specific nodes in the knowledge graph by their names",
      parameters: [
        {
          name: "names",
          type: "string array",
          description: "An array of entity names to retrieve",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/shaneholloman/mcp-knowledge-graph",
  _varName: "mcpknowledgegraphPlugin",
};

const salesforcemcpserverPlugin: Plugin = {
  id: "y9k3w9grtk",
  name: "salesforce-mcp-server",
  description:
    "A Model Context Protocol server implementation for interacting with Salesforce through its REST API.",
  image: "https://github.com/kablewy.png",
  actions: [
    {
      name: "query",
      description: "Execute a SOQL query on Salesforce",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "SOQL query to execute",
          required: true,
        },
      ],
    },
    {
      name: "tooling-query",
      description: "Execute a query against the Salesforce Tooling API",
      parameters: [
        {
          name: "query",
          type: "string",
          description: "Tooling API query to execute",
          required: true,
        },
      ],
    },
    {
      name: "describe-object",
      description: "Get detailed metadata about a Salesforce object",
      parameters: [
        {
          name: "detailed",
          type: "boolean",
          description: "Whether to return full metadata (optional)",
          required: false,
        },
        {
          name: "objectName",
          type: "string",
          description: "API name of the object to describe",
          required: true,
        },
      ],
    },
    {
      name: "metadata-retrieve",
      description: "Retrieve metadata components from Salesforce",
      parameters: [
        {
          name: "fullNames",
          type: "string array",
          description: "Array of component names to retrieve",
          required: true,
        },
        {
          name: "type",
          type: "string",
          description: "Metadata type (e.g., Flow, CustomObject)",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/kablewy/salesforce-mcp-server",
  _varName: "salesforcemcpserverPlugin",
};

const nutjswindowscontrolPlugin: Plugin = {
  id: "r3fdu3l0yz",
  name: "nutjs-windows-control",
  description:
    "A Windows control server built using nut.js and Model Context Protocol (MCP), providing programmatic control over Windows system operations including mouse, keyboard, window management, and screen capture functionality.",
  image: "https://github.com/Cheffromspace.png",
  actions: [],
  githubUrl: "https://github.com/Cheffromspace/MCPControl",
  _varName: "nutjswindowscontrolPlugin",
};

const mcpserverdataexplorationPlugin: Plugin = {
  id: "hwm8j9c422",
  name: "mcp-server-data-exploration",
  description:
    "Enables autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort.",
  image: "https://github.com/reading-plus-ai.png",
  actions: [
    {
      name: "load_csv",
      description:
        "\nLoad CSV File Tool\n\nPurpose:\nLoad a local CSV file into a DataFrame.\n\nUsage Notes:\n\t•\tIf a df_name is not provided, the tool will automatically assign names sequentially as df_1, df_2, and so on.\n",
      parameters: [
        {
          name: "csv_path",
          type: "string",
          description: "Parameter: csv_path",
          required: true,
        },
        {
          name: "df_name",
          type: "string",
          description: "Parameter: df_name",
          required: false,
        },
      ],
    },
    {
      name: "run_script",
      description:
        "\nPython Script Execution Tool\n\nPurpose:\nExecute Python scripts for specific data analytics tasks.\n\nAllowed Actions\n\t1.\tPrint Results: Output will be displayed as the script’s stdout.\n\t2.\t[Optional] Save DataFrames: Store DataFrames in memory for future use by specifying a save_to_memory name.\n\nProhibited Actions\n\t1.\tOverwriting Original DataFrames: Do not modify existing DataFrames to preserve their integrity for future tasks.\n\t2.\tCreating Charts: Chart generation is not permitted.\n",
      parameters: [
        {
          name: "save_to_memory",
          type: "string",
          description: "Parameter: save_to_memory",
          required: false,
        },
        {
          name: "script",
          type: "string",
          description: "Parameter: script",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/reading-plus-ai/mcp-server-data-exploration",
  _varName: "mcpserverdataexplorationPlugin",
};

const llmcontextPlugin: Plugin = {
  id: "n895hro51i",
  name: "llm-context",
  description: "Share code context with LLMs via MCP or clipboard",
  image: "https://github.com/cyberchitta.png",
  actions: [
    {
      name: "lc-project-context",
      description:
        "IMPORTANT: First check if project context is already available in the conversation before making any new requests. Use lc-get-files for retrieving specific files, and only use this tool when a broad repository overview is needed.\n\nGenerates a structured repository overview including: 1) Directory tree with file status (✓ full, ○ outline, ✗ excluded) 2) Complete contents of key files 3) Smart outlines highlighting important definitions in supported languages. The output is customizable via profiles that control file inclusion rules and presentation format. The assistant tracks previously retrieved project context in the conversation and checks this history before making new requests.",
      parameters: [
        {
          name: "profile_name",
          type: "string",
          description:
            "Profile to use (e.g. 'code', 'copy', 'full') - defines file inclusion and presentation rules",
          required: false,
        },
        {
          name: "root_path",
          type: "string",
          description:
            "Root directory path (e.g. '/home/user/projects/myproject')",
          required: true,
        },
      ],
    },
    {
      name: "lc-get-files",
      description:
        "IMPORTANT: Check previously retrieved file contents before making new requests. Retrieves (read-only) complete contents of specified files from the project. For this project, this is the preferred method for all file content analysis and text searches - simply retrieve the relevant files and examine their contents. The assistant cannot modify files with this tool - it only reads their contents.",
      parameters: [
        {
          name: "paths",
          type: "string array",
          description:
            "File paths relative to root_path, starting with a forward slash and including the root directory name. For example, if root_path is '/home/user/projects/myproject', then a valid path would be '/myproject/src/main.py",
          required: true,
        },
        {
          name: "root_path",
          type: "string",
          description:
            "Root directory path (e.g. '/home/user/projects/myproject')",
          required: true,
        },
      ],
    },
    {
      name: "lc-list-modified-files",
      description:
        "IMPORTANT: First get the generation timestamp from the project context. Returns a list of paths to files that have been modified since a given timestamp. This is typically used to track which files have changed during the conversation. After getting the list, use lc-get-files to examine the contents of any modified files of interest.",
      parameters: [
        {
          name: "profile_name",
          type: "string",
          description:
            "Profile to use (e.g. 'code', 'copy', 'full') - defines file inclusion and presentation rules",
          required: false,
        },
        {
          name: "root_path",
          type: "string",
          description:
            "Root directory path (e.g. '/home/user/projects/myproject')",
          required: true,
        },
        {
          name: "timestamp",
          type: "number",
          description: "Unix timestamp to check modifications since",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/cyberchitta/llm-context.py",
  _varName: "llmcontextPlugin",
};

const mcphfspacePlugin: Plugin = {
  id: "s57c80wvgq",
  name: "mcp-hfspace",
  description:
    "Use HuggingFace Spaces directly from Claude. Use Open Source Image Generation, Chat, Vision tasks and more. Supports Image, Audio and text uploads/downloads.",
  image: "https://github.com/evalstate.png",
  actions: [
    {
      name: "available-files",
      description:
        "A list of available file and resources. If the User requests things like 'most recent image' or 'the audio' use this tool to identify the intended resource.This tool returns 'resource uri', 'name', 'size', 'last modified'  and 'mime type' in a markdown table",
      parameters: [],
    },
    {
      name: "FLUX_1-schnell-infer",
      description: "Call the FLUX.1-schnell endpoint /infer",
      parameters: [
        {
          name: "height",
          type: "number",
          description: "Height",
          required: false,
        },
        {
          name: "num_inference_steps",
          type: "number",
          description: "Number of inference steps",
          required: false,
        },
        {
          name: "prompt",
          type: "string",
          description: "Prompt",
          required: true,
        },
        {
          name: "randomize_seed",
          type: "boolean",
          description: "Randomize seed",
          required: false,
        },
        {
          name: "seed",
          type: "number",
          description: "Seed",
          required: false,
        },
        {
          name: "width",
          type: "number",
          description: "Width",
          required: false,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/evalstate/mcp-hfspace",
  _varName: "mcphfspacePlugin",
};

const e2bmcpserverPlugin: Plugin = {
  id: "o9swvhmy2i",
  name: "e2b-mcp-server",
  description: "Using MCP to run code via e2b.",
  image: "https://github.com/e2b-dev.png",
  actions: [
    {
      name: "run_code",
      description:
        "Run python code in a secure sandbox by E2B. Using the Jupyter Notebook syntax.",
      parameters: [
        {
          name: "code",
          type: "string",
          description: "Parameter: code",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/e2b-dev/mcp-server",
  _varName: "e2bmcpserverPlugin",
};

const coincapmcpPlugin: Plugin = {
  id: "sg1ysa9nrk",
  name: "coincap-mcp",
  description:
    "Real-time cryptocurrency market data integration using CoinCap's public API, providing access to crypto prices and market information without API keys",
  image: "https://github.com/QuantGeekDev.png",
  actions: [
    {
      name: "bitcoin_price",
      description: "Get realtime bitcoin price",
      parameters: [],
    },
    {
      name: "get_crypto_price",
      description: "Get realtime crypto price on crypto",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Name of the crypto coin",
          required: false,
        },
      ],
    },
    {
      name: "list_assets",
      description: "Get all available crypto assets",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/QuantGeekDev/coincap-mcp",
  _varName: "coincapmcpPlugin",
};

const climcpserverPlugin: Plugin = {
  id: "q89277vzl1",
  name: "cli-mcp-server",
  description:
    "Command line interface with secure execution and customizable security policies",
  image: "https://github.com/MladenSU.png",
  actions: [
    {
      name: "run_command",
      description:
        "Allows command (CLI) execution in the directory: /app\n\nAvailable commands: pwd, cat, echo, find, ls, grep\nAvailable flags: -l, -h, --help, -v, -a, -r\n\nNote: Shell operators (&&, |, >, >>) are not supported.",
      parameters: [
        {
          name: "command",
          type: "string",
          description:
            "Single command to execute (example: 'ls -l' or 'cat file.txt')",
          required: true,
        },
      ],
    },
    {
      name: "show_security_rules",
      description:
        "Show what commands and operations are allowed in this environment.\n",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/MladenSU/cli-mcp-server",
  _varName: "climcpserverPlugin",
};

const mcpserverkubernetesPlugin: Plugin = {
  id: "w71ieamqrt",
  name: "mcp-server-kubernetes",
  description:
    "TypeScript implementation of Kubernetes cluster operations for pods, deployments, services.",
  image: "https://github.com/Flux159.png",
  actions: [
    {
      name: "list_pods",
      description: "List pods in a namespace",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
      ],
    },
    {
      name: "list_deployments",
      description: "List deployments in a namespace",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
      ],
    },
    {
      name: "list_services",
      description: "List services in a namespace",
      parameters: [
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
      ],
    },
    {
      name: "list_namespaces",
      description: "List all namespaces",
      parameters: [],
    },
    {
      name: "create_pod",
      description: "Create a new Kubernetes pod",
      parameters: [
        {
          name: "command",
          type: "string array",
          description: "Parameter: command",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
        {
          name: "template",
          type: "string",
          description: "Parameter: template",
          required: true,
        },
      ],
    },
    {
      name: "create_deployment",
      description: "Create a new Kubernetes deployment",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
        {
          name: "ports",
          type: "number array",
          description: "Parameter: ports",
          required: false,
        },
        {
          name: "replicas",
          type: "number",
          description: "Parameter: replicas",
          required: false,
        },
        {
          name: "template",
          type: "string",
          description: "Parameter: template",
          required: true,
        },
      ],
    },
    {
      name: "delete_pod",
      description: "Delete a Kubernetes pod",
      parameters: [
        {
          name: "ignoreNotFound",
          type: "boolean",
          description: "Parameter: ignoreNotFound",
          required: false,
        },
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
      ],
    },
    {
      name: "describe_pod",
      description:
        "Describe a Kubernetes pod (read details like status, containers, etc.)",
      parameters: [
        {
          name: "name",
          type: "string",
          description: "Parameter: name",
          required: true,
        },
        {
          name: "namespace",
          type: "string",
          description: "Parameter: namespace",
          required: true,
        },
      ],
    },
    {
      name: "cleanup",
      description: "Cleanup all managed resources",
      parameters: [],
    },
  ],
  githubUrl: "https://github.com/Flux159/mcp-server-kubernetes",
  _varName: "mcpserverkubernetesPlugin",
};

const openrpcmpcserverPlugin: Plugin = {
  id: "8w5h7useml",
  name: "openrpc-mpc-server",
  description:
    "A Model Context Protocol (MCP) server that provides JSON-RPC functionality through OpenRPC.",
  image: "https://github.com/shanejonas.png",
  actions: [
    {
      name: "rpc_call",
      description:
        "Call any JSON-RPC method on a server with parameters. A user would prompt: Call method <method> on <server url> with params <params>",
      parameters: [
        {
          name: "method",
          type: "string",
          description: "JSON-RPC method name to call",
          required: true,
        },
        {
          name: "params",
          type: "string",
          description: "Stringified Parameters to pass to the method",
          required: false,
        },
        {
          name: "server",
          type: "string",
          description: "Server URL",
          required: true,
        },
      ],
    },
    {
      name: "rpc_discover",
      description:
        "This uses JSON-RPC to call `rpc.discover` which is part of the OpenRPC Specification for discovery for JSON-RPC servers. A user would prompt: What JSON-RPC methods does this server have? <server url>",
      parameters: [
        {
          name: "server",
          type: "string",
          description: "Server URL",
          required: true,
        },
      ],
    },
  ],
  githubUrl: "https://github.com/shanejonas/openrpc-mpc-server",
  _varName: "openrpcmpcserverPlugin",
};

const corePlugin: Plugin = {
  id: "a5dcf686-50ee-41f5-bdcb-44eaacbeaf81",
  name: "Core",
  description: "",
  image: "/logos/starknet.png",
  actions: [],
  _varName: "corePlugin",
};

const unruggablePlugin: Plugin = {
  id: "8d3e05ef-c85a-43cc-8e57-486e94fcf39e",
  name: "Unruggable",
  description:
    "Create secure, transparent memecoins with built-in protections against common exploits and rug pulls",
  image: "/logos/unruggable.png",
  actions: [],
  _varName: "unruggablePlugin",
};

export const allPlugins: Array<Plugin> = [
  ...corePlugins,
  odooMcpServerPlugin,
  mcpmymacPlugin,
  viteMcpServerPlugin,
  mcpdbsPlugin,
  codeindexmcpPlugin,
  zoomeyeMcpServerPlugin,
  citeassistMcpPlugin,
  mcpjetbrainsPlugin,
  citemcpPlugin,
  eventcatalogMcpServerPlugin,
  difyAsMcpServerPlugin,
  clickhousemcpserverPlugin,
  yetanotherunitymcpPlugin,
  agentConstructPlugin,
  gameAssetGeneratorPlugin,
  autocadMcpServerPlugin,
  semgrepMcpServerPlugin,
  powerplatformMcpPlugin,
  mcpForItsmPlugin,
  mysqldbmcpserverPlugin,
  devhubCmsMcpPlugin,
  mcpserversemgrepPlugin,
  cloverMcpServerPlugin,
  houdinimcpPlugin,
  linkedinprofileanalyzerPlugin,
  withseismicMcpPlugin,
  hassmcpPlugin,
  mcpcrawlerPlugin,
  kafkaMcpServerPlugin,
  mcpfluxschnellPlugin,
  argocdmcpPlugin,
  excalidrawMcpServerPlugin,
  pancakeswappoolspymcpPlugin,
  mcpNotifyServerPlugin,
  memoryBankMcpServerPlugin,
  lokkaMicrosoft365McpServerPlugin,
  imfDataMcpServerPlugin,
  freecadMcpPlugin,
  veyraxPlugin,
  mcpservertreesitterPlugin,
  nearMcpPlugin,
  docdocxmcpPlugin,
  mysqlMcpServerPlugin,
  dbcodePlugin,
  mcpdingdingbotPlugin,
  mcpcoincapjjPlugin,
  nearbysearchmcpPlugin,
  algorandMcpPlugin,
  whoamimcpPlugin,
  quantmcpPlugin,
  whattimeisitmcpPlugin,
  mcpmusicanalysisPlugin,
  whereamimcpPlugin,
  mcpaudioanalysisPlugin,
  freecadMcp1Plugin,
  vueMcpServerPlugin,
  rendermcpPlugin,
  fantasyPremierLeagueMcpServerPlugin,
  homeAssistantMcpPlugin,
  bingSearchMcpServerPlugin,
  mcpServerPlugin,
  duneanalyticsmcpPlugin,
  thoughtSpaceMcpAdvancedBranchthinkingToolPlugin,
  solanaMcpServerPlugin,
  mcpUnityPlugin,
  reactmcpWebSearchPlugin,
  playwrightmcpPlugin,
  mcpbrowserusePlugin,
  mysqlmcpserverPlugin,
  azureAiSearchMcpServerPlugin,
  promptshopmcpPlugin,
  mcpimagegeneratorPlugin,
  gemsuitemcpPlugin,
  mcpHttpWithSseTransportToolsPlugin,
  query_tablePlugin,
  cryptofeargreedmcpPlugin,
  sketchupmcpPlugin,
  idamcpserverPlugin,
  imageToolkitMcpServerPlugin,
  vrchatMcpServerPlugin,
  claudeTypescriptMcpServersPlugin,
  pumpfunMcpServerPlugin,
  erickWendelContributionsMcpPlugin,
  aiderMcpServerPlugin,
  discordmcpPlugin,
  cryptomcpPlugin,
  mcpservertexteditorPlugin,
  coinmarketcapMcpServerPlugin,
  terraformcloudmcpPlugin,
  qgisMcpServerPlugin,
  swaggerMcpServerPlugin,
  openaiWebsearchMcpServerPlugin,
  payloadCmsMcpServerPlugin,
  mcpdbutilsPlugin,
  hyperbrowserPlugin,
  openaitool2mcpPlugin,
  mem0MemorySystemPlugin,
  cursorSoundMcpPlugin,
  hdwMcpServerPlugin,
  mcpBasePlugin,
  codeMcpServerPlugin,
  unstructuredApiMcpServerPlugin,
  xiyanMcpServerPlugin,
  mcpServerForMlModelIntegrationPlugin,
  replicatefluxmcpPlugin,
  macmessagesmcpPlugin,
  whaletrackermcpPlugin,
  mcphistfilePlugin,
  chainOfDraftThinkingPlugin,
  agentqlMcpServerPlugin,
  mcpopenapischemaPlugin,
  mcpgraphqlschemaPlugin,
  tiktokMcpPlugin,
  mcpServerExamplePlugin,
  mcplocalragPlugin,
  qubaominggstockmcpPlugin,
  dbhubPlugin,
  obsidianMcpPlugin,
  aVmwareEsxivcenterManagementServerPlugin,
  mssqlMcpServerPlugin,
  cvesearch_mcpPlugin,
  mcpmistralocrPlugin,
  logseqMcpToolsPlugin,
  repomixPlugin,
  mcpetPlugin,
  bitrefillSearchAndShopPlugin,
  unstructuredDocumentProcessorMcpPlugin,
  sqlMcpServerForClaudeDesktopPlugin,
  xanoMcpServerPlugin,
  greptimedbMcpServerPlugin,
  genericmcpserverPlugin,
  trellomcpserverPlugin,
  apifoxMcpServerPlugin,
  thingspanelMcpPlugin,
  blahmcpPlugin,
  metasearchmcpPlugin,
  ensMcpServerPlugin,
  rizamcpPlugin,
  olostepmcpPlugin,
  jvmMcpServerPlugin,
  mcphelpertoolsPlugin,
  mcpgithubPlugin,
  mcptursoPlugin,
  opikMcpServerPlugin,
  mcpbravesearchPlugin,
  autumnMcpServerPlugin,
  cloudflarebrowserrenderingmcpPlugin,
  educhainAgentKitPlugin,
  transcriptiontoolsMcpServerPlugin,
  basicmemoryPlugin,
  awsCostExplorerMcpServerPlugin,
  makeMcpServerPlugin,
  githubProjectManagerPlugin,
  solanaModelContextProtocolMcpDemoPlugin,
  claudecodemcpPlugin,
  protonmailmcpPlugin,
  trinoMcpServerPlugin,
  glifPlugin,
  settlemintPlugin,
  splunkmcpPlugin,
  xtquantaiPlugin,
  vectorizePlugin,
  mcpdingdingbotserverPlugin,
  mcpServer1Plugin,
  kbmcpserverPlugin,
  nebulagraphMcpServerPlugin,
  imagetoolsmcpPlugin,
  stormMcpServerPlugin,
  neo4jMcpServerPlugin,
  beyondMcpServerPlugin,
  mcpDevelopmentFrameworkPlugin,
  cryptopanicmcpserverPlugin,
  mcpslopAdapterPlugin,
  adxmcpserverPlugin,
  solanaAgentKitMcpServerPlugin,
  nilemcpPlugin,
  mcpCommandProxyPlugin,
  memoryBankMcpPlugin,
  fastapimcpPlugin,
  fastapiMcpSsePlugin,
  gitingestmcpPlugin,
  tfmcpPlugin,
  duckduckgoMcpServerPlugin,
  gitAutoCommitMcpServerPlugin,
  mcpserverairbnbPlugin,
  mcpDatabricksServerPlugin,
  codeMcpPlugin,
  modelControlPlaneMcpServerPlugin,
  mcpCreateServerPlugin,
  microsoftSqlServerMcpServerMssqlPlugin,
  mcpNodeFetchPlugin,
  mongodbLensPlugin,
  redashMcpServerPlugin,
  memeMcpServerPlugin,
  mcpomnisearchPlugin,
  exploriumAgentsourceMcpServerPlugin,
  mcpServerTemplatePlugin,
  databuttonMcpServerPlugin,
  unofficialDubcomcpserverPlugin,
  deskaidPlugin,
  claudeCodeMcpPlugin,
  cryoMcpServerPlugin,
  androidMcpServerPlugin,
  xtbapiserverPlugin,
  webglmcpServerPlugin,
  targetprocessMcpServerPlugin,
  okxMcpServerPlugin,
  mcpPythonToolboxPlugin,
  mcpMemoryLibsqlPlugin,
  shortcutMcpServerPlugin,
  mcpXmindServerPlugin,
  higressAisearchMcpServerPlugin,
  obsidianMcpRestServerPlugin,
  wordwareMcpServerPlugin,
  googleCalendarMcpServerPlugin,
  keycloakMcpServerPlugin,
  geoapifyMcpServerPlugin,
  privategptMcpServerPlugin,
  gitFileForensicsMcpPlugin,
  twitterMcpServerPlugin,
  fileOperationsMcpServerPlugin,
  documindMcpServerPlugin,
  mcpSubstackServerPlugin,
  gcpMcpPlugin,
  vercelMcpPlugin,
  mcpEmbeddingSearchPlugin,
  claudeDesktopCommanderMcpPlugin,
  stealthBrowserMcpServerPlugin,
  strapiMcpServerPlugin,
  gmailMcpServerPlugin,
  resourceHubServerPlugin,
  biomcpPlugin,
  linkedinMcpServerPlugin,
  pdfExtractionMcpServerPlugin,
  workersMcpDemoPlugin,
  inkdropMcpServerPlugin,
  mcpUnifiedServerPlugin,
  imageGeneratorMcpServerPlugin,
  serpapiMcpServerPlugin,
  notionMcpServerPlugin,
  gatheringsMcpServerPlugin,
  metabaseMcpServerPlugin,
  slimMcpPlugin,
  youtubeMcpServerPlugin,
  obsidianOmnisearchMcpServerPlugin,
  nashMcpServerPlugin,
  tinyCryptographyMcpServerPlugin,
  manifoldMarketsMcpServerPlugin,
  nuancedMcpServerPlugin,
  stabilityAiMcpServerPlugin,
  arxivMcpServerPlugin,
  shellMcpServerPlugin,
  notionMcpServer1Plugin,
  mcpServerForReplicatePlugin,
  trivySecurityScannerMcpServerPlugin,
  rustDocsMcpServerPlugin,
  mcpServerForMysqlPlugin,
  productboardMcpServerPlugin,
  zoteroMcpServerPlugin,
  coinMcpServerPlugin,
  uberEatsMcpServerPlugin,
  sleepMcpServerPlugin,
  posthogMcpServerPlugin,
  kintoneMcpServerPlugin,
  djangoMigrationsMcpServicePlugin,
  systempromptmcpinterviewPlugin,
  gelDatabaseMcpServerPlugin,
  mcpQrCodeServerPlugin,
  mcpNotionServerPlugin,
  solanaMcpServer1Plugin,
  derivApiMcpServerPlugin,
  ankiMcpServerPlugin,
  codeExplainerMcpPlugin,
  appwriteMcpServerPlugin,
  retrievalaugmentedThinkingMcpServerPlugin,
  filesystemMcpServerPlugin,
  triplewhaleMcpServerPlugin,
  geminiMcpServerPlugin,
  mcpFileServerPlugin,
  worldBankMcpServerPlugin,
  javascriptSandboxMcpServerPlugin,
  imageGenerationMcpServerPlugin,
  coderToolboxMcpServerPlugin,
  arangodbMcpServerPlugin,
  devenvinfoserverPlugin,
  screenshotoneMcpServerPlugin,
  businessCentralMcpServerPlugin,
  crawlabMcpServerPlugin,
  astraDbMcpServerPlugin,
  makeMcpServer1Plugin,
  mcpTasksOrganizerPlugin,
  clickupOperatorPlugin,
  imagegenserverPlugin,
  perplexityMcpServerPlugin,
  bloomyMcpPlugin,
  dbtSemanticLayerMcpServerPlugin,
  devMemoryMcpServerPlugin,
  temboMcpServerPlugin,
  mcpBeeminderServerPlugin,
  mcpAppleNotesPlugin,
  blastenginemailerPlugin,
  nexusMcpBridgeForVscodePlugin,
  mcpBlockchainQueryServerPlugin,
  firefliesMcpServerPlugin,
  elasticsearch7xMcpServerPlugin,
  deepseekMcpServerPlugin,
  portMcpServerPlugin,
  mcpServerDiscordWebhookPlugin,
  grantsSearchMcpServerPlugin,
  toxTestingMcpServerPlugin,
  mcpServerModalPlugin,
  needleMcpServerPlugin,
  irisMcpServerPlugin,
  kokoroTtsMcpServerPlugin,
  backlogMcpServerPlugin,
  bluestoneappsMcpRemoteServerPlugin,
  mcpCodeIndexerPlugin,
  thingsMcpServerPlugin,
  tavilyMcpServerPlugin,
  githubProjectsMcpServerPlugin,
  filesystemMcpServer1Plugin,
  xcodeMcpServerPlugin,
  uberEatsMcpServer1Plugin,
  sourcesageMcpPlugin,
  knowledgeGraphMemoryServerPlugin,
  devdocsMcpPlugin,
  apiTesterMcpServerPlugin,
  mcpToolboxPlugin,
  spotifyMcpPlugin,
  rememberizerMcpServerPlugin,
  mcpServerMemoryFilePlugin,
  airbyteStatusCheckerPlugin,
  perplexityMcpServer1Plugin,
  scrapboxMcpServerPlugin,
  connectwiseManageMcpServerPlugin,
  githubMcpServerPlugin,
  mcpJupiterPlugin,
  steelPuppeteerPlugin,
  homeAssistantMcpServerPlugin,
  substackReaderPlugin,
  awsMcpServerPlugin,
  elasticsearchKnowledgeGraphForMcpPlugin,
  mozillaReadabilityParserMcpServerPlugin,
  sentryMcpServerPlugin,
  excelMcpServerPlugin,
  emergencyMedicarePlannerMcpServerPlugin,
  ipGeolocationMcpServerPlugin,
  whoisMcpPlugin,
  githubMcpServer1Plugin,
  mcpServerLinearPlugin,
  claudegasbridgePlugin,
  mcpStripeServerPlugin,
  microsoftSqlServerMcpServerPlugin,
  mondaycomMcpServerPlugin,
  pythonMcpServerPlugin,
  suposMcpServerPlugin,
  pythonDocsServerPlugin,
  gmailMcpServer1Plugin,
  mcpankiconnectPlugin,
  solarwindsLogsMcpServerPlugin,
  mongodbMcpServerPlugin,
  deltataskMcpServerPlugin,
  excelReaderServerPlugin,
  dubcoMcpServerPlugin,
  commandExecutorMcpServerPlugin,
  confluenceCommunicationServerPlugin,
  mcpFirecrawlServerPlugin,
  imageGeneratorMcpServer1Plugin,
  todoistMcpPlugin,
  hyperliquidMcpServerPlugin,
  dockerMcpServerPlugin,
  mcpClientConfigurationServerPlugin,
  perplexityToolForClaudeDesktopPlugin,
  mcpWebToolsServerPlugin,
  notionKnowledgeBaseMcpServerPlugin,
  kustoMcpServerPlugin,
  memoryCacheMcpServerPlugin,
  openapiClientGeneratorMcpPlugin,
  lighthouseMcpPlugin,
  codebaseMcpPlugin,
  hackerNewsMcpServerPlugin,
  ethereumRpcMcpServerPlugin,
  gitlabMcpServerPlugin,
  mcpParadexServerPlugin,
  mcpPostgresServerPlugin,
  lettaMcpServerPlugin,
  airtableMcpServerPlugin,
  kubernetesMonitorPlugin,
  dependencymcpServerPlugin,
  gmailMcpPlugin,
  mcpServerSemgrepPlugin,
  specifaiMcpServerPlugin,
  mcpunkPlugin,
  datagovMcpServerPlugin,
  whimsicalMcpServerPlugin,
  mcpCalcToolsPlugin,
  lichessMcpPlugin,
  mcpSshServerPlugin,
  hexApiMcpServerPlugin,
  fluxImageMcpServerPlugin,
  tfnswRealtimeAlertsMcpServerPlugin,
  codingStandardsMcpServerPlugin,
  beamlitMcpServerPlugin,
  docScraperMcpServerPlugin,
  gitlabKanbanMcpServerPlugin,
  deepseekMcpServer1Plugin,
  imessageMcpServerPlugin,
  couchdbMcpServerPlugin,
  mcppythonPlugin,
  memoryBoxMcpServerPlugin,
  memoryMcpServerPlugin,
  jsonMcpServerPlugin,
  baseMcpServerPlugin,
  drawThingsMcpPlugin,
  jenkinsServerMcpPlugin,
  arithmeticMcpServerPlugin,
  mcpServerForApacheOpendalPlugin,
  salesforceMcpServerPlugin,
  bazelMcpServerPlugin,
  mathmcpPlugin,
  mcpserverietfPlugin,
  jsonCanvasMcpServerPlugin,
  mcpImageRecognitionServerPlugin,
  twitterMcpServer1Plugin,
  opendotaMcpServerPlugin,
  shannonThinkingMcpServerPlugin,
  pythonReplMcpServerPlugin,
  angleOneMcpServerPlugin,
  smartsheetMcpServerPlugin,
  clickhouseMcpServerPlugin,
  gitMcpServerPlugin,
  mcpPersonalAssistantAgentPlugin,
  githubSupportAssistantPlugin,
  sanityMcpServerPlugin,
  supabaseMcpServerPlugin,
  fastmcpTodoServerPlugin,
  kagiMcpServerPlugin,
  authenticatedMcpSseServerPlugin,
  cargoDocMcpServerPlugin,
  speechMcpPlugin,
  dexscreenerMcpServerPlugin,
  optionsflowMcpServerPlugin,
  alpacaMcpServerPlugin,
  stravaMcpServerPlugin,
  openapiMcpServerPlugin,
  twitterMcpServer2Plugin,
  gitMcpPlugin,
  warpcastMcpServerPlugin,
  laravelHelpersMcpPlugin,
  nefinoMcpServerPlugin,
  googleSearchConsoleMcpServerPlugin,
  searxngModelContextProtocolServerPlugin,
  supabaseMcpServer1Plugin,
  jiraMcpServerPlugin,
  uniprotMcpServerPlugin,
  docsfetcherMcpServerPlugin,
  webmcpPlugin,
  tavilyMcpServer1Plugin,
  mcpMemoryServerPlugin,
  snowflakeCubeServerPlugin,
  mcp2serialPlugin,
  mcpDoclingServerPlugin,
  blendermcpPlugin,
  supavecMcpServerPlugin,
  claudeMcpTrelloPlugin,
  knowledgeBaseMcpServerPlugin,
  unipileMcpServerPlugin,
  barnsworthburningMcpPlugin,
  akshareMcpServerPlugin,
  sqliteMcpServerPlugin,
  fiscalDataMcpServerPlugin,
  s3toolsPlugin,
  mongodbMcpServerForLlmsPlugin,
  notionMcpServer2Plugin,
  taskApiServerPlugin,
  emailProcessingMcpServerPlugin,
  mcpidbPlugin,
  mcpProjectOrchestratorPlugin,
  figmaMcpServerPlugin,
  faceGeneratorMcpServerPlugin,
  dbsnpMcpPluginPlugin,
  raindropioMcpServerPlugin,
  notionMcpServer3Plugin,
  dicomMcpServerPlugin,
  adamikMcpServerPlugin,
  teslaMcpServerPlugin,
  cockroachdbMcpServerPlugin,
  stravaMcpServer1Plugin,
  whoopMcpServerPlugin,
  mcpFileContextServerPlugin,
  mcpTerminalServerPlugin,
  mcpServerMemosPlugin,
  mcpFhirServerPlugin,
  mcpSentryPlugin,
  birdnetpiMcpServerPlugin,
  shopifyPythonMcpServerPlugin,
  mcpSnowflakeServicePlugin,
  instagramMcpServerPlugin,
  framerPluginMcpServerPlugin,
  mongodbMcpServer1Plugin,
  mcpHumanLoopServerPlugin,
  mathematicaDocumentationMcpServerPlugin,
  togetherAiImageServerPlugin,
  canvasMcpServerPlugin,
  linearMcpServerPlugin,
  mcpNotmuchSendmailPlugin,
  cloudflareToGithubBackupMcpServerPlugin,
  mcpBatchitPlugin,
  tmf620McpServerPlugin,
  claudekeepPlugin,
  tectonMcpServerPlugin,
  numpyCalculatorPlugin,
  chromeDebugMcpServerPlugin,
  mcpdblpPlugin,
  mcpcliexecMcpServerPlugin,
  aiVisionDebugMcpServerPlugin,
  valyuMcpServerPlugin,
  jsonResumeMcpServerPlugin,
  tripadvisorVacationPlannerMcpServerPlugin,
  radarrAndSonarrMcpServerPlugin,
  githubIntegrationMcpServerPlugin,
  imageGenerationMcpServer1Plugin,
  puppeteerMcpServerPlugin,
  mcpDocumentationServicePlugin,
  notionMcpServer4Plugin,
  ankiMcpServer1Plugin,
  mongodbMcpServer2Plugin,
  voiceRecorderMcpServerPlugin,
  everythingSearchMcpServerPlugin,
  azureDevopsMcpServerPlugin,
  hhJiraMcpServerPlugin,
  linkedinBrowserMcpServerPlugin,
  modelContextProtocolServerForSolanaClientPlugin,
  macrostratMcpServerPlugin,
  pythonJiraMcpServerPlugin,
  spotifyMcpServerPlugin,
  pythonLocalMcpServerPlugin,
  taskwarriorMcpServerPlugin,
  cloudflareMcpServerPlugin,
  sourcesyncaiMcpServerPlugin,
  mcpServer2Plugin,
  mcpEthersWalletPlugin,
  abapadtapiMcpserverPlugin,
  obsidianIndexMcpServerPlugin,
  mdWebcrawlMcpPlugin,
  mcpLlmstxtExplorerPlugin,
  mcpRedditServerPlugin,
  mcpDuckdbKnowledgeGraphMemoryServerPlugin,
  powerpointMcpServerPlugin,
  mcp2tavilyPlugin,
  servicenowMcpServerPlugin,
  mcpServerTemplateForCursorIdePlugin,
  fetchBrowserPlugin,
  travelPlannerMcpServerPlugin,
  prometheusMcpServerPlugin,
  farcasterMcpServerPlugin,
  bybitMcpServerPlugin,
  windowsCliMcpServerPlugin,
  googleTasksMcpServerPlugin,
  codingTodoServerPlugin,
  cosenseMcpServerPlugin,
  markdownifyMcpServerUtf8EnhancedPlugin,
  githubKanbanMcpServerPlugin,
  aactClinicalTrialsMcpServerPlugin,
  biomartMcpPlugin,
  editFileLinesMcpServerPlugin,
  cursorA11yMcpPlugin,
  encodingDevopsMcpServerPlugin,
  peakmojoServerPlugin,
  terminalControllerForMcpPlugin,
  hanaCloudMcpServerPlugin,
  mcpTemplateioPlugin,
  mcpServerRedisPlugin,
  binaryReaderMcpPlugin,
  rabbitmqMcpServerPlugin,
  verodatMcpServerPlugin,
  geminiThinkingServerPlugin,
  shellMcpServer1Plugin,
  safeMcpServerPlugin,
  overseerrMcpServerPlugin,
  jinaAiMcpServerPlugin,
  zoomTranscriptMcpServerPlugin,
  sqliteMcpServer1Plugin,
  chooseMcpServerPlugin,
  elevenlabsTexttospeechMcpPlugin,
  awsResourcesMcpServerPlugin,
  ragieModelContextProtocolServerPlugin,
  markdownDownloaderPlugin,
  unixManualServerPlugin,
  mcpToolsForObsidianPlugin,
  telegramMcpServerPlugin,
  shellMcpServer2Plugin,
  chainOfDraftCodMcpServerPlugin,
  claudeOutlookMcpToolPlugin,
  mcpProxyServerPlugin,
  brianknowsMcpServerPlugin,
  deepseekMcpServer2Plugin,
  datasetViewerMcpServerPlugin,
  mcpCodeAnalyzerPlugin,
  openaiMcpServerPlugin,
  clankiPlugin,
  weatherServiceMcpServerPlugin,
  claudeDesktopApiMcpPlugin,
  nodeOmnibusMcpServerPlugin,
  todoListMcpServerPlugin,
  mcpAlchemyPlugin,
  gmailMcpServer2Plugin,
  xtwitterMcpServerPlugin,
  mcpMediaGeneratorPlugin,
  filesystemMcpServer2Plugin,
  mcpBlockchainServerPlugin,
  brightsyMcpServerPlugin,
  ragdocsMcpServerPlugin,
  ledgerMcpServerPlugin,
  homeAssistantMcpServer1Plugin,
  mysqlmcpPlugin,
  lancedbMcpServerPlugin,
  mcpServerTemplateForCursorIde1Plugin,
  linearMcpIntegrationServerPlugin,
  mcpDocumentationServerPlugin,
  pushoverMcpPlugin,
  clickupMcpServerPlugin,
  webContentMcpServerPlugin,
  mcpDevelopmentServerPlugin,
  worldpayMcpServerPlugin,
  gauntletinceptMcpPlugin,
  mcpJsonDocumentCollectionServerPlugin,
  fredMcpServerPlugin,
  scraperisMcpServerPlugin,
  scrapegraphMcpServerPlugin,
  chromeToolsMcpServerPlugin,
  mcpAppleNotes1Plugin,
  mcpCommandServerPlugin,
  linearMcpServer1Plugin,
  senechalMcpServerPlugin,
  pdfToPngMcpServerPlugin,
  mcpSalesforceConnectorPlugin,
  metaMcpServerPlugin,
  windsurfSupabaseMcpServerPlugin,
  mcpPdfFormsPlugin,
  theVergeNewsMcpServerPlugin,
  mcpEvmSignerPlugin,
  strapiMcpServer1Plugin,
  comfyuiMcpServerPlugin,
  wintermMcpPlugin,
  mcpDuckduckgoSearchPluginPlugin,
  notionMcpServer5Plugin,
  ankiMcpServer2Plugin,
  trinoMcpServer1Plugin,
  canvasMcpServer1Plugin,
  mcpservercodeassistPlugin,
  mcpGitRepoBrowserPlugin,
  tanaMcpServerPlugin,
  activitywatchMcpServerPlugin,
  pdfReaderMcpServerPlugin,
  blenderMcpServerPlugin,
  mcpServerForSpinnakerPlugin,
  workersMcpPlugin,
  jiraMcpServer1Plugin,
  gmailMcpServer3Plugin,
  notionMcpPlugin,
  databaseUpdaterMcpServerPlugin,
  untappdMcpServerPlugin,
  systemdcoredumpMcpServerPlugin,
  salesforceMcpServer1Plugin,
  alphaVantageStockMcpServerPlugin,
  logseqMcpServerPlugin,
  mcpServerForVertexAiSearchPlugin,
  stockflowMcpServerPlugin,
  todoistMcpServerPlugin,
  mondaycomMcpServer1Plugin,
  mcpEtherscanServerPlugin,
  ideogramMcpServerPlugin,
  mcpGoogleCustomSearchServerPlugin,
  elasticsearchMcpServerPlugin,
  ollamaMcpServerPlugin,
  websearchPlugin,
  mcpGithubRepositoryServerPlugin,
  mcpfigmaPlugin,
  mcpAbapAdtPlugin,
  binanceMcpServerPlugin,
  aiDevelopmentAssistantMcpServerPlugin,
  memoryCustomPlugin,
  chromaMcpServerPlugin,
  umamiAnalyticsMcpServerPlugin,
  codecheckerMcpPlugin,
  alchemyMcpPluginPlugin,
  mcpHeliusPlugin,
  mcpserverllmlingPlugin,
  mcpSnapshotServerPlugin,
  scaflogZohoMcpServerPlugin,
  memexPlugin,
  googleDriveMcpServerPlugin,
  surfMcpServerPlugin,
  smtpMcpServerPlugin,
  googleJobsMcpServerPlugin,
  youtubeIntegrationPlugin,
  mistralMcpServerPlugin,
  mcpPromptsServerPlugin,
  illumioMcpServerPlugin,
  mcpServerOfficePlugin,
  pubmedMcpServerPlugin,
  macosDefaultsMcpServerPlugin,
  elasticsearchSemanticSearchMcpServerPlugin,
  difyWorkflowsMcpServerPlugin,
  isitdownMcpServerPlugin,
  dingtalkMcpServerV2Plugin,
  mcpGatewayForRfkJrEndpointsPlugin,
  mdpdfmcpPlugin,
  freeagentMcpServerPlugin,
  dartMcpServerPlugin,
  mssqlMcpServer1Plugin,
  devrevMcpServerPlugin,
  tavilyMcpServerWithProxySupportPlugin,
  mcpServerMakePlugin,
  cursorDbMcpServerPlugin,
  perplexityWebSearchMcpServerPlugin,
  mcpIntercomServerPlugin,
  timeMcpServerPlugin,
  lightdashMcpServerPlugin,
  deepsrtMcpServerPlugin,
  hiveMcpServerPlugin,
  linearMcpServer2Plugin,
  mcpDatetimePlugin,
  postgresqlMultischemaMcpServerPlugin,
  pytorchHudMcpServerPlugin,
  eventbriteMcpServerPlugin,
  dingdingMcpPlugin,
  argusPlugin,
  multiserviceMcpServerPlugin,
  magicComponentPlatformMcpPlugin,
  neo4jMcpServer1Plugin,
  mcpFathomAnalyticsPlugin,
  macosClipboardMcpServerPlugin,
  claudeServerMcpPlugin,
  emojikeyserverMcpServerPlugin,
  typesenseMcpServerPlugin,
  mcpMysqlServerPlugin,
  dockerMcpServer1Plugin,
  firebaseMcpPlugin,
  mcpserverstravaPlugin,
  sanderkoogermcpserverragdocsPlugin,
  googleSearchMcpServerPlugin,
  woocommerceMcpServerPlugin,
  noaatidesandcurrentsmcpPlugin,
  azuredevopsmcpPlugin,
  figmamcpPlugin,
  claudedebugsforyouPlugin,
  dbmcptoolPlugin,
  consolespyPlugin,
  giteePlugin,
  mcpxcodebuildPlugin,
  ticktickmcpserverPlugin,
  mcplogogenPlugin,
  mixpanelPlugin,
  cLangMcpServerPlugin,
  mcpserverstarrocksPlugin,
  mcpserverdatadogPlugin,
  mcpllmPlugin,
  testPlugin,
  mermaidmcpserverPlugin,
  convexMcpServerPlugin,
  scrapezyPlugin,
  wanakuMcpServerPlugin,
  test1Plugin,
  openledgermcpserverPlugin,
  railwaymcpPlugin,
  emqxmcpserverPlugin,
  mcpserverollamadeepresearcherPlugin,
  graphlitmcpserverPlugin,
  outlookCalendarMcpPlugin,
  duckduckgoMcpServer1Plugin,
  mcppinterestPlugin,
  omniparserautoguimcpPlugin,
  mcpsummarizerPlugin,
  focus_mcp_sqlPlugin,
  focus_mcp_dataPlugin,
  ouraMcpServerPlugin,
  mcpAtlassianPlugin,
  mcpRedminePlugin,
  mcpYoutubeServerPlugin,
  retailSupplyChainAnalysisMcpPlugin,
  geminiDocsMcpServerPlugin,
  matlabMcpServerPlugin,
  mysqlMcpServer1Plugin,
  ragrabbitmcpPlugin,
  fileFinderMcpServerPlugin,
  linearMcpServer3Plugin,
  frontendReviewMcpPlugin,
  mcp3dPrinterServerPlugin,
  mcpSumoLogicServerPlugin,
  mcp2lambdaPlugin,
  hefengWeatherMcpServerPlugin,
  httpsgithubcomstreen9reactmcpPlugin,
  dropboxMcpServerPlugin,
  workosMcpServerPlugin,
  roomMcpPlugin,
  appwriteMcpServer1Plugin,
  siriShortcutsMcpServerPlugin,
  awsathenamcpPlugin,
  meilisearchMcpServerPlugin,
  mcp2lambda1Plugin,
  emailSendingMcpPlugin,
  jiracontextmcpPlugin,
  apifoxMcpServer1Plugin,
  mcpGoogleWorkspaceServerPlugin,
  storySdkMcpServerPlugin,
  mitmproxymcpMcpServerPlugin,
  crypto_mcpPlugin,
  figmaMcpServer1Plugin,
  ntropyMcpServerPlugin,
  cloudflareApiMcpServerPlugin,
  firebaseMcpServerPlugin,
  mcpEmailServerPlugin,
  mcpServerTemplateForCursorIde2Plugin,
  vercelMcpServerPlugin,
  mcpdataextractorPlugin,
  airflowmcpserverPlugin,
  ntropymcpMcpServerPlugin,
  mcpTavilyPlugin,
  terraformRegistryMcpServerPlugin,
  quickchartmcpserverPlugin,
  harvestNaturalLanguageTimeEntryMcpServerPlugin,
  redmineMcpServerForClinePlugin,
  qrcode_mcpPlugin,
  modelContextProviderMcpServerPlugin,
  snykMcpServerPlugin,
  cloudflareApiMcpServer1Plugin,
  appleNotesMcpServerPlugin,
  dartMcpServer1Plugin,
  modelContextProtocolMcpServerForHomeAssistantPlugin,
  neonMcpServerPlugin,
  mcpopenapiPlugin,
  cryptoPriceMarketAnalysisMcpServerPlugin,
  sendgridMcpServerPlugin,
  azureMcpServerPlugin,
  pygithubMcpServerPlugin,
  modelControlProtocolServerMcpPlugin,
  mcpotcPlugin,
  superSecretMcpServerPlugin,
  singlestoreMcpServerPlugin,
  taptoolsApiMcpPlugin,
  jenkinsMcpPlugin,
  awesomeMcpFastapiPlugin,
  netlifyMcpServerPlugin,
  paypalMcpPlugin,
  stripePlugin,
  myserverMcpServerPlugin,
  wolframalphaLlmMcpServerPlugin,
  serpersearchscrapemcpserverPlugin,
  metamcpMcpServerPlugin,
  contentfulDeliveryMcpServerPlugin,
  mcpServerForDifyAiPlugin,
  mcpSecurityAuditServerPlugin,
  mcpServerForMysql1Plugin,
  mcpMysqlServer1Plugin,
  sqlServerExpressMcpServerPlugin,
  openaiMcpServer1Plugin,
  mcpFluxStudioPlugin,
  mcpOpenfecServerPlugin,
  biggoMcpServerPlugin,
  mcpServerForOpenmetadataPlugin,
  appleMcpServerPlugin,
  mcpSapGuiServerPlugin,
  fluxdevMcpServerPlugin,
  forevervmPlugin,
  florence2McpServerPlugin,
  lodestarMcpServerPlugin,
  proxmoxMcpServerPlugin,
  mcptimeplusPlugin,
  webflowMcpServerPlugin,
  githubMcpServer2Plugin,
  mcpServerForCursorPlugin,
  squareMcpServerPlugin,
  everartForgeMcpServerPlugin,
  mcpAgentTypescriptPortPlugin,
  serperSearchMcpServerPlugin,
  curriMcpServerPlugin,
  n8nMcpServerPlugin,
  mcpwcgwPlugin,
  softwarePlanningToolPlugin,
  mcpclickupPlugin,
  pokemonapiserverPlugin,
  mcpYnabServerPlugin,
  mcpServerForOpensearchPlugin,
  steamPlugin,
  buienradarMcpServerPlugin,
  kubernetesmcpserverPlugin,
  perplexityAiMcpServerPlugin,
  memoryBankMcpServer1Plugin,
  notionMcpServer6Plugin,
  nreplMcpServerPlugin,
  resendMcpServerPlugin,
  wasmMcpServerPlugin,
  timeServerPlugin,
  codeKnowledgeMcpServerPlugin,
  coolifyMcpServerPlugin,
  agentcarePlugin,
  excelmcpserverPlugin,
  mcpLocalWebSearchServerPlugin,
  deepResearchMcpServerPlugin,
  supabaseMcpServer2Plugin,
  langfusePromptManagementMcpServerPlugin,
  seqMcpServerPlugin,
  linearMcpServer4Plugin,
  shellmcpPlugin,
  lunchmoneymcpPlugin,
  zonosTtsMcpServerPlugin,
  calendarToolsMcpServerPlugin,
  modalMcpToolboxPlugin,
  mcpMediaProcessingServerPlugin,
  simpleDocumentProcessingMcpServerPlugin,
  knmiWeatherMcpPlugin,
  mcpServerForThings3Plugin,
  comfyMcpServerPlugin,
  kospikosdaqPlugin,
  postgresqlMcpServerPlugin,
  mcpServerPlaygroundPlugin,
  chatgptMcpServerPlugin,
  fetchMcpServerPlugin,
  knowledgeGraphMemoryServer1Plugin,
  deepseekThinkerMcpServerPlugin,
  todoistMcpServer1Plugin,
  mcpServerForApacheAirflowPlugin,
  mysqlMcpServer2Plugin,
  jupyterMcpServerPlugin,
  figmaMcpServer2Plugin,
  bearMcpServerPlugin,
  singaporeLtaMcpServerPlugin,
  searxngMcpServerPlugin,
  socialListeningMcpServerPlugin,
  gitMcpServer1Plugin,
  portkeyMcpServerPlugin,
  ollamaMcpServer1Plugin,
  scryfallMcpServerPlugin,
  mcpServerWeaviatePlugin,
  mcpSeleniumPlugin,
  searchMcpServerPlugin,
  perplexityAiMcpServer1Plugin,
  headlineVibesAnalysisMcpServerPlugin,
  brevoMcpPlugin,
  mcpExcelReaderPlugin,
  mcpanyopenapiPlugin,
  pulsemcpServerPlugin,
  perplexityMcpServer2Plugin,
  novuMcpServerPlugin,
  mcpServerTemplateForCursorIde3Plugin,
  mcpServerStarterPlugin,
  mcpllmstxtPlugin,
  ghostMcpServerPlugin,
  azureMcpServer1Plugin,
  linearMcpServer5Plugin,
  gitlabMcpPlugin,
  confluencemcpPlugin,
  integratedMcpServerPlugin,
  clickupMcpServer1Plugin,
  secondBrainOsMcpServerPlugin,
  featurediscussionMcpServerPlugin,
  youtubeMcpServer1Plugin,
  mcpPlaywrightCdpPlugin,
  fileEditCheckMcpServerPlugin,
  mcptavilysearchPlugin,
  mcpImagePlaceholderServerPlugin,
  cryptocurrencyDaemonMcpServerPlugin,
  mcpIcalServerPlugin,
  puppeteerMcpServer1Plugin,
  mcpLiveEventsServerPlugin,
  mcpServerScalableOpenapiEndpointDiscoveryAndApiRequestToolPlugin,
  mcpServerTemplate1Plugin,
  deepclaudeMcpServerPlugin,
  perplexityAiMcpServer2Plugin,
  decentsamplerDrumsMcpServerPlugin,
  flutterToolsMcpServerPlugin,
  youtubeTranscriptMcpServerPlugin,
  mcpSourceRelationServerPlugin,
  ramiLevyMcpServerPlugin,
  researchMcpServerPlugin,
  mcpServerPagespeedPlugin,
  mcpmysqlServerPlugin,
  drupalmodulesmcpMcpServerPlugin,
  playwrightMcpServerPlugin,
  deepclaudeMcpServer1Plugin,
  mcpapplemusicPlugin,
  mcpserverasanaPlugin,
  deepseekR1McpServerPlugin,
  browserAutomationMcpServerPlugin,
  mcpSourceTreeServerPlugin,
  crawl4aiMcpServerPlugin,
  codeAnalysisMcpServerPlugin,
  mcpServerFirecrawlPlugin,
  datetimeMcpServerPlugin,
  mcpAsyncServerPlugin,
  drupalmodulesmcpMcpServer1Plugin,
  mcpServerTemplate2Plugin,
  academicPaperSearchMcpServerPlugin,
  webAccessibilityMcpServerPlugin,
  web3McpServerPlugin,
  mcptoolhousePlugin,
  mcpServerRedditPlugin,
  mcpCodeExecutorPlugin,
  mcpDeepseekAgentServerPlugin,
  safariScreenshotMcpServerPlugin,
  clickupMcpServer2Plugin,
  fileContextMcpPlugin,
  mcpCommandAndSearchServerPlugin,
  mcpArchitectPlugin,
  bitcoinMcpServerPlugin,
  mcpperplexityPlugin,
  mcpAccessServerPlugin,
  perplexityMcpServer3Plugin,
  awsWellarchitectedFrameworkMcpServerPlugin,
  mcpTitanPlugin,
  minecraftDockerMcpPlugin,
  gitForensicsMcpPlugin,
  apptweakMcpServerPlugin,
  wegeneAssistantMcpServerPlugin,
  githubMcpServerPlusPlugin,
  deepseekR1McpServer1Plugin,
  daipendencyPlugin,
  aiDevelopmentAssistantMcpServer1Plugin,
  browseruseMcpServerPlugin,
  mcpOllamaServerPlugin,
  mcpOllamaLinkPlugin,
  memoryCacheServerPlugin,
  mcpregistryserverPlugin,
  aqicnMcpServerPlugin,
  simpleFilesVectorStoreServerPlugin,
  qwenMaxMcpServerPlugin,
  mcpServerTemplateForCursorIde4Plugin,
  weaviateMcpServerPlugin,
  mcpdiscordchatMcpServerPlugin,
  tuyaMcpServerPlugin,
  composioMcpServerPlugin,
  lumbretravelMcpServerPlugin,
  mcpServerForNationalParkServicesDataPlugin,
  imageGenerationMcpServer2Plugin,
  lsdMcpServerPlugin,
  allinoneDevPlugin,
  myaiservMcpServerPlugin,
  knowledgeGraphMemoryServer2Plugin,
  crewAiMcpServerPlugin,
  youtubeMusicMcpServerPlugin,
  mcpServerSshRailsRunnerPlugin,
  unconventionalthinkingMcpServerPlugin,
  ghostMcpServer1Plugin,
  gmailMcpServer4Plugin,
  attioMcpServerPlugin,
  kibelaMcpServerPlugin,
  twitchMcpServerPlugin,
  semgrepMcpServer1Plugin,
  mcpGoogleServerPlugin,
  voypMcpServerPlugin,
  mcpJsonrpcServerPlugin,
  audiusMcpServerPlugin,
  calculatorMcpServerPlugin,
  perplexityMcpServer4Plugin,
  mcpFileSystemServerPlugin,
  xrplmcpservicePlugin,
  mcpJournalingServerPlugin,
  mercadolibreMcpServerPlugin,
  audienseInsightsMcpServerPlugin,
  mcpServerStarter1Plugin,
  mcpeditorPlugin,
  mcpIpGeolocationServerPlugin,
  notesMcpServerPlugin,
  flutterMcpServerPlugin,
  mcpWebhookServerPlugin,
  lightningNetworkMcpServerPlugin,
  nostrMcpServerPlugin,
  privategptMcpServer1Plugin,
  digitalfateMcpServerPlugin,
  mcpMemoryServerWithQdrantPersistencePlugin,
  codeSandboxMcpPlugin,
  shopifyMcpServerPlugin,
  cleverCloudDocumentationMcpServerPlugin,
  digitalfateMcpServer1Plugin,
  mcpservermultiversePlugin,
  clicksendMcpServerPlugin,
  mcppifServerPlugin,
  postgresqlMcpServer1Plugin,
  swaggerExplorerMcpPlugin,
  mcpServer3Plugin,
  mssqlMcpServer2Plugin,
  slackUserMcpServerPlugin,
  cursorMcpServerPlugin,
  markitdownMcpServerPlugin,
  shopifyMcpServer1Plugin,
  descopemcpserverPlugin,
  mcprocqPlugin,
  alphavantagemcpPlugin,
  morphoApiMcpServerPlugin,
  releaseNotesMcpServerPlugin,
  tavilyMcpServer2Plugin,
  mcpWeatherServerPlugin,
  youtubesummarizerMcpServerPlugin,
  mcpServer4Plugin,
  columbiaMcpServerPlugin,
  codeResearchMcpServerPlugin,
  betterAuthMcpServerPlugin,
  deepseekclaudeMcpServerPlugin,
  trelloMcpServerPlugin,
  iacMemoryMcpServerPlugin,
  browserUseServerPlugin,
  skrapeMcpServerPlugin,
  filesystemquarkiversequarkusmcpserversPlugin,
  mcpserverjfxPlugin,
  smartPhotoJournalMcpServerPlugin,
  postmanToolGenerationMcpServerPlugin,
  mcpSpotifyServerPlugin,
  googleWorkspaceMcpServerPlugin,
  mcpReadImagesPlugin,
  goveeMcpServerPlugin,
  zoteroMcpServer1Plugin,
  mcpragServerPlugin,
  modesMcpServerPlugin,
  braveSearchMcpServerPlugin,
  mcpAccessibilityScannerPlugin,
  waldurMcpServerPlugin,
  columbiaMcpServer1Plugin,
  nestjsMcpServerModulePlugin,
  shopifyMcpServer2Plugin,
  mcpresearcherServerPlugin,
  ragDocumentationMcpServerPlugin,
  mcpRelayServerPlugin,
  gyazoMcpServerPlugin,
  mentorMcpServerPlugin,
  googleSearchMcpServer1Plugin,
  modesMcpServer1Plugin,
  ratMcpServerPlugin,
  mcpjdbcPlugin,
  mcpInceptionMcpServerPlugin,
  systempromptMcpGmailServerPlugin,
  mcpServerForEsignaturesPlugin,
  blueskyMcpServerPlugin,
  netskopeMcpServerPlugin,
  toolkitMcpServerPlugin,
  mcppyodidePlugin,
  koboldMcpServerPlugin,
  netskopeNpaMcpServerPlugin,
  fastmcpPlugin,
  togetherAiImageMcpServerPlugin,
  mcpChromeGoogleSearchPlugin,
  mcpVarianceLogPlugin,
  mcpBrowserUseServerPlugin,
  mcpserveraxiomjsPlugin,
  mcpsequentialthinkingtoolsPlugin,
  juliaDocumentationMcpServerPlugin,
  linearMcpServer6Plugin,
  esaMcpServerPlugin,
  obsidianMcpServerPlugin,
  mcpconfluencePlugin,
  jinaaiGroundingMcpServerPlugin,
  eolMcpServerPlugin,
  azureDevopsMcpServerForClinePlugin,
  mcpJinaaiSearchServerPlugin,
  mcpPuppeteerLinuxServerPlugin,
  mcpwslexecPlugin,
  difyMcpServerPlugin,
  sillytavernMcpServerPlugin,
  mcpeunomiaPlugin,
  mcpDuckduckgoSearchServerPlugin,
  apptweakMcpServer1Plugin,
  mcpWebcamServerPlugin,
  mcpPerplexitySearchPlugin,
  mcpLanguageServerPlugin,
  vilniusTransportMcpServerPlugin,
  deepseekMcpServer3Plugin,
  starknetMcpServerPlugin,
  actorsmcpserverPlugin,
  tavilysearchmcpserverPlugin,
  mcptungshingPlugin,
  discordMcpServerPlugin,
  mcpServerFetchTypescriptPlugin,
  mcpServerFetchPythonPlugin,
  penroseMcpServerPlugin,
  mcpTitanMemoryServerPlugin,
  brevPlugin,
  hidePlugin,
  axiomPlugin,
  steelMcpServerPlugin,
  llamacloudMcpServerPlugin,
  folderrPlugin,
  postgrestPlugin,
  eyevinnOpenSourceCloudMcpServerPlugin,
  upstashMcpServerPlugin,
  genkitMcpPlugin,
  mcpservermotherduckPlugin,
  mcpTitanMemoryServer1Plugin,
  memoryStoreMcpServerPlugin,
  daytonaMcpPythonInterpreterPlugin,
  mcpSvelteDocsServerPlugin,
  googleCustomSearchEngineMcpServerPlugin,
  mcpServerDiffTypescriptPlugin,
  bitbucketServerMcpPlugin,
  mcpServerDiffPythonPlugin,
  projectHandoffsMcpServerPlugin,
  bearMcpServer1Plugin,
  markdownifyMcpServerPlugin,
  googleTasksMcpServer1Plugin,
  fetchMcpServer1Plugin,
  superWindowsCliMcpServerPlugin,
  protolinkaiMcpServerPlugin,
  mcpServerStarter2Plugin,
  mistralCodestralMcpServerPlugin,
  switchbotMcpServerPlugin,
  mcpJinaaiReaderServerPlugin,
  difyMcpServer1Plugin,
  claudeusWordpressMcpPlugin,
  datadogPlugin,
  testRunnerMcpPlugin,
  xanoMcpServer1Plugin,
  devhubMcpServerPlugin,
  browseruseMcpServer1Plugin,
  mcpServerForTicketmasterEventsPlugin,
  mcpTavilySearchServerPlugin,
  mcpWindowsWebsiteDownloaderServerPlugin,
  mslucidiavoicegatewaymcpPlugin,
  cooperhewittmcpPlugin,
  polymarketMcpServerPlugin,
  ospMarketingToolsMcpServerPlugin,
  textwellMcpServerPlugin,
  branchThinkingMcpServerPlugin,
  reaperMcpServerPlugin,
  branchThinkingMcpServer1Plugin,
  iapticMcpServerPlugin,
  coinFlipMcpServerPlugin,
  githuboauthMcpServerPlugin,
  mcpStarterServerPlugin,
  xcodeMcpServer1Plugin,
  mcpjirapythonServerPlugin,
  antibullshitMcpServerPlugin,
  systempromptMcpNotionServerPlugin,
  iacrMcpServerPlugin,
  mcpRemoteServerPlugin,
  linearMcpServer7Plugin,
  gmailMcpServer5Plugin,
  mcpmemorylibsqlPlugin,
  n8nWorkflowBuilderMcpServerPlugin,
  mcpgooglePlugin,
  integrationAppMcpServerPlugin,
  supabaseMemoryMcpServerPlugin,
  mcplogicPlugin,
  supabaseMemoryMcpServer1Plugin,
  mcpJavascriptServerPlugin,
  mcpServer5Plugin,
  notionApiMcpServerPlugin,
  jiraPlugin,
  mcpWebResearchServerPlugin,
  searxngmcpserverPlugin,
  holaspiritMcpServerPlugin,
  placidMcpServerPlugin,
  mcpNotesServerPlugin,
  jiraMcpServer2Plugin,
  scrapboxCosenseMcpServerPlugin,
  keboolaExplorerMcpServerPlugin,
  modelContextProtocolMcpServerPlugin,
  postgresqlMcpServer2Plugin,
  mcpServerEnhancedSshPlugin,
  mcpServer6Plugin,
  mcpTerminalServer1Plugin,
  mcpshellserverPlugin,
  mcpWebBrowserServerPlugin,
  claudeDevServerPlugin,
  findFlightsMcpServerPlugin,
  projectContentServerPlugin,
  mcptenkiPlugin,
  transistorMcpServerPlugin,
  duckDuckMcpPlugin,
  mcpRandPlugin,
  googleDriveMcpServer1Plugin,
  mcp2bravePlugin,
  mcpTodoChecklistServerPlugin,
  sandboxMcpServerPlugin,
  usescraperMcpServerPlugin,
  jiraMcpServer3Plugin,
  finnhubMcpServerPlugin,
  itermMcpServerPlugin,
  googleHomeMcpServerPlugin,
  codeSnippetServerPlugin,
  matlabMcpServer1Plugin,
  twitterMcpServer3Plugin,
  metalMcpServerPlugin,
  secondOpinionMcpServerPlugin,
  sequentialThinkingMcpServerPlugin,
  elasticsearchMcpServer1Plugin,
  zigMcpServerPlugin,
  mcpTraderServerPlugin,
  mcpflowisePlugin,
  mcpserverchatsumPlugin,
  mcpservercollectorPlugin,
  confluenceMcpServerPlugin,
  loxoMcpServerPlugin,
  mcpNmapServerPlugin,
  emailCheckerMcpServerPlugin,
  mcpWebscanServerPlugin,
  systempromptMcpServerPlugin,
  gleanMcpServerPlugin,
  aiddMcpServerPlugin,
  mcpclickhousePlugin,
  replicateMcpServerPlugin,
  mcplancedbPlugin,
  cloudinaryMcpServerPlugin,
  personalMcpServerPlugin,
  mcpBrowserTabsServerPlugin,
  tavilySearchMcpAgentPlugin,
  mcpExpertServerPlugin,
  mcpServerForBinanceSpotTradingPlugin,
  dynamodbMcpServerPlugin,
  mcplocaldevPlugin,
  githubmanagerMcpServerPlugin,
  zoteroMcpConnectorPlugin,
  thingsMcpServer1Plugin,
  mcpServer7Plugin,
  redmineMcpServerPlugin,
  mcpReasonerPlugin,
  penumbraMcpServerPlugin,
  mcpJiraServerPlugin,
  filloutioMcpServerPlugin,
  puppeteerMcpServer2Plugin,
  redisMcpServerPlugin,
  githubMcpServer3Plugin,
  mtsMcpServerPlugin,
  mcpServerReplicatePlugin,
  mysqlServerMcpServerPlugin,
  iacMemoryMcpServer1Plugin,
  mcpChatAnalysisServerPlugin,
  discordRawApiMcpServerPlugin,
  mcpNeo4jServerPlugin,
  babashkaMcpServerPlugin,
  mcpFilesystemPythonPlugin,
  obsidianMcpServer1Plugin,
  geminiSearchMcpServerPlugin,
  clinePersonasMcpServerPlugin,
  videoEditorMcpServerPlugin,
  playwrightServerMcpPlugin,
  claudeChunksPlugin,
  mcpFilesystemPython1Plugin,
  metaplexMcpServerPlugin,
  sayMcpServerPlugin,
  npmsearchmcpserverPlugin,
  unrealEngineCodeAnalyzerMcpServerPlugin,
  memgptMcpServerPlugin,
  mcpServerTrelloPlugin,
  solanamcpserverPlugin,
  solanadocsmcpserverPlugin,
  mcpserverfirecrawlPlugin,
  playwrightMcpServer1Plugin,
  mcpPytestServerPlugin,
  wecomBotMcpServerPlugin,
  marginaliaMcpServerPlugin,
  slowtimeMcpServerPlugin,
  optimizedMemoryMcpServerV2Plugin,
  wikimediaMcpServerPlugin,
  mpcTallyApiServerPlugin,
  mcpWeatherServer1Plugin,
  mcpScholarlyServerPlugin,
  mcpEtherscanServer1Plugin,
  cursorMcpServer1Plugin,
  postmanMcpServerPlugin,
  neodbMcpServerPlugin,
  mcpScreenshotServerPlugin,
  mcpAgentsServerPlugin,
  boxMcpServerPlugin,
  uiflowchartcreatorPlugin,
  moondreamMcpServerPlugin,
  coingeckoMcpServerPlugin,
  supabaseNextjsMcpServerPlugin,
  remotemcpServerPlugin,
  cosensemcpserverPlugin,
  youtubeMcpServer2Plugin,
  mcpGithubIssueServerPlugin,
  mcp2mqttPlugin,
  openctiMcpServerPlugin,
  wordpressmcpserverPlugin,
  mcpPackageDocsServerPlugin,
  claudeMcpServerForUsgsQuakesApiPlugin,
  mcpOrchestratorServerPlugin,
  googleNewsMcpServerPlugin,
  mcphnPlugin,
  figmaMcpServer3Plugin,
  mcpServerForArangodbPlugin,
  mcpdiscordPlugin,
  homeAssistantMcp1Plugin,
  hackerNewsMcpPlugin,
  paperlessngxMcpServerPlugin,
  mcpBrowserAutomationServerPlugin,
  perplexityMcpServer5Plugin,
  mcpSqliteServerPlugin,
  onenoteMcpServerPlugin,
  kagiMcpServer1Plugin,
  hubspotMcpServerPlugin,
  googleOrtoolsServerPlugin,
  mcpCompassPlugin,
  chromaMcpServer1Plugin,
  kazuphmcpobsidianPlugin,
  kazuphmcpyoutubePlugin,
  kazuphmcptaskmanagerPlugin,
  kazuphmcppocketPlugin,
  perplexityMcpServer6Plugin,
  trueragMcpServerPlugin,
  mcpToolServerPlugin,
  mcpMemoryServicePlugin,
  mcpProxyServer1Plugin,
  glideApiMcpServerPlugin,
  veri5ightMcpServerPlugin,
  youtubeWatchLaterMcpServerPlugin,
  piapimcpServerPlugin,
  codingAssistantServerPlugin,
  calendarAutoauthMcpServerPlugin,
  gmailAutoauthMcpServerPlugin,
  literatemcpPlugin,
  difyServerPlugin,
  semanticScholarMcpServerPlugin,
  kazuphmcpgmailgasPlugin,
  kazuphmcpfetchPlugin,
  kazuphmcpgithubpera1Plugin,
  wordpressMcpServerPlugin,
  clickhouseMcpServer1Plugin,
  lumaMcpServerPlugin,
  amazonBedrockMcpServerPlugin,
  googleCalendarPlugin,
  mcpNpxFetchPlugin,
  australianBureauOfStatisticsAbsPlugin,
  redisPlugin,
  mcpServerNeurolorapPlugin,
  cryptocurrencyMarketDataMcpServerPlugin,
  mcptoolbuilderPlugin,
  websiteDownloaderPlugin,
  googleWorkspaceMcpServer1Plugin,
  chessAnalysisAssistantPlugin,
  pagespeedMcpServerPlugin,
  mozillaReadabilityParserMcpServer1Plugin,
  meilisearchMcpServer1Plugin,
  obsidianmcpPlugin,
  rijksmuseumMcpServerPlugin,
  markdown2pdfmcpPlugin,
  googlecalendarmcpPlugin,
  cedardiffMcpServerPlugin,
  openhueMcpServerPlugin,
  mcpFilePreviewServerPlugin,
  searxngServerPlugin,
  socialmediamcpPlugin,
  mcpgeoPlugin,
  swissPlugin,
  mcpneovimserverPlugin,
  sefariaJewishLibraryMcpServerPlugin,
  mcpmcMinecraftMcpPlugin,
  mcpNotesPlugin,
  mcpvcdPlugin,
  openrouterMcpServerPlugin,
  wopalmcpserverhotnewsPlugin,
  ollamaMcpDatabaseAssistantPlugin,
  hnymcpPlugin,
  mcppdftoolsPlugin,
  mapboxmcpserverPlugin,
  mcpgraphqlPlugin,
  mcprestapiPlugin,
  mcpServerForLogseqPlugin,
  elevenlabsMcpServerPlugin,
  xMcpServerPlugin,
  mcpnativewindPlugin,
  qbtimemcpserverPlugin,
  cfbdmcpserverPlugin,
  chromiamcpPlugin,
  mcpwolframalphaPlugin,
  mcpjiraserverPlugin,
  roamResearchPlugin,
  githubMapperMcpServerPlugin,
  webperfectMcpServerPlugin,
  mcpneuroloraPlugin,
  mcpredditPlugin,
  mcpfunctionapptesterPlugin,
  mcpdnstwistPlugin,
  languageservermcpPlugin,
  supabasemcpPlugin,
  pocketbasemcpserverPlugin,
  stockscreenMcpServerPlugin,
  codesavantPlugin,
  mcpcodexkeeperPlugin,
  mcpZoteroPlugin,
  mcpazuretablestoragePlugin,
  mcpreasonerPlugin,
  mcpplaywrightPlugin,
  mcpscreenshotPlugin,
  applescriptmcpPlugin,
  mcptimeserverPlugin,
  applenotifiermcpPlugin,
  findatamcpserverPlugin,
  mcpotzariaserverPlugin,
  mcpdeletePlugin,
  mcpragdocsPlugin,
  mcpguidePlugin,
  mcpcommunicatortelegramPlugin,
  huntressmcpserverPlugin,
  mcpyoutubesheetsPlugin,
  jiramcpPlugin,
  k8sinteractivemcpPlugin,
  mcpserverkintonePlugin,
  mcprtfmPlugin,
  mcpimagedownloaderPlugin,
  aiHumanizerMcpServerPlugin,
  awsmcpPlugin,
  airamcpserverPlugin,
  postmanmcpserverPlugin,
  mcpeverythingsearchPlugin,
  bod2501csamicrosoftpolicymcpPlugin,
  homeassistantMcpPlugin,
  mavenmcpserverPlugin,
  unichattsmcpserverPlugin,
  mcpWordCounterPlugin,
  toolhouseMcpServerPlugin,
  geminiMcpServer1Plugin,
  mcpdatabaseserverPlugin,
  mcpgithubprojectmanagerPlugin,
  mcpservergoogleanalyticsPlugin,
  mcpserverprometheusPlugin,
  flightradar24mcpserverPlugin,
  mcpsolverPlugin,
  webbrowsermcpserverPlugin,
  mcpvegaliteserverPlugin,
  atlasmcpserverPlugin,
  mcpjinaaiPlugin,
  zendeskmcpserverPlugin,
  mcpapplenotesPlugin,
  mcpminecraftPlugin,
  macappslauncherPlugin,
  mcpmaigretPlugin,
  appstoreconnectmcpserverPlugin,
  mcptwikitPlugin,
  mcpsnowflakeserverPlugin,
  contentfulmcpPlugin,
  clojarsmcpserverPlugin,
  cogneemcpPlugin,
  mcpragdocs1Plugin,
  sqliteexplorerfastmcpmcpserverPlugin,
  imessagequeryfastmcpmcpserverPlugin,
  mcppineconePlugin,
  httpsgithubcomsammcjmcppackageversionPlugin,
  mcpsearchlinkupPlugin,
  mcpgitingestPlugin,
  mcplinkedinPlugin,
  mcpsummarizationfunctionsPlugin,
  searxngPlugin,
  simulatormcpserverPlugin,
  mcpserverbrowserbasePlugin,
  mcppandocPlugin,
  virustotalMcpServerPlugin,
  mcpdatetimePlugin,
  mcpmysqlserverPlugin,
  azureOpenaiPlugin,
  airtablemcpserverPlugin,
  homeassistantmcpPlugin,
  mcptexteditorPlugin,
  mcpdicePlugin,
  mcpshodanPlugin,
  mcpPubmedSearchPlugin,
  metoromcpserverPlugin,
  appleShortcutsServerPlugin,
  mcpSimpleOpenaiAssistantPlugin,
  mcpSimpleTimeserverPlugin,
  perplexityMcpServer7Plugin,
  mcpinstallerPlugin,
  anychatcompletionsmcpPlugin,
  mcpAtlassian1Plugin,
  mcpmiroPlugin,
  unichatMcpServerPlugin,
  notionMcpServer7Plugin,
  applenotesmcpPlugin,
  ancestryMcpPlugin,
  notionMcp1Plugin,
  youtubeMcpServer3Plugin,
  obsidianPlugin,
  mcpServerForObsidianPlugin,
  phabricatorMcpServerPlugin,
  openaiMcpServer2Plugin,
  godocmcpPlugin,
  mcpOpenaiServerPlugin,
  gitMcpServer2Plugin,
  gitlabMcpServer1Plugin,
  githubMcpServer4Plugin,
  nsTravelInformationMcpServerPlugin,
  mcpsimplearxivPlugin,
  mcpWebResearchServer1Plugin,
  arxivMcpServer1Plugin,
  tavilysearchPlugin,
  search1apiMcpServerPlugin,
  exaMcpServerPlugin,
  kagiMcpServer2Plugin,
  fetchMcpServer2Plugin,
  nytimesArticleSearchMcpServerPlugin,
  braveSearchMcpServer1Plugin,
  raygunMcpServerPlugin,
  sentryMcpServer1Plugin,
  googleMapsMcpServerPlugin,
  memorymeshPlugin,
  knowledgeGraphMemoryServer3Plugin,
  coinmarketPlugin,
  filesystemMcpServer3Plugin,
  googleDriveServerPlugin,
  filesystemMcpServer4Plugin,
  openapiPlugin,
  dockermcpPlugin,
  neo4jMcpClientsServersPlugin,
  vikingdbPlugin,
  mongodbPlugin,
  mongodb1Plugin,
  mcpserverduckdbPlugin,
  supabaseMcpServer3Plugin,
  sqliteMcpServer2Plugin,
  postgresqlPlugin,
  mysqlMcpServer3Plugin,
  bigqueryMcpServerPlugin,
  bigqueryMcpServer1Plugin,
  tinybirdMcpServerPlugin,
  openDataModelContextProtocolPlugin,
  inoyuApacheUnomiMcpServerPlugin,
  mcpgsuitePlugin,
  blueskyContextServerPlugin,
  slackMcpServerPlugin,
  mcpservercommandsPlugin,
  mcpk8sgoPlugin,
  mcpservercloudflarePlugin,
  mcpserveryoutubetranscriptPlugin,
  mcpserverplaywrightPlugin,
  mcpserverragwebbrowserPlugin,
  mcpserverqdrantPlugin,
  mcpsimplepubmedPlugin,
  mcpnodejsserverPlugin,
  mcpserverbirdstatsPlugin,
  mcpsnykPlugin,
  videoeditingmcpPlugin,
  mcpservertmdbPlugin,
  mcpserverneonPlugin,
  cmdmcpserverPlugin,
  mcpjetbrains1Plugin,
  mcpknowledgegraphPlugin,
  salesforcemcpserverPlugin,
  nutjswindowscontrolPlugin,
  mcpserverdataexplorationPlugin,
  llmcontextPlugin,
  mcphfspacePlugin,
  e2bmcpserverPlugin,
  coincapmcpPlugin,
  climcpserverPlugin,
  mcpserverkubernetesPlugin,
  openrpcmpcserverPlugin,
  corePlugin,
  unruggablePlugin,
];
